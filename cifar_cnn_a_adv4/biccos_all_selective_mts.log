Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: ablation_results/cifar_cnn_a_adv4/biccos_all_selective_mts.out
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: cnn_4layer_adv4
  path: models/sdp/cifar_cnn_a_adv4.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 4096
  auto_enlarge_batch_size: true
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: mip
    output_cut: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 200
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: false
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: breadth_first
  cut:
    enabled: true
    cuts_path: /tmp/abcrown_cuts_17214
    implication: false
    bab_cut: true
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 0.99
    iteration: 200
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.05
    number_cuts: 500
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
    biccos:
      enabled: true
      auto_param: false
      constraint_strengthening: true
      recursively_strengthening: false
      merge_cut_enabled: false
      fast_inference_enabled: false
      drop_ratio: 0.5
      max_infer_iter: 40
      heuristic: neuron_influence_score
      save_cuts: false
      multi_tree_branching:
        enabled: true
        restore_best_tree: true
        keep_n_best_domains: 50
        target_batch_size: 200
        iterations: 5
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
      branching_point_node: ''
      branching_point_db: []
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 50
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  biccos_mip_sanity_check: false
  sanity_check: 0
  z_split_enabled: false

Experiments at Wed Oct 30 06:10:18 2024 on r23g0003.hpc.itc.rwth-aachen.de
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten(start_dim=1, end_dim=-1)
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  0.weight: shape torch.Size([16, 3, 4, 4])
  0.bias: shape torch.Size([16])
  2.weight: shape torch.Size([32, 16, 4, 4])
  2.bias: shape torch.Size([32])
  5.weight: shape torch.Size([100, 2048])
  5.bias: shape torch.Size([100])
  7.weight: shape torch.Size([10, 100])
  7.bias: shape torch.Size([10])
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to ablation_results/cifar_cnn_a_adv4/biccos_all_selective_mts.out.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.39694118, -4.29481602, -2.76418877, -2.27564764, -2.33342099,
         -2.30766487, -2.16014171, -2.94787169, -5.16796875, -4.44396448]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [149]; unstable size 149; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 96, 1, 149] with unstable size 95 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 149] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [95]; unstable size 95; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 95] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 95] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.88380647,  1.74300170,  0.37986493, -0.05004531,  0.02511473,
         -0.22278082,  0.53882384,  2.69820690,  1.93023610]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.39694118, -4.29481602, -2.76418877, -2.27564764, -2.33342099,
         -2.30766487, -2.16014171, -2.94787169, -5.16796875, -4.44396448]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.39694166, -4.29481649, -2.76418877, -2.27564788, -2.33342123,
          -2.30766511, -2.16014194, -2.94787169, -5.16796970, -4.44396496],
         [-4.39694166, -4.29481649, -2.76418877, -2.27564788, -2.33342123,
          -2.30766511, -2.16014194, -2.94787169, -5.16796970, -4.44396496]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.05777335, -0.11550593]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 1.4313 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
         -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [560]; unstable size 560; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 560] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 560] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 560] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 164] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.78500080, -0.48810321,  8.46035194,  7.31322861,  7.79788828,
          7.43279171,  7.35444212,  7.89911509,  5.04577732]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
         -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
          -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.25655651]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.46507931, -1.30634916, -1.32222211,  ...,  0.10634929,
             0.02698422,  0.04285724],
           [-1.25873005, -1.35396814, -1.40158725,  ...,  0.31269848,
             0.28095245,  0.28095245],
           [ 0.15396833,  0.42380959,  0.29682547,  ..., -0.00476181,
            -0.17936498, -0.24285704],
           ...,
           [-0.86190474, -0.60793650, -0.38571417,  ...,  0.91587305,
             0.82063496,  0.83650798],
           [-0.43333322, -0.30634910, -0.22698402,  ...,  0.90000004,
             0.77301592,  0.75714290],
           [-0.33809513, -0.30634910, -0.27460307,  ...,  0.88412702,
             0.78888893,  0.67777783]],

          [[-1.44927526, -1.28824472, -1.30434775,  ...,  0.20933989,
             0.14492765,  0.20933989],
           [-1.35265696, -1.36875999, -1.33655393,  ...,  0.37037048,
             0.35426742,  0.40257660],
           [-1.32045078, -1.35265696, -1.41706920,  ...,  0.04830930,
            -0.14492741, -0.24154577],
           ...,
           [-0.75684375, -0.51529789, -0.30595800,  ...,  0.91787446,
             0.83735919,  0.90177143],
           [-0.32206106, -0.19323659, -0.14492741,  ...,  0.90177143,
             0.78904998,  0.82125610],
           [-0.17713353, -0.17713353, -0.16103047,  ...,  0.90177143,
             0.78904998,  0.74074084]],

          [[-1.54272878, -1.49775124, -1.49775124,  ...,  0.42128953,
             0.34632701,  0.37631202],
           [-1.51274371, -1.55772126, -1.52773619,  ...,  0.52623707,
             0.49625200,  0.49625200],
           [-1.13793111, -1.09295356, -1.12293863,  ...,  0.09145443,
            -0.08845562, -0.19340314],
           ...,
           [-0.59820086, -0.43328333, -0.28335828,  ...,  0.88605714,
             0.81109464,  0.88605714],
           [-0.23838064, -0.14842562, -0.11844061,  ...,  0.85607213,
             0.76611710,  0.81109464],
           [-0.07346311, -0.10344811, -0.08845562,  ...,  0.75112462,
             0.79610211,  0.73613209]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0869 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22966528, -2.93601108, -5.89175558, -5.29639721, -5.30219364,
         -5.44004345, -5.44263363, -6.58539677, -3.89646339, -3.77071643]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [779]; unstable size 779; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 779] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 779] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 779] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 180] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.59069538, 1.86671638, 1.25944376, 1.32242680, 1.39030790, 1.32808542,
         2.61486292, 0.20729733, 0.53434551]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0409 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
          -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [408]; unstable size 408; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 408] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 408] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 408] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 166] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.20016575,  7.28631210,  0.47117397,  0.94903362,  0.90004665,
          2.26531672, -1.32159257,  7.77309608,  6.37577629]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
          -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
           -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.00942469]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0526 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
         -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [478]; unstable size 478; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 168, 1, 478] with unstable size 167 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 478] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 478] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [167]; unstable size 167; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 167] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 167] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.56217003,  4.48248863, -0.30218953,  1.40200782,  1.50853717,
          0.35172975,  1.49864471,  3.28840876,  3.77214003]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
         -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
          -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05397820]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.45555562,  0.47142863,  0.50317466,  ...,  0.23333341,
             0.16984135, -0.06825387],
           [ 0.37619054,  0.55079371,  0.91587305,  ...,  0.39206356,
             0.59841275,  0.21746039],
           [ 0.47142863,  0.64603180,  0.70952386,  ...,  0.58253974,
             0.85238099,  0.82063496],
           ...,
           [ 0.32857150,  0.55079371,  0.18571436,  ..., -0.67142856,
            -1.22698402, -1.06825387],
           [ 0.47142863,  0.47142863,  0.21746039,  ..., -0.00476181,
            -1.14761901, -1.44920623],
           [ 0.45555562,  0.15396833, -0.11587292,  ...,  1.04285717,
             0.34444451, -0.54444444]],

          [[ 1.03059590,  1.09500813,  1.19162667,  ...,  1.12721443,
             0.96618366,  0.70853472],
           [ 1.03059590,  1.14331758,  1.28824508,  ...,  1.27214205,
             1.36876035,  0.98228669],
           [ 1.15942061,  1.22383285,  1.23993587,  ...,  1.38486338,
             1.54589403,  1.44927561],
           ...,
           [ 1.07890511,  1.28824508,  0.86956531,  ..., -0.70853460,
            -1.20772946, -0.96618354],
           [ 1.15942061,  1.22383285,  1.03059590,  ..., -0.19323659,
            -1.12721407, -1.33655393],
           [ 1.07890511,  0.93397754,  0.85346222,  ...,  0.99838978,
             0.28985518, -0.43478248]],

          [[ 0.10644694,  0.19640197,  0.42128953,  ..., -0.01349309,
             0.09145443, -0.31334329],
           [ 0.16641696,  0.45127454,  0.94602716,  ...,  0.19640197,
             0.75112462,  0.28635699],
           [ 0.16641696,  0.39130452,  0.48125952,  ...,  0.36131951,
             0.91604215,  1.03598225],
           ...,
           [ 0.06146942,  0.37631202,  0.07646193,  ..., -0.83808094,
            -1.27286363, -1.09295356],
           [ 0.19640197,  0.37631202, -0.11844061,  ..., -0.43328333,
            -1.27286363, -1.42278874],
           [ 0.25637197, -0.14842562, -0.73313338,  ...,  0.82608712,
            -0.02848560, -0.82308841]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0534 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.27786207, -6.88116646, -0.89845192, -1.13938844, -1.43722224,
         -1.21051192, -1.90963769, -2.81326365, -5.21822262, -6.45287228]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 158, 1, 544] with unstable size 157 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 544] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [157]; unstable size 157; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 157] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 157] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.32219422,  4.72163153, -0.79683381, -0.61578476, -0.54585767,
          0.10253274,  1.03042436,  3.03628159,  4.49144125]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.27786207, -6.88116646, -0.89845192, -1.13938844, -1.43722224,
         -1.21051192, -1.90963769, -2.81326365, -5.21822262, -6.45287228]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.27786303, -6.88116646, -0.89845204, -1.13938868, -1.43722200,
          -1.21051180, -1.90963745, -2.81326342, -5.21822357, -6.45287180],
         [-2.27786303, -6.88116646, -0.89845204, -1.13938868, -1.43722200,
          -1.21051180, -1.90963745, -2.81326342, -5.21822357, -6.45287180]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53876996, -0.29783332, -0.22671020]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0780 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87105656,  -9.24069786, -12.81012917, -14.19307423, -13.00804424,
         -14.29401398, -13.74548244, -12.64065266, -10.14831066, -10.41334629]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [461]; unstable size 461; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 461] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 461] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 461] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 180] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.16120422,  2.30639243,  3.48796988,  2.47389197,  3.57205153,
          3.02852058,  1.96217525, -0.08661658, -0.06133318]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87105656,  -9.24069786, -12.81012917, -14.19307423, -13.00804424,
         -14.29401398, -13.74548244, -12.64065266, -10.14831066, -10.41334629]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.87105656,  -9.24069881, -12.81012917, -14.19307613, -13.00804520,
          -14.29401493, -13.74548244, -12.64065266, -10.14831066, -10.41334724],
         [ -9.87105656,  -9.24069881, -12.81012917, -14.19307613, -13.00804520,
          -14.29401493, -13.74548244, -12.64065266, -10.14831066, -10.41334724]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.63035774,  0.27725410,  0.54229069]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]],


         [[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]],


         [[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0789 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.80696106, -12.16898727,  -8.71912003,  -9.57566929,  -8.25873089,
          -9.65113735,  -7.55729103,  -9.84239197, -12.61449814, -12.48052692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 445] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 445] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 185] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.65562153, 3.64904356, 0.87793177, 1.69124293, 0.44899166, 1.76054668,
         1.83400536, 4.22224331, 4.04899597]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0647 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.20309448, -16.77884865, -16.19422150, -18.35743332, -17.19257736,
         -18.67626762, -18.95268631, -19.17121124, -14.57676315, -17.35821724]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [435]; unstable size 435; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 109, 1, 435] with unstable size 108 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 435] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 435] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [108]; unstable size 108; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 108] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 108] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.19290352, 3.64490700, 5.67161989, 4.61943054, 5.98125458, 6.26108789,
         6.53781796, 2.12617970, 4.84152555]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0719 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.81122494, -13.31232357,  -9.44408321,  -9.38682652,  -9.45646095,
          -9.43222713,  -9.70102882, -10.80779362, -10.39734077, -12.81629562]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [536]; unstable size 536; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 536] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 536] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 536] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 186] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.80840868,  3.05787349, -0.29071200, -0.06402752, -0.28085589,
         -0.10329640,  1.11252022,  0.34938395,  2.63984060]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.81122494, -13.31232357,  -9.44408321,  -9.38682652,  -9.45646095,
          -9.43222713,  -9.70102882, -10.80779362, -10.39734077, -12.81629562]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.81122589, -13.31232452,  -9.44408417,  -9.38682556,  -9.45646000,
           -9.43222809,  -9.70102978, -10.80779362, -10.39734077, -12.81629467],
         [-10.81122589, -13.31232452,  -9.44408417,  -9.38682556,  -9.45646000,
           -9.43222809,  -9.70102978, -10.80779362, -10.39734077, -12.81629467]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.01185608, -0.04540253,  0.02423191,  0.26880169]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0542 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.81260872, -21.71220779, -15.47353172, -14.34746075, -17.37693214,
         -14.11986828, -17.64429283, -15.59352016, -20.41330528, -19.86410522]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [213]; unstable size 213; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 90, 1, 213] with unstable size 89 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 213] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 213] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [89]; unstable size 89; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 89] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 89] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.94948363,  5.68683910, -0.28762674, -1.39250028,  1.63050795,
         -1.61977458,  1.77867985,  4.45255136,  3.87534189]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.81260872, -21.71220779, -15.47353172, -14.34746075, -17.37693214,
         -14.11986828, -17.64429283, -15.59352016, -20.41330528, -19.86410522]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.81260681, -21.71220398, -15.47353172, -14.34746075, -17.37693214,
          -14.11986828, -17.64429092, -15.59352112, -20.41330528, -19.86410332],
         [-17.81260681, -21.71220398, -15.47353172, -14.34746075, -17.37693214,
          -14.11986828, -17.64429092, -15.59352112, -20.41330528, -19.86410332]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11998940, -1.24606037, -1.47365284]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0435 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.67578030, -10.93076611,  -6.99289465,  -8.49931908,  -6.64460850,
          -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557758]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 527] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 527] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 191] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17059851,  3.08206797,  1.16293228, -0.63490015,  1.28766203,
         -0.08916250,  1.48330283,  3.14107704,  2.88401604]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.67578030, -10.93076611,  -6.99289465,  -8.49931908,  -6.64460850,
          -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557758]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.67578030, -10.93076611,  -6.99289465,  -8.49932003,  -6.64460754,
           -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557854],
         [ -8.67578030, -10.93076611,  -6.99289465,  -8.49932003,  -6.64460754,
           -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557854]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.34828711,  0.25328970]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.79841268, -0.83015871, -0.84603173,  ..., -0.70317459,
            -0.76666665, -0.73492062],
           [-0.79841268, -0.83015871, -0.87777776,  ..., -0.84603173,
            -0.78253967, -0.75079364],
           [-0.81428570, -0.83015871, -0.89365077,  ..., -0.81428570,
            -0.75079364, -0.75079364],
           ...,
           [ 1.39206374,  1.23333359,  0.50317466,  ...,  0.21746039,
            -0.27460307, -0.63968253],
           [ 0.88412702,  0.43968260, -0.21111101,  ...,  1.45555580,
             1.26507962,  0.70952386],
           [ 0.36031753, -0.24285704, -0.68730158,  ...,  1.45555580,
             1.36031771,  1.67777801]],

          [[-0.16103047, -0.20933965, -0.22544271,  ..., -0.03220600,
            -0.09661824, -0.06441211],
           [-0.17713353, -0.20933965, -0.25764883,  ..., -0.17713353,
            -0.11272129, -0.09661824],
           [-0.19323659, -0.20933965, -0.27375188,  ..., -0.12882435,
            -0.08051517, -0.08051517],
           ...,
           [ 1.41706955,  1.28824508,  0.61191636,  ...,  0.51529801,
             0.14492765, -0.12882435],
           [ 0.99838978,  0.61191636,  0.03220624,  ...,  1.59420323,
             1.48148179,  1.03059590],
           [ 0.59581327,  0.08051541, -0.28985494,  ...,  1.49758482,
             1.40096653,  1.75523376]],

          [[-0.50824583, -0.55322337, -0.56821585,  ..., -0.43328333,
            -0.47826082, -0.40329832],
           [-0.52323836, -0.55322337, -0.59820086,  ..., -0.56821585,
            -0.49325335, -0.43328333],
           [-0.53823084, -0.55322337, -0.61319339,  ..., -0.53823084,
            -0.46326834, -0.41829082],
           ...,
           [ 0.99100471,  0.84107965,  0.21139447,  ...,  0.06146942,
            -0.28335828, -0.43328333],
           [ 0.61619210,  0.27136448, -0.25337315,  ...,  1.06596720,
             0.99100471,  0.63118458],
           [ 0.30134949, -0.14842562, -0.46326834,  ...,  1.03598225,
             0.97601217,  1.32084000]]],


         [[[-0.79841268, -0.83015871, -0.84603173,  ..., -0.70317459,
            -0.76666665, -0.73492062],
           [-0.79841268, -0.83015871, -0.87777776,  ..., -0.84603173,
            -0.78253967, -0.75079364],
           [-0.81428570, -0.83015871, -0.89365077,  ..., -0.81428570,
            -0.75079364, -0.75079364],
           ...,
           [ 1.39206374,  1.23333359,  0.50317466,  ...,  0.21746039,
            -0.27460307, -0.63968253],
           [ 0.88412702,  0.43968260, -0.21111101,  ...,  1.45555580,
             1.26507962,  0.70952386],
           [ 0.36031753, -0.24285704, -0.68730158,  ...,  1.45555580,
             1.36031771,  1.67777801]],

          [[-0.16103047, -0.20933965, -0.22544271,  ..., -0.03220600,
            -0.09661824, -0.06441211],
           [-0.17713353, -0.20933965, -0.25764883,  ..., -0.17713353,
            -0.11272129, -0.09661824],
           [-0.19323659, -0.20933965, -0.27375188,  ..., -0.12882435,
            -0.08051517, -0.08051517],
           ...,
           [ 1.41706955,  1.28824508,  0.61191636,  ...,  0.51529801,
             0.14492765, -0.12882435],
           [ 0.99838978,  0.61191636,  0.03220624,  ...,  1.59420323,
             1.48148179,  1.03059590],
           [ 0.59581327,  0.08051541, -0.28985494,  ...,  1.49758482,
             1.40096653,  1.75523376]],

          [[-0.50824583, -0.55322337, -0.56821585,  ..., -0.43328333,
            -0.47826082, -0.40329832],
           [-0.52323836, -0.55322337, -0.59820086,  ..., -0.56821585,
            -0.49325335, -0.43328333],
           [-0.53823084, -0.55322337, -0.61319339,  ..., -0.53823084,
            -0.46326834, -0.41829082],
           ...,
           [ 0.99100471,  0.84107965,  0.21139447,  ...,  0.06146942,
            -0.28335828, -0.43328333],
           [ 0.61619210,  0.27136448, -0.25337315,  ...,  1.06596720,
             0.99100471,  0.63118458],
           [ 0.30134949, -0.14842562, -0.46326834,  ...,  1.03598225,
             0.97601217,  1.32084000]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0739 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.44387496, -2.72885609, -0.99721217, -1.58509552, -2.43515849,
         -1.54629862, -4.83794689, -0.93704540, -3.84024239, -1.71335077]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 108, 1, 377] with unstable size 107 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 377] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [107]; unstable size 107; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 107] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 107] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.08005628,  1.21544480, -0.21125805,  0.39911640,  1.30089641,
          0.36341107,  3.49761176,  2.30609941,  0.25215483]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.44387496, -2.72885609, -0.99721217, -1.58509552, -2.43515849,
         -1.54629862, -4.83794689, -0.93704540, -3.84024239, -1.71335077]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.34201694, -2.72922182, -0.92797631, -1.60974824, -2.46359158,
          -1.57565308, -4.80144787, -1.07656217, -3.71189547, -1.76798725]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.14858586]]], device='cuda:0')
number of violation:  1
Attack finished in 0.2572 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.3211 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
         -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [505]; unstable size 505; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 505] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 505] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 505] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 156] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.97732306,  1.82492685,  4.21384001,  3.08415413,  4.54206753,
          3.54140043,  4.89616060,  0.14590740,  0.62829101]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
         -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
          -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.43531609]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.45555562, 0.40793657, 0.42380959,  ..., 0.75714290,
            0.74126989, 0.70952386],
           [0.47142863, 0.42380959, 0.43968260,  ..., 0.72539687,
            0.69365084, 0.66190481],
           [0.53492069, 0.50317466, 0.55079371,  ..., 0.70952386,
            0.69365084, 0.66190481],
           ...,
           [0.63015878, 0.64603180, 0.66190481,  ..., 0.64603180,
            0.67777783, 0.66190481],
           [0.64603180, 0.61428577, 0.59841275,  ..., 0.63015878,
            0.64603180, 0.66190481],
           [0.72539687, 0.66190481, 0.63015878,  ..., 0.63015878,
            0.59841275, 0.64603180]],

          [[0.48309189, 0.43478271, 0.45088577,  ..., 0.75684386,
            0.72463775, 0.69243163],
           [0.49919492, 0.45088577, 0.46698883,  ..., 0.70853472,
            0.67632860, 0.64412248],
           [0.56360716, 0.53140104, 0.57971025,  ..., 0.69243163,
            0.67632860, 0.64412248],
           ...,
           [0.61191636, 0.62801939, 0.64412248,  ..., 0.62801939,
            0.66022551, 0.64412248],
           [0.62801939, 0.59581327, 0.57971025,  ..., 0.61191636,
            0.62801939, 0.64412248],
           [0.70853472, 0.64412248, 0.61191636,  ..., 0.61191636,
            0.57971025, 0.62801939]],

          [[0.66116959, 0.61619210, 0.63118458,  ..., 0.76611710,
            0.81109464, 0.79610211],
           [0.67616212, 0.63118458, 0.64617711,  ..., 0.76611710,
            0.78110963, 0.75112462],
           [0.73613209, 0.70614707, 0.75112462,  ..., 0.79610211,
            0.78110963, 0.75112462],
           ...,
           [0.66116959, 0.67616212, 0.72113961,  ..., 0.73613209,
            0.76611710, 0.75112462],
           [0.67616212, 0.64617711, 0.66116959,  ..., 0.72113961,
            0.73613209, 0.75112462],
           [0.75112462, 0.69115460, 0.69115460,  ..., 0.72113961,
            0.69115460, 0.73613209]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0503 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.37443638, -4.00673676, -7.36628103, -7.49868298, -7.54243469,
         -7.68763971, -6.80421257, -6.88844681, -6.20179558, -2.71405101]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [421]; unstable size 421; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 163, 1, 421] with unstable size 162 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 421] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 421] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [162]; unstable size 162; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 162] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.00862336, 0.99976736, 3.98278904, 4.17501926, 4.15570545, 4.36021328,
         3.39363956, 3.39964390, 2.97036386]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0654 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.54657602, -8.36112595, -3.46242666, -2.87187982, -3.89005208,
         -2.88797569, -4.48041725, -3.49748850, -7.86016560, -7.33907175]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 138, 1, 403] with unstable size 137 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [137]; unstable size 137; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 137] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 137] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.24231577e+00, 4.76083946e+00, 2.99191654e-01, 6.74156666e-01,
         1.52279437e-03, 1.30786681e+00, 2.09971309e-01, 4.47964907e+00,
         3.82559681e+00]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0447 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.45027256, -14.85908413,  -9.90371609, -10.28254223,  -9.57412910,
         -10.25789833,  -9.99507999, -11.03962898, -13.74928951, -14.72655964]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [731]; unstable size 731; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 228, 1, 731] with unstable size 227 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 731] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 731] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [227]; unstable size 227; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 227] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 227] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.43560493,  3.57842565, -0.70241702, -1.03279150, -0.04905008,
         -0.72894001,  0.25918627,  2.60397291,  3.52938461]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.45027256, -14.85908413,  -9.90371609, -10.28254223,  -9.57412910,
         -10.25789833,  -9.99507999, -11.03962898, -13.74928951, -14.72655964]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.45027161, -14.85908413,  -9.90371609, -10.28254223,  -9.57412815,
          -10.25789928,  -9.99507904, -11.03962803, -13.74928951, -14.72655869],
         [-12.45027161, -14.85908413,  -9.90371609, -10.28254223,  -9.57412815,
          -10.25789928,  -9.99507904, -11.03962803, -13.74928951, -14.72655869]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.37882614, -0.70841408, -0.02464294, -0.28746319]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0594 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.49743176,  -9.17833710, -13.67570496, -15.20650959, -13.95639992,
         -15.42528915, -14.06286907, -16.15926170, -11.69949532, -11.19551754]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [373]; unstable size 373; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 373] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 373] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 373] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 175] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.61845303, 3.61285686, 5.11308956, 3.87147617, 5.31955862, 4.01641226,
         5.91223717, 1.82210588, 1.76377130]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0402 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.34389973,  -9.96172714,  -4.05279398,  -5.78736115,  -3.97068667,
          -5.86786509,  -3.54266286,  -5.87278652, -10.21232128,  -9.72180271]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [483]; unstable size 483; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 483] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 483] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 483] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 208] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.06753778, 5.54263163, 0.10674798, 1.85941637, 0.03022194, 1.92791653,
         1.74811339, 5.96987104, 5.31630135]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0676 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.71088123, -13.29491711,  -7.63611126,  -7.11927986,  -7.38616085,
          -7.11191607,  -7.48660755,  -8.97584915, -11.56023979, -13.25586891]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [539]; unstable size 539; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 539] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 539] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 539] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 220] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.10444093e+00,  5.31401730e+00,  2.42111683e-01, -5.13114929e-02,
         -2.78017223e-02, -2.51591206e-03,  1.45366096e+00,  3.80054927e+00,
          5.33967876e+00]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.71088123, -13.29491711,  -7.63611126,  -7.11927986,  -7.38616085,
          -7.11191607,  -7.48660755,  -8.97584915, -11.56023979, -13.25586891]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.71088123, -13.29491806,  -7.63611174,  -7.11928177,  -7.38616180,
           -7.11191511,  -7.48660755,  -8.97585011, -11.56023979, -13.25586891],
         [-10.71088123, -13.29491806,  -7.63611174,  -7.11928177,  -7.38616180,
           -7.11191511,  -7.48660755,  -8.97585011, -11.56023979, -13.25586891]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.26688004, -0.00736666,  0.36732578]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]],


         [[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]],


         [[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0474 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.09629250, -13.56788158,  -9.81583977, -10.23123169,  -9.89592838,
         -10.26214600,  -8.58048058, -11.66953659, -13.15151978, -13.97097874]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [556]; unstable size 556; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 556] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 556] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 556] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 232] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.87823009, 4.08753538, 0.91786969, 1.31721747, 0.97389317, 1.33815885,
         2.53606915, 3.77071476, 4.53204918]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0642 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.60548306, -4.32711458, -0.42147765, -0.48017693, -0.49338007,
         -0.45899674, -1.75417352, -0.30924958, -4.08429527, -3.55203962]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [430]; unstable size 430; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 430] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 430] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 430] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 166] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.60546803,  3.26384211, -0.35429406,  0.00655459, -0.27650321,
          0.93680203, -0.40704596,  3.07671976,  2.56389141]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.60548306, -4.32711458, -0.42147765, -0.48017693, -0.49338007,
         -0.45899674, -1.75417352, -0.30924958, -4.08429527, -3.55203962]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.60548258, -4.32711411, -0.42147765, -0.48017645, -0.49337971,
          -0.45899615, -1.75417328, -0.30924922, -4.08429432, -3.55203867],
         [-3.60548258, -4.32711411, -0.42147765, -0.48017645, -0.49337971,
          -0.45899615, -1.75417328, -0.30924922, -4.08429432, -3.55203867]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.03751850,  0.03438357, -0.14974692]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]],


         [[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]],


         [[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0788 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.63814020, -7.09170341, -5.93957424, -7.54413128, -6.39586449,
         -7.70300293, -8.28325272, -8.31898880, -2.61777067, -6.41391087]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [452]; unstable size 452; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 159, 1, 452] with unstable size 158 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 452] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 452] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [158]; unstable size 158; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 158] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 158] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.56345719, 3.82402468, 2.68081379, 4.30023146, 3.12777901, 4.44676208,
         5.01942205, 4.85944176, 3.30816436]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0343 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.14455748, -5.84289455, -2.86230087, -2.12573886, -3.17329073,
         -2.12218904, -4.42577553, -2.79664421, -3.31719923, -4.93841982]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 427] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 427] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 156] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.56514996,  3.04386854,  0.44034660, -0.01067108,  0.67077887,
          1.90764415,  0.08045042,  0.57008010,  2.19504976]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.14455748, -5.84289455, -2.86230087, -2.12573886, -3.17329073,
         -2.12218904, -4.42577553, -2.79664421, -3.31719923, -4.93841982]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.16760874, -5.79149437, -2.92998362, -2.25009131, -3.25186229,
          -2.25700569, -4.37982655, -2.96575403, -3.27511168, -4.89296436]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00691438]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0740 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
         -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [710]; unstable size 710; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 710] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 710] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 710] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 223] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.10017061,  0.81654787,  2.80445480,  0.97049618,  2.92300129,
          1.57911110,  2.45411777,  1.05910683,  0.55258167]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
         -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.12it/s]100%|██████████| 1/1 [00:00<00:00,  9.11it/s]
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/cuts/infered_cuts.py:406: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(history[3]),
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.62336159,  -7.42845249,  -8.70991421, -10.74260235,  -8.88674164,
          -10.87233353,  -9.51017857, -10.43375587,  -8.81735802,  -8.17679691]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.19490910]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1123 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.264007568359375
alpha/beta optimization time: 3.611407995223999
initial alpha-crown bounds: tensor([[-0.06241894,  0.84010887,  2.82575035,  0.99328184,  2.94463849,
          1.60075998,  2.47774267,  1.08523798,  0.55890656]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.06241893768310547
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 196.20851922035217
Verifying property 0 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06241894]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
        -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06241894]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 710
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 216
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 930
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012993812561035156
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06241869926452637
10 lb beta sum: 0.0, worst -0.06242561340332031
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.5649    transfer 0.0001    finalize 0.0003    func 0.5655    
Accumulated time: func 0.5655    prepare 0.0002    bound 0.5649    transfer 0.0001    finalize 0.0003    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 90] 
split level 2: [/input-8, 1883] 
split level 3: [/input-8, 1765] 
split level 4: [/input-8, 1764] 
split level 5: [/input-8, 45] 
split level 6: [/input-8, 1829] 
split level 7: [/input-8, 1875] 
split level 8: [/input-8, 1881] 
split level 9: [/input-8, 1766] 
split level 10: [/input-8, 1830] 
split level 11: [/input, 999] 
split level 12: [/input-8, 1206] 
split level 13: [/input-8, 1760] 
split level 14: [/input-8, 53] 
split level 15: [/input-8, 1836] 
split level 16: [/input-8, 1823] 
split level 17: [/input, 965] 
split level 18: [/input-8, 1827] 
split level 19: [/input-8, 1130] 
split level 20: [/input-8, 1522] 
split level 21: [/input-8, 1694] 
split level 22: [/input, 1255] 
split level 23: [/input, 966] 
split level 24: [/input-8, 1769] 
split level 25: [/input-8, 1523] 
split level 26: [/input-8, 1831] 
split level 27: [/input, 1000] 
split level 28: [/input, 1254] 
split level 29: [/input-8, 44] 
split level 30: [/input-8, 274] 
split level 31: [/input-8, 1710] 
split level 32: [/input, 983] 
split level 33: [/input-8, 1884] 
split level 34: [/input, 986] 
split level 35: [/input, 1001] 
split level 36: [/input, 1002] 
split level 37: [/input, 1253] 
split level 38: [/input-8, 140] 
split level 39: [/input, 2457] 
split level 40: [/input, 2693] 
split level 41: [/input, 971] 
split level 42: [/input, 982] 
split level 43: [/input, 744] 
split level 44: [/input-8, 1880] 
split level 45: [/input, 1238] 
split level 46: [/input-8, 1524] 
split level 47: [/input, 1003] 
split level 48: [/input, 2025] 
split level 49: [/input, 2163] 
split level 50: [/input, 2026] 
split level 51: [/input-8, 1757] 
split level 52: [/input, 981] 
split level 53: [/input-8, 22] 
split level 54: [/input-8, 35] 
split level 55: [/input, 985] 
split level 56: [/input, 987] 
split level 57: [/input, 743] 
split level 58: [/input-8, 1444] 
split level 59: [/input, 887] 
split level 60: [/input, 993] 
split level 61: [/input, 2039] 
split level 62: [/input-8, 1778] 
split level 63: [/input-8, 29] 
split level 64: [/input, 1240] 
split level 65: [/input-8, 1899] 
split level 66: [/input, 1226] 
split level 67: [/input, 2022] 
split level 68: [/input-8, 1603] 
split level 69: [/input-8, 123] 
split level 70: [/input-8, 1998] 
split level 71: [/input, 2920] 
split level 72: [/input, 2021] 
split level 73: [/input, 2023] 
split level 74: [/input-8, 745] 
split level 75: [/input, 3218] 
split level 76: [/input-8, 107] 
split level 77: [/input-8, 1214] 
split level 78: [/input, 1261] 
split level 79: [/input-8, 1463] 
split level 80: [/input, 1269] 
split level 81: [/input, 2028] 
split level 82: [/input, 1268] 
split level 83: [/input, 2040] 
split level 84: [/input, 1912] 
split level 85: [/input, 1220] 
split level 86: [/input, 1419] 
split level 87: [/input-8, 766] 
split level 88: [/input-8, 1521] 
split level 89: [/input, 970] 
split level 90: [/input, 741] 
split level 91: [/input, 988] 
split level 92: [/input, 1219] 
split level 93: [/input-8, 1999] 
split level 94: [/input, 2727] 
split level 95: [/input-8, 1215] 
split level 96: [/input-8, 1291] 
split level 97: [/input, 2037] 
split level 98: [/input, 1404] 
split level 99: [/input, 2020] 
split level 100: [/input, 710] 
split level 101: [/input, 676] 
split level 102: [/input-8, 1997] 
split level 103: [/input, 2044] 
split level 104: [/input, 989] 
split level 105: [/input, 1747] 
split level 106: [/input, 4070] 
split level 107: [/input-8, 1572] 
split level 108: [/input, 1386] 
split level 109: [/input, 1204] 
split level 110: [/input, 745] 
split level 111: [/input, 1746] 
split level 112: [/input-8, 1756] 
split level 113: [/input, 1370] 
split level 114: [/input-8, 930] 
split level 115: [/input, 742] 
split level 116: [/input, 4022] 
split level 117: [/input, 2010] 
split level 118: [/input, 4072] 
split level 119: [/input, 2011] 
split level 120: [/input, 950] 
split level 121: [/input, 721] 
split level 122: [/input, 2036] 
split level 123: [/input, 3282] 
split level 124: [/input-8, 116] 
split level 125: [/input-8, 1956] 
split level 126: [/input, 1277] 
split level 127: [/input, 2029] 
split level 128: [/input, 630] 
split level 129: [/input-8, 122] 
split level 130: [/input, 760] 
split level 131: [/input, 2041] 
split level 132: [/input-8, 962] 
split level 133: [/input, 1988] 
split level 134: [/input, 1246] 
split level 135: [/input, 1749] 
split level 136: [/input, 977] 
split level 137: [/input-8, 21] 
split level 138: [/input, 3234] 
split level 139: [/input, 709] 
split level 140: [/input, 1496] 
split level 141: [/input, 2019] 
split level 142: [/input, 2043] 
split level 143: [/input, 747] 
split level 144: [/input, 2009] 
split level 145: [/input, 3132] 
split level 146: [/input, 2042] 
split level 147: [/input, 1987] 
split level 148: [/input, 1420] 
split level 149: [/input, 748] 
split level 150: [/input, 1461] 
split level 151: [/input, 1223] 
split level 152: [/input, 2045] 
split level 153: [/input, 1896] 
split level 154: [/input-8, 964] 
split level 155: [/input-8, 765] 
split level 156: [/input, 2035] 
split level 157: [/input, 1911] 
split level 158: [/input-8, 761] 
split level 159: [/input, 3233] 
split level 160: [/input, 2017] 
split level 161: [/input, 652] 
split level 162: [/input, 2013] 
split level 163: [/input, 1448] 
split level 164: [/input, 1989] 
split level 165: [/input, 1384] 
split level 166: [/input, 746] 
split level 167: [/input, 1245] 
split level 168: [/input, 633] 
split level 169: [/input-8, 1976] 
split level 170: [/input, 491] 
split level 171: [/input-8, 963] 
split level 172: [/input, 724] 
split level 173: [/input, 3281] 
split level 174: [/input, 2145] 
split level 175: [/input, 1506] 
split level 176: [/input, 3261] 
split level 177: [/input, 1349] 
split level 178: [/input, 2674] 
split level 179: [/input, 1334] 
split level 180: [/input-8, 19] 
split level 181: [/input, 1275] 
split level 182: [/input, 1149] 
split level 183: [/input, 1354] 
split level 184: [/input, 2181] 
split level 185: [/input, 2929] 
split level 186: [/input-8, 1105] 
split level 187: [/input, 1677] 
split level 188: [/input, 3693] 
split level 189: [/input-8, 118] 
split level 190: [/input, 1502] 
split level 191: [/input, 1503] 
split level 192: [/input, 1406] 
split level 193: [/input, 689] 
split level 194: [/input, 490] 
split level 195: [/input, 1479] 
split level 196: [/input, 1849] 
split level 197: [/input, 1498] 
split level 198: [/input, 2008] 
split level 199: [/input, 1501] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06234574317932129
10 lb beta sum: 0.0, worst -0.06235241889953613
Time: prepare 0.0116    bound 0.1397    transfer 0.0035    finalize 0.0031    func 0.1606    
Accumulated time: func 0.7261    prepare 0.0220    bound 0.7046    transfer 0.0036    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.19439435) min lb tensor(-0.06234574)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01191568374633789 
BICCOS Cumulative time: 0.01191568374633789
Preprocessing time: 0.010070323944091797 Inference time: 0.0015134811401367188 Add cuts time: 0.0001125335693359375 Cut analysis time: 0.0002193450927734375
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5368    set_bounds 0.0084    solve 0.1607    add 0.0097    
Accumulated time: pickout 0.0004    decision 0.5368    set_bounds 0.0084    solve 0.1607    add 0.0097    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([-1.83001892e-16]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([2.04285373e-14]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0003058910369873047

all verified at 0th iter
Time: prepare 0.0003    bound 0.0059    transfer 0.0001    finalize 0.0001    func 0.0065    
Accumulated time: func 0.7326    prepare 0.0224    bound 0.7104    transfer 0.0038    finalize 0.0036    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 194.6910412311554
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 194.69098114967346
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 194.6909589767456
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 194.69093918800354
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 194.69091963768005
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 194.69090104103088
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 194.69087028503418
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 194.690847158432
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 5.3092 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.18077564, -5.20051479, -2.12253857, -2.36523008, -1.95707440,
         -2.48700714, -1.75185084, -2.55259371, -4.91013861, -3.94676566]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [653]; unstable size 653; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 653] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 653] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 653] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 204] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.29296613, -1.59309268, -1.48934960, -1.80449390, -1.37909257,
         -2.13179302, -1.44039249,  1.14391506, -0.00782704]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.18077564, -5.20051479, -2.12253857, -2.36523008, -1.95707440,
         -2.48700714, -1.75185084, -2.55259371, -4.91013861, -3.94676566]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.18077517, -5.20051384, -2.12253881, -2.36523008, -1.95707417,
          -2.48700714, -1.75185037, -2.55259418, -4.91013765, -3.94676566],
         [-3.18077517, -5.20051384, -2.12253881, -2.36523008, -1.95707417,
          -2.48700714, -1.75185037, -2.55259418, -4.91013765, -3.94676566]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.05823636, -0.81554508, -1.22370100, -0.69376802, -1.42892480,
          -0.62818098,  0.76599050]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         ...,


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0839 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.89522552, -12.50763512, -11.44470501, -10.71474552, -11.76819897,
         -10.88390923, -11.10462856, -10.95513725, -12.58380413, -11.60862064]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [382]; unstable size 382; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 122, 1, 382] with unstable size 121 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 382] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 382] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [121]; unstable size 121; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 121] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 121] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.28878093,  0.57599199, -0.86663437, -1.54129553, -0.57239199,
         -1.38458633, -1.21227455, -1.42654026,  0.52066183]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.89522552, -12.50763512, -11.44470501, -10.71474552, -11.76819897,
         -10.88390923, -11.10462856, -10.95513725, -12.58380413, -11.60862064]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.89522552, -12.50763512, -11.44470310, -10.71474457, -11.76819706,
          -10.88390827, -11.10462856, -10.95513630, -12.58380413, -11.60861969],
         [-10.89522552, -12.50763512, -11.44470310, -10.71474457, -11.76819706,
          -10.88390827, -11.10462856, -10.95513630, -12.58380413, -11.60861969]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.71339417, -0.16391659, -0.89387512,  0.15957737, -0.72471142,
          -0.50399113, -0.65348339]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         ...,


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0577 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.43655968, -7.86374569, -4.02158070, -5.24551868, -3.37242651,
         -5.30696249, -5.20856190, -1.00180030, -7.81787586, -6.36246300]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 161, 1, 515] with unstable size 160 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 515] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [160]; unstable size 160; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 160] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.54672909, 5.77573109, 2.48532724, 3.64926147, 1.99377513, 3.71493435,
         3.49136114, 5.76536751, 4.38623095]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0356 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.78016090, -14.31425953, -12.11413383, -13.61369610, -13.22554588,
         -13.89419746, -13.81897068, -15.55597496, -11.84562683, -14.04191494]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [440]; unstable size 440; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 110, 1, 440] with unstable size 109 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 440] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 440] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [109]; unstable size 109; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 109] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 109] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.06631994, 1.97255516, 3.32466221, 3.00493073, 3.59111643, 3.54375315,
         5.13309097, 1.75885546, 3.87197638]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0421 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.58011818, -16.93579865, -13.35176086, -12.33354282, -12.53640938,
         -12.27129459, -12.42931461, -13.10805130, -16.13471413, -17.27034378]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [468]; unstable size 468; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 468] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 468] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 468] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 159] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.95476007,  3.13256645, -0.12001920, -1.12539387, -0.82774353,
         -1.18586910, -1.15729117,  2.37652349,  3.54983044]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.58011818, -16.93579865, -13.35176086, -12.33354282, -12.53640938,
         -12.27129459, -12.42931461, -13.10805130, -16.13471413, -17.27034378]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.58012009, -16.93579865, -13.35176182, -12.33354473, -12.53641129,
          -12.27129650, -12.42931652, -13.10805321, -16.13471413, -17.27034378],
         [-15.58012009, -16.93579865, -13.35176182, -12.33354473, -12.53641129,
          -12.27129650, -12.42931652, -13.10805321, -16.13471413, -17.27034378]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.24370861, -0.77450848, -0.57164192, -0.83675671, -0.67873669]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0605 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.56713295, -10.98260689,  -8.09094048,  -9.93765926,  -9.26453114,
         -10.17694187,  -9.82418156, -11.28379536,  -9.40003777, -10.42401791]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [530]; unstable size 530; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 122, 1, 530] with unstable size 121 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 530] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 530] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [121]; unstable size 121; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 121] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 121] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.92235851, 1.25571513, 2.97574401, 2.32010770, 3.20374894, 2.90414071,
         4.19674778, 2.57079268, 3.44977450]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0636 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.24266052, -9.05385590, -4.63273811, -6.82860374, -4.25593948,
         -6.95034361, -6.54124737, -4.92567825, -7.73889160, -7.98849154]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [484]; unstable size 484; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 199, 1, 484] with unstable size 198 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 484] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 484] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [198]; unstable size 198; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 198] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 198] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.37995410, 3.76833725, 0.10083747, 2.16897559, 2.29998040, 1.78575850,
         0.35607696, 2.66335440, 2.83313775]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0303 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.89239407, -6.05108643, -2.55554962, -3.76616883, -2.11981702,
         -3.83909178, -3.28839850, -3.06943870, -4.45051193, -5.43191195]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [594]; unstable size 594; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 594] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 594] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 594] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 191] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.09662652,  2.10026312, -1.01723409,  0.09384108, -1.30339622,
          0.17089653, -0.43055606,  0.45394611,  1.56536627]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.89239407, -6.05108643, -2.55554962, -3.76616883, -2.11981702,
         -3.83909178, -3.28839850, -3.06943870, -4.45051193, -5.43191195]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.89239454, -6.05108738, -2.55554962, -3.76616931, -2.11981726,
          -3.83909178, -3.28839874, -3.06943822, -4.45051241, -5.43191242],
         [-3.89239454, -6.05108738, -2.55554962, -3.76616931, -2.11981726,
          -3.83909178, -3.28839874, -3.06943822, -4.45051241, -5.43191242]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.51388860, -0.94962096,  0.21896052]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0718 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.06789207, -13.08512020, -11.95641899, -14.25201702, -13.24593544,
         -14.51348209, -14.12713146, -14.87085629, -10.82266903, -12.98229504]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 125, 1, 591] with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 591] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [124]; unstable size 124; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 124] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 124] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.60616136, 2.43306828, 4.57036209, 3.65054798, 4.81807995, 4.45948219,
         5.13743353, 1.49430251, 3.58136392]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0363 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87295246,  -9.77221680,  -7.06542158,  -6.92552090,  -6.61218357,
          -6.98795938,  -6.45421982,  -7.64116573, -10.70925426,  -9.26054478]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [514]; unstable size 514; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 255, 1, 514] with unstable size 254 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 514] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 514] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [254]; unstable size 254; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 254] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 254] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.37700844,  1.93588543, -0.13754916, -0.62001443,  0.04202433,
         -0.79881138,  0.29987156,  3.01180053,  1.52556324]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87295246,  -9.77221680,  -7.06542158,  -6.92552090,  -6.61218357,
          -6.98795938,  -6.45421982,  -7.64116573, -10.70925426,  -9.26054478]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.87295151,  -9.77221584,  -7.06542110,  -6.92552185,  -6.61218452,
           -6.98795891,  -6.45422077,  -7.64116478, -10.70925331,  -9.26054478],
         [ -9.87295151,  -9.77221584,  -7.06542110,  -6.92552185,  -6.61218452,
           -6.98795891,  -6.45422077,  -7.64116478, -10.70925331,  -9.26054478]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.13989925, -0.31333733, -0.47130108]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]],


         [[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]],


         [[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0444 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.22711134, -6.61452389, -3.28024340, -3.07715249, -3.65528822,
         -3.21469426, -1.80790162, -3.44135714, -7.19001961, -5.18115664]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 427] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 427] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 192] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.43010712,  2.73373103, -0.20912015,  0.11641049,  0.11481588,
         -1.58735907, -0.18466640,  3.42027855,  1.36505198]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.22711134, -6.61452389, -3.28024340, -3.07715249, -3.65528822,
         -3.21469426, -1.80790162, -3.44135714, -7.19001961, -5.18115664]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.22711134, -6.61452293, -3.28024387, -3.07715273, -3.65528846,
          -3.21469450, -1.80790162, -3.44135761, -7.19001865, -5.18115664],
         [-6.22711134, -6.61452293, -3.28024387, -3.07715273, -3.65528846,
          -3.21469450, -1.80790162, -3.44135761, -7.19001865, -5.18115664]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.20309114, -1.26925111,  0.36420488]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]],


         [[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]],


         [[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0560 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.63098383, -5.91123009, -1.57904100, -1.50031447, -3.17599440,
         -1.57833910, -2.31312609, -2.17043972, -5.16499329, -4.05005884]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [429]; unstable size 429; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 115, 1, 429] with unstable size 114 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 429] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 429] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [114]; unstable size 114; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 114] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 114] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.02613115,  3.04000330, -0.86533904, -0.93197501,  0.78377438,
         -0.84204745, -0.27393401,  2.37316895,  1.32242012]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.63098383, -5.91123009, -1.57904100, -1.50031447, -3.17599440,
         -1.57833910, -2.31312609, -2.17043972, -5.16499329, -4.05005884]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.63098431, -5.91123009, -1.57904124, -1.50031507, -3.17599440,
          -1.57833958, -2.31312585, -2.17043996, -5.16499329, -4.05005884],
         [-2.63098431, -5.91123009, -1.57904124, -1.50031507, -3.17599440,
          -1.57833958, -2.31312585, -2.17043996, -5.16499329, -4.05005884]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.59139872, -0.67012489, -0.59210038,  0.14268589]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0430 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.53942776,  -7.02883530,  -7.54472733, -10.47971630,  -7.86964130,
         -10.67128658, -10.97943497,  -9.78617668,  -5.69757843,  -6.90828276]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [473]; unstable size 473; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 141, 1, 473] with unstable size 140 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 1, 1, 473] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 473] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [140]; unstable size 140; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 1, 1, 140] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.97586250,  1.62177134,  4.44206429,  1.95841992,  4.61180305,
          4.90358877,  3.71702051, -0.18866634,  0.87091970]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.53942776,  -7.02883530,  -7.54472733, -10.47971630,  -7.86964130,
         -10.67128658, -10.97943497,  -9.78617668,  -5.69757843,  -6.90828276]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.34467602,  -6.78079128,  -7.36285162, -10.22102642,  -7.63834572,
          -10.41161633, -10.81610203,  -9.54494476,  -5.22521114,  -6.57947111]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11946487]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0712 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.99526882, -8.88451767, -3.74724054, -4.25434780, -3.80330396,
         -4.31974983, -2.96723056, -5.10482168, -9.22820282, -7.71018076]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 442] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 442] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 188] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.31716251, 5.14074612, 0.38760489, 0.92174947, 0.43740439, 0.97805083,
         1.55073750, 5.43588781, 3.94455695]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0308 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.29222870,  -9.06495857,  -5.48218775,  -5.67955399,  -5.15304756,
          -5.78769970,  -4.06756973,  -5.97489452, -10.72794914,  -8.75968742]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [344]; unstable size 344; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 344] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 344] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 344] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 166] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.44414234, 4.29334497, 0.94329727, 1.21160626, 0.62566411, 1.30977690,
         1.30732977, 5.79046440, 4.05936241]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0636 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.00760698, -10.36704826,  -7.93206787,  -9.08809185,  -9.34877014,
          -9.23899841, -10.37455654,  -9.37908459,  -8.12404442, -10.51943302]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 159, 1, 377] with unstable size 158 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 377] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [158]; unstable size 158; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 158] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 158] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.70369148, 1.60599136, 2.61762953, 2.92221189, 2.76581216, 3.82137728,
         2.85164285, 1.76453388, 4.06818771]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0631 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.83257341, -6.46854591, -5.99145317, -5.71124935, -5.55805302,
         -5.72428894, -7.17641068, -6.33211374, -1.95075095, -5.86147213]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [468]; unstable size 468; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 468] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 468] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 468] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 180] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.54666638, 3.82981682, 3.37250423, 2.99276829, 2.92181730, 2.99155474,
         4.37545872, 3.59890223, 3.20619941]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0420 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.92135620, -9.33125305, -5.36672211, -5.52371502, -5.86994457,
         -5.72914362, -4.85611820, -7.33439922, -7.56188965, -8.56555939]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 184, 1, 544] with unstable size 183 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 544] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 183] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.39630270, 3.45109224, 0.09545016, 0.32944334, 0.53940821, 0.51911545,
         1.82263875, 1.84724045, 2.81309271]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0363 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.31921101, -8.17862988, -3.92548275, -4.37522030, -3.57966661,
         -4.41261387, -3.19976306, -4.81196594, -8.46736908, -7.38388491]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [501]; unstable size 501; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 223, 1, 501] with unstable size 222 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 501] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 501] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 222] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.06676197,  2.64715958, -0.83596241, -0.06112341, -1.19111860,
         -1.62031984, -0.01587456,  3.07019234,  2.02515411]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.31921101, -8.17862988, -3.92548275, -4.37522030, -3.57966661,
         -4.41261387, -3.19976306, -4.81196594, -8.46736908, -7.38388491]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.31921053, -8.17862988, -3.92548323, -4.37522030, -3.57966733,
          -4.41261482, -3.19976282, -4.81196690, -8.46736908, -7.38388443],
         [-7.31921053, -8.17862988, -3.92548323, -4.37522030, -3.57966733,
          -4.41261482, -3.19976282, -4.81196690, -8.46736908, -7.38388443]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.48713160, -0.03739452, -0.83294749, -1.21285200,  0.39935207]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0789 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.73774433, -9.38230991, -5.25654364, -6.28954697, -4.75454044,
         -6.38296413, -5.13899040, -6.38740015, -9.45212460, -9.40668297]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [644]; unstable size 644; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 644] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 644] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 644] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 232] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.87710190,  3.18848825,  0.69205022, -0.69066876,  0.77880299,
         -0.48637587,  0.73772764,  3.31828928,  3.26127815]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.73774433, -9.38230991, -5.25654364, -6.28954697, -4.75454044,
         -6.38296413, -5.13899040, -6.38740015, -9.45212460, -9.40668297]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.73774529, -9.38231087, -5.25654459, -6.28954792, -4.75454140,
          -6.38296461, -5.13899136, -6.38740110, -9.45212364, -9.40668201],
         [-7.73774529, -9.38231087, -5.25654459, -6.28954792, -4.75454140,
          -6.38296461, -5.13899136, -6.38740110, -9.45212364, -9.40668201]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.50200319, -0.11755323]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.84603173, -0.87777776, -0.86190474,  ..., -0.36984116,
            -0.36984116, -0.36984116],
           [-0.86190474, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           [-0.84603173, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           ...,
           [-0.52857143, -0.49682540, -0.48095238,  ..., -0.16349196,
            -0.13174593, -0.32222211],
           [-0.46507925, -0.48095238, -0.48095238,  ..., -0.30634910,
            -0.22698402, -0.27460307],
           [-0.43333322, -0.43333322, -0.48095238,  ..., -0.38571417,
            -0.27460307, -0.16349196]],

          [[-0.96618354, -0.99838966, -0.98228657,  ..., -0.45088565,
            -0.45088565, -0.45088565],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           ...,
           [-0.80515295, -0.82125598, -0.83735907,  ..., -0.51529789,
            -0.51529789, -0.74074072],
           [-0.78904986, -0.80515295, -0.82125598,  ..., -0.64412236,
            -0.57971013, -0.64412236],
           [-0.77294683, -0.78904986, -0.78904986,  ..., -0.72463763,
            -0.62801927, -0.54750401]],

          [[-1.00299859, -1.01799107, -1.01799107,  ..., -0.71814090,
            -0.73313338, -0.71814090],
           [-1.01799107, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           [-1.00299859, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           ...,
           [-0.98800600, -0.98800600, -0.97301346,  ..., -0.52323836,
            -0.47826082, -0.67316341],
           [-0.95802099, -0.97301346, -0.97301346,  ..., -0.64317840,
            -0.55322337, -0.61319339],
           [-0.95802099, -0.98800600, -1.01799107,  ..., -0.71814090,
            -0.59820086, -0.50824583]]],


         [[[-0.84603173, -0.87777776, -0.86190474,  ..., -0.36984116,
            -0.36984116, -0.36984116],
           [-0.86190474, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           [-0.84603173, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           ...,
           [-0.52857143, -0.49682540, -0.48095238,  ..., -0.16349196,
            -0.13174593, -0.32222211],
           [-0.46507925, -0.48095238, -0.48095238,  ..., -0.30634910,
            -0.22698402, -0.27460307],
           [-0.43333322, -0.43333322, -0.48095238,  ..., -0.38571417,
            -0.27460307, -0.16349196]],

          [[-0.96618354, -0.99838966, -0.98228657,  ..., -0.45088565,
            -0.45088565, -0.45088565],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           ...,
           [-0.80515295, -0.82125598, -0.83735907,  ..., -0.51529789,
            -0.51529789, -0.74074072],
           [-0.78904986, -0.80515295, -0.82125598,  ..., -0.64412236,
            -0.57971013, -0.64412236],
           [-0.77294683, -0.78904986, -0.78904986,  ..., -0.72463763,
            -0.62801927, -0.54750401]],

          [[-1.00299859, -1.01799107, -1.01799107,  ..., -0.71814090,
            -0.73313338, -0.71814090],
           [-1.01799107, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           [-1.00299859, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           ...,
           [-0.98800600, -0.98800600, -0.97301346,  ..., -0.52323836,
            -0.47826082, -0.67316341],
           [-0.95802099, -0.97301346, -0.97301346,  ..., -0.64317840,
            -0.55322337, -0.61319339],
           [-0.95802099, -0.98800600, -1.01799107,  ..., -0.71814090,
            -0.59820086, -0.50824583]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0713 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879883,  -8.99937153,
          -9.13003254,  -9.50150967, -10.35948181,  -9.91758919, -10.61350632]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 508] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 508] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 197] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.60292816, -2.29249573, -2.02272010, -2.05514479, -1.91961002,
         -1.48416185, -0.73623490, -1.02746487,  0.09661895]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879883,  -8.99937153,
          -9.13003254,  -9.50150967, -10.35948181,  -9.91758919, -10.61350632]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879978,  -8.99937153,
           -9.13003254,  -9.50150967, -10.35948181,  -9.91758823, -10.61350632],
         [ -9.38197994, -10.24376202,  -8.79766655,  -9.01879978,  -8.99937153,
           -9.13003254,  -9.50150967, -10.35948181,  -9.91758823, -10.61350632]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.86178207, -1.44609547, -1.22496223, -1.24439049, -1.11372948,
          -0.74225235,  0.11571980, -0.32617378]]], device='cuda:0')
number of violation:  7
clean attack image tensor([[[[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         ...,


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0681 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.77434063, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670811,
          -6.53051615,  -7.14518929,  -8.42440701, -10.45952797, -10.54728985]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [695]; unstable size 695; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 695] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 695] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 695] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 199] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70145547,  3.44708157, -0.32370079, -0.09620176,  0.17705202,
          0.33821183,  1.44863999,  3.27855825,  3.35601664]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.77434063, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670811,
          -6.53051615,  -7.14518929,  -8.42440701, -10.45952797, -10.54728985]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.77434158, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670906,
           -6.53051615,  -7.14519024,  -8.42440796, -10.45952892, -10.54729080],
         [ -8.77434158, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670906,
           -6.53051615,  -7.14519024,  -8.42440796, -10.45952892, -10.54729080]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01167870, -0.07961607]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0760 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.38532257, -6.06158733, -5.10214949, -7.15757179, -4.90412474,
         -7.31758070, -7.94371891, -6.91108131, -0.65056217, -5.11655426]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [488]; unstable size 488; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 488] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 488] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 488] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.34641814, 4.86730623, 3.89913702, 5.95862532, 3.74042487, 6.11034679,
         6.67927361, 5.60504532, 3.94073176]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0202 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
         -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [425]; unstable size 425; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 425] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 425] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 425] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 199] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.02166915,  3.21041250,  0.75644505, -0.07432845,  0.52634168,
          0.06094754,  0.40918601,  4.12974262,  2.57223129]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
         -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
          -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05403996]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.82063496,  0.82063496,  0.88412702,  ..., -0.89365077,
            -0.86190474, -0.83015871],
           [ 0.99523818,  1.12222254,  1.43968284,  ..., -0.89365077,
            -0.90952379, -0.90952379],
           [ 1.47142887,  1.72539711,  1.93174624,  ..., -0.84603173,
            -0.90952379, -0.94126981],
           ...,
           [ 0.96349210,  0.70952386,  0.48730165,  ...,  0.04285724,
             0.16984135,  0.15396833],
           [ 1.07460344,  0.77301592,  0.58253974,  ...,  0.72539687,
             0.20158738,  0.29682547],
           [ 1.01111114,  0.78888893,  0.45555562,  ...,  1.63015902,
             1.05873048,  0.86825401]],

          [[-0.32206106, -0.41867942, -0.40257636,  ..., -1.22383249,
            -1.14331722, -1.04669881],
           [-0.19323659, -0.03220600,  0.46698883,  ..., -1.30434775,
            -1.27214170, -1.22383249],
           [ 0.56360716,  1.01449287,  1.23993587,  ..., -1.41706920,
            -1.44927526, -1.43317223],
           ...,
           [-0.43478248, -0.66022539, -0.85346210,  ..., -0.75684375,
            -0.66022539, -0.64412236],
           [-0.24154577, -0.51529789, -0.77294683,  ..., -0.45088565,
            -0.80515295, -0.85346210],
           [-0.22544271, -0.41867942, -0.80515295,  ..., -0.03220600,
            -0.45088565, -0.74074072]],

          [[-0.64317840, -0.74812591, -0.79310340,  ..., -1.06296861,
            -0.95802099, -0.85307342],
           [-0.55322337, -0.41829082, -0.04347810,  ..., -1.15292358,
            -1.10794616, -1.06296861],
           [ 0.31634200,  0.58620709,  0.55622208,  ..., -1.30284870,
            -1.30284870, -1.30284870],
           ...,
           [-0.91304344, -1.04797614, -1.13793111,  ..., -0.98800600,
            -0.89805096, -0.86806595],
           [-0.77811092, -0.98800600, -1.09295356,  ..., -0.88305843,
            -1.03298354, -1.10794616],
           [-0.74812591, -0.91304344, -1.12293863,  ..., -0.73313338,
            -0.98800600, -1.18290865]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0319 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.14186001,  -7.07143116, -10.46663189, -11.16532612, -10.33747673,
         -11.26323891, -10.40632534, -10.15031719,  -8.55157280,  -8.28031540]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 538] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 538] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 206] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.38833761, 2.48165607, 3.18024349, 2.31973934, 3.26281786, 2.38422155,
         2.02770853, 0.85606003, 0.95938051]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0334 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.38072777, -8.34097099, -7.53324938, -7.26011181, -6.91416168,
         -7.30822277, -7.39192200, -8.73349857, -8.18290806, -9.00568867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [791]; unstable size 791; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 190, 1, 791] with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 791] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 791] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 189] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.38350579,  0.14631462, -0.09611964, -0.06322638, -0.81499445,
         -0.28940225,  0.85859978,  0.09628677,  0.96366215]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.38072777, -8.34097099, -7.53324938, -7.26011181, -6.91416168,
         -7.30822277, -7.39192200, -8.73349857, -8.18290806, -9.00568867]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.38072777, -8.34097099, -7.53324986, -7.26011276, -6.91416264,
          -7.30822325, -7.39192200, -8.73349953, -8.18290710, -9.00568962],
         [-8.38072777, -8.34097099, -7.53324986, -7.26011276, -6.91416264,
          -7.30822325, -7.39192200, -8.73349953, -8.18290710, -9.00568962]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.22502661, -0.04811049, -0.39406061,  0.08369875]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0747 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -4.23172474, -11.22384930,  -5.34106207,  -9.06499481,  -7.32086372,
          -9.25464153, -10.79966545, -10.12152672,  -6.76570702, -10.71261692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [459]; unstable size 459; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 131, 1, 459] with unstable size 130 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 459] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 459] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [130]; unstable size 130; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 130] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 130] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.35711384, 0.89513063, 4.55454063, 2.81934166, 4.73727655, 6.20088959,
         5.47830963, 2.08739567, 5.85482788]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0386 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
          -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [504]; unstable size 504; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 504] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 504] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 504] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 199] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.36880398,  5.11926937,  0.38846827,  0.01013416,  0.33952892,
         -0.05993855,  1.64709651,  4.65361881,  4.72898006]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
          -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.15it/s]100%|██████████| 1/1 [00:00<00:00,  9.13it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.49543190, -11.39906597,  -6.25923395,  -5.68034649,  -6.18490219,
           -5.65740013,  -5.70066929,  -7.64016151, -10.87086868, -11.04580212]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04326916]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1122 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.356842041015625
alpha/beta optimization time: 1.1885883808135986
initial alpha-crown bounds: tensor([[ 3.39546919,  5.14681530,  0.40474582,  0.01093243,  0.35315681,
         -0.05082333,  1.65623391,  4.68375587,  4.75655556]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.050823330879211426
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.66649746894836
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6664595603943
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6664342880249
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.66641306877136
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.6663942337036
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.66637587547302
Verifying property 5 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05082333]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
         -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05082333]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 504
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 196
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 705
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010919570922851562
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.050823330879211426
10 lb beta sum: 0.0, worst -0.05082249641418457
Time: prepare 0.0002    bound 0.0865    transfer 0.0001    finalize 0.0001    func 0.0869    
Accumulated time: func 0.0869    prepare 0.0002    bound 0.0865    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 76] 
split level 1: [/input-8, 1820] 
split level 2: [/input-8, 531] 
split level 3: [/input-8, 1890] 
split level 4: [/input-8, 1819] 
split level 5: [/input-8, 1957] 
split level 6: [/input-12, 79] 
split level 7: [/input-8, 1880] 
split level 8: [/input-8, 1876] 
split level 9: [/input-8, 1945] 
split level 10: [/input-8, 1309] 
split level 11: [/input-8, 1900] 
split level 12: [/input-8, 1889] 
split level 13: [/input-8, 797] 
split level 14: [/input, 2712] 
split level 15: [/input, 1941] 
split level 16: [/input, 2764] 
split level 17: [/input, 2020] 
split level 18: [/input-8, 1877] 
split level 19: [/input, 2486] 
split level 20: [/input, 1992] 
split level 21: [/input, 424] 
split level 22: [/input, 1977] 
split level 23: [/input, 1972] 
split level 24: [/input, 2765] 
split level 25: [/input, 1918] 
split level 26: [/input-8, 1969] 
split level 27: [/input, 421] 
split level 28: [/input-8, 1869] 
split level 29: [/input, 2019] 
split level 30: [/input, 2773] 
split level 31: [/input-8, 1893] 
split level 32: [/input-8, 802] 
split level 33: [/input, 1954] 
split level 34: [/input, 2024] 
split level 35: [/input, 2774] 
split level 36: [/input-8, 522] 
split level 37: [/input, 185] 
split level 38: [/input, 1979] 
split level 39: [/input, 1891] 
split level 40: [/input, 1875] 
split level 41: [/input, 2451] 
split level 42: [/input-8, 1908] 
split level 43: [/input, 1912] 
split level 44: [/input, 1400] 
split level 45: [/input, 2003] 
split level 46: [/input, 2028] 
split level 47: [/input, 1367] 
split level 48: [/input, 1879] 
split level 49: [/input, 1978] 
split level 50: [/input, 2441] 
split level 51: [/input-8, 1705] 
split level 52: [/input, 132] 
split level 53: [/input, 2411] 
split level 54: [/input, 2499] 
split level 55: [/input, 1015] 
split level 56: [/input-8, 811] 
split level 57: [/input, 1335] 
split level 58: [/input, 2357] 
split level 59: [/input, 2717] 
split level 60: [/input, 2459] 
split level 61: [/input, 2652] 
split level 62: [/input, 2005] 
split level 63: [/input, 1219] 
split level 64: [/input, 452] 
split level 65: [/input, 1230] 
split level 66: [/input, 2460] 
split level 67: [/input, 2465] 
split level 68: [/input, 2038] 
split level 69: [/input, 166] 
split level 70: [/input-8, 821] 
split level 71: [/input, 3928] 
split level 72: [/input, 2382] 
split level 73: [/input-8, 525] 
split level 74: [/input, 2494] 
split level 75: [/input, 733] 
split level 76: [/input, 2794] 
split level 77: [/input, 1868] 
split level 78: [/input, 2470] 
split level 79: [/input, 748] 
split level 80: [/input, 372] 
split level 81: [/input-8, 1980] 
split level 82: [/input, 2792] 
split level 83: [/input, 1399] 
split level 84: [/input, 598] 
split level 85: [/input, 2505] 
split level 86: [/input, 1014] 
split level 87: [/input, 394] 
split level 88: [/input-8, 1978] 
split level 89: [/input, 860] 
split level 90: [/input, 1414] 
split level 91: [/input, 1169] 
split level 92: [/input, 1997] 
split level 93: [/input-8, 1998] 
split level 94: [/input, 2413] 
split level 95: [/input, 2430] 
split level 96: [/input, 1966] 
split level 97: [/input, 1970] 
split level 98: [/input-8, 342] 
split level 99: [/input, 3709] 
split level 100: [/input, 1885] 
split level 101: [/input-8, 1298] 
split level 102: [/input-8, 1859] 
split level 103: [/input, 2414] 
split level 104: [/input, 1953] 
split level 105: [/input, 1259] 
split level 106: [/input-8, 361] 
split level 107: [/input, 1902] 
split level 108: [/input, 1901] 
split level 109: [/input, 461] 
split level 110: [/input, 979] 
split level 111: [/input, 1412] 
split level 112: [/input, 1830] 
split level 113: [/input, 1220] 
split level 114: [/input, 2404] 
split level 115: [/input, 451] 
split level 116: [/input, 3774] 
split level 117: [/input, 1985] 
split level 118: [/input, 2036] 
split level 119: [/input, 3661] 
split level 120: [/input, 491] 
split level 121: [/input, 1270] 
split level 122: [/input, 1869] 
split level 123: [/input, 3820] 
split level 124: [/input-8, 979] 
split level 125: [/input, 1401] 
split level 126: [/input, 1378] 
split level 127: [/input, 492] 
split level 128: [/input-8, 936] 
split level 129: [/input, 1245] 
split level 130: [/input, 702] 
split level 131: [/input, 1836] 
split level 132: [/input, 1835] 
split level 133: [/input, 1882] 
split level 134: [/input, 377] 
split level 135: [/input, 2013] 
split level 136: [/input-8, 1967] 
split level 137: [/input, 1165] 
split level 138: [/input, 348] 
split level 139: [/input, 1362] 
split level 140: [/input, 1267] 
split level 141: [/input, 3990] 
split level 142: [/input, 2037] 
split level 143: [/input, 2450] 
split level 144: [/input, 2705] 
split level 145: [/input, 399] 
split level 146: [/input, 1843] 
split level 147: [/input, 3805] 
split level 148: [/input, 1842] 
split level 149: [/input, 2374] 
split level 150: [/input, 1275] 
split level 151: [/input, 3797] 
split level 152: [/input, 435] 
split level 153: [/input, 1430] 
split level 154: [/input, 1252] 
split level 155: [/input, 1428] 
split level 156: [/input, 2481] 
split level 157: [/input-8, 1593] 
split level 158: [/input, 2813] 
split level 159: [/input, 1820] 
split level 160: [/input-8, 1203] 
split level 161: [/input, 2798] 
split level 162: [/input, 2671] 
split level 163: [/input, 2043] 
split level 164: [/input, 2633] 
split level 165: [/input, 1815] 
split level 166: [/input, 2044] 
split level 167: [/input, 2355] 
split level 168: [/input, 2812] 
split level 169: [/input, 1243] 
split level 170: [/input, 1379] 
split level 171: [/input-8, 928] 
split level 172: [/input, 433] 
split level 173: [/input-8, 1902] 
split level 174: [/input, 2515] 
split level 175: [/input, 2811] 
split level 176: [/input, 3961] 
split level 177: [/input, 1811] 
split level 178: [/input, 812] 
split level 179: [/input, 2342] 
split level 180: [/input, 1084] 
split level 181: [/input, 1429] 
split level 182: [/input, 1818] 
split level 183: [/input, 3803] 
split level 184: [/input, 2045] 
split level 185: [/input, 1413] 
split level 186: [/input, 1821] 
split level 187: [/input, 1968] 
split level 188: [/input, 1465] 
split level 189: [/input-8, 920] 
split level 190: [/input, 2620] 
split level 191: [/input, 3611] 
split level 192: [/input, 333] 
split level 193: [/input, 1150] 
split level 194: [/input, 589] 
split level 195: [/input, 4006] 
split level 196: [/input, 1838] 
split level 197: [/input, 2237] 
split level 198: [/input, 1837] 
split level 199: [/input, 3621] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05082213878631592
10 lb beta sum: 0.0, worst -0.05082380771636963
Time: prepare 0.0113    bound 0.0980    transfer 0.0031    finalize 0.0027    func 0.1177    
Accumulated time: func 0.2047    prepare 0.0217    bound 0.1844    transfer 0.0032    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.03922474) min lb tensor(-0.05082119)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010084152221679688 
BICCOS Cumulative time: 0.010084152221679688
Preprocessing time: 0.009711742401123047 Inference time: 8.845329284667969e-05 Add cuts time: 5.626678466796875e-05 Cut analysis time: 0.0002276897430419922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04851 (1), -0.04848 (1), -0.04847 (1), -0.04844 (1), -0.04840 (1), -0.04835 (1), -0.04830 (1), -0.04828 (1), -0.04821 (1), -0.04815 (1), -0.04809 (1), -0.04808 (1), -0.04805 (1), -0.04803 (1), -0.04798 (1), -0.04798 (1), -0.04786 (1), -0.04781 (1), -0.04781 (1), -0.04777 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5136    set_bounds 0.0084    solve 0.1178    add 0.0662    
Accumulated time: pickout 0.0003    decision 0.5136    set_bounds 0.0084    solve 0.1178    add 0.0662    
Current (lb-rhs): -0.048506855964660645
50 domains visited
Cumulative time: 0.8083570003509521

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 531] [/input-8, 1820] [/input-8, 1820] 
split level 1: [/input-8, 1890] [/input-8, 531] [/input-8, 531] [/input-8, 1890] [/input-8, 531] [/input-8, 531] [/input-8, 531] [/input-8, 1890] [/input-8, 531] [/input-8, 531] 
split level 2: [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] 
split level 3: [/input-8, 1203] [/input-8, 1819] [/input-8, 1819] [/input-8, 1876] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1876] [/input-8, 1819] [/input-8, 1819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.046898841857910156
10 lb beta sum: 0.19730766117572784, worst -0.04574429988861084
Time: prepare 0.0070    bound 1.2226    transfer 0.0014    finalize 0.0026    func 1.2363    
Accumulated time: func 1.4410    prepare 0.0289    bound 1.4070    transfer 0.0046    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.00186718) min lb tensor(-0.04544425)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.012683391571044922 
BICCOS Cumulative time: 0.02276754379272461
Preprocessing time: 0.011702775955200195 Inference time: 0.0001418590545654297 Add cuts time: 0.00011515617370605469 Cut analysis time: 0.0007236003875732422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03087 (2), -0.03081 (2), -0.03061 (2), -0.03048 (2), -0.03047 (2), -0.03033 (2), -0.03021 (2), -0.03010 (2), -0.03004 (2), -0.02991 (2), -0.02974 (2), -0.02971 (2), -0.02958 (2), -0.02950 (2), -0.02925 (2), -0.02911 (2), -0.02901 (2), -0.02839 (2), -0.02805 (2), -0.02802 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0217    set_bounds 0.0130    solve 1.2365    add 0.0851    
Accumulated time: pickout 0.0014    decision 0.5353    set_bounds 0.0214    solve 1.3543    add 0.1513    
Current (lb-rhs): -0.030870914459228516
100 domains visited
Cumulative time: 2.178630828857422

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1820] [/input-8, 531] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 531] [/input-8, 531] 
split level 1: [/input-8, 531] [/input-8, 1819] [/input-8, 531] [/input-8, 531] [/input-8, 531] [/input-8, 531] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] 
split level 2: [/input-8, 1819] [/input-8, 1890] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] 
split level 3: [/input-8, 1203] [/input-8, 1203] [/input-8, 1203] [/input-8, 1203] [/input-8, 1203] [/input-8, 1819] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030255556106567383
10 lb beta sum: 0.20582382380962372, worst -0.02861785888671875
Time: prepare 0.0066    bound 1.3414    transfer 0.0017    finalize 0.0023    func 1.3554    
Accumulated time: func 2.7964    prepare 0.0358    bound 2.7484    transfer 0.0063    finalize 0.0078    
all_split False
======================Cut inference begins======================
max lb tensor(0.01424694) min lb tensor(-0.02858424)
Number of Verified Splits: 48 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 2
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.014511585235595703 
BICCOS Cumulative time: 0.03727912902832031
Preprocessing time: 0.011311054229736328 Inference time: 0.0020444393157958984 Add cuts time: 0.0008528232574462891 Cut analysis time: 0.0003032684326171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01397 (3), -0.01393 (3), -0.01363 (3), -0.01356 (3), -0.01347 (3), -0.01344 (3), -0.01344 (3), -0.01325 (3), -0.01286 (3), -0.01285 (3), -0.01235 (3), -0.01234 (3), -0.01234 (3), -0.01224 (3), -0.01199 (3), -0.01196 (3), -0.01162 (3), -0.01160 (3), -0.01157 (3), -0.01122 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0151    solve 1.3555    add 0.0789    
Accumulated time: pickout 0.0024    decision 0.5548    set_bounds 0.0365    solve 2.7098    add 0.2303    
Current (lb-rhs): -0.013972997665405273
150 domains visited
Cumulative time: 3.663461208343506

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1890] [/input-8, 1890] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] 
split level 1: [/input-8, 1819] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] 
split level 2: [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1819] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] 
split level 3: [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23528116941452026, worst -0.02446509152650833
10 lb beta sum: 0.41278311610221863, worst -0.016155268996953964
Time: prepare 0.0149    bound 0.1295    transfer 0.0022    finalize 0.0017    func 0.1510    
Accumulated time: func 2.9474    prepare 0.0509    bound 2.8779    transfer 0.0085    finalize 0.0095    
all_split False
======================Cut inference begins======================
max lb tensor(0.00581644) min lb tensor(-0.01238096)
Number of Verified Splits: 104 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 2
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.01890397071838379 
BICCOS Cumulative time: 0.0561830997467041
Preprocessing time: 0.011522054672241211 Inference time: 0.005153656005859375 Add cuts time: 0.0013110637664794922 Cut analysis time: 0.0009171962738037109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00387 (4), -0.00382 (4), -0.00381 (4), -0.00381 (4), -0.00371 (4), -0.00371 (4), -0.00362 (4), -0.00361 (4), -0.00360 (4), -0.00359 (4), -0.00359 (4), -0.00358 (4), -0.00347 (4), -0.00339 (4), -0.00323 (4), -0.00310 (4), -0.00308 (4), -0.00306 (4), -0.00305 (4), -0.00302 (4), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0190    set_bounds 0.0152    solve 0.1511    add 0.2463    
Accumulated time: pickout 0.0033    decision 0.5738    set_bounds 0.0516    solve 2.8609    add 0.4765    
Current (lb-rhs): -0.003873586654663086
200 domains visited
Cumulative time: 4.115081787109375

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] 
split level 1: [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1820] [/input-8, 1820] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] 
split level 2: [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1819] [/input-8, 1819] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] 
split level 3: [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1876] [/input-8, 1876] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.005297422409057617
10 lb beta sum: 0.25413841009140015, worst -0.015234991908073425
Time: prepare 0.0064    bound 0.1312    transfer 0.0020    finalize 0.0024    func 0.1446    
Accumulated time: func 3.0920    prepare 0.0575    bound 3.0091    transfer 0.0105    finalize 0.0119    
all_split False
======================Cut inference begins======================
max lb tensor(0.00746381) min lb tensor(-0.00347328)
Number of Verified Splits: 303 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.03172421455383301 
BICCOS Cumulative time: 0.08790731430053711
Preprocessing time: 0.011275291442871094 Inference time: 0.01641559600830078 Add cuts time: 0.0037124156951904297 Cut analysis time: 0.0003209114074707031
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0193    set_bounds 0.0140    solve 0.1447    add 0.0265    
Accumulated time: pickout 0.0043    decision 0.5931    set_bounds 0.0656    solve 3.0056    add 0.5031    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1889], [-1.0, -1.0, -1.0, -1.0], [0, 0, 0, 0], [1.6552883196074841e-13, 0.01757328398525715, 0.006038235034793615, 0.0036232948768883944], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([-1.]), tensor([0]), tensor([5.11865217e-10]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1889], [-1.0, -1.0, -1.0, -1.0], [0, 0, 0, 0], [1.6552883196074841e-13, 0.01757328398525715, 0.006038235034793615, 0.0036232948768883944], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([1.]), tensor([0]), tensor([-1.83002104e-16]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1889], [-1.0, -1.0, -1.0, 1.0], [0, 0, 0, 0], [1.6552883196074841e-13, 0.01757328398525715, 0.006038235034793615, 0.006009048782289028], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([-1.]), tensor([0]), tensor([1.68258636e-13]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1889], [-1.0, -1.0, -1.0, 1.0], [0, 0, 0, 0], [1.6552883196074841e-13, 0.01757328398525715, 0.006038235034793615, 0.006009048782289028], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([1.]), tensor([0]), tensor([1.06884369e-10]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1957,  531, 1890, 1820]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.65528832e-13, 1.75732840e-02, 4.26428160e-03, 1.01522673e-02]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1820], [-1.0, -1.0, 1.0, 1.0], [0, 0, 0, 0], [1.6552883196074841e-13, 0.01757328398525715, 0.0042642815969884396, 0.006539152469485998], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([-1.]), tensor([0]), tensor([1.63220999e-13]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1820], [-1.0, -1.0, 1.0, 1.0], [0, 0, 0, 0], [1.6552883196074841e-13, 0.01757328398525715, 0.0042642815969884396, 0.006539152469485998], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([1.]), tensor([0]), tensor([1.61450063e-13]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1957,  531, 1820]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.65528832e-13, 3.09686526e-03, 1.16587151e-02]), tensor([0, 1, 2])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1957,  531, 1820]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.65528832e-13, 3.09686526e-03, 5.23011526e-03]), tensor([0, 1, 2])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1957]), tensor([1.]), tensor([0]), tensor([1.65300065e-13]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.050395846366882324
10 lb beta sum: 0.3704542815685272, worst -0.04749715328216553
Time: prepare 0.0006    bound 0.1341    transfer 0.0001    finalize 0.0002    func 0.1351    
Accumulated time: func 3.2271    prepare 0.0581    bound 3.1432    transfer 0.0106    finalize 0.0121    
After pruning, left:  6

Back to Regular BaB

BaB round 1
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1820] [/input-8, 1820] [/input-8, 1819] [/input-12, 76] [/input-12, 76] [/input-8, 1820] 
split level 1: [/input-8, 1819] [/input-8, 1819] [/input-12, 79] [/input-8, 1890] [/input-8, 1819] [/input-8, 531] 
split level 2: [/input-12, 79] [/input-12, 79] [/input-8, 1876] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] 
split level 3: [/input-8, 1876] [/input-8, 1876] [/input-8, 1945] [/input-8, 1876] [/input-8, 1876] [/input-8, 1819] 
split level 4: [/input-8, 1945] [/input-8, 1945] [/input, 1941] [/input-8, 1945] [/input-8, 1945] [/input-8, 1876] 
split level 5: [/input-8, 1900] [/input-8, 1900] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] 
cut re-enabled after branching node selection
0 lb beta sum: 0.35438162088394165, worst -0.029416799545288086
10 lb beta sum: 0.35464906692504883, worst -0.02938389778137207
Time: prepare 0.0166    bound 0.1354    transfer 0.0007    finalize 0.0022    func 0.1575    
Accumulated time: func 3.3846    prepare 0.0750    bound 3.2786    transfer 0.0113    finalize 0.0143    
all_split False
======================Cut inference begins======================
max lb tensor(0.26872516) min lb tensor(-0.02937508)
Number of Verified Splits: 306 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.3260692059993744, worst -0.04272639751434326
10 lb beta sum: 0.3889002501964569, worst -0.031451813876628876
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts 7-9: 18
#cuts >= 20: 0
BICCOS time: 0.33997392654418945 
BICCOS Cumulative time: 0.42788124084472656
Preprocessing time: 0.010462522506713867 Inference time: 0.3196079730987549 Add cuts time: 0.008606195449829102 Cut analysis time: 0.0012972354888916016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02938 (6), -0.02842 (6), -0.02801 (6), -0.02590 (6), -0.02590 (6), -0.02548 (6), -0.02495 (6), -0.02457 (6), -0.02436 (6), -0.02398 (6), -0.02370 (6), -0.02284 (6), -0.02251 (6), -0.02245 (6), -0.02220 (6), -0.02174 (6), -0.02156 (6), -0.02150 (6), -0.02138 (6), -0.02118 (6), 
Length of domains: 78
Time: pickout 0.0005    decision 0.0182    set_bounds 0.0375    solve 0.1576    add 0.0011    
Accumulated time: pickout 0.0048    decision 0.6114    set_bounds 0.1031    solve 3.1632    add 0.5041    
Current (lb-rhs): -0.029375076293945312
278 domains visited
Cumulative time: 5.068986415863037

BaB round 2
batch: 78
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 79] [/input-12, 76] [/input-12, 76] [/input-12, 79] [/input-12, 79] [/input-12, 76] [/input-12, 76] [/input-12, 79] [/input-12, 79] [/input-12, 76] 
split level 1: [/input-8, 1880] [/input-12, 79] [/input-12, 79] [/input-8, 1900] [/input-8, 1880] [/input-12, 79] [/input-12, 79] [/input-8, 1880] [/input-8, 1900] [/input-8, 1945] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029508352279663086
10 lb beta sum: 0.18620936572551727, worst -0.028036832809448242
Time: prepare 0.0065    bound 0.1326    transfer 0.0006    finalize 0.0020    func 0.1438    
Accumulated time: func 3.5284    prepare 0.0817    bound 3.4112    transfer 0.0119    finalize 0.0163    
all_split False
======================Cut inference begins======================
max lb tensor(0.54497766) min lb tensor(-0.02802479)
Number of Verified Splits: 206 of 312
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.029534101486206055 
BICCOS Cumulative time: 0.4574153423309326
Preprocessing time: 0.009033679962158203 Inference time: 0.017155170440673828 Add cuts time: 0.0029449462890625 Cut analysis time: 0.00040030479431152344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02802 (8), -0.02799 (8), -0.02705 (8), -0.02584 (8), -0.02456 (8), -0.02455 (8), -0.02411 (8), -0.02368 (8), -0.02358 (8), -0.02303 (8), -0.02260 (8), -0.02248 (8), -0.02242 (8), -0.02218 (8), -0.02157 (8), -0.02099 (8), -0.02099 (8), -0.02083 (8), -0.02070 (8), -0.02007 (8), 
Length of domains: 106
Time: pickout 0.0015    decision 0.0177    set_bounds 0.0169    solve 0.1439    add 0.0011    
Accumulated time: pickout 0.0063    decision 0.6291    set_bounds 0.1200    solve 3.3071    add 0.5053    
Current (lb-rhs): -0.028024792671203613
384 domains visited
Cumulative time: 5.280984401702881

BaB round 3
batch: 106
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-8, 1880] [/input-8, 1880] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028024673461914062
10 lb beta sum: 0.10999847948551178, worst -0.02801048755645752
Time: prepare 0.0045    bound 0.1341    transfer 0.0005    finalize 0.0018    func 0.1423    
Accumulated time: func 3.6706    prepare 0.0864    bound 3.5453    transfer 0.0124    finalize 0.0181    
all_split False
======================Cut inference begins======================
max lb tensor(0.29028824) min lb tensor(-0.02800012)
Number of Verified Splits: 94 of 212
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 7
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.01598048210144043 
BICCOS Cumulative time: 0.47339582443237305
Preprocessing time: 0.0063190460205078125 Inference time: 0.007769346237182617 Add cuts time: 0.0015192031860351562 Cut analysis time: 0.00037288665771484375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02800 (9), -0.02754 (9), -0.02704 (9), -0.02547 (9), -0.02454 (9), -0.02412 (9), -0.02409 (9), -0.02358 (9), -0.02323 (9), -0.02303 (9), -0.02258 (9), -0.02225 (9), -0.02205 (9), -0.02171 (9), -0.02156 (9), -0.02080 (9), -0.02048 (9), -0.02047 (9), -0.02037 (9), -0.01990 (9), 
Length of domains: 118
Time: pickout 0.0019    decision 0.0175    set_bounds 0.0092    solve 0.1423    add 0.0011    
Accumulated time: pickout 0.0082    decision 0.6466    set_bounds 0.1291    solve 3.4494    add 0.5064    
Current (lb-rhs): -0.0280001163482666
502 domains visited
Cumulative time: 5.469676494598389

BaB round 4
batch: 118
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0275576114654541
10 lb beta sum: 0.03909473121166229, worst -0.02754843235015869
Time: prepare 0.0051    bound 0.1338    transfer 0.0005    finalize 0.0015    func 0.1425    
Accumulated time: func 3.8131    prepare 0.0917    bound 3.6791    transfer 0.0129    finalize 0.0195    
all_split False
======================Cut inference begins======================
max lb tensor(0.00791641) min lb tensor(-0.02754557)
Number of Verified Splits: 57 of 236
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 7
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.014011621475219727 
BICCOS Cumulative time: 0.4874074459075928
Preprocessing time: 0.0069637298583984375 Inference time: 0.005091667175292969 Add cuts time: 0.0013549327850341797 Cut analysis time: 0.0006012916564941406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02755 (10), -0.02670 (10), -0.02623 (10), -0.02419 (10), -0.02409 (10), -0.02363 (10), -0.02325 (10), -0.02281 (10), -0.02266 (10), -0.02213 (10), -0.02194 (10), -0.02121 (10), -0.02112 (10), -0.02079 (10), -0.02046 (10), -0.02014 (10), -0.01966 (10), -0.01934 (10), -0.01934 (10), -0.01929 (10), 
Length of domains: 179
Time: pickout 0.0019    decision 0.0174    set_bounds 0.0092    solve 0.1425    add 0.0012    
Accumulated time: pickout 0.0101    decision 0.6640    set_bounds 0.1384    solve 3.5920    add 0.5076    
Current (lb-rhs): -0.027545571327209473
681 domains visited
Cumulative time: 5.656585216522217

BaB round 5
batch: 179
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1877] [/input-8, 1900] [/input-8, 1900] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026822924613952637
10 lb beta sum: 0.027359258383512497, worst -0.026815056800842285
Time: prepare 0.0076    bound 0.1357    transfer 0.0007    finalize 0.0020    func 0.1483    
Accumulated time: func 3.9614    prepare 0.0995    bound 3.8148    transfer 0.0136    finalize 0.0216    
all_split False
======================Cut inference begins======================
max lb tensor(0.00800371) min lb tensor(-0.02680850)
Number of Verified Splits: 111 of 358
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 8
#cuts 4-6: 17
#cuts >= 20: 0
BICCOS time: 0.024287700653076172 
BICCOS Cumulative time: 0.511695146560669
Preprocessing time: 0.010247945785522461 Inference time: 0.010788917541503906 Add cuts time: 0.002330303192138672 Cut analysis time: 0.0009205341339111328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02681 (11), -0.02597 (11), -0.02549 (11), -0.02343 (11), -0.02336 (11), -0.02291 (11), -0.02253 (11), -0.02208 (11), -0.02194 (11), -0.02142 (11), -0.02121 (11), -0.02050 (11), -0.02049 (11), -0.02003 (11), -0.01973 (11), -0.01929 (11), -0.01915 (11), -0.01851 (11), -0.01846 (11), -0.01846 (11), 
Length of domains: 247
Time: pickout 0.0026    decision 0.0204    set_bounds 0.0152    solve 0.1484    add 0.0017    
Accumulated time: pickout 0.0126    decision 0.6844    set_bounds 0.1536    solve 3.7404    add 0.5094    
Current (lb-rhs): -0.026808500289916992
928 domains visited
Cumulative time: 5.870083332061768

BaB round 6
batch: 247
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025449752807617188
10 lb beta sum: 0.024140560999512672, worst -0.02544105052947998
Time: prepare 0.0113    bound 0.1514    transfer 0.0024    finalize 0.0026    func 0.1711    
Accumulated time: func 4.1325    prepare 0.1110    bound 3.9662    transfer 0.0160    finalize 0.0242    
all_split False
======================Cut inference begins======================
max lb tensor(0.00796700) min lb tensor(-0.02543414)
Number of Verified Splits: 111 of 494
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 9
#cuts 4-6: 25
#cuts >= 20: 0
BICCOS time: 0.02921319007873535 
BICCOS Cumulative time: 0.5409083366394043
Preprocessing time: 0.01410365104675293 Inference time: 0.011174201965332031 Add cuts time: 0.002736330032348633 Cut analysis time: 0.0011990070343017578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02543 (12), -0.02465 (12), -0.02455 (12), -0.02344 (12), -0.02328 (12), -0.02276 (12), -0.02260 (12), -0.02198 (12), -0.02182 (12), -0.02125 (12), -0.02111 (12), -0.02088 (12), -0.02079 (12), -0.02034 (12), -0.02031 (12), -0.02000 (12), -0.01969 (12), -0.01935 (12), -0.01928 (12), -0.01924 (12), 
Length of domains: 383
Time: pickout 0.0034    decision 0.0235    set_bounds 0.0177    solve 0.1712    add 0.0025    
Accumulated time: pickout 0.0160    decision 0.7079    set_bounds 0.1713    solve 3.9115    add 0.5119    
Current (lb-rhs): -0.025434136390686035
1311 domains visited
Cumulative time: 6.118696212768555

BaB round 7
batch: 383
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1992] [/input, 1992] [/input, 1992] [/input, 1992] [/input, 1992] [/input, 1992] [/input-8, 1893] [/input, 1992] [/input-8, 1893] [/input, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024600505828857422
10 lb beta sum: 0.02094125933945179, worst -0.024594545364379883
Time: prepare 0.0183    bound 0.1531    transfer 0.0037    finalize 0.0048    func 0.1848    
Accumulated time: func 4.3173    prepare 0.1295    bound 4.1192    transfer 0.0197    finalize 0.0290    
all_split False
======================Cut inference begins======================
max lb tensor(0.00577688) min lb tensor(-0.02458894)
Number of Verified Splits: 159 of 766
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 9
#cuts 4-6: 32
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.04449152946472168 
BICCOS Cumulative time: 0.585399866104126
Preprocessing time: 0.021923065185546875 Inference time: 0.017111778259277344 Add cuts time: 0.003963470458984375 Cut analysis time: 0.001493215560913086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02459 (13), -0.02371 (13), -0.02345 (13), -0.02325 (13), -0.02257 (13), -0.02239 (13), -0.02205 (13), -0.02201 (13), -0.02192 (13), -0.02141 (13), -0.02126 (13), -0.02078 (13), -0.02061 (13), -0.02057 (13), -0.02051 (13), -0.02003 (13), -0.02003 (13), -0.01995 (13), -0.01992 (13), -0.01991 (13), 
Length of domains: 607
Time: pickout 0.0062    decision 0.0314    set_bounds 0.0292    solve 0.1850    add 0.0031    
Accumulated time: pickout 0.0222    decision 0.7393    set_bounds 0.2005    solve 4.0966    add 0.5150    
Current (lb-rhs): -0.024588942527770996
1918 domains visited
Cumulative time: 6.4196553230285645

BaB round 8
batch: 607
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input, 1992] [/input-8, 1893] [/input, 1992] [/input, 1992] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0233992338180542
10 lb beta sum: 0.01500728540122509, worst -0.02339339256286621
Time: prepare 0.0289    bound 0.1663    transfer 0.0060    finalize 0.0065    func 0.2165    
Accumulated time: func 4.5338    prepare 0.1586    bound 4.2855    transfer 0.0257    finalize 0.0355    
all_split False
======================Cut inference begins======================
max lb tensor(0.00376630) min lb tensor(-0.02339232)
Number of Verified Splits: 234 of 1214
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 66.
#cuts 1-3: 9
#cuts 4-6: 51
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.07129073143005371 
BICCOS Cumulative time: 0.6566905975341797
Preprocessing time: 0.03633737564086914 Inference time: 0.02519392967224121 Add cuts time: 0.0073468685150146484 Cut analysis time: 0.002412557601928711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02339 (14), -0.02251 (14), -0.02197 (14), -0.02196 (14), -0.02195 (14), -0.02185 (14), -0.02137 (14), -0.02121 (14), -0.02115 (14), -0.02112 (14), -0.02111 (14), -0.02072 (14), -0.02061 (14), -0.02042 (14), -0.02001 (14), -0.02000 (14), -0.01994 (14), -0.01970 (14), -0.01961 (14), -0.01957 (14), 
Length of domains: 980
Time: pickout 0.0078    decision 0.0434    set_bounds 0.0507    solve 0.2168    add 0.0048    
Accumulated time: pickout 0.0300    decision 0.7827    set_bounds 0.2511    solve 4.3134    add 0.5198    
Current (lb-rhs): -0.023392319679260254
2898 domains visited
Cumulative time: 6.816631555557251

BaB round 9
batch: 980
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.022630810737609863
10 lb beta sum: 0.009078718721866608, worst -0.022628068923950195
Time: prepare 0.0484    bound 0.2231    transfer 0.0078    finalize 0.0107    func 0.3028    
Accumulated time: func 4.8367    prepare 0.2072    bound 4.5087    transfer 0.0335    finalize 0.0462    
all_split False
======================Cut inference begins======================
max lb tensor(0.00473177) min lb tensor(-0.02262557)
Number of Verified Splits: 405 of 1960
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 84.
#cuts 1-3: 10
#cuts 4-6: 63
#cuts 7-9: 11
#cuts >= 20: 0
BICCOS time: 0.12386274337768555 
BICCOS Cumulative time: 0.7805533409118652
Preprocessing time: 0.06252384185791016 Inference time: 0.04490089416503906 Add cuts time: 0.01318669319152832 Cut analysis time: 0.003251314163208008
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02263 (15), -0.02175 (15), -0.02117 (15), -0.02111 (15), -0.02109 (15), -0.02107 (15), -0.02061 (15), -0.02059 (15), -0.02042 (15), -0.02030 (15), -0.02025 (15), -0.01997 (15), -0.01974 (15), -0.01973 (15), -0.01952 (15), -0.01952 (15), -0.01948 (15), -0.01944 (15), -0.01919 (15), -0.01918 (15), 
Length of domains: 1555
Time: pickout 0.0173    decision 0.2084    set_bounds 0.0815    solve 0.3038    add 0.0222    
Accumulated time: pickout 0.0474    decision 0.9911    set_bounds 0.3326    solve 4.6171    add 0.5419    
Current (lb-rhs): -0.02262556552886963
4453 domains visited
Cumulative time: 7.5784642696380615

BaB round 10
batch: 1555
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1891] [/input, 1891] [/input, 1891] [/input, 1941] [/input, 1891] [/input, 1891] [/input, 1891] [/input, 1891] [/input, 1954] [/input, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.022216320037841797
10 lb beta sum: 0.007163398899137974, worst -0.022216200828552246
Time: prepare 0.0779    bound 0.3141    transfer 0.0147    finalize 0.0182    func 0.4453    
Accumulated time: func 5.2819    prepare 0.2854    bound 4.8228    transfer 0.0482    finalize 0.0644    
all_split False
======================Cut inference begins======================
max lb tensor(0.00359129) min lb tensor(-0.02221537)
Number of Verified Splits: 548 of 3110
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 120.
#cuts 1-3: 11
#cuts 4-6: 93
#cuts 7-9: 16
#cuts >= 20: 0
BICCOS time: 0.19182634353637695 
BICCOS Cumulative time: 0.9723796844482422
Preprocessing time: 0.0960538387298584 Inference time: 0.07003188133239746 Add cuts time: 0.02106618881225586 Cut analysis time: 0.004674434661865234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02222 (16), -0.02134 (16), -0.02075 (16), -0.02066 (16), -0.02062 (16), -0.02036 (16), -0.02027 (16), -0.02023 (16), -0.02017 (16), -0.01984 (16), -0.01978 (16), -0.01968 (16), -0.01958 (16), -0.01958 (16), -0.01952 (16), -0.01932 (16), -0.01924 (16), -0.01922 (16), -0.01896 (16), -0.01893 (16), 
Length of domains: 2562
Time: pickout 0.0219    decision 0.0935    set_bounds 0.1319    solve 0.4462    add 0.0737    
Accumulated time: pickout 0.0693    decision 1.0846    set_bounds 0.4645    solve 5.0633    add 0.6157    
Current (lb-rhs): -0.02221536636352539
7015 domains visited
Cumulative time: 8.550036430358887

BaB round 11
batch: 2562
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1977] [/input, 1977] [/input, 1977] [/input, 1977] [/input-8, 802] [/input, 1912] [/input-8, 802] [/input, 1977] [/input-8, 1893] [/input-8, 1893] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.020705699920654297
10 lb beta sum: 0.005245530046522617, worst -0.02069699764251709
Time: prepare 0.1365    bound 0.4791    transfer 0.0246    finalize 0.0301    func 0.7039    
Accumulated time: func 5.9859    prepare 0.4223    bound 5.3019    transfer 0.0728    finalize 0.0945    
all_split False
======================Cut inference begins======================
max lb tensor(0.22048992) min lb tensor(-0.02069426)
Number of Verified Splits: 936 of 5124
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 151.
#cuts 1-3: 15
#cuts 4-6: 99
#cuts 7-9: 36
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.3299121856689453 
BICCOS Cumulative time: 1.3022918701171875
Preprocessing time: 0.16228270530700684 Inference time: 0.12500739097595215 Add cuts time: 0.03636050224304199 Cut analysis time: 0.006261587142944336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02069 (17), -0.02061 (17), -0.01983 (17), -0.01974 (17), -0.01949 (17), -0.01941 (17), -0.01924 (17), -0.01920 (17), -0.01916 (17), -0.01900 (17), -0.01899 (17), -0.01892 (17), -0.01874 (17), -0.01873 (17), -0.01864 (17), -0.01864 (17), -0.01864 (17), -0.01856 (17), -0.01853 (17), -0.01847 (17), 
Length of domains: 4188
Time: pickout 0.0459    decision 0.3179    set_bounds 0.2234    solve 0.7048    add 0.0605    
Accumulated time: pickout 0.1151    decision 1.4025    set_bounds 0.6879    solve 5.7681    add 0.6762    
Current (lb-rhs): -0.020694255828857422
11203 domains visited
Cumulative time: 10.246638298034668

BaB round 12
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1309] [/input, 1978] [/input-8, 1309] [/input, 1978] [/input, 1977] [/input, 1941] [/input, 1978] [/input-8, 802] [/input, 1912] [/input-8, 802] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.019867897033691406
10 lb beta sum: 0.010983999818563461, worst -0.021158676594495773
Time: prepare 0.2201    bound 0.7408    transfer 0.0392    finalize 0.0478    func 1.1035    
Accumulated time: func 7.0894    prepare 0.6426    bound 6.0427    transfer 0.1120    finalize 0.1423    
all_split False
======================Cut inference begins======================
max lb tensor(0.38438928) min lb tensor(-0.01985383)
Number of Verified Splits: 2072 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 96.
#cuts 1-3: 21
#cuts 4-6: 54
#cuts 7-9: 21
#cuts >= 20: 0
BICCOS time: 0.7703413963317871 
BICCOS Cumulative time: 2.0726332664489746
Preprocessing time: 0.26454687118530273 Inference time: 0.45333147048950195 Add cuts time: 0.0485386848449707 Cut analysis time: 0.003924369812011719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01985 (18), -0.01978 (18), -0.01902 (18), -0.01896 (18), -0.01894 (18), -0.01886 (18), -0.01878 (18), -0.01869 (18), -0.01865 (18), -0.01842 (18), -0.01841 (18), -0.01833 (18), -0.01825 (18), -0.01816 (18), -0.01815 (18), -0.01813 (18), -0.01808 (18), -0.01807 (18), -0.01785 (18), -0.01784 (18), 
Length of domains: 6212
Time: pickout 0.0587    decision 0.3945    set_bounds 0.3719    solve 1.1052    add 0.0217    
Accumulated time: pickout 0.1739    decision 1.7969    set_bounds 1.0597    solve 6.8734    add 0.6979    
Current (lb-rhs): -0.019853830337524414
17323 domains visited
current_vram/total_varm: 11.2GB/99.9GB, batch_size increase to 8192
Cumulative time: 13.0012366771698

BaB round 13
batch: 6212
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1891] [/input-8, 802] [/input-8, 802] [/input-8, 1893] [/input-8, 802] [/input, 1977] [/input, 1977] [/input, 1977] [/input, 1977] [/input-8, 802] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01931619644165039
10 lb beta sum: 0.14304327964782715, worst -0.022675037384033203
Time: prepare 0.3315    bound 1.0422    transfer 0.0620    finalize 0.2822    func 1.7993    
Accumulated time: func 8.8888    prepare 0.9768    bound 7.0849    transfer 0.1740    finalize 0.4245    
all_split False
======================Cut inference begins======================
max lb tensor(0.40419197) min lb tensor(-0.01931369)
Number of Verified Splits: 5086 of 12424
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 21
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 1.3136541843414307 
BICCOS Cumulative time: 3.3862874507904053
Preprocessing time: 0.3721299171447754 Inference time: 0.8599720001220703 Add cuts time: 0.08072400093078613 Cut analysis time: 0.0008282661437988281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01931 (19), -0.01923 (19), -0.01848 (19), -0.01839 (19), -0.01838 (19), -0.01833 (19), -0.01821 (19), -0.01811 (19), -0.01788 (19), -0.01785 (19), -0.01781 (19), -0.01779 (19), -0.01777 (19), -0.01762 (19), -0.01758 (19), -0.01755 (19), -0.01754 (19), -0.01752 (19), -0.01739 (19), -0.01731 (19), 
Length of domains: 7338
Time: pickout 0.1195    decision 0.3514    set_bounds 0.5511    solve 1.8020    add 0.0263    
Accumulated time: pickout 0.2933    decision 2.1484    set_bounds 1.6109    solve 8.6754    add 0.7242    
Current (lb-rhs): -0.019313693046569824
24661 domains visited
Cumulative time: 17.218202114105225

BaB round 14
batch: 7338
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1309] [/input-8, 1309] [/input, 1978] [/input-8, 1309] [/input, 2712] [/input, 421] [/input, 421] [/input, 421] [/input-8, 1309] [/input, 1978] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018985509872436523
10 lb beta sum: 1.0181224346160889, worst -0.01960347220301628
Time: prepare 0.3911    bound 1.1549    transfer 0.0739    finalize 0.0838    func 1.8021    
Accumulated time: func 10.6909    prepare 1.3682    bound 8.2398    transfer 0.2479    finalize 0.5083    
all_split False
======================Cut inference begins======================
max lb tensor(1.18209732) min lb tensor(-0.01788354)
Number of Verified Splits: 13589 of 14676
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 2.602933168411255 
BICCOS Cumulative time: 5.98922061920166
Preprocessing time: 0.46494078636169434 Inference time: 2.0115981101989746 Add cuts time: 0.1259927749633789 Cut analysis time: 0.00040149688720703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01788 (20), -0.01781 (20), -0.01661 (20), -0.01656 (20), -0.01631 (20), -0.01610 (20), -0.01595 (20), -0.01588 (20), -0.01586 (20), -0.01585 (20), -0.01583 (20), -0.01582 (20), -0.01580 (20), -0.01574 (20), -0.01567 (20), -0.01554 (20), -0.01549 (20), -0.01534 (20), -0.01530 (20), -0.01529 (20), 
Length of domains: 1087
Time: pickout 0.1476    decision 0.4028    set_bounds 0.8819    solve 1.8052    add 0.0050    
Accumulated time: pickout 0.4409    decision 2.5512    set_bounds 2.4928    solve 10.4806    add 0.7292    
Current (lb-rhs): -0.0178835391998291
25748 domains visited
Cumulative time: 23.189534902572632

BaB round 15
batch: 1087
splitting decisions: 
split level 0: [/input, 1891] [/input, 1979] [/input, 1912] [/input, 1979] [/input, 2441] [/input, 1912] [/input, 2441] [/input, 1979] [/input, 1912] [/input, 1979] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01804327964782715

all verified at 1th iter
Time: prepare 0.0566    bound 0.0189    transfer 0.0089    finalize 0.0124    func 0.1111    
Accumulated time: func 10.8020    prepare 1.4250    bound 8.2587    transfer 0.2568    finalize 0.5207    
all_split False
======================Cut inference begins======================
max lb tensor(0.05330650) min lb tensor(3.29017639e-05)
Number of Verified Splits: 2174 of 2174
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.06823539733886719 
BICCOS Cumulative time: 6.057456016540527
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0194    decision 0.0681    set_bounds 0.0952    solve 0.1115    add 0.0006    
Accumulated time: pickout 0.4604    decision 2.6192    set_bounds 2.5879    solve 10.5921    add 0.7298    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
25748 domains visited
Cumulative time: 23.566907167434692


Properties batch 6, size 1
Remaining timeout: 174.90164494514465
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 174.90152525901794
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 174.9015007019043
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 25.0987 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.67231560, -12.31690121,  -9.13868904,  -9.91203594, -10.08119774,
         -10.03050518, -10.11687660,  -9.52802277, -13.05829144, -11.58372593]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [415]; unstable size 415; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 415] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 415] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 415] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 142] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.06250882,  1.38609862, -1.36709845, -0.49393940, -0.48505697,
         -0.38832188, -1.14975965,  2.17636347,  0.71444821]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.67231560, -12.31690121,  -9.13868904,  -9.91203594, -10.08119774,
         -10.03050518, -10.11687660,  -9.52802277, -13.05829144, -11.58372593]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.67231464, -12.31690121,  -9.13868713,  -9.91203594, -10.08119774,
          -10.03050327, -10.11687565,  -9.52802277, -13.05829048, -11.58372498],
         [ -9.67231464, -12.31690121,  -9.13868713,  -9.91203594, -10.08119774,
          -10.03050327, -10.11687565,  -9.52802277, -13.05829048, -11.58372498]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44456100, -0.97818851, -0.20483971, -0.03567791, -0.08637238,
          -0.58885288]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0844 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22662783, -5.64782429, -2.60211635, -3.16177058, -3.14393139,
         -3.25724936, -3.03231645, -2.89354324, -3.41767120, -4.93730450]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [530]; unstable size 530; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 530] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 530] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 530] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 159] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.37045449,  1.62803984, -1.37615514, -0.83468574, -0.86788654,
         -0.74519169, -0.99820888, -1.20427883,  0.93063688]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.22662783, -5.64782429, -2.60211635, -3.16177058, -3.14393139,
         -3.25724936, -3.03231645, -2.89354324, -3.41767120, -4.93730450]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.22662783, -5.64782429, -2.60211611, -3.16177034, -3.14393115,
          -3.25724936, -3.03231645, -2.89354324, -3.41767168, -4.93730497],
         [-4.22662783, -5.64782429, -2.60211611, -3.16177034, -3.14393115,
          -3.25724936, -3.03231645, -2.89354324, -3.41767168, -4.93730497]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.81555557, -0.25590134, -0.27374053, -0.16042233, -0.38535523,
          -0.52412844]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0621 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.00991821, -13.35237980,  -9.67140388, -10.73055935,  -9.20372391,
         -10.78434086,  -8.77386570, -10.62020874, -14.29128361, -13.35895061]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [545]; unstable size 545; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 545] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 545] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 545] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 249] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.56180000, 3.63847327, 0.57008612, 1.61158311, 0.13146019, 1.65996587,
         1.35068643, 4.52710772, 3.71646404]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0457 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
         -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [520]; unstable size 520; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 520] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 520] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 520] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 171] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.49318433,  3.10641050,  5.37454414,  3.09507990,  5.62251949,
          5.56271124,  4.11786795, -0.92750764,  2.68375874]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
         -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
          -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.61637211]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666e+00,  1.67777801e+00,  1.32857168e+00,  ...,
             2.80952454e-01,  1.06349289e-01, -5.23808524e-02],
           [ 9.79365110e-01,  1.39206374e+00,  1.24920666e+00,  ...,
            -1.95237994e-01, -1.79364979e-01, -1.31745934e-01],
           [ 1.28095269e+00,  1.39206374e+00,  9.15873051e-01,  ...,
            -2.06348225e-02,  1.11112073e-02,  2.17460394e-01],
           ...,
           [-4.96825397e-01, -4.80952382e-01, -4.33333218e-01,  ...,
            -4.80952382e-01, -4.96825397e-01, -4.96825397e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.80952382e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.96825397e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01]],

          [[ 1.91626441e+00,  2.06119204e+00,  1.70692456e+00,  ...,
             1.27214205e+00,  1.15942061e+00,  1.06280196e+00],
           [ 1.72302771e+00,  1.88405824e+00,  1.83574903e+00,  ...,
             1.07890511e+00,  1.06280196e+00,  1.04669893e+00],
           [ 1.94847047e+00,  1.91626441e+00,  1.69082153e+00,  ...,
             1.19162667e+00,  1.20772982e+00,  1.30434811e+00],
           ...,
           [-3.22059989e-02, -4.83090580e-02, -3.22059989e-02,  ...,
            -6.44121096e-02, -8.05151686e-02, -8.05151686e-02],
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -3.22059989e-02],
           [-6.44121096e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -1.61029361e-02]],

          [[ 2.10045004e+00,  2.08545780e+00,  1.81559265e+00,  ...,
             1.84557760e+00,  1.80060017e+00,  1.74063015e+00],
           [ 1.96551764e+00,  1.92054021e+00,  1.96551764e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.81559265e+00],
           [ 2.08545780e+00,  1.96551764e+00,  1.96551764e+00,  ...,
             1.95052516e+00,  1.95052516e+00,  1.96551764e+00],
           ...,
           [ 2.11394474e-01,  1.21439442e-01,  1.81409463e-01,  ...,
             2.11394474e-01,  2.11394474e-01,  2.11394474e-01],
           [ 2.26386964e-01,  1.51424453e-01,  1.81409463e-01,  ...,
             2.26386964e-01,  2.26386964e-01,  2.41379470e-01],
           [ 1.81409463e-01,  1.66416958e-01,  1.96401969e-01,  ...,
             1.96401969e-01,  2.11394474e-01,  2.26386964e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0809 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
         -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [542]; unstable size 542; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 542] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 542] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 542] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 201] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.90671396e+00,  3.71085167e+00,  5.54727316e-02, -9.76614654e-04,
          3.31381559e-01,  5.89845061e-01,  4.14883196e-01,  3.71298981e+00,
          2.61608958e+00]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
         -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.32it/s]100%|██████████| 1/1 [00:00<00:00,  8.31it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.24166107, -8.22013760, -4.23363972, -3.89632154, -4.55042458,
          -3.89160490, -4.79965591, -4.76971054, -8.16572952, -7.05139542]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00471663]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1233 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.498355865478516
alpha/beta optimization time: 1.1970887184143066
initial alpha-crown bounds: tensor([[ 2.93031120e+00,  3.74855709e+00,  6.38687611e-02, -3.64609063e-04,
          3.41101885e-01,  5.96957684e-01,  4.24151480e-01,  3.74316168e+00,
          2.65061092e+00]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0003646090626716614
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6351761817932
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.63513827323914
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.63511323928833
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.63509225845337
Verifying property 3 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.00036461]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
        -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00036461]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 542
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 197
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 745
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010991096496582031
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.00036457180976867676
10 lb beta sum: 0.0, worst -0.0003648921847343445
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    func 0.0539    
Accumulated time: func 0.0539    prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 47] 
split level 1: [/input-12, 10] 
split level 2: [/input-12, 62] 
split level 3: [/input-8, 1192] 
split level 4: [/input-12, 33] 
split level 5: [/input-8, 174] 
split level 6: [/input-8, 1184] 
split level 7: [/input-8, 1300] 
split level 8: [/input-8, 2018] 
split level 9: [/input, 1683] 
split level 10: [/input-8, 2042] 
split level 11: [/input, 405] 
split level 12: [/input-8, 2047] 
split level 13: [/input-8, 1882] 
split level 14: [/input, 2742] 
split level 15: [/input-8, 1075] 
split level 16: [/input-8, 1592] 
split level 17: [/input-8, 2043] 
split level 18: [/input-8, 25] 
split level 19: [/input-8, 1567] 
split level 20: [/input-8, 814] 
split level 21: [/input-8, 1596] 
split level 22: [/input-8, 1884] 
split level 23: [/input-8, 2044] 
split level 24: [/input, 2858] 
split level 25: [/input-8, 1538] 
split level 26: [/input, 2873] 
split level 27: [/input, 3324] 
split level 28: [/input, 3171] 
split level 29: [/input-8, 806] 
split level 30: [/input, 2881] 
split level 31: [/input, 3088] 
split level 32: [/input, 3104] 
split level 33: [/input, 2872] 
split level 34: [/input, 2844] 
split level 35: [/input, 2848] 
split level 36: [/input-12, 61] 
split level 37: [/input-8, 1433] 
split level 38: [/input-8, 1438] 
split level 39: [/input-8, 1339] 
split level 40: [/input-8, 1427] 
split level 41: [/input-8, 1330] 
split level 42: [/input-8, 296] 
split level 43: [/input-8, 1329] 
split level 44: [/input-8, 1060] 
split level 45: [/input-8, 169] 
split level 46: [/input-8, 1324] 
split level 47: [/input-8, 140] 
split level 48: [/input-8, 177] 
split level 49: [/input-8, 892] 
split level 50: [/input-8, 1146] 
split level 51: [/input-8, 1603] 
split level 52: [/input-8, 1323] 
split level 53: [/input-8, 1428] 
split level 54: [/input-8, 1313] 
split level 55: [/input-8, 162] 
split level 56: [/input-8, 2012] 
split level 57: [/input, 1586] 
split level 58: [/input-8, 1824] 
split level 59: [/input, 1741] 
split level 60: [/input-8, 1331] 
split level 61: [/input-8, 1613] 
split level 62: [/input-8, 1917] 
split level 63: [/input-8, 882] 
split level 64: [/input-8, 1425] 
split level 65: [/input-8, 1851] 
split level 66: [/input-8, 1857] 
split level 67: [/input, 1664] 
split level 68: [/input-8, 1895] 
split level 69: [/input-8, 1302] 
split level 70: [/input-8, 1138] 
split level 71: [/input-8, 1801] 
split level 72: [/input, 2987] 
split level 73: [/input, 1258] 
split level 74: [/input-8, 298] 
split level 75: [/input-8, 1623] 
split level 76: [/input-8, 1145] 
split level 77: [/input, 2646] 
split level 78: [/input-8, 1846] 
split level 79: [/input-8, 1442] 
split level 80: [/input-8, 1420] 
split level 81: [/input-8, 117] 
split level 82: [/input-8, 1332] 
split level 83: [/input-8, 12] 
split level 84: [/input-8, 19] 
split level 85: [/input-8, 21] 
split level 86: [/input, 19] 
split level 87: [/input-8, 32] 
split level 88: [/input-8, 73] 
split level 89: [/input-12, 4] 
split level 90: [/input-8, 77] 
split level 91: [/input-8, 147] 
split level 92: [/input-8, 171] 
split level 93: [/input-8, 262] 
split level 94: [/input, 92] 
split level 95: [/input-8, 320] 
split level 96: [/input-8, 327] 
split level 97: [/input, 98] 
split level 98: [/input, 99] 
split level 99: [/input-8, 328] 
split level 100: [/input, 134] 
split level 101: [/input, 141] 
split level 102: [/input, 157] 
split level 103: [/input-8, 332] 
split level 104: [/input, 185] 
split level 105: [/input, 275] 
split level 106: [/input, 283] 
split level 107: [/input, 289] 
split level 108: [/input-8, 334] 
split level 109: [/input, 290] 
split level 110: [/input-8, 353] 
split level 111: [/input, 297] 
split level 112: [/input-8, 354] 
split level 113: [/input-8, 357] 
split level 114: [/input, 305] 
split level 115: [/input, 320] 
split level 116: [/input-8, 363] 
split level 117: [/input-8, 365] 
split level 118: [/input, 321] 
split level 119: [/input-8, 366] 
split level 120: [/input-8, 372] 
split level 121: [/input, 323] 
split level 122: [/input-8, 373] 
split level 123: [/input, 346] 
split level 124: [/input, 355] 
split level 125: [/input, 356] 
split level 126: [/input-8, 374] 
split level 127: [/input, 366] 
split level 128: [/input, 378] 
split level 129: [/input-8, 380] 
split level 130: [/input, 385] 
split level 131: [/input-8, 525] 
split level 132: [/input-8, 530] 
split level 133: [/input-8, 533] 
split level 134: [/input-8, 538] 
split level 135: [/input-8, 539] 
split level 136: [/input, 402] 
split level 137: [/input-8, 543] 
split level 138: [/input-8, 563] 
split level 139: [/input-8, 709] 
split level 140: [/input-8, 713] 
split level 141: [/input, 410] 
split level 142: [/input, 420] 
split level 143: [/input-8, 715] 
split level 144: [/input-8, 719] 
split level 145: [/input, 427] 
split level 146: [/input-8, 725] 
split level 147: [/input, 432] 
split level 148: [/input-8, 734] 
split level 149: [/input, 433] 
split level 150: [/input-8, 735] 
split level 151: [/input, 452] 
split level 152: [/input, 460] 
split level 153: [/input, 461] 
split level 154: [/input, 463] 
split level 155: [/input-8, 737] 
split level 156: [/input, 475] 
split level 157: [/input, 478] 
split level 158: [/input, 482] 
split level 159: [/input-8, 744] 
split level 160: [/input-8, 747] 
split level 161: [/input, 492] 
split level 162: [/input-8, 789] 
split level 163: [/input-8, 790] 
split level 164: [/input-8, 834] 
split level 165: [/input-8, 847] 
split level 166: [/input-8, 875] 
split level 167: [/input, 494] 
split level 168: [/input-8, 904] 
split level 169: [/input, 522] 
split level 170: [/input-8, 905] 
split level 171: [/input-8, 908] 
split level 172: [/input-8, 937] 
split level 173: [/input-8, 938] 
split level 174: [/input-8, 939] 
split level 175: [/input-8, 941] 
split level 176: [/input, 542] 
split level 177: [/input-8, 945] 
split level 178: [/input, 549] 
split level 179: [/input, 568] 
split level 180: [/input-8, 950] 
split level 181: [/input, 577] 
split level 182: [/input-8, 953] 
split level 183: [/input, 622] 
split level 184: [/input-8, 972] 
split level 185: [/input, 625] 
split level 186: [/input, 660] 
split level 187: [/input-8, 985] 
split level 188: [/input, 663] 
split level 189: [/input, 670] 
split level 190: [/input, 688] 
split level 191: [/input-8, 1005] 
split level 192: [/input-8, 1112] 
split level 193: [/input, 700] 
split level 194: [/input, 705] 
split level 195: [/input, 707] 
split level 196: [/input, 711] 
split level 197: [/input-8, 1128] 
split level 198: [/input, 719] 
split level 199: [/input-8, 1137] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.004057347774505615
10 lb beta sum: 0.0, worst -0.010704994201660156
Time: prepare 0.0114    bound 0.0962    transfer 0.0038    finalize 0.0026    func 0.1166    
Accumulated time: func 0.1705    prepare 0.0216    bound 0.1497    transfer 0.0039    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.00610414) min lb tensor(-0.00036457)
Number of Verified Splits: 41 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011858224868774414 
BICCOS Cumulative time: 0.011858224868774414
Preprocessing time: 0.009711027145385742 Inference time: 0.0015366077423095703 Add cuts time: 0.0004456043243408203 Cut analysis time: 0.00016498565673828125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5209    set_bounds 0.0085    solve 0.1167    add 0.0101    
Accumulated time: pickout 0.0003    decision 0.5209    set_bounds 0.0085    solve 0.1167    add 0.0101    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([47]), tensor([-1.]), tensor([0]), tensor([8.73231487e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([47]), tensor([1.]), tensor([0]), tensor([1.86198930e-13]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.000870145857334137

all verified at 0th iter
Time: prepare 0.0003    bound 0.0041    transfer 0.0001    finalize 0.0001    func 0.0046    
Accumulated time: func 0.1752    prepare 0.0219    bound 0.1537    transfer 0.0040    finalize 0.0028    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.70893239974976
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.70887351036072
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.70885157585144
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.70883178710938
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.70881271362305
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.2912 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.68161011, -4.31493664, -3.29749870, -3.86696267, -4.55905437,
         -4.00861025, -3.69984698, -5.91490364, -4.24547005, -4.16366720]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 403] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 403] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 182] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.68392754, -0.33067036, -0.84067464,  0.38051927,  0.12290449,
         -0.46707952,  1.54917383, -0.29823148, -0.40686083]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.68161011, -4.31493664, -3.29749870, -3.86696267, -4.55905437,
         -4.00861025, -3.69984698, -5.91490364, -4.24547005, -4.16366720]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.68161011, -4.31493664, -3.29749966, -3.86696267, -4.55905437,
          -4.00861073, -3.69984746, -5.91490364, -4.24547005, -4.16366720],
         [-3.68161011, -4.31493664, -3.29749966, -3.86696267, -4.55905437,
          -4.00861073, -3.69984746, -5.91490364, -4.24547005, -4.16366720]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.18535256,  0.44797397, -0.56946301, -0.16711521,  0.37850738,
           0.29670453]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0767 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.26414204, -10.67618656,  -7.14083195,  -7.60558414,  -6.94402504,
          -7.67818594,  -6.53135300,  -8.68149567,  -9.88610840, -10.70594692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 538] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 538] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 195] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.35335898, 3.54954529, 0.39658886, 0.85085702, 0.24288130, 0.91747469,
         1.88348365, 2.84460473, 3.62032914]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0420 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.17061424, -20.50812531, -23.04294586, -24.22522926, -25.19203758,
         -24.61592484, -24.87892914, -26.22239113, -21.59410477, -22.00157738]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 89, 1, 511] with unstable size 88 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 511] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [88]; unstable size 88; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 88] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 88] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.22561836, 1.90276670, 3.01938915, 3.98550987, 3.39302921, 3.71364927,
         4.93401432, 0.62228298, 1.22355115]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0602 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.76015854, -4.19035864, -4.85114622, -5.85322762, -4.73305225,
         -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916135]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [653]; unstable size 653; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 223, 1, 653] with unstable size 222 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 653] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 653] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 222] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30759096,  0.50324726,  1.35600066,  0.23959875,  1.49378967,
          0.62164283,  0.94105041, -0.94007611, -0.65508509]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.76015854, -4.19035864, -4.85114622, -5.85322762, -4.73305225,
         -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916135]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.76015854, -4.19035912, -4.85114622, -5.85322952, -4.73305321,
          -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916230],
         [-3.76015854, -4.19035912, -4.85114622, -5.85322952, -4.73305321,
          -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916230]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.43020058, -0.47531414,  0.12900376]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0575 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.28970528, -10.67957401, -10.33640766, -13.22579098, -10.36513615,
         -13.49066448, -14.18056297, -12.48040295,  -5.26089621, -10.53180790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [564]; unstable size 564; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 123, 1, 564] with unstable size 122 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 564] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 564] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [122]; unstable size 122; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 122] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 122] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.76197678, 4.99777508, 4.48139000, 7.34546137, 4.49978971, 7.59466982,
         8.32230759, 6.48773861, 4.83865213]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0523 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.66796303, -10.52346611,  -3.42282248,  -5.06743813,  -4.46258068,
          -5.11582899,  -5.54765797,  -6.57940102,  -9.65262794, -10.61189556]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 133, 1, 403] with unstable size 132 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [132]; unstable size 132; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 132] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.52602589,  4.36306667, -2.47155905, -0.77068269, -1.39496136,
         -0.72536492,  0.64461339,  3.49572921,  4.39420128]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.66796303, -10.52346611,  -3.42282248,  -5.06743813,  -4.46258068,
          -5.11582899,  -5.54765797,  -6.57940102,  -9.65262794, -10.61189556]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.66796207, -10.52346516,  -3.42282248,  -5.06743717,  -4.46258068,
           -5.11582804,  -5.54765701,  -6.57940102,  -9.65262604, -10.61189556],
         [ -7.66796207, -10.52346516,  -3.42282248,  -5.06743717,  -4.46258068,
           -5.11582804,  -5.54765701,  -6.57940102,  -9.65262604, -10.61189556]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-2.12483454, -0.48021984, -1.08507633, -0.43182898]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0484 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
         -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [728]; unstable size 728; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 728] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 728] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 728] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 186] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.92469168,  6.41981840,  1.23279619, -0.06353919,  1.31932342,
          0.44406343,  2.49051285,  4.72230101,  5.96450996]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
         -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.08it/s]100%|██████████| 1/1 [00:00<00:00,  9.07it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.11066437, -8.78367043, -1.73745489, -3.23712897, -1.76644242,
          -3.33225727, -2.47211003, -4.53414059, -7.01842499, -8.31025410]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02898753]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1128 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.599342346191406
alpha/beta optimization time: 1.182462215423584
initial alpha-crown bounds: tensor([[ 2.93429899,  6.45055389,  1.23612118, -0.05334766,  1.32260966,
          0.45382106,  2.50835967,  4.75239944,  5.99452400]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.05334766209125519
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.63552522659302
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.63548684120178
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.63546180725098
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.63544082641602
Verifying property 3 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05334766]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
        -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05334766]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 728
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 184
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 916
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010418891906738281
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.053347110748291016
10 lb beta sum: 0.0, worst -0.05334777384996414
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0542    transfer 0.0001    finalize 0.0001    func 0.0547    
Accumulated time: func 0.0547    prepare 0.0002    bound 0.0542    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] 
split level 1: [/input-8, 545] 
split level 2: [/input-8, 541] 
split level 3: [/input-8, 544] 
split level 4: [/input-8, 1452] 
split level 5: [/input-8, 941] 
split level 6: [/input-8, 1465] 
split level 7: [/input, 648] 
split level 8: [/input-8, 1470] 
split level 9: [/input-8, 559] 
split level 10: [/input-8, 530] 
split level 11: [/input-8, 534] 
split level 12: [/input-8, 1258] 
split level 13: [/input, 649] 
split level 14: [/input-8, 152] 
split level 15: [/input-8, 306] 
split level 16: [/input-8, 950] 
split level 17: [/input-8, 1945] 
split level 18: [/input-8, 1217] 
split level 19: [/input-8, 531] 
split level 20: [/input-8, 1266] 
split level 21: [/input-8, 900] 
split level 22: [/input-8, 1261] 
split level 23: [/input-8, 1265] 
split level 24: [/input-8, 310] 
split level 25: [/input-8, 540] 
split level 26: [/input-8, 931] 
split level 27: [/input-8, 924] 
split level 28: [/input-8, 160] 
split level 29: [/input-8, 2044] 
split level 30: [/input-8, 1242] 
split level 31: [/input-8, 1175] 
split level 32: [/input-8, 309] 
split level 33: [/input-8, 1199] 
split level 34: [/input-8, 1250] 
split level 35: [/input-8, 68] 
split level 36: [/input, 1208] 
split level 37: [/input, 2437] 
split level 38: [/input, 1081] 
split level 39: [/input-8, 908] 
split level 40: [/input-8, 1269] 
split level 41: [/input-8, 313] 
split level 42: [/input, 1225] 
split level 43: [/input-8, 1417] 
split level 44: [/input-8, 1227] 
split level 45: [/input, 3667] 
split level 46: [/input-8, 375] 
split level 47: [/input-8, 1952] 
split level 48: [/input, 1127] 
split level 49: [/input, 2406] 
split level 50: [/input-8, 379] 
split level 51: [/input-8, 866] 
split level 52: [/input-8, 1241] 
split level 53: [/input, 2421] 
split level 54: [/input, 1065] 
split level 55: [/input, 3160] 
split level 56: [/input-8, 1953] 
split level 57: [/input-8, 899] 
split level 58: [/input, 1924] 
split level 59: [/input, 1129] 
split level 60: [/input, 1891] 
split level 61: [/input, 906] 
split level 62: [/input, 661] 
split level 63: [/input, 1859] 
split level 64: [/input, 1043] 
split level 65: [/input-8, 69] 
split level 66: [/input, 2456] 
split level 67: [/input, 1874] 
split level 68: [/input, 968] 
split level 69: [/input, 2440] 
split level 70: [/input, 3192] 
split level 71: [/input, 586] 
split level 72: [/input, 570] 
split level 73: [/input, 900] 
split level 74: [/input, 3146] 
split level 75: [/input, 935] 
split level 76: [/input-8, 1622] 
split level 77: [/input-8, 850] 
split level 78: [/input, 1845] 
split level 79: [/input, 788] 
split level 80: [/input-8, 1614] 
split level 81: [/input, 1139] 
split level 82: [/input, 3722] 
split level 83: [/input, 1882] 
split level 84: [/input, 1155] 
split level 85: [/input, 1827] 
split level 86: [/input-8, 915] 
split level 87: [/input, 1923] 
split level 88: [/input, 1063] 
split level 89: [/input, 1875] 
split level 90: [/input-8, 1630] 
split level 91: [/input, 1931] 
split level 92: [/input, 940] 
split level 93: [/input, 1873] 
split level 94: [/input, 873] 
split level 95: [/input-8, 1602] 
split level 96: [/input, 3139] 
split level 97: [/input, 2625] 
split level 98: [/input, 1907] 
split level 99: [/input, 3720] 
split level 100: [/input-8, 749] 
split level 101: [/input, 1858] 
split level 102: [/input-8, 1625] 
split level 103: [/input-8, 1597] 
split level 104: [/input, 3203] 
split level 105: [/input, 1890] 
split level 106: [/input, 1881] 
split level 107: [/input, 1163] 
split level 108: [/input, 889] 
split level 109: [/input, 1897] 
split level 110: [/input, 1123] 
split level 111: [/input, 1058] 
split level 112: [/input, 1854] 
split level 113: [/input, 3201] 
split level 114: [/input, 3651] 
split level 115: [/input, 3996] 
split level 116: [/input, 932] 
split level 117: [/input, 3995] 
split level 118: [/input-8, 1639] 
split level 119: [/input, 1086] 
split level 120: [/input, 1866] 
split level 121: [/input, 3128] 
split level 122: [/input, 1906] 
split level 123: [/input-8, 1513] 
split level 124: [/input, 916] 
split level 125: [/input, 1822] 
split level 126: [/input, 1868] 
split level 127: [/input, 3303] 
split level 128: [/input-8, 1617] 
split level 129: [/input, 1898] 
split level 130: [/input, 1057] 
split level 131: [/input, 1869] 
split level 132: [/input, 1171] 
split level 133: [/input, 552] 
split level 134: [/input, 1844] 
split level 135: [/input, 573] 
split level 136: [/input, 3894] 
split level 137: [/input, 1818] 
split level 138: [/input, 1843] 
split level 139: [/input, 1049] 
split level 140: [/input, 2609] 
split level 141: [/input, 1085] 
split level 142: [/input, 1817] 
split level 143: [/input-8, 1608] 
split level 144: [/input, 1074] 
split level 145: [/input, 610] 
split level 146: [/input, 1825] 
split level 147: [/input, 1883] 
split level 148: [/input, 1853] 
split level 149: [/input, 1870] 
split level 150: [/input, 1842] 
split level 151: [/input, 1266] 
split level 152: [/input, 2611] 
split level 153: [/input, 1131] 
split level 154: [/input, 1899] 
split level 155: [/input, 2593] 
split level 156: [/input, 1885] 
split level 157: [/input, 1851] 
split level 158: [/input, 3300] 
split level 159: [/input, 3895] 
split level 160: [/input, 2342] 
split level 161: [/input, 1889] 
split level 162: [/input, 1837] 
split level 163: [/input, 974] 
split level 164: [/input, 1922] 
split level 165: [/input, 1811] 
split level 166: [/input, 1834] 
split level 167: [/input-8, 951] 
split level 168: [/input-8, 1942] 
split level 169: [/input, 2357] 
split level 170: [/input, 1101] 
split level 171: [/input, 1835] 
split level 172: [/input, 1095] 
split level 173: [/input, 1850] 
split level 174: [/input, 1933] 
split level 175: [/input, 2610] 
split level 176: [/input, 978] 
split level 177: [/input, 1905] 
split level 178: [/input, 1852] 
split level 179: [/input, 1836] 
split level 180: [/input, 1915] 
split level 181: [/input, 1089] 
split level 182: [/input, 1867] 
split level 183: [/input, 300] 
split level 184: [/input, 1857] 
split level 185: [/input, 3979] 
split level 186: [/input, 1955] 
split level 187: [/input, 1070] 
split level 188: [/input, 1820] 
split level 189: [/input, 1819] 
split level 190: [/input, 924] 
split level 191: [/input, 4011] 
split level 192: [/input, 594] 
split level 193: [/input, 3602] 
split level 194: [/input, 289] 
split level 195: [/input, 3988] 
split level 196: [/input, 595] 
split level 197: [/input, 1027] 
split level 198: [/input, 1921] 
split level 199: [/input, 3226] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05331100523471832
10 lb beta sum: 0.0, worst -0.05331164598464966
Time: prepare 0.0119    bound 0.1015    transfer 0.0015    finalize 0.0032    func 0.1210    
Accumulated time: func 0.1757    prepare 0.0223    bound 0.1558    transfer 0.0016    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03076947) min lb tensor(-0.05331101)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.01069021224975586 
BICCOS Cumulative time: 0.01069021224975586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05206 (1), -0.05199 (1), -0.05199 (1), -0.05198 (1), -0.05192 (1), -0.05191 (1), -0.05188 (1), -0.05188 (1), -0.05188 (1), -0.05179 (1), -0.05177 (1), -0.05168 (1), -0.05160 (1), -0.05153 (1), -0.05140 (1), -0.05132 (1), -0.05124 (1), -0.05123 (1), -0.05115 (1), -0.05114 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5190    set_bounds 0.0096    solve 0.1211    add 0.0723    
Accumulated time: pickout 0.0004    decision 0.5190    set_bounds 0.0096    solve 0.1211    add 0.0723    
Current (lb-rhs): -0.05206449329853058
50 domains visited
Cumulative time: 0.8034543991088867

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 541] [/input-8, 545] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 1: [/input-8, 1258] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 545] [/input-8, 545] [/input-8, 541] [/input-8, 541] [/input-8, 541] 
split level 2: [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] 
split level 3: [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05146133899688721
10 lb beta sum: 0.0, worst -0.05153633654117584
Time: prepare 0.0124    bound 0.0999    transfer 0.0007    finalize 0.0025    func 0.1182    
Accumulated time: func 0.2939    prepare 0.0350    bound 0.2556    transfer 0.0024    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01685605) min lb tensor(-0.05144456)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.012554168701171875 
BICCOS Cumulative time: 0.023244380950927734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02844 (2), -0.02837 (2), -0.02835 (2), -0.02834 (2), -0.02828 (2), -0.02824 (2), -0.02812 (2), -0.02802 (2), -0.02802 (2), -0.02791 (2), -0.02791 (2), -0.02790 (2), -0.02787 (2), -0.02787 (2), -0.02786 (2), -0.02774 (2), -0.02774 (2), -0.02747 (2), -0.02738 (2), -0.02719 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0198    set_bounds 0.0140    solve 0.1183    add 0.1117    
Accumulated time: pickout 0.0016    decision 0.5388    set_bounds 0.0236    solve 0.2394    add 0.1840    
Current (lb-rhs): -0.028439044952392578
100 domains visited
Cumulative time: 1.0813472270965576

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 545] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 1470] [/input-8, 1470] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 541] 
split level 1: [/input-8, 541] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1465] [/input-8, 1465] [/input-8, 1258] [/input-8, 1470] [/input-8, 1470] [/input-8, 1258] 
split level 2: [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] 
split level 3: [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 559] [/input-8, 559] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027737662196159363
10 lb beta sum: 0.0, worst -0.02772374451160431
Time: prepare 0.0143    bound 0.1056    transfer 0.0007    finalize 0.0023    func 0.1256    
Accumulated time: func 0.4195    prepare 0.0496    bound 0.3612    transfer 0.0031    finalize 0.0081    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00471093) min lb tensor(-0.02764034)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.012230873107910156 
BICCOS Cumulative time: 0.03547525405883789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01670 (3), -0.01669 (3), -0.01669 (3), -0.01668 (3), -0.01660 (3), -0.01657 (3), -0.01655 (3), -0.01650 (3), -0.01632 (3), -0.01625 (3), -0.01614 (3), -0.01611 (3), -0.01610 (3), -0.01576 (3), -0.01570 (3), -0.01568 (3), -0.01565 (3), -0.01562 (3), -0.01557 (3), -0.01557 (3), 
Length of domains: 50
Time: pickout 0.0014    decision 0.0240    set_bounds 0.0172    solve 0.1257    add 0.0846    
Accumulated time: pickout 0.0030    decision 0.5628    set_bounds 0.0408    solve 0.3652    add 0.2686    
Current (lb-rhs): -0.01669849455356598
150 domains visited
Cumulative time: 1.3468449115753174

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 541] [/input-8, 1470] [/input-8, 545] [/input-8, 1258] [/input-8, 1470] [/input-8, 1470] [/input-8, 541] [/input-8, 545] [/input-8, 541] [/input-8, 1470] 
split level 1: [/input-8, 1465] [/input-8, 1465] [/input-8, 1465] [/input-8, 559] [/input-8, 1465] [/input-8, 1465] [/input-8, 1470] [/input-8, 541] [/input-8, 1258] [/input-8, 1465] 
split level 2: [/input-8, 559] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 559] [/input-8, 530] 
split level 3: [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 1266] [/input-8, 534] [/input-8, 534] [/input-8, 559] [/input-8, 559] [/input-8, 534] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01651744544506073
10 lb beta sum: 0.0, worst -0.016611039638519287
Time: prepare 0.0136    bound 0.1002    transfer 0.0014    finalize 0.0022    func 0.1201    
Accumulated time: func 0.5396    prepare 0.0634    bound 0.4614    transfer 0.0045    finalize 0.0103    
all_split False
======================Cut inference begins======================
max lb tensor(0.00220995) min lb tensor(-0.01643932)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.013144254684448242 
BICCOS Cumulative time: 0.04861950874328613
Preprocessing time: 0.011913537979125977 Inference time: 0.0002200603485107422 Add cuts time: 0.0001361370086669922 Cut analysis time: 0.0008745193481445312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00758 (4), -0.00744 (4), -0.00730 (4), -0.00728 (4), -0.00707 (4), -0.00700 (4), -0.00696 (4), -0.00695 (4), -0.00695 (4), -0.00688 (4), -0.00682 (4), -0.00660 (4), -0.00654 (4), -0.00650 (4), -0.00646 (4), -0.00641 (4), -0.00598 (4), -0.00580 (4), -0.00573 (4), -0.00553 (4), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0199    set_bounds 0.0160    solve 0.1202    add 0.0915    
Accumulated time: pickout 0.0042    decision 0.5827    set_bounds 0.0569    solve 0.4854    add 0.3600    
Current (lb-rhs): -0.007581010460853577
200 domains visited
Cumulative time: 1.6091651916503906

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 541] [/input-8, 541] [/input-8, 1258] [/input-8, 1258] [/input-8, 541] [/input-8, 541] [/input-8, 1465] [/input-8, 1465] [/input-8, 545] [/input-8, 545] 
split level 1: [/input-8, 1465] [/input-8, 1465] [/input-8, 559] [/input-8, 559] [/input-8, 1465] [/input-8, 1465] [/input-8, 1470] [/input-8, 1470] [/input-8, 1258] [/input-8, 1258] 
split level 2: [/input-8, 559] [/input-8, 559] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 1258] [/input-8, 559] [/input-8, 559] 
split level 3: [/input-8, 1258] [/input-8, 1258] [/input-8, 534] [/input-8, 534] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 534] [/input-8, 534] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.007220402359962463
10 lb beta sum: 0.006684417370706797, worst -0.007030010223388672
Time: prepare 0.0079    bound 0.2629    transfer 0.0007    finalize 0.0018    func 0.2759    
Accumulated time: func 0.8155    prepare 0.0716    bound 0.7243    transfer 0.0052    finalize 0.0121    
all_split False
======================Cut inference begins======================
max lb tensor(0.00541633) min lb tensor(-0.00657615)
Number of Verified Splits: 104 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.020859479904174805 
BICCOS Cumulative time: 0.06947898864746094
Preprocessing time: 0.011692285537719727 Inference time: 0.004682779312133789 Add cuts time: 0.00350189208984375 Cut analysis time: 0.000982522964477539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00149 (5), -0.00149 (5), -0.00149 (5), -0.00144 (5), -0.00144 (5), -0.00142 (5), -0.00142 (5), -0.00141 (5), -0.00137 (5), -0.00133 (5), -0.00130 (5), -0.00130 (5), -0.00129 (5), -0.00122 (5), -0.00122 (5), -0.00122 (5), -0.00121 (5), -0.00118 (5), -0.00115 (5), -0.00114 (5), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0212    set_bounds 0.1798    solve 0.2760    add 0.0982    
Accumulated time: pickout 0.0054    decision 0.6039    set_bounds 0.2367    solve 0.7614    add 0.4582    
Current (lb-rhs): -0.0014943424612283707
250 domains visited
Cumulative time: 2.20670485496521

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531]), tensor([-1.]), tensor([0]), tensor([-1.83002104e-16]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 541]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([5.22400456e-11, 1.09983399e-03, 1.12676038e-03]), tensor([0, 2, 3])), '/input-12': ([50], [-1.0], [0], [6.611988734306351e-11], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 541]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.22400456e-11, 1.09983399e-03, 7.59785017e-03]), tensor([0, 2, 3])), '/input-12': ([50], [-1.0], [0], [6.611988734306351e-11], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 559, 541]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([5.22400456e-11, 1.21461246e-02, 2.69633695e-03, 1.34327239e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [-1.0], [0], [6.611988734306351e-11], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 559, 541]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.22400456e-11, 1.21461246e-02, 2.69633695e-03, 5.49052050e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [-1.0], [0], [6.611988734306351e-11], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 559, 541]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([5.22400456e-11, 1.21461246e-02, 1.12140342e-03, 1.29739917e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [-1.0], [0], [6.611988734306351e-11], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 559, 541]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([5.22400456e-11, 1.21461246e-02, 1.12140342e-03, 5.56145003e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [-1.0], [0], [6.611988734306351e-11], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([5.22400456e-11, 1.27783581e-03, 5.64620038e-03]), tensor([0, 2, 3])), '/input-12': ([50], [1.0], [0], [-1.830033740784229e-16], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.22400456e-11, 1.27783581e-03, 5.31675061e-04]), tensor([0, 2, 3])), '/input-12': ([50], [1.0], [0], [-1.830033740784229e-16], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470, 1258]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([5.22400456e-11, 9.91580077e-03, 5.97186526e-03, 1.82832940e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [1.0], [0], [-1.830033740784229e-16], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470, 1258]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.22400456e-11, 9.91580077e-03, 5.97186526e-03, 2.84610852e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [1.0], [0], [-1.830033740784229e-16], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470, 1258]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([5.22400456e-11, 9.91580077e-03, 8.75608763e-04, 2.00161501e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [1.0], [0], [-1.830033740784229e-16], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470, 1258]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([5.22400456e-11, 9.91580077e-03, 8.75608763e-04, 3.63746448e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [1.0], [0], [-1.830033740784229e-16], [1])}
Shallow branching resets to n domains:  13
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.053198665380477905
10 lb beta sum: 0.2694714069366455, worst -0.10089951753616333
Time: prepare 0.0006    bound 0.1325    transfer 0.0003    finalize 0.0002    func 0.1337    
Accumulated time: func 0.9492    prepare 0.0722    bound 0.8568    transfer 0.0055    finalize 0.0123    
After pruning, left:  9

Back to Regular BaB

BaB round 1
batch: 9
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] [/input-8, 1465] [/input-8, 1465] [/input-8, 1465] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] 
split level 1: [/input-8, 545] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1258] [/input-8, 1258] [/input-8, 1465] [/input-8, 1465] [/input-8, 1465] 
split level 2: [/input-8, 541] [/input-8, 559] [/input-8, 530] [/input-8, 530] [/input-8, 559] [/input-8, 559] [/input-8, 530] [/input-8, 530] [/input-8, 530] 
split level 3: [/input-8, 530] [/input-8, 530] [/input-8, 1258] [/input-8, 1258] [/input-8, 530] [/input-8, 530] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] 
split level 4: [/input-8, 534] [/input-8, 1258] [/input-8, 534] [/input-8, 306] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23916853964328766, worst -0.02831069380044937
10 lb beta sum: 0.24259403347969055, worst -0.028202272951602936
Time: prepare 0.0110    bound 0.1332    transfer 0.0009    finalize 0.0015    func 0.1485    
Accumulated time: func 1.0977    prepare 0.0835    bound 0.9900    transfer 0.0064    finalize 0.0138    
all_split False
======================Cut inference begins======================
max lb tensor(0.25136793) min lb tensor(-0.02816872)
Number of Verified Splits: 181 of 288
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.3700658977031708, worst -0.49601781368255615
10 lb beta sum: 0.38661691546440125, worst -0.030326545238494873
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 4-6: 24
#cuts 7-9: 9
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.2472083568572998 
BICCOS Cumulative time: 0.31668734550476074
Preprocessing time: 0.007272243499755859 Inference time: 0.23355555534362793 Add cuts time: 0.0046977996826171875 Cut analysis time: 0.0016827583312988281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02817 (5), -0.02751 (5), -0.02731 (5), -0.02665 (5), -0.02567 (5), -0.02535 (5), -0.02500 (5), -0.02468 (5), -0.02105 (5), -0.02080 (5), -0.02040 (5), -0.02016 (5), -0.01775 (5), -0.01725 (5), -0.01690 (5), -0.01659 (5), -0.01658 (5), -0.01636 (5), -0.01594 (5), -0.01589 (5), 
Length of domains: 107
Time: pickout 0.0006    decision 0.0184    set_bounds 0.0189    solve 0.1486    add 0.0020    
Accumulated time: pickout 0.0060    decision 0.6224    set_bounds 0.2556    solve 0.9100    add 0.4602    
Current (lb-rhs): -0.02816871553659439
357 domains visited
Cumulative time: 2.805161714553833

BaB round 2
batch: 107
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1465] [/input-8, 941] [/input-8, 941] [/input-8, 1470] [/input-8, 941] [/input-8, 1465] [/input-8, 941] [/input-8, 941] [/input-8, 1470] [/input-8, 941] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027994468808174133
10 lb beta sum: 0.007375987712293863, worst -0.027951814234256744
Time: prepare 0.0037    bound 0.1344    transfer 0.0005    finalize 0.0016    func 0.1416    
Accumulated time: func 1.2394    prepare 0.0874    bound 1.1244    transfer 0.0069    finalize 0.0154    
all_split False
======================Cut inference begins======================
max lb tensor(0.00412130) min lb tensor(-0.02794586)
Number of Verified Splits: 67 of 214
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 2
#cuts 4-6: 13
#cuts >= 20: 0
BICCOS time: 0.015860795974731445 
BICCOS Cumulative time: 0.3325481414794922
Preprocessing time: 0.006334543228149414 Inference time: 0.006377458572387695 Add cuts time: 0.0024394989013671875 Cut analysis time: 0.0007092952728271484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02795 (6), -0.02729 (6), -0.02709 (6), -0.02643 (6), -0.02551 (6), -0.02519 (6), -0.02482 (6), -0.02451 (6), -0.02372 (6), -0.02308 (6), -0.02287 (6), -0.02222 (6), -0.02041 (6), -0.02035 (6), -0.02023 (6), -0.02002 (6), -0.01974 (6), -0.01965 (6), -0.01956 (6), -0.01934 (6), 
Length of domains: 147
Time: pickout 0.0023    decision 0.0165    set_bounds 0.0098    solve 0.1417    add 0.0019    
Accumulated time: pickout 0.0082    decision 0.6388    set_bounds 0.2654    solve 1.0517    add 0.4621    
Current (lb-rhs): -0.027945861220359802
504 domains visited
Cumulative time: 2.993861675262451

BaB round 3
batch: 147
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 1452] [/input-8, 1258] [/input-8, 1452] [/input-8, 1470] [/input-8, 534] [/input-8, 1452] [/input-8, 1258] [/input-8, 1452] [/input-8, 1470] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027869991958141327
10 lb beta sum: 0.023348918184638023, worst -0.027862899005413055
Time: prepare 0.0051    bound 0.1377    transfer 0.0006    finalize 0.0016    func 0.1469    
Accumulated time: func 1.3863    prepare 0.0927    bound 1.2620    transfer 0.0075    finalize 0.0170    
all_split False
======================Cut inference begins======================
max lb tensor(0.23657362) min lb tensor(-0.02785781)
Number of Verified Splits: 99 of 294
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 1
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.02070927619934082 
BICCOS Cumulative time: 0.353257417678833
Preprocessing time: 0.008599281311035156 Inference time: 0.00974583625793457 Add cuts time: 0.0019009113311767578 Cut analysis time: 0.00046324729919433594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02786 (7), -0.02720 (7), -0.02701 (7), -0.02634 (7), -0.02407 (7), -0.02374 (7), -0.02352 (7), -0.02347 (7), -0.02338 (7), -0.02304 (7), -0.02285 (7), -0.02279 (7), -0.02267 (7), -0.02261 (7), -0.02255 (7), -0.02223 (7), -0.02199 (7), -0.02193 (7), -0.02188 (7), -0.02157 (7), 
Length of domains: 195
Time: pickout 0.0020    decision 0.0185    set_bounds 0.0129    solve 0.1470    add 0.0018    
Accumulated time: pickout 0.0102    decision 0.6573    set_bounds 0.2782    solve 1.1987    add 0.4639    
Current (lb-rhs): -0.027857810258865356
699 domains visited
Cumulative time: 3.1976664066314697

BaB round 4
batch: 195
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 941] [/input-8, 1465] [/input-8, 941] [/input-8, 534] [/input-8, 941] [/input-8, 1452] [/input-8, 941] [/input-8, 534] [/input-8, 941] [/input-8, 1465] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027306973934173584
10 lb beta sum: 0.0713711753487587, worst -0.02730105072259903
Time: prepare 0.0069    bound 0.1365    transfer 0.0011    finalize 0.0019    func 0.1491    
Accumulated time: func 1.5353    prepare 0.0998    bound 1.3986    transfer 0.0086    finalize 0.0189    
all_split False
======================Cut inference begins======================
max lb tensor(0.23767796) min lb tensor(-0.02729671)
Number of Verified Splits: 172 of 390
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 8
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.032378435134887695 
BICCOS Cumulative time: 0.3856358528137207
Preprocessing time: 0.011233806610107422 Inference time: 0.018619537353515625 Add cuts time: 0.0019040107727050781 Cut analysis time: 0.0006210803985595703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02730 (8), -0.02664 (8), -0.02645 (8), -0.02578 (8), -0.02386 (8), -0.02323 (8), -0.02320 (8), -0.02300 (8), -0.02290 (8), -0.02290 (8), -0.02282 (8), -0.02254 (8), -0.02234 (8), -0.02222 (8), -0.02221 (8), -0.02215 (8), -0.02204 (8), -0.02197 (8), -0.02164 (8), -0.02136 (8), 
Length of domains: 218
Time: pickout 0.0026    decision 0.0216    set_bounds 0.0168    solve 0.1492    add 0.0014    
Accumulated time: pickout 0.0128    decision 0.6789    set_bounds 0.2951    solve 1.3479    add 0.4653    
Current (lb-rhs): -0.027296707034111023
917 domains visited
Cumulative time: 3.42293119430542

BaB round 5
batch: 218
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 559] [/input-8, 1465] [/input-8, 559] [/input-8, 559] [/input-8, 559] [/input-8, 1465] [/input-8, 559] [/input-8, 1465] [/input-8, 559] [/input-8, 1465] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026660040020942688
10 lb beta sum: 0.048000674694776535, worst -0.026656821370124817
Time: prepare 0.0084    bound 0.1370    transfer 0.0037    finalize 0.0019    func 0.1544    
Accumulated time: func 1.6897    prepare 0.1083    bound 1.5355    transfer 0.0123    finalize 0.0208    
all_split False
======================Cut inference begins======================
max lb tensor(0.45726520) min lb tensor(-0.02665474)
Number of Verified Splits: 60 of 436
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 4
#cuts 4-6: 12
#cuts >= 20: 0
BICCOS time: 0.019993066787719727 
BICCOS Cumulative time: 0.40562891960144043
Preprocessing time: 0.01219487190246582 Inference time: 0.005242109298706055 Add cuts time: 0.0013158321380615234 Cut analysis time: 0.0012402534484863281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02665 (9), -0.02598 (9), -0.02581 (9), -0.02512 (9), -0.02501 (9), -0.02436 (9), -0.02419 (9), -0.02352 (9), -0.02314 (9), -0.02305 (9), -0.02271 (9), -0.02248 (9), -0.02236 (9), -0.02227 (9), -0.02222 (9), -0.02212 (9), -0.02202 (9), -0.02162 (9), -0.02154 (9), -0.02152 (9), 
Length of domains: 376
Time: pickout 0.0031    decision 0.0220    set_bounds 0.0180    solve 0.1545    add 0.0032    
Accumulated time: pickout 0.0159    decision 0.7009    set_bounds 0.3131    solve 1.5025    add 0.4685    
Current (lb-rhs): -0.026654742658138275
1293 domains visited
Cumulative time: 3.64442777633667

BaB round 6
batch: 376
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1258] [/input-8, 559] [/input-8, 1258] [/input-8, 1465] [/input-8, 1258] [/input-8, 559] [/input-8, 1258] [/input-8, 1258] [/input-8, 559] [/input-8, 1258] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025610677897930145
10 lb beta sum: 0.11691950261592865, worst -0.02559886872768402
Time: prepare 0.0145    bound 0.1371    transfer 0.0015    finalize 0.0037    func 0.1618    
Accumulated time: func 1.8515    prepare 0.1230    bound 1.6726    transfer 0.0138    finalize 0.0244    
all_split False
======================Cut inference begins======================
max lb tensor(0.65249848) min lb tensor(-0.02559483)
Number of Verified Splits: 327 of 752
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.05670595169067383 
BICCOS Cumulative time: 0.46233487129211426
Preprocessing time: 0.02129983901977539 Inference time: 0.030646324157714844 Add cuts time: 0.004354000091552734 Cut analysis time: 0.0004057884216308594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02559 (10), -0.02492 (10), -0.02475 (10), -0.02458 (10), -0.02406 (10), -0.02394 (10), -0.02373 (10), -0.02327 (10), -0.02310 (10), -0.02291 (10), -0.02243 (10), -0.02237 (10), -0.02227 (10), -0.02208 (10), -0.02202 (10), -0.02167 (10), -0.02141 (10), -0.02138 (10), -0.02133 (10), -0.02120 (10), 
Length of domains: 425
Time: pickout 0.0068    decision 0.0308    set_bounds 0.0319    solve 0.1620    add 0.0049    
Accumulated time: pickout 0.0227    decision 0.7317    set_bounds 0.3449    solve 1.6645    add 0.4735    
Current (lb-rhs): -0.02559483051300049
1718 domains visited
Cumulative time: 3.9397165775299072

BaB round 7
batch: 425
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025098979473114014
10 lb beta sum: 0.3360520899295807, worst -0.025094330310821533
Time: prepare 0.0161    bound 0.1370    transfer 0.0013    finalize 0.0035    func 0.1634    
Accumulated time: func 2.0149    prepare 0.1393    bound 1.8096    transfer 0.0150    finalize 0.0279    
all_split False
======================Cut inference begins======================
max lb tensor(0.70449632) min lb tensor(-0.02509181)
Number of Verified Splits: 731 of 850
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 11
#cuts >= 20: 0
BICCOS time: 0.09805583953857422 
BICCOS Cumulative time: 0.5603907108306885
Preprocessing time: 0.023818492889404297 Inference time: 0.06836700439453125 Add cuts time: 0.005480527877807617 Cut analysis time: 0.0003898143768310547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02509 (11), -0.02424 (11), -0.02342 (11), -0.02258 (11), -0.02117 (11), -0.02070 (11), -0.02049 (11), -0.02031 (11), -0.01985 (11), -0.01964 (11), -0.01948 (11), -0.01903 (11), -0.01888 (11), -0.01863 (11), -0.01820 (11), -0.01813 (11), -0.01805 (11), -0.01790 (11), -0.01728 (11), -0.01704 (11), 
Length of domains: 119
Time: pickout 0.0048    decision 0.0338    set_bounds 0.0356    solve 0.1636    add 0.0017    
Accumulated time: pickout 0.0275    decision 0.7654    set_bounds 0.3805    solve 1.8281    add 0.4752    
Current (lb-rhs): -0.025091812014579773
1837 domains visited
Cumulative time: 4.281016111373901

BaB round 8
batch: 119
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 306] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024592220783233643
10 lb beta sum: 0.5123367309570312, worst -0.024582043290138245
Time: prepare 0.0048    bound 0.1344    transfer 0.0005    finalize 0.0012    func 0.1425    
Accumulated time: func 2.1574    prepare 0.1443    bound 1.9440    transfer 0.0156    finalize 0.0291    
all_split False
======================Cut inference begins======================
max lb tensor(0.22754097) min lb tensor(-0.02458006)
Number of Verified Splits: 110 of 238
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.019370317459106445 
BICCOS Cumulative time: 0.5797610282897949
Preprocessing time: 0.007056236267089844 Inference time: 0.010495185852050781 Add cuts time: 0.0014462471008300781 Cut analysis time: 0.0003726482391357422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02458 (12), -0.02373 (12), -0.02289 (12), -0.02240 (12), -0.02206 (12), -0.02155 (12), -0.02073 (12), -0.02066 (12), -0.02023 (12), -0.01996 (12), -0.01990 (12), -0.01980 (12), -0.01938 (12), -0.01910 (12), -0.01896 (12), -0.01855 (12), -0.01855 (12), -0.01835 (12), -0.01812 (12), -0.01777 (12), 
Length of domains: 128
Time: pickout 0.0023    decision 0.0177    set_bounds 0.0099    solve 0.1426    add 0.0014    
Accumulated time: pickout 0.0298    decision 0.7831    set_bounds 0.3904    solve 1.9707    add 0.4766    
Current (lb-rhs): -0.024580061435699463
1965 domains visited
Cumulative time: 4.47511100769043

BaB round 9
batch: 128
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 544] [/input-8, 544] [/input-8, 544] [/input-8, 544] [/input-8, 544] [/input-8, 544] [/input-8, 544] [/input-8, 544] [/input-8, 544] [/input-8, 544] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024325698614120483
10 lb beta sum: 0.5834449529647827, worst -0.0243227556347847
Time: prepare 0.0054    bound 0.1370    transfer 0.0005    finalize 0.0012    func 0.1459    
Accumulated time: func 2.3033    prepare 0.1499    bound 2.0810    transfer 0.0161    finalize 0.0303    
all_split False
======================Cut inference begins======================
max lb tensor(0.00360173) min lb tensor(-0.02432159)
Number of Verified Splits: 17 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.010480165481567383 
BICCOS Cumulative time: 0.5902411937713623
Preprocessing time: 0.007721900939941406 Inference time: 0.0019867420196533203 Add cuts time: 0.00040841102600097656 Cut analysis time: 0.0003631114959716797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02432 (13), -0.02347 (13), -0.02263 (13), -0.02209 (13), -0.02179 (13), -0.02124 (13), -0.02042 (13), -0.02039 (13), -0.01997 (13), -0.01968 (13), -0.01961 (13), -0.01953 (13), -0.01912 (13), -0.01883 (13), -0.01868 (13), -0.01830 (13), -0.01817 (13), -0.01806 (13), -0.01784 (13), -0.01746 (13), 
Length of domains: 239
Time: pickout 0.0020    decision 0.0177    set_bounds 0.1711    solve 0.1460    add 0.0022    
Accumulated time: pickout 0.0319    decision 0.8008    set_bounds 0.5615    solve 2.1167    add 0.4787    
Current (lb-rhs): -0.02432158589363098
2204 domains visited
Cumulative time: 4.8251330852508545

BaB round 10
batch: 239
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 310] [/input-8, 310] [/input-8, 310] [/input-8, 310] [/input-8, 310] [/input-8, 310] [/input-8, 310] [/input-8, 310] [/input-8, 310] [/input-8, 310] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6515237092971802, worst -0.023689113557338715
10 lb beta sum: 0.6696859002113342, worst -0.023687340319156647
Time: prepare 0.0202    bound 0.1369    transfer 0.0008    finalize 0.0023    func 0.1638    
Accumulated time: func 2.4671    prepare 0.1703    bound 2.2179    transfer 0.0169    finalize 0.0327    
all_split False
======================Cut inference begins======================
max lb tensor(0.00129396) min lb tensor(-0.02368569)
Number of Verified Splits: 32 of 478
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.01872086524963379 
BICCOS Cumulative time: 0.6089620590209961
Preprocessing time: 0.013523340225219727 Inference time: 0.003694772720336914 Add cuts time: 0.0005097389221191406 Cut analysis time: 0.0009930133819580078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02369 (14), -0.02284 (14), -0.02284 (14), -0.02200 (14), -0.02199 (14), -0.02144 (14), -0.02118 (14), -0.02116 (14), -0.02060 (14), -0.02059 (14), -0.02033 (14), -0.01976 (14), -0.01976 (14), -0.01975 (14), -0.01934 (14), -0.01907 (14), -0.01905 (14), -0.01894 (14), -0.01892 (14), -0.01889 (14), 
Length of domains: 446
Time: pickout 0.0041    decision 0.0230    set_bounds 0.0204    solve 0.1639    add 0.0020    
Accumulated time: pickout 0.0360    decision 0.8238    set_bounds 0.5820    solve 2.2806    add 0.4807    
Current (lb-rhs): -0.023685693740844727
2650 domains visited
Cumulative time: 5.058045148849487

BaB round 11
batch: 446
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6445906758308411, worst -0.022707730531692505
10 lb beta sum: 0.6507842540740967, worst -0.022693797945976257
Time: prepare 0.0374    bound 0.1358    transfer 0.0013    finalize 0.0041    func 0.1844    
Accumulated time: func 2.6515    prepare 0.2080    bound 2.3537    transfer 0.0182    finalize 0.0368    
all_split False
======================Cut inference begins======================
max lb tensor(0.00127131) min lb tensor(-0.02268910)
Number of Verified Splits: 41 of 892
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.031891584396362305 
BICCOS Cumulative time: 0.6408536434173584
Preprocessing time: 0.025958776473999023 Inference time: 0.004979848861694336 Add cuts time: 0.0006098747253417969 Cut analysis time: 0.00034308433532714844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02269 (15), -0.02266 (15), -0.02184 (15), -0.02184 (15), -0.02181 (15), -0.02181 (15), -0.02100 (15), -0.02098 (15), -0.02098 (15), -0.02095 (15), -0.02061 (15), -0.02017 (15), -0.02016 (15), -0.02016 (15), -0.02014 (15), -0.02014 (15), -0.01976 (15), -0.01975 (15), -0.01934 (15), -0.01932 (15), 
Length of domains: 851
Time: pickout 0.0055    decision 0.0348    set_bounds 0.0369    solve 0.1846    add 0.0046    
Accumulated time: pickout 0.0415    decision 0.8587    set_bounds 0.6188    solve 2.4652    add 0.4853    
Current (lb-rhs): -0.0226890966296196
3501 domains visited
Cumulative time: 5.357479572296143

BaB round 12
batch: 851
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 648] [/input, 648] [/input, 648] [/input, 648] [/input, 648] [/input, 648] [/input, 648] [/input, 648] [/input, 648] [/input, 648] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6380478739738464, worst -0.022448644042015076
10 lb beta sum: 0.6401345729827881, worst -0.022446192800998688
Time: prepare 0.0801    bound 0.1568    transfer 0.0025    finalize 0.0078    func 0.2590    
Accumulated time: func 2.9105    prepare 0.2883    bound 2.5105    transfer 0.0208    finalize 0.0446    
all_split False
======================Cut inference begins======================
max lb tensor(0.00238067) min lb tensor(-0.02244493)
Number of Verified Splits: 141 of 1702
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.07161188125610352 
BICCOS Cumulative time: 0.7124655246734619
Preprocessing time: 0.051908254623413086 Inference time: 0.017362117767333984 Add cuts time: 0.0019354820251464844 Cut analysis time: 0.00040602684020996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02244 (16), -0.02242 (16), -0.02160 (16), -0.02158 (16), -0.02157 (16), -0.02156 (16), -0.02076 (16), -0.02074 (16), -0.02073 (16), -0.02070 (16), -0.02037 (16), -0.01992 (16), -0.01990 (16), -0.01990 (16), -0.01990 (16), -0.01989 (16), -0.01951 (16), -0.01950 (16), -0.01906 (16), -0.01906 (16), 
Length of domains: 1561
Time: pickout 0.0135    decision 0.0568    set_bounds 0.0459    solve 0.2593    add 0.0058    
Accumulated time: pickout 0.0550    decision 0.9155    set_bounds 0.6647    solve 2.7245    add 0.4911    
Current (lb-rhs): -0.022444933652877808
5062 domains visited
Cumulative time: 5.812750577926636

BaB round 13
batch: 1561
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6237539052963257, worst -0.02198024094104767
10 lb beta sum: 0.6243858933448792, worst -0.02196691930294037
Time: prepare 0.1492    bound 0.2314    transfer 0.0119    finalize 0.1501    func 0.5633    
Accumulated time: func 3.4739    prepare 0.4377    bound 2.7419    transfer 0.0326    finalize 0.1947    
all_split False
======================Cut inference begins======================
max lb tensor(0.00202298) min lb tensor(-0.02196236)
Number of Verified Splits: 236 of 3122
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.1300032138824463 
BICCOS Cumulative time: 0.8424687385559082
Preprocessing time: 0.09508180618286133 Inference time: 0.03095555305480957 Add cuts time: 0.0035026073455810547 Cut analysis time: 0.00046324729919433594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02196 (17), -0.02193 (17), -0.02123 (17), -0.02120 (17), -0.02111 (17), -0.02109 (17), -0.02107 (17), -0.02107 (17), -0.02038 (17), -0.02033 (17), -0.02028 (17), -0.02025 (17), -0.02023 (17), -0.02022 (17), -0.01987 (17), -0.01964 (17), -0.01952 (17), -0.01945 (17), -0.01941 (17), -0.01940 (17), 
Length of domains: 2886
Time: pickout 0.0215    decision 0.0938    set_bounds 0.1295    solve 0.5639    add 0.0097    
Accumulated time: pickout 0.0765    decision 1.0093    set_bounds 0.7942    solve 3.2884    add 0.5008    
Current (lb-rhs): -0.02196235954761505
7948 domains visited
Cumulative time: 6.765965700149536

BaB round 14
batch: 2886
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 540] [/input-8, 1175] [/input-8, 540] [/input-8, 1175] [/input-8, 540] [/input-8, 1175] [/input-8, 1175] [/input-8, 540] [/input-8, 1175] [/input-8, 309] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6113355159759521, worst -0.02170199155807495
10 lb beta sum: 0.6114722490310669, worst -0.02169688045978546
Time: prepare 0.2790    bound 0.3709    transfer 0.0290    finalize 0.0264    func 0.7437    
Accumulated time: func 4.2175    prepare 0.7170    bound 3.1127    transfer 0.0616    finalize 0.2211    
all_split False
======================Cut inference begins======================
max lb tensor(0.00264502) min lb tensor(-0.02169432)
Number of Verified Splits: 510 of 5772
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.4224236011505127 
BICCOS Cumulative time: 1.264892339706421
Preprocessing time: 0.34169864654541016 Inference time: 0.07169747352600098 Add cuts time: 0.00851130485534668 Cut analysis time: 0.0005161762237548828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02169 (18), -0.02166 (18), -0.02096 (18), -0.02092 (18), -0.02081 (18), -0.02078 (18), -0.02039 (18), -0.02036 (18), -0.02019 (18), -0.02015 (18), -0.02013 (18), -0.02010 (18), -0.02001 (18), -0.01998 (18), -0.01966 (18), -0.01963 (18), -0.01960 (18), -0.01955 (18), -0.01951 (18), -0.01945 (18), 
Length of domains: 5262
Time: pickout 0.0411    decision 0.1630    set_bounds 0.2517    solve 0.7446    add 0.0382    
Accumulated time: pickout 0.1176    decision 1.1724    set_bounds 1.0459    solve 4.0330    add 0.5391    
Current (lb-rhs): -0.02169431746006012
13210 domains visited
Cumulative time: 8.43685531616211

BaB round 15
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 1261] [/input-8, 1217] [/input-8, 1217] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5899582505226135, worst -0.021462857723236084
10 lb beta sum: 0.5900545716285706, worst -0.021461650729179382
Time: prepare 0.4091    bound 0.4938    transfer 0.0402    finalize 0.2313    func 1.2308    
Accumulated time: func 5.4484    prepare 1.1263    bound 3.6066    transfer 0.1018    finalize 0.4524    
all_split False
======================Cut inference begins======================
max lb tensor(0.00258851) min lb tensor(-0.02145861)
Number of Verified Splits: 810 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.40468740463256836 
BICCOS Cumulative time: 1.6695797443389893
Preprocessing time: 0.26021289825439453 Inference time: 0.1287553310394287 Add cuts time: 0.015188455581665039 Cut analysis time: 0.0005307197570800781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02146 (19), -0.02142 (19), -0.02068 (19), -0.02057 (19), -0.02052 (19), -0.02045 (19), -0.02039 (18), -0.02036 (18), -0.02013 (18), -0.02010 (18), -0.01996 (19), -0.01992 (19), -0.01985 (19), -0.01974 (19), -0.01966 (18), -0.01963 (18), -0.01951 (19), -0.01940 (18), -0.01936 (19), -0.01935 (18), 
Length of domains: 8548
Time: pickout 0.0604    decision 0.2278    set_bounds 0.3683    solve 1.2330    add 0.1383    
Accumulated time: pickout 0.1780    decision 1.4002    set_bounds 1.4142    solve 5.2660    add 0.6774    
Current (lb-rhs): -0.021458610892295837
20592 domains visited
current_vram/total_varm: 10.1GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.88626503944397

BaB round 16
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 309] [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 309] [/input-8, 1217] [/input-8, 1261] [/input-8, 540] [/input, 974] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5808418393135071, worst -0.02054290473461151
10 lb beta sum: 0.5808900594711304, worst -0.0205402672290802
Time: prepare 0.8024    bound 0.9318    transfer 0.0777    finalize 0.3101    func 2.2298    
Accumulated time: func 7.6781    prepare 1.9290    bound 4.5384    transfer 0.1795    finalize 0.7625    
all_split False
======================Cut inference begins======================
max lb tensor(0.00238001) min lb tensor(-0.02053636)
Number of Verified Splits: 1774 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.8557455539703369 
BICCOS Cumulative time: 2.525325298309326
Preprocessing time: 0.5213830471038818 Inference time: 0.28757691383361816 Add cuts time: 0.04611468315124512 Cut analysis time: 0.0006709098815917969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02054 (20), -0.02050 (20), -0.02050 (20), -0.02047 (20), -0.02020 (20), -0.02016 (20), -0.02015 (19), -0.02012 (19), -0.02005 (20), -0.01998 (20), -0.01989 (19), -0.01986 (19), -0.01959 (20), -0.01946 (20), -0.01942 (20), -0.01938 (19), -0.01927 (20), -0.01924 (20), -0.01924 (20), -0.01916 (20), 
Length of domains: 14966
Time: pickout 0.1188    decision 0.6394    set_bounds 0.7357    solve 2.2325    add 0.0512    
Accumulated time: pickout 0.2968    decision 2.0395    set_bounds 2.1499    solve 7.4984    add 0.7286    
Current (lb-rhs): -0.020536363124847412
35202 domains visited
current_vram/total_varm: 19.0GB/99.9GB, batch_size increase to 16384
Cumulative time: 15.55277156829834

BaB round 17
batch: 14966
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 540] [/input-8, 1261] [/input-8, 540] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5646140575408936, worst -0.020037353038787842
10 lb beta sum: 0.5646404027938843, worst -0.020036280155181885
Time: prepare 1.4646    bound 1.6225    transfer 0.1544    finalize 0.4590    func 3.8966    
Accumulated time: func 11.5747    prepare 3.3940    bound 6.1609    transfer 0.3339    finalize 1.2215    
all_split False
======================Cut inference begins======================
max lb tensor(0.01005268) min lb tensor(-0.02003263)
Number of Verified Splits: 4014 of 29932
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 12
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 1.8639945983886719 
BICCOS Cumulative time: 4.389319896697998
Preprocessing time: 0.8897790908813477 Inference time: 0.9175779819488525 Add cuts time: 0.05600738525390625 Cut analysis time: 0.0006301403045654297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02003 (21), -0.02000 (21), -0.02000 (21), -0.01996 (21), -0.01946 (21), -0.01943 (21), -0.01939 (20), -0.01938 (21), -0.01936 (21), -0.01936 (20), -0.01927 (21), -0.01924 (20), -0.01923 (21), -0.01923 (21), -0.01921 (21), -0.01920 (20), -0.01920 (20), -0.01917 (20), -0.01913 (21), -0.01910 (21), 
Length of domains: 25918
Time: pickout 0.2768    decision 1.0558    set_bounds 1.6043    solve 3.9013    add 0.3100    
Accumulated time: pickout 0.5736    decision 3.0953    set_bounds 3.7542    solve 11.3997    add 1.0385    
Current (lb-rhs): -0.020032629370689392
61120 domains visited
Cumulative time: 24.627635955810547

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1175] [/input-8, 540] [/input-8, 1175] [/input-8, 540] [/input-8, 1175] [/input-8, 540] [/input-8, 1175] [/input-8, 1261] [/input-8, 1175] [/input-8, 313] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.019416071474552155
10 lb beta sum: 0.4182250499725342, worst -0.01937457174062729
Time: prepare 0.8659    bound 2.4757    transfer 0.1602    finalize 0.5774    func 4.2929    
Accumulated time: func 15.8676    prepare 4.2603    bound 8.6366    transfer 0.4941    finalize 1.7989    
all_split False
======================Cut inference begins======================
max lb tensor(0.00981826) min lb tensor(-0.01936720)
Number of Verified Splits: 5262 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 12
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 2.2785532474517822 
BICCOS Cumulative time: 6.66787314414978
Preprocessing time: 0.9766845703125 Inference time: 1.2256288528442383 Add cuts time: 0.07550716400146484 Cut analysis time: 0.0007326602935791016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02000 (21), -0.02000 (21), -0.01996 (21), -0.01937 (22), -0.01923 (21), -0.01921 (21), -0.01916 (22), -0.01910 (21), -0.01903 (21), -0.01886 (21), -0.01882 (21), -0.01874 (21), -0.01874 (22), -0.01871 (22), -0.01870 (21), -0.01870 (21), -0.01867 (21), -0.01863 (22), -0.01862 (22), -0.01860 (21), 
Length of domains: 37040
Time: pickout 0.2541    decision 1.6335    set_bounds 1.8155    solve 4.2986    add 0.5261    
Accumulated time: pickout 0.8277    decision 4.7288    set_bounds 5.5697    solve 15.6983    add 1.5646    
Current (lb-rhs): -0.01999557763338089
88626 domains visited
current_vram/total_varm: 39.8GB/99.9GB, batch_size increase to 32768
Cumulative time: 35.51819086074829

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 313] [/input-8, 313] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01937544345855713
10 lb beta sum: 0.4036146104335785, worst -0.019336335361003876
Time: prepare 1.7532    bound 10.0777    transfer 0.3130    finalize 0.9663    func 13.5380    
Accumulated time: func 29.4057    prepare 6.0140    bound 18.7142    transfer 0.8071    finalize 2.7652    
all_split False
======================Cut inference begins======================
max lb tensor(0.01028669) min lb tensor(-0.01932925)
Number of Verified Splits: 10245 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 12
#cuts 4-6: 2
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 4.376277685165405 
BICCOS Cumulative time: 11.044150829315186
Preprocessing time: 2.5765364170074463 Inference time: 1.6445167064666748 Add cuts time: 0.15438127517700195 Cut analysis time: 0.0008432865142822266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01937 (22), -0.01933 (22), -0.01928 (22), -0.01925 (22), -0.01913 (22), -0.01912 (22), -0.01909 (22), -0.01870 (21), -0.01869 (23), -0.01867 (21), -0.01853 (21), -0.01852 (22), -0.01850 (21), -0.01848 (22), -0.01839 (22), -0.01837 (22), -0.01834 (22), -0.01831 (22), -0.01829 (23), -0.01824 (22), 
Length of domains: 59563
Time: pickout 0.5100    decision 3.2913    set_bounds 3.4778    solve 13.5488    add 0.2414    
Accumulated time: pickout 1.3377    decision 8.0202    set_bounds 9.0475    solve 29.2471    add 1.8060    
Current (lb-rhs): -0.01936720311641693
143917 domains visited
Cumulative time: 61.12429928779602

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 900] [/input-8, 900] [/input-8, 900] [/input-8, 313] [/input-8, 313] [/input-8, 900] [/input-8, 900] [/input-8, 900] [/input-8, 900] [/input-8, 900] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018915638327598572
10 lb beta sum: 0.39318111538887024, worst -0.018903091549873352
Time: prepare 1.7933    bound 10.0803    transfer 0.3177    finalize 0.4307    func 13.8373    
Accumulated time: func 43.2430    prepare 7.8077    bound 28.7945    transfer 1.1249    finalize 3.1959    
all_split False
======================Cut inference begins======================
max lb tensor(0.00962764) min lb tensor(-0.01889474)
Number of Verified Splits: 8488 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 12
#cuts 4-6: 4
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 4.4571967124938965 
BICCOS Cumulative time: 15.501347541809082
Preprocessing time: 1.972592830657959 Inference time: 2.319857358932495 Add cuts time: 0.1636979579925537 Cut analysis time: 0.0010485649108886719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01933 (22), -0.01928 (22), -0.01925 (22), -0.01889 (23), -0.01869 (23), -0.01866 (23), -0.01866 (23), -0.01863 (23), -0.01852 (22), -0.01850 (23), -0.01848 (22), -0.01839 (22), -0.01831 (22), -0.01828 (23), -0.01826 (23), -0.01825 (23), -0.01823 (23), -0.01821 (23), -0.01815 (22), -0.01813 (23), 
Length of domains: 83843
Time: pickout 0.5679    decision 3.4974    set_bounds 3.7677    solve 13.8499    add 19.5353    
Accumulated time: pickout 1.9056    decision 11.5176    set_bounds 12.8152    solve 43.0970    add 21.3413    
Current (lb-rhs): -0.0193292498588562
200965 domains visited
Cumulative time: 107.00277018547058

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 313] [/input-8, 900] [/input-8, 899] [/input-8, 899] [/input-8, 1250] [/input-8, 900] [/input-8, 900] [/input-8, 899] [/input-8, 899] [/input-8, 900] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01888100802898407
10 lb beta sum: 0.38915571570396423, worst -0.02396261692047119
Time: prepare 1.7826    bound 10.1005    transfer 0.3228    finalize 0.4894    func 14.1753    
Accumulated time: func 57.4183    prepare 9.5908    bound 38.8950    transfer 1.4477    finalize 3.6852    
all_split False
======================Cut inference begins======================
max lb tensor(0.00948191) min lb tensor(-0.01886044)
Number of Verified Splits: 8057 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 12
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 3.6478662490844727 
BICCOS Cumulative time: 19.149213790893555
Preprocessing time: 2.040649652481079 Inference time: 1.456282138824463 Add cuts time: 0.14966678619384766 Cut analysis time: 0.0012676715850830078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01889 (23), -0.01886 (23), -0.01882 (23), -0.01879 (23), -0.01866 (23), -0.01866 (23), -0.01863 (23), -0.01846 (23), -0.01842 (23), -0.01839 (23), -0.01826 (23), -0.01825 (23), -0.01816 (24), -0.01805 (23), -0.01802 (23), -0.01799 (22), -0.01796 (22), -0.01795 (24), -0.01793 (23), -0.01792 (24), 
Length of domains: 108554
Time: pickout 0.5517    decision 3.3092    set_bounds 3.9476    solve 14.1920    add 0.2081    
Accumulated time: pickout 2.4573    decision 14.8269    set_bounds 16.7628    solve 57.2890    add 21.5494    
Current (lb-rhs): -0.0188947394490242
258444 domains visited
Cumulative time: 133.06222581863403

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 313] [/input-8, 900] [/input-8, 900] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 900] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01836322993040085
10 lb beta sum: 0.38308241963386536, worst -0.018351450562477112
Time: prepare 1.8806    bound 10.0825    transfer 0.3163    finalize 0.5444    func 13.2515    
Accumulated time: func 70.6698    prepare 11.4718    bound 48.9775    transfer 1.7640    finalize 4.2297    
all_split False
======================Cut inference begins======================
max lb tensor(0.01002222) min lb tensor(-0.01834721)
Number of Verified Splits: 6963 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 12
#cuts 4-6: 3
#cuts 7-9: 5
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 4.892911672592163 
BICCOS Cumulative time: 24.042125463485718
Preprocessing time: 2.0620248317718506 Inference time: 2.6783697605133057 Add cuts time: 0.15091156959533691 Cut analysis time: 0.0016055107116699219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01886 (23), -0.01882 (23), -0.01879 (23), -0.01846 (23), -0.01842 (23), -0.01839 (23), -0.01835 (24), -0.01816 (24), -0.01812 (24), -0.01812 (24), -0.01810 (24), -0.01810 (24), -0.01805 (23), -0.01802 (23), -0.01795 (24), -0.01793 (23), -0.01792 (24), -0.01788 (24), -0.01787 (24), -0.01784 (24), 
Length of domains: 134359
Time: pickout 0.5986    decision 4.5420    set_bounds 4.6175    solve 13.2666    add 0.3028    
Accumulated time: pickout 3.0559    decision 19.3689    set_bounds 21.3803    solve 70.5556    add 21.8522    
Current (lb-rhs): -0.018860436975955963
317017 domains visited
Cumulative time: 161.48917603492737

BaB round 23
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 900] [/input-8, 900] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017935678362846375
10 lb beta sum: 0.3865557909011841, worst -0.017987698316574097
Time: prepare 1.9050    bound 10.1028    transfer 0.3529    finalize 0.5709    func 13.3601    
Accumulated time: func 84.0299    prepare 13.3774    bound 59.0804    transfer 2.1169    finalize 4.8005    
all_split False
======================Cut inference begins======================
max lb tensor(0.00972348) min lb tensor(-0.01792518)
Number of Verified Splits: 6878 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 12
#cuts 4-6: 3
#cuts 7-9: 6
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 5.078953981399536 
BICCOS Cumulative time: 29.121079444885254
Preprocessing time: 2.0764055252075195 Inference time: 2.8483588695526123 Add cuts time: 0.15254545211791992 Cut analysis time: 0.001644134521484375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01886 (23), -0.01882 (23), -0.01879 (23), -0.01835 (24), -0.01816 (24), -0.01812 (24), -0.01812 (24), -0.01810 (24), -0.01810 (24), -0.01805 (23), -0.01802 (23), -0.01795 (24), -0.01793 (23), -0.01793 (24), -0.01792 (24), -0.01788 (24), -0.01788 (24), -0.01787 (24), -0.01785 (24), -0.01784 (24), 
Length of domains: 160249
Time: pickout 0.5938    decision 3.3664    set_bounds 4.9040    solve 13.3779    add 0.2734    
Accumulated time: pickout 3.6496    decision 22.7353    set_bounds 26.2843    solve 83.9334    add 22.1256    
Current (lb-rhs): -0.018860436975955963
375675 domains visited
Cumulative time: 189.33727264404297

BaB round 24
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 899] [/input-8, 899] [/input-8, 1269] [/input-8, 899] [/input-8, 1269] [/input-8, 1269] [/input-8, 899] [/input-8, 1269] [/input-8, 1269] [/input-8, 1269] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018332093954086304
10 lb beta sum: 0.3821655809879303, worst -0.018322721123695374
Time: prepare 1.9373    bound 10.1012    transfer 0.4084    finalize 2.2383    func 15.1186    
Accumulated time: func 99.1485    prepare 15.3152    bound 69.1816    transfer 2.5253    finalize 7.0388    
all_split False
======================Cut inference begins======================
max lb tensor(0.00992799) min lb tensor(-0.01831801)
Number of Verified Splits: 6846 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 12
#cuts 4-6: 3
#cuts 7-9: 8
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 3.49383544921875 
BICCOS Cumulative time: 32.614914894104004
Preprocessing time: 2.0704562664031982 Inference time: 1.2764637470245361 Add cuts time: 0.1442124843597412 Cut analysis time: 0.002702951431274414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01835 (24), -0.01832 (24), -0.01828 (24), -0.01825 (24), -0.01812 (24), -0.01812 (24), -0.01810 (24), -0.01810 (24), -0.01806 (24), -0.01803 (24), -0.01799 (24), -0.01793 (24), -0.01788 (25), -0.01788 (24), -0.01788 (24), -0.01787 (24), -0.01785 (24), -0.01784 (24), -0.01774 (24), -0.01772 (24), 
Length of domains: 186171
Time: pickout 0.6072    decision 3.3715    set_bounds 3.4385    solve 15.1321    add 0.4350    
Accumulated time: pickout 4.2568    decision 26.1068    set_bounds 29.7228    solve 99.0655    add 22.5606    
Current (lb-rhs): -0.018347211182117462
434365 domains visited
Time out!!!!!!!!
Result: unknown in 219.2811 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.25397301, -11.57504463,  -9.66235542,  -8.69976139,  -9.31725407,
          -8.85229206,  -9.17159748,  -9.49390125,  -9.43022537, -10.41604328]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [395]; unstable size 395; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 134, 1, 395] with unstable size 133 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 395] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 395] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [133]; unstable size 133; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 133] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.46065512,  1.67517161,  0.13809073, -0.74742359, -0.27090001,
         -0.60667467, -0.21644306, -0.32564604,  0.60563803]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.25397301, -11.57504463,  -9.66235542,  -8.69976139,  -9.31725407,
          -8.85229206,  -9.17159748,  -9.49390125,  -9.43022537, -10.41604328]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.25397110, -11.57504368,  -9.66235447,  -8.69975948,  -9.31725216,
           -8.85229015,  -9.17159748,  -9.49389839,  -9.43022156, -10.41604137],
         [ -9.25397110, -11.57504368,  -9.66235447,  -8.69975948,  -9.31725216,
           -8.85229015,  -9.17159748,  -9.49389839,  -9.43022156, -10.41604137]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08237362, -0.47183800,  0.14565468, -0.31930733,  0.32230091,
           0.25862408]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0712 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.07646894, -7.65943909, -2.80038643, -4.19312286, -2.84907341,
         -4.31067753, -2.97104788, -5.49396992, -5.05455065, -7.49684191]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [412]; unstable size 412; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 412] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 412] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 412] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 191] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.59529114,  3.83634663, -0.28098130,  0.94465262,  1.05693650,
         -0.35508776,  2.21556520,  1.40175962,  3.70545459]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.07646894, -7.65943909, -2.80038643, -4.19312286, -2.84907341,
         -4.31067753, -2.97104788, -5.49396992, -5.05455065, -7.49684191]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.07646942, -7.65943909, -2.80038691, -4.19312382, -2.84907389,
          -4.31067753, -2.97104836, -5.49396992, -5.05455112, -7.49684286],
         [-4.07646942, -7.65943909, -2.80038691, -4.19312382, -2.84907389,
          -4.31067753, -2.97104836, -5.49396992, -5.05455112, -7.49684286]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04868698,  0.12197447]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.08412688,  0.31269848,  1.05873048,  ...,  0.59841275,
             0.75714290,  0.74126989],
           [ 0.13809532,  0.48730165,  0.80476195,  ...,  0.39206356,
             0.42380959,  0.51904768],
           [-0.16349196,  0.29682547,  0.86825401,  ...,  0.78888893,
             0.42380959,  0.83650798],
           ...,
           [-0.76666665, -0.98888886, -1.17936504,  ..., -0.90952379,
            -0.95714283, -0.81428570],
           [-0.86190474, -1.13174593, -1.14761901,  ..., -0.32222211,
            -0.67142856, -0.43333322],
           [-1.00476182, -1.13174593, -1.05238092,  ..., -0.33809513,
            -0.40158719, -0.62380952]],

          [[ 0.37037048,  0.80515307,  1.38486338,  ...,  1.35265732,
             1.69082153,  1.25603890],
           [ 0.62801939,  0.85346222,  0.99838978,  ...,  1.12721443,
             1.22383285,  0.86956531],
           [ 0.53140104,  0.61191636,  0.98228669,  ...,  1.48148179,
             1.04669893,  0.95008057],
           ...,
           [-0.16103047, -0.75684375, -0.98228657,  ..., -0.64412236,
            -0.74074072, -0.46698871],
           [-0.46698871, -0.91787434, -0.96618354,  ...,  0.25764906,
            -0.06441211,  0.20933989],
           [-0.77294683, -0.86956519, -0.88566822,  ...,  0.40257660,
             0.46698883,  0.30595824]],

          [[-0.37331331, -0.26836565,  0.21139447,  ...,  0.12143944,
             0.21139447,  0.07646193],
           [-0.14842562, -0.23838064, -0.13343313,  ...,  0.21139447,
             0.01649191, -0.28335828],
           [-0.19340314, -0.31334329,  0.06146942,  ...,  0.70614707,
             0.13643195, -0.16341813],
           ...,
           [-0.43328333, -0.62818587, -0.88305843,  ..., -0.68815589,
            -0.65817088, -0.61319339],
           [-0.52323836, -0.74812591, -0.77811092,  ..., -0.16341813,
            -0.32833579, -0.11844061],
           [-0.67316341, -0.77811092, -0.68815589,  ..., -0.13343313,
            -0.01349309, -0.05847061]]],


         [[[-0.08412688,  0.31269848,  1.05873048,  ...,  0.59841275,
             0.75714290,  0.74126989],
           [ 0.13809532,  0.48730165,  0.80476195,  ...,  0.39206356,
             0.42380959,  0.51904768],
           [-0.16349196,  0.29682547,  0.86825401,  ...,  0.78888893,
             0.42380959,  0.83650798],
           ...,
           [-0.76666665, -0.98888886, -1.17936504,  ..., -0.90952379,
            -0.95714283, -0.81428570],
           [-0.86190474, -1.13174593, -1.14761901,  ..., -0.32222211,
            -0.67142856, -0.43333322],
           [-1.00476182, -1.13174593, -1.05238092,  ..., -0.33809513,
            -0.40158719, -0.62380952]],

          [[ 0.37037048,  0.80515307,  1.38486338,  ...,  1.35265732,
             1.69082153,  1.25603890],
           [ 0.62801939,  0.85346222,  0.99838978,  ...,  1.12721443,
             1.22383285,  0.86956531],
           [ 0.53140104,  0.61191636,  0.98228669,  ...,  1.48148179,
             1.04669893,  0.95008057],
           ...,
           [-0.16103047, -0.75684375, -0.98228657,  ..., -0.64412236,
            -0.74074072, -0.46698871],
           [-0.46698871, -0.91787434, -0.96618354,  ...,  0.25764906,
            -0.06441211,  0.20933989],
           [-0.77294683, -0.86956519, -0.88566822,  ...,  0.40257660,
             0.46698883,  0.30595824]],

          [[-0.37331331, -0.26836565,  0.21139447,  ...,  0.12143944,
             0.21139447,  0.07646193],
           [-0.14842562, -0.23838064, -0.13343313,  ...,  0.21139447,
             0.01649191, -0.28335828],
           [-0.19340314, -0.31334329,  0.06146942,  ...,  0.70614707,
             0.13643195, -0.16341813],
           ...,
           [-0.43328333, -0.62818587, -0.88305843,  ..., -0.68815589,
            -0.65817088, -0.61319339],
           [-0.52323836, -0.74812591, -0.77811092,  ..., -0.16341813,
            -0.32833579, -0.11844061],
           [-0.67316341, -0.77811092, -0.68815589,  ..., -0.13343313,
            -0.01349309, -0.05847061]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0316 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
         -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [678]; unstable size 678; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 678] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 678] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 678] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 182] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.24960232,  6.38107681,  1.60664821, -0.06612653,  1.70738173,
          0.18758941,  2.45988202,  5.07852554,  5.93349123]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
         -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.09it/s]100%|██████████| 1/1 [00:00<00:00,  9.08it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.62309074, -9.13611889, -2.05009270, -3.92859149, -2.05051351,
          -4.03291273, -2.54317069, -4.72930622, -7.65253258, -8.69230938]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00042081]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1131 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.69916534423828
alpha/beta optimization time: 1.193232536315918
initial alpha-crown bounds: tensor([[ 3.27143478,  6.42873430,  1.61031699, -0.06354013,  1.71119177,
          0.19428951,  2.46747231,  5.10520840,  5.97405815]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.06354013085365295
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6569082736969
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.65687322616577
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.65684843063354
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6568262577057
Verifying property 3 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06354013]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
        -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06354013]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 678
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 180
Node /15 input 0: size torch.Size([100]) unstable 2
-----------------
# of unstable neurons: 860
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011205673217773438
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06354078650474548
10 lb beta sum: 0.0, worst -0.06354186683893204
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0546    transfer 0.0001    finalize 0.0002    func 0.0551    
Accumulated time: func 0.0551    prepare 0.0002    bound 0.0546    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 542] 
split level 1: [/input-8, 553] 
split level 2: [/input-8, 545] 
split level 3: [/input-8, 562] 
split level 4: [/input-8, 538] 
split level 5: [/input-8, 1453] 
split level 6: [/input-8, 550] 
split level 7: [/input-8, 530] 
split level 8: [/input-8, 551] 
split level 9: [/input-8, 563] 
split level 10: [/input-8, 541] 
split level 11: [/input-8, 546] 
split level 12: [/input-8, 561] 
split level 13: [/input-8, 547] 
split level 14: [/input-8, 1191] 
split level 15: [/input-8, 554] 
split level 16: [/input-8, 1446] 
split level 17: [/input-8, 1259] 
split level 18: [/input-8, 1260] 
split level 19: [/input-8, 1183] 
split level 20: [/input-8, 1470] 
split level 21: [/input-8, 88] 
split level 22: [/input-8, 933] 
split level 23: [/input-8, 949] 
split level 24: [/input-8, 539] 
split level 25: [/input-8, 1251] 
split level 26: [/input-8, 1005] 
split level 27: [/input-8, 1252] 
split level 28: [/input-8, 340] 
split level 29: [/input-8, 2044] 
split level 30: [/input-8, 315] 
split level 31: [/input-8, 540] 
split level 32: [/input, 571] 
split level 33: [/input, 1131] 
split level 34: [/input, 569] 
split level 35: [/input, 586] 
split level 36: [/input-8, 555] 
split level 37: [/input, 810] 
split level 38: [/input-8, 378] 
split level 39: [/input-8, 560] 
split level 40: [/input, 2393] 
split level 41: [/input-8, 1244] 
split level 42: [/input, 1227] 
split level 43: [/input-8, 1437] 
split level 44: [/input-8, 1506] 
split level 45: [/input-8, 556] 
split level 46: [/input-8, 520] 
split level 47: [/input-8, 1945] 
split level 48: [/input, 2363] 
split level 49: [/input-8, 2035] 
split level 50: [/input-8, 934] 
split level 51: [/input-8, 1937] 
split level 52: [/input-8, 379] 
split level 53: [/input-8, 1622] 
split level 54: [/input-8, 317] 
split level 55: [/input-8, 946] 
split level 56: [/input, 1126] 
split level 57: [/input, 1209] 
split level 58: [/input, 3911] 
split level 59: [/input, 1243] 
split level 60: [/input, 923] 
split level 61: [/input, 1110] 
split level 62: [/input, 1846] 
split level 63: [/input, 1861] 
split level 64: [/input, 3789] 
split level 65: [/input, 1927] 
split level 66: [/input, 1874] 
split level 67: [/input, 1081] 
split level 68: [/input, 1865] 
split level 69: [/input, 939] 
split level 70: [/input, 1877] 
split level 71: [/input-8, 806] 
split level 72: [/input, 565] 
split level 73: [/input, 1902] 
split level 74: [/input-8, 908] 
split level 75: [/input, 1862] 
split level 76: [/input-8, 2045] 
split level 77: [/input, 842] 
split level 78: [/input, 1829] 
split level 79: [/input, 3653] 
split level 80: [/input-8, 2036] 
split level 81: [/input, 1050] 
split level 82: [/input, 1895] 
split level 83: [/input-8, 1515] 
split level 84: [/input-8, 814] 
split level 85: [/input, 3928] 
split level 86: [/input-8, 574] 
split level 87: [/input, 931] 
split level 88: [/input, 1845] 
split level 89: [/input, 1890] 
split level 90: [/input, 954] 
split level 91: [/input, 1912] 
split level 92: [/input, 1098] 
split level 93: [/input, 699] 
split level 94: [/input-8, 910] 
split level 95: [/input, 1878] 
split level 96: [/input, 1893] 
split level 97: [/input, 581] 
split level 98: [/input-8, 1960] 
split level 99: [/input, 1910] 
split level 100: [/input-8, 926] 
split level 101: [/input, 1816] 
split level 102: [/input, 1844] 
split level 103: [/input, 1892] 
split level 104: [/input-8, 67] 
split level 105: [/input-8, 380] 
split level 106: [/input, 972] 
split level 107: [/input, 3625] 
split level 108: [/input-8, 66] 
split level 109: [/input, 1885] 
split level 110: [/input, 646] 
split level 111: [/input, 1926] 
split level 112: [/input, 1894] 
split level 113: [/input, 901] 
split level 114: [/input, 955] 
split level 115: [/input, 1859] 
split level 116: [/input-8, 1790] 
split level 117: [/input, 795] 
split level 118: [/input, 1925] 
split level 119: [/input, 1814] 
split level 120: [/input, 3686] 
split level 121: [/input, 1145] 
split level 122: [/input-8, 763] 
split level 123: [/input-8, 104] 
split level 124: [/input, 1934] 
split level 125: [/input, 566] 
split level 126: [/input, 1911] 
split level 127: [/input, 1875] 
split level 128: [/input, 1049] 
split level 129: [/input, 3641] 
split level 130: [/input, 1997] 
split level 131: [/input, 1837] 
split level 132: [/input, 582] 
split level 133: [/input, 1162] 
split level 134: [/input, 630] 
split level 135: [/input, 1923] 
split level 136: [/input, 3669] 
split level 137: [/input, 1828] 
split level 138: [/input-8, 1167] 
split level 139: [/input, 899] 
split level 140: [/input, 549] 
split level 141: [/input, 580] 
split level 142: [/input-8, 1630] 
split level 143: [/input, 1149] 
split level 144: [/input-8, 1787] 
split level 145: [/input, 1909] 
split level 146: [/input, 3622] 
split level 147: [/input, 1853] 
split level 148: [/input-8, 1513] 
split level 149: [/input, 1826] 
split level 150: [/input-8, 1652] 
split level 151: [/input-8, 152] 
split level 152: [/input, 1922] 
split level 153: [/input, 1085] 
split level 154: [/input-8, 1623] 
split level 155: [/input-8, 1951] 
split level 156: [/input, 1869] 
split level 157: [/input, 947] 
split level 158: [/input-8, 1625] 
split level 159: [/input, 677] 
split level 160: [/input-8, 1952] 
split level 161: [/input, 714] 
split level 162: [/input, 3201] 
split level 163: [/input, 1083] 
split level 164: [/input, 798] 
split level 165: [/input, 1924] 
split level 166: [/input, 1822] 
split level 167: [/input, 1906] 
split level 168: [/input, 1930] 
split level 169: [/input, 1094] 
split level 170: [/input, 979] 
split level 171: [/input, 1090] 
split level 172: [/input, 603] 
split level 173: [/input, 583] 
split level 174: [/input, 1825] 
split level 175: [/input-8, 1651] 
split level 176: [/input, 678] 
split level 177: [/input, 550] 
split level 178: [/input, 1854] 
split level 179: [/input, 1884] 
split level 180: [/input, 1907] 
split level 181: [/input-8, 890] 
split level 182: [/input, 1129] 
split level 183: [/input, 614] 
split level 184: [/input, 724] 
split level 185: [/input, 1838] 
split level 186: [/input, 1883] 
split level 187: [/input, 1811] 
split level 188: [/input, 534] 
split level 189: [/input, 1190] 
split level 190: [/input, 1870] 
split level 191: [/input, 3662] 
split level 192: [/input, 1950] 
split level 193: [/input, 963] 
split level 194: [/input, 814] 
split level 195: [/input, 693] 
split level 196: [/input, 1905] 
split level 197: [/input, 1174] 
split level 198: [/input, 717] 
split level 199: [/input, 916] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06352952867746353
10 lb beta sum: 0.0, worst -0.06352990865707397
Time: prepare 0.0114    bound 0.0973    transfer 0.0011    finalize 0.0023    func 0.1147    
Accumulated time: func 0.1698    prepare 0.0218    bound 0.1520    transfer 0.0012    finalize 0.0024    
all_split False
======================Cut inference begins======================
max lb tensor(-0.04591020) min lb tensor(-0.06352849)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010048151016235352 
BICCOS Cumulative time: 0.010048151016235352
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06216 (1), -0.06214 (1), -0.06213 (1), -0.06211 (1), -0.06200 (1), -0.06199 (1), -0.06197 (1), -0.06195 (1), -0.06193 (1), -0.06193 (1), -0.06189 (1), -0.06188 (1), -0.06185 (1), -0.06173 (1), -0.06172 (1), -0.06170 (1), -0.06168 (1), -0.06163 (1), -0.06158 (1), -0.06142 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5151    set_bounds 0.0085    solve 0.1147    add 0.0940    
Accumulated time: pickout 0.0003    decision 0.5151    set_bounds 0.0085    solve 0.1147    add 0.0940    
Current (lb-rhs): -0.062160592526197433
50 domains visited
Cumulative time: 0.8063452243804932

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 1453] [/input-8, 545] [/input-8, 545] 
split level 1: [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] 
split level 2: [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 546] [/input-8, 541] [/input-8, 541] [/input-8, 546] [/input-8, 541] [/input-8, 541] [/input-8, 541] 
split level 3: [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 541] [/input-8, 546] [/input-8, 546] [/input-8, 541] [/input-8, 546] [/input-8, 546] [/input-8, 546] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.061744172126054764
10 lb beta sum: 0.0, worst -0.06178249418735504
Time: prepare 0.0115    bound 0.0952    transfer 0.0007    finalize 0.0020    func 0.1121    
Accumulated time: func 0.2819    prepare 0.0336    bound 0.2472    transfer 0.0019    finalize 0.0044    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03146624) min lb tensor(-0.06172945)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011418581008911133 
BICCOS Cumulative time: 0.021466732025146484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05430 (2), -0.05422 (2), -0.05411 (2), -0.05406 (2), -0.05397 (2), -0.05387 (2), -0.05383 (2), -0.05381 (2), -0.05374 (2), -0.05373 (2), -0.05370 (2), -0.05366 (2), -0.05365 (2), -0.05363 (2), -0.05359 (2), -0.05353 (2), -0.05347 (2), -0.05316 (2), -0.05314 (2), -0.05292 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0257    set_bounds 0.0146    solve 0.1122    add 0.0731    
Accumulated time: pickout 0.0014    decision 0.5408    set_bounds 0.0230    solve 0.2269    add 0.1671    
Current (lb-rhs): -0.05430091917514801
100 domains visited
Cumulative time: 1.0444800853729248

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 545] [/input-8, 1453] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 1453] [/input-8, 538] [/input-8, 1453] 
split level 1: [/input-8, 538] [/input-8, 538] [/input-8, 541] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 541] [/input-8, 538] [/input-8, 546] [/input-8, 538] 
split level 2: [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 541] [/input-8, 541] [/input-8, 550] [/input-8, 550] [/input-8, 541] [/input-8, 541] [/input-8, 541] 
split level 3: [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 550] [/input-8, 550] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 550] [/input-8, 546] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05354268103837967
10 lb beta sum: 0.0, worst -0.053661130368709564
Time: prepare 0.0110    bound 0.0962    transfer 0.0011    finalize 0.0024    func 0.1132    
Accumulated time: func 0.3951    prepare 0.0448    bound 0.3434    transfer 0.0030    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02582465) min lb tensor(-0.05347709)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011503219604492188 
BICCOS Cumulative time: 0.03296995162963867
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04164 (3), -0.04163 (3), -0.04161 (3), -0.04161 (3), -0.04138 (3), -0.04113 (3), -0.04109 (3), -0.04081 (3), -0.04069 (3), -0.04064 (3), -0.04018 (3), -0.03982 (3), -0.03974 (3), -0.03973 (3), -0.03950 (3), -0.03946 (3), -0.03941 (3), -0.03940 (3), -0.03939 (3), -0.03923 (3), 
Length of domains: 50
Time: pickout 0.0008    decision 0.0187    set_bounds 0.0150    solve 0.1133    add 0.0784    
Accumulated time: pickout 0.0022    decision 0.5596    set_bounds 0.0380    solve 0.3402    add 0.2455    
Current (lb-rhs): -0.04164073243737221
150 domains visited
Cumulative time: 1.2824575901031494

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1453] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] 
split level 1: [/input-8, 551] [/input-8, 551] [/input-8, 551] [/input-8, 538] [/input-8, 551] [/input-8, 551] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 551] 
split level 2: [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 551] [/input-8, 538] [/input-8, 538] [/input-8, 551] [/input-8, 551] [/input-8, 551] [/input-8, 550] 
split level 3: [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 550] [/input-8, 546] [/input-8, 550] [/input-8, 546] [/input-8, 550] [/input-8, 550] [/input-8, 546] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.041189923882484436
10 lb beta sum: 0.0, worst -0.0411933958530426
Time: prepare 0.0114    bound 0.0964    transfer 0.0013    finalize 0.0020    func 0.1136    
Accumulated time: func 0.5088    prepare 0.0564    bound 0.4398    transfer 0.0043    finalize 0.0088    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00972186) min lb tensor(-0.04113117)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011416196823120117 
BICCOS Cumulative time: 0.04438614845275879
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02450 (4), -0.02440 (4), -0.02437 (4), -0.02435 (4), -0.02433 (4), -0.02432 (4), -0.02430 (4), -0.02430 (4), -0.02427 (4), -0.02426 (4), -0.02426 (4), -0.02422 (4), -0.02420 (4), -0.02414 (4), -0.02414 (4), -0.02403 (4), -0.02397 (4), -0.02393 (4), -0.02393 (4), -0.02391 (4), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0191    set_bounds 0.0154    solve 0.1137    add 0.0801    
Accumulated time: pickout 0.0030    decision 0.5787    set_bounds 0.0534    solve 0.4539    add 0.3256    
Current (lb-rhs): -0.024503938853740692
200 domains visited
Cumulative time: 1.5232374668121338

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 545] [/input-8, 550] [/input-8, 545] [/input-8, 545] [/input-8, 538] [/input-8, 551] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 550] 
split level 1: [/input-8, 538] [/input-8, 538] [/input-8, 550] [/input-8, 550] [/input-8, 551] [/input-8, 538] [/input-8, 551] [/input-8, 551] [/input-8, 551] [/input-8, 545] 
split level 2: [/input-8, 546] [/input-8, 546] [/input-8, 561] [/input-8, 561] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 538] 
split level 3: [/input-8, 561] [/input-8, 561] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023952573537826538
10 lb beta sum: 0.0, worst -0.02390076220035553
Time: prepare 0.0110    bound 0.0958    transfer 0.0008    finalize 0.0016    func 0.2895    
Accumulated time: func 0.7983    prepare 0.0677    bound 0.5356    transfer 0.0051    finalize 0.0105    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00214553) min lb tensor(-0.02368793)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.012119293212890625 
BICCOS Cumulative time: 0.056505441665649414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01639 (5), -0.01639 (5), -0.01617 (5), -0.01605 (5), -0.01583 (5), -0.01570 (5), -0.01546 (5), -0.01524 (5), -0.01514 (5), -0.01503 (5), -0.01496 (5), -0.01495 (5), -0.01483 (5), -0.01481 (5), -0.01413 (5), -0.01395 (5), -0.01384 (5), -0.01382 (5), -0.01380 (5), -0.01374 (5), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0188    set_bounds 0.0152    solve 0.2897    add 0.0869    
Accumulated time: pickout 0.0039    decision 0.5975    set_bounds 0.0686    solve 0.7436    add 0.4125    
Current (lb-rhs): -0.016389034688472748
250 domains visited
Cumulative time: 1.9470906257629395

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.65789474e-13, 1.13625987e-03, 4.74771252e-04]), tensor([0, 1, 2])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 542,  541,  545, 1453]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.65789474e-13, 1.13625987e-03, 5.27558615e-03, 5.79539454e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 542,  541,  545, 1453]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.65789474e-13, 1.13625987e-03, 5.27558615e-03, 8.74807825e-04]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 551, 538]), tensor([-1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.65789474e-13, 1.44449603e-02, 8.79207393e-04, 7.06559559e-03,
        4.72937664e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 551, 538]), tensor([-1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.65789474e-13, 1.44449603e-02, 8.79207393e-04, 7.06559559e-03,
        1.08757778e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 551]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.65789474e-13, 1.44449603e-02, 8.79207393e-04, 7.13051995e-04]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 542,  541,  545,  550, 1453]), tensor([-1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.65789474e-13, 1.44449603e-02, 5.64258685e-03, 2.11336627e-03,
        5.38807502e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 542,  541,  545,  550, 1453]), tensor([-1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.65789474e-13, 1.44449603e-02, 5.64258685e-03, 2.11336627e-03,
        1.08441873e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 550, 551]), tensor([-1.,  1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.65789474e-13, 1.44449603e-02, 5.64258685e-03, 2.93784006e-03,
        1.85622294e-02]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 550, 551]), tensor([-1.,  1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.65789474e-13, 1.44449603e-02, 5.64258685e-03, 2.93784006e-03,
        5.77429077e-04]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542]), tensor([1.]), tensor([0]), tensor([4.42177406e-10]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  11
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06321684271097183
10 lb beta sum: 0.0, worst -0.06320853531360626
Time: prepare 0.0007    bound 0.1002    transfer 0.0001    finalize 0.0002    func 0.1013    
Accumulated time: func 0.8996    prepare 0.0683    bound 0.6358    transfer 0.0052    finalize 0.0107    
After pruning, left:  11

Back to Regular BaB

BaB round 1
batch: 11
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 538] [/input-8, 551] [/input-8, 551] [/input-8, 550] [/input-8, 550] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 1453] [/input-8, 1453] 
split level 1: [/input-8, 551] [/input-8, 538] [/input-8, 538] [/input-8, 1453] [/input-8, 1453] [/input-8, 546] [/input-8, 551] [/input-8, 551] [/input-8, 538] [/input-8, 538] 
split level 2: [/input-8, 546] [/input-8, 550] [/input-8, 550] [/input-8, 546] [/input-8, 546] [/input-8, 550] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] 
split level 3: [/input-8, 550] [/input-8, 546] [/input-8, 546] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] 
split level 4: [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.056988675147295
10 lb beta sum: 0.0, worst -0.05697023868560791
Time: prepare 0.0097    bound 0.0981    transfer 0.0021    finalize 0.0017    func 0.1138    
Accumulated time: func 1.0134    prepare 0.0783    bound 0.7339    transfer 0.0073    finalize 0.0124    
all_split False
======================Cut inference begins======================
max lb tensor(0.00876798) min lb tensor(-0.05696054)
Number of Verified Splits: 70 of 352
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.041201818734407425
10 lb beta sum: 0.0, worst -0.01302233338356018
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 7-9: 4
#cuts 10-12: 6
#cuts >= 20: 0
BICCOS time: 0.1457526683807373 
BICCOS Cumulative time: 0.20225811004638672
Preprocessing time: 0.008515357971191406 Inference time: 0.13447833061218262 Add cuts time: 0.001855611801147461 Cut analysis time: 0.0009033679962158203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05696 (5), -0.05607 (5), -0.05475 (5), -0.05390 (5), -0.05389 (5), -0.05297 (5), -0.05285 (5), -0.05208 (5), -0.05202 (5), -0.05170 (5), -0.05112 (5), -0.05103 (5), -0.05069 (5), -0.05018 (5), -0.04993 (5), -0.04954 (5), -0.04896 (5), -0.04888 (5), -0.04883 (5), -0.04864 (5), 
Length of domains: 282
Time: pickout 0.0005    decision 0.0183    set_bounds 0.0214    solve 0.1139    add 0.0022    
Accumulated time: pickout 0.0044    decision 0.6158    set_bounds 0.0900    solve 0.8575    add 0.4147    
Current (lb-rhs): -0.056960538029670715
532 domains visited
Cumulative time: 2.374509334564209

BaB round 2
batch: 282
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1453] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 1453] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05608627200126648
10 lb beta sum: 0.0, worst -0.05607666075229645
Time: prepare 0.0081    bound 0.1219    transfer 0.0017    finalize 0.0027    func 0.1382    
Accumulated time: func 1.1515    prepare 0.0866    bound 0.8558    transfer 0.0089    finalize 0.0150    
all_split False
======================Cut inference begins======================
max lb tensor(0.00325923) min lb tensor(-0.05607173)
Number of Verified Splits: 37 of 564
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 4-6: 3
#cuts 7-9: 8
#cuts >= 20: 0
BICCOS time: 0.02272629737854004 
BICCOS Cumulative time: 0.22498440742492676
Preprocessing time: 0.0162813663482666 Inference time: 0.0042095184326171875 Add cuts time: 0.0014371871948242188 Cut analysis time: 0.0007982254028320312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05607 (6), -0.05514 (6), -0.05384 (6), -0.05347 (6), -0.05300 (6), -0.05244 (6), -0.05201 (6), -0.05151 (6), -0.05124 (6), -0.05113 (6), -0.05107 (6), -0.05088 (6), -0.05027 (6), -0.05020 (6), -0.05013 (6), -0.04940 (6), -0.04928 (6), -0.04920 (6), -0.04864 (6), -0.04857 (6), 
Length of domains: 527
Time: pickout 0.0040    decision 0.0253    set_bounds 0.0234    solve 0.1384    add 0.0071    
Accumulated time: pickout 0.0084    decision 0.6411    set_bounds 0.1134    solve 0.9959    add 0.4217    
Current (lb-rhs): -0.056071728467941284
1059 domains visited
Cumulative time: 2.5970823764801025

BaB round 3
batch: 527
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 530] [/input-8, 547] [/input-8, 547] [/input-8, 562] [/input-8, 562] [/input-8, 1453] [/input-8, 562] [/input-8, 562] [/input-8, 547] [/input-8, 530] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05506732314825058
10 lb beta sum: 9.671512998465914e-06, worst -0.055054157972335815
Time: prepare 0.0148    bound 0.1253    transfer 0.0017    finalize 0.0053    func 0.1541    
Accumulated time: func 1.3056    prepare 0.1017    bound 0.9811    transfer 0.0107    finalize 0.0203    
all_split False
======================Cut inference begins======================
max lb tensor(0.00500979) min lb tensor(-0.05504581)
Number of Verified Splits: 127 of 1054
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 4-6: 8
#cuts 7-9: 17
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.05175662040710449 
BICCOS Cumulative time: 0.27674102783203125
Preprocessing time: 0.030487537384033203 Inference time: 0.015630722045898438 Add cuts time: 0.004095792770385742 Cut analysis time: 0.0015425682067871094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05505 (7), -0.05410 (7), -0.05270 (7), -0.05256 (7), -0.05186 (7), -0.05184 (7), -0.05149 (7), -0.05100 (7), -0.05097 (7), -0.05070 (7), -0.05056 (7), -0.05033 (7), -0.05016 (7), -0.04998 (7), -0.04992 (7), -0.04972 (7), -0.04935 (7), -0.04904 (7), -0.04897 (7), -0.04864 (7), 
Length of domains: 927
Time: pickout 0.0068    decision 0.0395    set_bounds 0.0435    solve 0.1543    add 0.0073    
Accumulated time: pickout 0.0153    decision 0.6806    set_bounds 0.1569    solve 1.1501    add 0.4290    
Current (lb-rhs): -0.055045805871486664
1986 domains visited
Cumulative time: 2.901942729949951

BaB round 4
batch: 927
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 547] [/input-8, 562] [/input-8, 562] [/input-8, 554] [/input-8, 554] [/input-8, 562] [/input-8, 1446] [/input-8, 554] [/input-8, 551] [/input-8, 547] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05391570180654526
10 lb beta sum: 7.287397602340207e-05, worst -0.05390651524066925
Time: prepare 0.0264    bound 0.1484    transfer 0.0055    finalize 0.0088    func 0.3712    
Accumulated time: func 1.6768    prepare 0.1284    bound 1.1295    transfer 0.0162    finalize 0.0291    
all_split False
======================Cut inference begins======================
max lb tensor(0.00421647) min lb tensor(-0.05390064)
Number of Verified Splits: 211 of 1854
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 4-6: 9
#cuts 7-9: 30
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.09296059608459473 
BICCOS Cumulative time: 0.369701623916626
Preprocessing time: 0.055399179458618164 Inference time: 0.02733778953552246 Add cuts time: 0.007695674896240234 Cut analysis time: 0.002527952194213867
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05390 (8), -0.05295 (8), -0.05220 (8), -0.05187 (8), -0.05153 (8), -0.05125 (8), -0.05103 (8), -0.05067 (8), -0.05045 (8), -0.05017 (8), -0.04976 (8), -0.04974 (8), -0.04950 (8), -0.04949 (8), -0.04933 (8), -0.04931 (8), -0.04915 (8), -0.04910 (8), -0.04897 (8), -0.04853 (8), 
Length of domains: 1643
Time: pickout 0.0130    decision 0.0599    set_bounds 0.0781    solve 0.3716    add 0.0179    
Accumulated time: pickout 0.0283    decision 0.7405    set_bounds 0.2351    solve 1.5217    add 0.4469    
Current (lb-rhs): -0.053900644183158875
3629 domains visited
Cumulative time: 3.542543888092041

BaB round 5
batch: 1643
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 562] [/input-8, 554] [/input-8, 554] [/input-8, 1446] [/input-8, 1446] [/input-8, 554] [/input-8, 554] [/input-8, 1446] [/input-8, 530] [/input-8, 562] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05330835282802582
10 lb beta sum: 0.00015100229938980192, worst -0.053302742540836334
Time: prepare 0.0682    bound 0.2385    transfer 0.0239    finalize 0.0234    func 0.3770    
Accumulated time: func 2.0538    prepare 0.1969    bound 1.3680    transfer 0.0401    finalize 0.0525    
all_split False
======================Cut inference begins======================
max lb tensor(0.00783274) min lb tensor(-0.05329728)
Number of Verified Splits: 426 of 3286
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 81.
#cuts 4-6: 11
#cuts 7-9: 65
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 0.19118356704711914 
BICCOS Cumulative time: 0.5608851909637451
Preprocessing time: 0.10613417625427246 Inference time: 0.060808658599853516 Add cuts time: 0.019057750701904297 Cut analysis time: 0.005182981491088867
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05330 (9), -0.05235 (9), -0.05160 (9), -0.05118 (9), -0.05092 (9), -0.05065 (9), -0.05036 (9), -0.04998 (9), -0.04985 (9), -0.04949 (9), -0.04914 (9), -0.04911 (9), -0.04908 (9), -0.04881 (9), -0.04869 (9), -0.04865 (9), -0.04864 (9), -0.04848 (9), -0.04828 (9), -0.04818 (9), 
Length of domains: 2860
Time: pickout 0.0254    decision 0.1159    set_bounds 0.1725    solve 0.3787    add 0.0352    
Accumulated time: pickout 0.0537    decision 0.8564    set_bounds 0.4076    solve 1.9004    add 0.4821    
Current (lb-rhs): -0.05329728126525879
6489 domains visited
Cumulative time: 4.481851577758789

BaB round 6
batch: 2860
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 554] [/input-8, 1446] [/input-8, 1446] [/input-8, 1470] [/input-8, 1470] [/input-8, 1446] [/input-8, 1470] [/input-8, 561] [/input-8, 554] [/input-8, 1446] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05252198874950409
10 lb beta sum: 0.00013386197679210454, worst -0.05250710994005203
Time: prepare 0.0968    bound 0.3655    transfer 0.0188    finalize 0.0290    func 0.5473    
Accumulated time: func 2.6011    prepare 0.2944    bound 1.7335    transfer 0.0588    finalize 0.0815    
all_split False
======================Cut inference begins======================
max lb tensor(0.00957640) min lb tensor(-0.05249636)
Number of Verified Splits: 532 of 5720
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 107.
#cuts 4-6: 15
#cuts 7-9: 86
#cuts 10-12: 6
#cuts >= 20: 0
BICCOS time: 0.2932465076446533 
BICCOS Cumulative time: 0.8541316986083984
Preprocessing time: 0.18035221099853516 Inference time: 0.08114957809448242 Add cuts time: 0.0255434513092041 Cut analysis time: 0.006201267242431641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05250 (10), -0.05156 (10), -0.05080 (10), -0.05012 (10), -0.04986 (10), -0.04971 (10), -0.04969 (10), -0.04917 (10), -0.04904 (10), -0.04885 (10), -0.04878 (10), -0.04868 (10), -0.04835 (10), -0.04827 (10), -0.04802 (10), -0.04800 (10), -0.04786 (10), -0.04784 (10), -0.04747 (10), -0.04737 (10), 
Length of domains: 5188
Time: pickout 0.0384    decision 0.4418    set_bounds 0.2693    solve 0.7535    add 0.0622    
Accumulated time: pickout 0.0921    decision 1.2982    set_bounds 0.6769    solve 2.6539    add 0.5443    
Current (lb-rhs): -0.05249635875225067
11677 domains visited
Cumulative time: 6.355824708938599

BaB round 7
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1446] [/input-8, 539] [/input-8, 539] [/input-8, 539] [/input-8, 539] [/input-8, 1470] [/input-8, 539] [/input-8, 562] [/input-8, 1446] [/input-8, 539] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0522175133228302
10 lb beta sum: 0.00015074346447363496, worst -0.05219563841819763
Time: prepare 0.1328    bound 0.4951    transfer 0.0448    finalize 0.0490    func 0.7769    
Accumulated time: func 3.3780    prepare 0.4275    bound 2.2286    transfer 0.1036    finalize 0.1305    
all_split False
======================Cut inference begins======================
max lb tensor(0.00224331) min lb tensor(-0.05218408)
Number of Verified Splits: 672 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 128.
#cuts 4-6: 26
#cuts 7-9: 92
#cuts 10-12: 10
#cuts >= 20: 0
BICCOS time: 0.40535974502563477 
BICCOS Cumulative time: 1.2594914436340332
Preprocessing time: 0.25199031829833984 Inference time: 0.11354565620422363 Add cuts time: 0.03223872184753418 Cut analysis time: 0.007585048675537109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05218 (11), -0.05125 (11), -0.05049 (11), -0.04981 (11), -0.04955 (11), -0.04934 (11), -0.04919 (11), -0.04880 (11), -0.04873 (11), -0.04851 (11), -0.04831 (11), -0.04827 (11), -0.04804 (11), -0.04791 (11), -0.04765 (11), -0.04755 (11), -0.04750 (11), -0.04747 (11), -0.04710 (11), -0.04707 (11), 
Length of domains: 8612
Time: pickout 0.0516    decision 0.2344    set_bounds 0.5450    solve 0.7801    add 0.0423    
Accumulated time: pickout 0.1437    decision 1.5325    set_bounds 1.2219    solve 3.4340    add 0.5866    
Current (lb-rhs): -0.0521840825676918
19197 domains visited
current_vram/total_varm: 26.2GB/99.9GB, batch_size increase to 8192
Cumulative time: 8.437104940414429

BaB round 8
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 1470] [/input-8, 539] [/input-8, 539] [/input-8, 539] [/input-8, 539] [/input-8, 539] [/input-8, 562] [/input-8, 1446] [/input-8, 1470] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.051398470997810364
10 lb beta sum: 0.00013945437967777252, worst -0.05138176679611206
Time: prepare 0.2691    bound 0.9413    transfer 0.0781    finalize 0.3279    func 1.7225    
Accumulated time: func 5.1005    prepare 0.6969    bound 3.1698    transfer 0.1816    finalize 0.4583    
all_split False
======================Cut inference begins======================
max lb tensor(0.00868225) min lb tensor(-0.05137578)
Number of Verified Splits: 1415 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 153.
#cuts 4-6: 30
#cuts 7-9: 106
#cuts 10-12: 17
#cuts >= 20: 0
BICCOS time: 0.8304877281188965 
BICCOS Cumulative time: 2.0899791717529297
Preprocessing time: 0.4968390464782715 Inference time: 0.2609140872955322 Add cuts time: 0.06369304656982422 Cut analysis time: 0.009041547775268555
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05138 (12), -0.05044 (12), -0.04968 (12), -0.04900 (12), -0.04874 (12), -0.04853 (12), -0.04842 (12), -0.04834 (12), -0.04793 (12), -0.04787 (12), -0.04763 (12), -0.04752 (12), -0.04749 (12), -0.04748 (12), -0.04734 (12), -0.04729 (12), -0.04698 (12), -0.04684 (12), -0.04673 (12), -0.04669 (12), 
Length of domains: 15389
Time: pickout 0.0931    decision 0.6908    set_bounds 0.9852    solve 1.7258    add 0.0802    
Accumulated time: pickout 0.2369    decision 2.2233    set_bounds 2.2071    solve 5.1598    add 0.6668    
Current (lb-rhs): -0.051375776529312134
34166 domains visited
current_vram/total_varm: 26.2GB/99.9GB, batch_size increase to 16384
Cumulative time: 12.88622498512268

BaB round 9
batch: 15389
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 949] [/input-8, 949] [/input-8, 554] [/input-8, 539] [/input-8, 1470] [/input, 3164] [/input-8, 554] [/input-8, 1470] [/input-8, 1470] [/input-8, 539] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.050372958183288574
10 lb beta sum: 0.00018558435840532184, worst -0.050366081297397614
Time: prepare 0.5176    bound 2.5534    transfer 0.1561    finalize 0.5192    func 3.9507    
Accumulated time: func 9.0511    prepare 1.2153    bound 5.7232    transfer 0.3378    finalize 0.9775    
all_split False
======================Cut inference begins======================
max lb tensor(0.01472996) min lb tensor(-0.05036232)
Number of Verified Splits: 2405 of 30778
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 169.
#cuts 4-6: 27
#cuts 7-9: 116
#cuts 10-12: 26
#cuts >= 20: 0
BICCOS time: 1.9261419773101807 
BICCOS Cumulative time: 4.01612114906311
Preprocessing time: 0.9544997215270996 Inference time: 0.8730731010437012 Add cuts time: 0.0882558822631836 Cut analysis time: 0.010313272476196289
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05036 (13), -0.04946 (13), -0.04877 (13), -0.04855 (13), -0.04791 (13), -0.04782 (13), -0.04764 (13), -0.04758 (13), -0.04745 (13), -0.04740 (13), -0.04732 (13), -0.04688 (13), -0.04686 (13), -0.04663 (13), -0.04660 (13), -0.04652 (13), -0.04649 (13), -0.04643 (13), -0.04642 (13), -0.04633 (13), 
Length of domains: 28373
Time: pickout 0.2458    decision 1.1563    set_bounds 1.9450    solve 3.9565    add 0.1263    
Accumulated time: pickout 0.4826    decision 3.3797    set_bounds 4.1521    solve 9.1163    add 0.7930    
Current (lb-rhs): -0.05036231875419617
62539 domains visited
Cumulative time: 22.310594081878662

BaB round 10
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1251] [/input-8, 340] [/input-8, 1446] [/input-8, 1470] [/input-8, 1446] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 1251] [/input-8, 1446] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04947632551193237
10 lb beta sum: 0.0001910280843731016, worst -0.04947156459093094
Time: prepare 0.5744    bound 2.7328    transfer 0.1562    finalize 0.2153    func 3.8983    
Accumulated time: func 12.9494    prepare 1.7903    bound 8.4559    transfer 0.4940    finalize 1.1928    
all_split False
======================Cut inference begins======================
max lb tensor(0.00546861) min lb tensor(-0.04946782)
Number of Verified Splits: 2493 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 194.
#cuts 4-6: 39
#cuts 7-9: 126
#cuts 10-12: 29
#cuts >= 20: 0
BICCOS time: 2.249276876449585 
BICCOS Cumulative time: 6.265398025512695
Preprocessing time: 1.0573790073394775 Inference time: 1.081552505493164 Add cuts time: 0.0987558364868164 Cut analysis time: 0.011589527130126953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04947 (14), -0.04897 (14), -0.04856 (14), -0.04806 (14), -0.04787 (14), -0.04765 (14), -0.04758 (13), -0.04737 (14), -0.04715 (14), -0.04701 (14), -0.04693 (14), -0.04674 (14), -0.04663 (13), -0.04651 (14), -0.04650 (14), -0.04650 (14), -0.04642 (14), -0.04642 (14), -0.04624 (14), -0.04600 (14), 
Length of domains: 42264
Time: pickout 0.2011    decision 1.6467    set_bounds 2.4623    solve 3.9060    add 0.1413    
Accumulated time: pickout 0.6838    decision 5.0264    set_bounds 6.6143    solve 13.0222    add 0.9344    
Current (lb-rhs): -0.049467816948890686
92814 domains visited
current_vram/total_varm: 42.4GB/99.9GB, batch_size increase to 32768
Cumulative time: 32.9982807636261

BaB round 11
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 949] [/input-8, 1251] [/input-8, 1470] [/input-8, 1251] [/input-8, 1260] [/input-8, 1251] [/input-8, 1260] [/input-8, 539] [/input-8, 949] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04863347113132477
10 lb beta sum: 0.00023485405836254358, worst -0.048622190952301025
Time: prepare 1.1411    bound 10.6256    transfer 0.4006    finalize 0.5205    func 13.1307    
Accumulated time: func 26.0801    prepare 2.9319    bound 19.0815    transfer 0.8946    finalize 1.7133    
all_split False
======================Cut inference begins======================
max lb tensor(0.00629322) min lb tensor(-0.04861669)
Number of Verified Splits: 6157 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 222.
#cuts 4-6: 51
#cuts 7-9: 129
#cuts 10-12: 42
#cuts >= 20: 0
BICCOS time: 3.6278207302093506 
BICCOS Cumulative time: 9.893218755722046
Preprocessing time: 2.098362922668457 Inference time: 1.3068389892578125 Add cuts time: 0.20922279357910156 Cut analysis time: 0.013396024703979492
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04862 (15), -0.04816 (15), -0.04813 (15), -0.04771 (15), -0.04764 (15), -0.04737 (14), -0.04726 (15), -0.04723 (15), -0.04702 (15), -0.04681 (15), -0.04674 (15), -0.04668 (14), -0.04658 (15), -0.04642 (14), -0.04633 (15), -0.04633 (15), -0.04618 (15), -0.04618 (14), -0.04608 (15), -0.04599 (14), 
Length of domains: 68875
Time: pickout 0.3978    decision 3.8253    set_bounds 4.3510    solve 13.8322    add 0.2038    
Accumulated time: pickout 1.0816    decision 8.8517    set_bounds 10.9654    solve 26.8544    add 1.1382    
Current (lb-rhs): -0.048616692423820496
152193 domains visited
Cumulative time: 59.43906831741333

BaB round 12
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1260] [/input-8, 1470] [/input-8, 1260] [/input-8, 933] [/input-8, 933] [/input-8, 1260] [/input-8, 554] [/input-8, 1260] [/input-8, 933] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.047705285251140594
10 lb beta sum: 0.000281618966255337, worst -0.047701314091682434
Time: prepare 1.1780    bound 10.6957    transfer 0.4123    finalize 0.5579    func 13.2972    
Accumulated time: func 39.3774    prepare 4.1104    bound 29.7772    transfer 1.3069    finalize 2.2712    
all_split False
======================Cut inference begins======================
max lb tensor(0.01123860) min lb tensor(-0.04769872)
Number of Verified Splits: 6623 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 221.
#cuts 4-6: 42
#cuts 7-9: 123
#cuts 10-12: 56
#cuts >= 20: 0
BICCOS time: 4.955427408218384 
BICCOS Cumulative time: 14.84864616394043
Preprocessing time: 2.19913911819458 Inference time: 2.498870611190796 Add cuts time: 0.24352383613586426 Cut analysis time: 0.013893842697143555
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04816 (15), -0.04813 (15), -0.04770 (16), -0.04764 (15), -0.04726 (15), -0.04723 (15), -0.04713 (16), -0.04702 (15), -0.04674 (15), -0.04672 (16), -0.04658 (15), -0.04653 (15), -0.04647 (16), -0.04633 (15), -0.04633 (15), -0.04618 (14), -0.04608 (15), -0.04605 (15), -0.04590 (16), -0.04585 (15), 
Length of domains: 95020
Time: pickout 0.4191    decision 3.5913    set_bounds 4.9462    solve 13.3125    add 0.2053    
Accumulated time: pickout 1.5007    decision 12.4430    set_bounds 15.9115    solve 40.1670    add 1.3435    
Current (lb-rhs): -0.04816208779811859
211106 domains visited
Cumulative time: 87.0771050453186

BaB round 13
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1251] [/input-8, 949] [/input-8, 933] [/input-8, 539] [/input-8, 1251] [/input-8, 933] [/input-8, 539] [/input-8, 539] [/input-8, 933] [/input-8, 1251] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.047251179814338684
10 lb beta sum: 0.00033147557405754924, worst -0.04725099354982376
Time: prepare 1.1954    bound 10.6914    transfer 0.4201    finalize 0.5356    func 13.2847    
Accumulated time: func 52.6620    prepare 5.3065    bound 40.4686    transfer 1.7270    finalize 2.8067    
all_split False
======================Cut inference begins======================
max lb tensor(0.01305452) min lb tensor(-0.04723653)
Number of Verified Splits: 7076 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 257.
#cuts 4-6: 44
#cuts 7-9: 140
#cuts 10-12: 73
#cuts >= 20: 0
BICCOS time: 5.544696569442749 
BICCOS Cumulative time: 20.39334273338318
Preprocessing time: 2.2576258182525635 Inference time: 1.6346755027770996 Add cuts time: 1.6352579593658447 Cut analysis time: 0.01713728904724121
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04770 (16), -0.04724 (16), -0.04721 (16), -0.04713 (16), -0.04672 (16), -0.04672 (16), -0.04668 (16), -0.04664 (16), -0.04653 (15), -0.04647 (16), -0.04625 (16), -0.04623 (16), -0.04616 (16), -0.04610 (16), -0.04605 (15), -0.04600 (16), -0.04598 (16), -0.04590 (16), -0.04585 (15), -0.04581 (15), 
Length of domains: 120712
Time: pickout 0.4306    decision 3.3388    set_bounds 5.6069    solve 13.2960    add 0.2014    
Accumulated time: pickout 1.9313    decision 15.7818    set_bounds 21.5184    solve 53.4630    add 1.5449    
Current (lb-rhs): -0.047698721289634705
269566 domains visited
Cumulative time: 115.70832538604736

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1251] [/input-8, 933] [/input-8, 1251] [/input-8, 1251] [/input-8, 933] [/input-8, 949] [/input-8, 1251] [/input-8, 933] [/input-8, 1251] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04703766107559204
10 lb beta sum: 0.0003072015242651105, worst -0.047036200761795044
Time: prepare 1.2287    bound 10.8541    transfer 0.4395    finalize 0.5670    func 13.5448    
Accumulated time: func 66.2069    prepare 6.5358    bound 51.3227    transfer 2.1665    finalize 3.3737    
all_split False
======================Cut inference begins======================
max lb tensor(0.01354026) min lb tensor(-0.04703449)
Number of Verified Splits: 6193 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 238.
#cuts 4-6: 43
#cuts 7-9: 131
#cuts 10-12: 63
#cuts 13-15: 1
#cuts >= 20: 0
BICCOS time: 5.5969531536102295 
BICCOS Cumulative time: 25.990295886993408
Preprocessing time: 2.2578744888305664 Inference time: 2.929079532623291 Add cuts time: 0.3942558765411377 Cut analysis time: 0.015743255615234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04724 (16), -0.04721 (16), -0.04713 (16), -0.04703 (17), -0.04672 (16), -0.04668 (16), -0.04664 (16), -0.04647 (16), -0.04625 (16), -0.04623 (16), -0.04616 (16), -0.04610 (16), -0.04606 (17), -0.04605 (15), -0.04600 (16), -0.04598 (16), -0.04573 (16), -0.04571 (17), -0.04565 (16), -0.04561 (16), 
Length of domains: 147287
Time: pickout 0.4490    decision 3.3288    set_bounds 4.8797    solve 13.5637    add 0.4143    
Accumulated time: pickout 2.3803    decision 19.1106    set_bounds 26.3981    solve 67.0267    add 1.9592    
Current (lb-rhs): -0.04723653197288513
328909 domains visited
Cumulative time: 144.17830753326416

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 340] [/input-8, 933] [/input-8, 1260] [/input-8, 340] [/input-8, 540] [/input-8, 1260] [/input-8, 340] [/input-8, 340] [/input-8, 340] [/input-8, 1260] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.046552374958992004
10 lb beta sum: 0.0002893798518925905, worst -0.04662802815437317
Time: prepare 1.2345    bound 10.7380    transfer 0.4512    finalize 0.5652    func 13.4464    
Accumulated time: func 79.6533    prepare 7.7708    bound 62.0607    transfer 2.6178    finalize 3.9388    
all_split False
======================Cut inference begins======================
max lb tensor(0.01271987) min lb tensor(-0.04655050)
Number of Verified Splits: 6010 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 264.
#cuts 4-6: 47
#cuts 7-9: 140
#cuts 10-12: 77
#cuts >= 20: 0
BICCOS time: 5.921981334686279 
BICCOS Cumulative time: 31.912277221679688
Preprocessing time: 2.289639949798584 Inference time: 3.2194502353668213 Add cuts time: 0.39546942710876465 Cut analysis time: 0.017421722412109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04724 (16), -0.04703 (17), -0.04672 (16), -0.04668 (16), -0.04664 (16), -0.04655 (17), -0.04647 (17), -0.04625 (16), -0.04616 (16), -0.04606 (17), -0.04600 (16), -0.04598 (16), -0.04580 (17), -0.04573 (16), -0.04571 (17), -0.04565 (16), -0.04561 (16), -0.04557 (17), -0.04552 (16), -0.04548 (16), 
Length of domains: 174045
Time: pickout 0.4674    decision 3.4003    set_bounds 5.2185    solve 13.4604    add 0.4823    
Accumulated time: pickout 2.8477    decision 22.5109    set_bounds 31.6166    solve 80.4871    add 2.4415    
Current (lb-rhs): -0.04723653197288513
388435 domains visited
Cumulative time: 173.35204529762268

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 340] [/input-8, 340] [/input-8, 1260] [/input-8, 1251] [/input-8, 1260] [/input-8, 539] [/input-8, 340] [/input-8, 340] [/input-8, 540] [/input-8, 340] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.046611785888671875
10 lb beta sum: 0.0002806500706356019, worst -0.04661274701356888
Time: prepare 1.2311    bound 10.8614    transfer 0.4789    finalize 0.5997    func 13.6423    
Accumulated time: func 93.2955    prepare 9.0025    bound 72.9221    transfer 3.0966    finalize 4.5385    
all_split False
======================Cut inference begins======================
max lb tensor(0.01344084) min lb tensor(-0.04660966)
Number of Verified Splits: 5635 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 267.
#cuts 4-6: 50
#cuts 7-9: 147
#cuts 10-12: 70
#cuts >= 20: 0
BICCOS time: 4.21567440032959 
BICCOS Cumulative time: 36.12795162200928
Preprocessing time: 2.4803106784820557 Inference time: 1.3164589405059814 Add cuts time: 0.401170015335083 Cut analysis time: 0.017734766006469727
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04703 (17), -0.04668 (16), -0.04661 (17), -0.04655 (17), -0.04647 (17), -0.04616 (16), -0.04609 (17), -0.04606 (17), -0.04600 (16), -0.04598 (17), -0.04580 (17), -0.04571 (17), -0.04563 (17), -0.04561 (16), -0.04557 (17), -0.04548 (16), -0.04545 (17), -0.04532 (17), -0.04523 (17), -0.04522 (17), 
Length of domains: 201178
Time: pickout 0.4661    decision 3.3655    set_bounds 5.5590    solve 13.6625    add 0.4935    
Accumulated time: pickout 3.3137    decision 25.8764    set_bounds 37.1756    solve 94.1496    add 2.9350    
Current (lb-rhs): -0.04703448712825775
448336 domains visited
Time out!!!!!!!!
Result: unknown in 204.8195 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.71828079, -12.07358360,  -7.51085901,  -7.73513126,  -5.85087204,
          -7.76494551,  -8.30688477,  -4.66740465, -11.87115002, -11.40974522]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 561] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 561] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 170] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.23245525, 6.33307838, 2.35018539, 2.53250074, 0.82198715, 2.56909728,
         2.92734528, 6.26307058, 5.81518650]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0730 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.44977188,  -9.06816578,  -8.76676846, -10.00036716,  -8.16498661,
         -10.20727444, -10.19177628,  -9.06856728,  -5.60935688,  -8.05991840]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [446]; unstable size 446; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 151, 1, 446] with unstable size 150 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 446] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 446] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 150] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.39624709, 2.77556920, 2.57724094, 3.80850053, 2.01538920, 4.00958395,
         3.97526073, 2.81353402, 1.83315969]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0330 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.04652691, -11.10261822,  -7.86249161,  -8.90385628,  -7.35591507,
          -8.96246243,  -6.67423820,  -9.53345776, -12.04738331, -11.83759594]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [415]; unstable size 415; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 415] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 415] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 415] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.83799791, 3.77172470, 0.92177504, 1.93019581, 0.40763259, 1.98125422,
         2.40290666, 4.67680788, 4.50188541]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0533 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.33996439, -6.41871643, -5.27160645, -5.78144073, -5.19606686,
         -5.95623350, -5.03869438, -5.45932245, -5.23290539, -6.04166842]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 442] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 442] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 146] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.31949711, 1.40748429, 1.74333405, 1.23676848, 1.91310024, 1.10932398,
         1.36478341, 1.55591130, 2.01130939]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0612 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.12939644, -9.72904682, -5.54302311, -6.04563618, -5.96231461,
         -6.23193979, -5.71355343, -6.85170698, -7.76404381, -8.90234089]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [423]; unstable size 423; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 423] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 423] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 423] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 201] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.53611314,  2.83135986, -0.80475760, -0.42034268,  0.15137629,
         -0.61510229,  0.28265727,  0.83452576,  1.97465420]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.12939644, -9.72904682, -5.54302311, -6.04563618, -5.96231461,
         -6.23193979, -5.71355343, -6.85170698, -7.76404381, -8.90234089]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.12939644, -9.72904778, -5.54302359, -6.04563808, -5.96231556,
          -6.23194075, -5.71355438, -6.85170746, -7.76404476, -8.90234089],
         [-6.12939644, -9.72904778, -5.54302359, -6.04563808, -5.96231556,
          -6.23194075, -5.71355438, -6.85170746, -7.76404476, -8.90234089]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08375835, -0.50261450, -0.08332253, -0.33208370]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0762 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.04236412, -15.83466625, -11.57055759, -12.04814053, -11.33596802,
         -12.07632923, -10.29791260, -13.00263977, -15.47680664, -15.46460438]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [504]; unstable size 504; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 504] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 504] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 504] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 239] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.98187923, 4.42113018, 0.88485742, 1.34177840, 0.68826008, 1.36417842,
         2.12291336, 4.03281069, 4.06385803]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0468 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.82596016, -8.01462746, -5.61366749, -5.94512081, -4.99872208,
         -6.00526476, -5.77766132, -3.03901243, -9.93118095, -6.94092846]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [450]; unstable size 450; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 450] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 450] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 450] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 141] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.08748579, 3.92924905, 2.12131429, 2.35519099, 1.63135076, 2.42033005,
         2.09290051, 5.92348003, 2.98009205]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0398 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.71775055, -8.71694279, -8.45971107, -9.68828869, -8.52095413,
         -9.86249352, -9.58036518, -8.48355675, -7.19637108, -7.55859327]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [433]; unstable size 433; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 433] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 433] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 433] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 170] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.48584473, 1.32305872, 2.39883709, 1.24146867, 2.56375098, 2.28119969,
         1.11799204, 0.07952937, 0.28410673]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0312 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.67823887, -8.79199886, -4.26914644, -4.69909000, -4.87025404,
         -4.79431295, -5.06131744, -5.80675077, -8.86075783, -8.01763248]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [469]; unstable size 469; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 469] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 469] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 469] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 153] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.32742620,  3.28234124, -0.82947564, -0.11151652, -0.27848172,
         -0.02716166,  0.58209598,  3.50851631,  2.55930853]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.67823887, -8.79199886, -4.26914644, -4.69909000, -4.87025404,
         -4.79431295, -5.06131744, -5.80675077, -8.86075783, -8.01763248]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.67823887, -8.79199982, -4.26914644, -4.69909000, -4.87025356,
          -4.79431295, -5.06131649, -5.80675030, -8.86075783, -8.01763248],
         [-6.67823887, -8.79199982, -4.26914644, -4.69909000, -4.87025356,
          -4.79431295, -5.06131649, -5.80675030, -8.86075783, -8.01763248]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.52516651, -0.09522295,  0.07594061,  0.26700354]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0490 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.94152546,  -9.43132877, -11.42302418, -12.00805473, -11.48972893,
         -12.21064949, -12.50059700, -12.93048859,  -7.66620636,  -8.89758873]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [513]; unstable size 513; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 513] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 513] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 513] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 161] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.39024830,  0.27186391,  1.95888186,  2.51927996,  2.04223776,
          2.70385861,  2.90191841,  3.45087051, -1.63618660]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.94152546,  -9.43132877, -11.42302418, -12.00805473, -11.48972893,
         -12.21064949, -12.50059700, -12.93048859,  -7.66620636,  -8.89758873]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.94152737,  -9.43132782, -11.42302322, -12.00805569, -11.48972893,
          -12.21065044, -12.50059700, -12.93048954,  -7.66620636,  -8.89758873],
         [ -8.94152737,  -9.43132782, -11.42302322, -12.00805569, -11.48972893,
          -12.21065044, -12.50059700, -12.93048954,  -7.66620636,  -8.89758873]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04393864, -1.23138237]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.32222211e+00, -1.32222211e+00, -1.29047608e+00,  ...,
            -1.33809519e+00, -1.33809519e+00, -1.33809519e+00],
           [-1.27460313e+00, -1.27460313e+00, -1.25873005e+00,  ...,
            -1.29047608e+00, -1.29047608e+00, -1.29047608e+00],
           [-1.22698402e+00, -1.24285710e+00, -1.24285710e+00,  ...,
            -1.25873005e+00, -1.25873005e+00, -1.27460313e+00],
           ...,
           [ 9.04762819e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.69841349e-01,  1.06349289e-01,  7.46032670e-02],
           [ 7.46032670e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.06349289e-01,  7.46032670e-02, -5.23808524e-02],
           [-4.76180762e-03,  1.11112073e-02,  4.28572372e-02,  ...,
            -4.76180762e-03, -3.65078375e-02, -1.47618949e-01]],

          [[-2.41545767e-01, -2.73751885e-01, -2.41545767e-01,  ...,
            -2.89854944e-01, -2.89854944e-01, -2.89854944e-01],
           [-1.93236589e-01, -2.09339648e-01, -1.93236589e-01,  ...,
            -2.25442708e-01, -2.25442708e-01, -2.25442708e-01],
           [-1.61030471e-01, -1.93236589e-01, -1.61030471e-01,  ...,
            -2.09339648e-01, -2.09339648e-01, -2.09339648e-01],
           ...,
           [ 1.44927651e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             8.05154145e-02,  3.22062373e-02,  3.22062373e-02],
           [ 1.28824592e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             1.61031820e-02,  1.22934580e-07, -3.22059989e-02],
           [ 3.22062373e-02,  4.83092964e-02,  8.05154145e-02,  ...,
            -4.83090580e-02, -6.44121096e-02, -1.12721294e-01]],

          [[ 7.21139610e-01,  6.91154599e-01,  7.06147075e-01,  ...,
             6.76162124e-01,  6.76162124e-01,  6.76162124e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.81109631e-01,  ...,
             7.36132085e-01,  7.36132085e-01,  7.36132085e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.66117096e-01,  ...,
             7.51124620e-01,  7.36132085e-01,  7.36132085e-01],
           ...,
           [ 6.14694245e-02,  3.14844176e-02,  6.14694245e-02,  ...,
             1.64919142e-02, -1.34930937e-02,  1.49940979e-03],
           [ 4.64769229e-02,  3.14844176e-02,  6.14694245e-02,  ...,
            -2.84855980e-02, -4.34781015e-02, -7.34631121e-02],
           [-2.84855980e-02, -1.34930937e-02,  1.64919142e-02,  ...,
            -8.84556174e-02, -1.18440613e-01, -1.63418129e-01]]],


         [[[-1.32222211e+00, -1.32222211e+00, -1.29047608e+00,  ...,
            -1.33809519e+00, -1.33809519e+00, -1.33809519e+00],
           [-1.27460313e+00, -1.27460313e+00, -1.25873005e+00,  ...,
            -1.29047608e+00, -1.29047608e+00, -1.29047608e+00],
           [-1.22698402e+00, -1.24285710e+00, -1.24285710e+00,  ...,
            -1.25873005e+00, -1.25873005e+00, -1.27460313e+00],
           ...,
           [ 9.04762819e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.69841349e-01,  1.06349289e-01,  7.46032670e-02],
           [ 7.46032670e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.06349289e-01,  7.46032670e-02, -5.23808524e-02],
           [-4.76180762e-03,  1.11112073e-02,  4.28572372e-02,  ...,
            -4.76180762e-03, -3.65078375e-02, -1.47618949e-01]],

          [[-2.41545767e-01, -2.73751885e-01, -2.41545767e-01,  ...,
            -2.89854944e-01, -2.89854944e-01, -2.89854944e-01],
           [-1.93236589e-01, -2.09339648e-01, -1.93236589e-01,  ...,
            -2.25442708e-01, -2.25442708e-01, -2.25442708e-01],
           [-1.61030471e-01, -1.93236589e-01, -1.61030471e-01,  ...,
            -2.09339648e-01, -2.09339648e-01, -2.09339648e-01],
           ...,
           [ 1.44927651e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             8.05154145e-02,  3.22062373e-02,  3.22062373e-02],
           [ 1.28824592e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             1.61031820e-02,  1.22934580e-07, -3.22059989e-02],
           [ 3.22062373e-02,  4.83092964e-02,  8.05154145e-02,  ...,
            -4.83090580e-02, -6.44121096e-02, -1.12721294e-01]],

          [[ 7.21139610e-01,  6.91154599e-01,  7.06147075e-01,  ...,
             6.76162124e-01,  6.76162124e-01,  6.76162124e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.81109631e-01,  ...,
             7.36132085e-01,  7.36132085e-01,  7.36132085e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.66117096e-01,  ...,
             7.51124620e-01,  7.36132085e-01,  7.36132085e-01],
           ...,
           [ 6.14694245e-02,  3.14844176e-02,  6.14694245e-02,  ...,
             1.64919142e-02, -1.34930937e-02,  1.49940979e-03],
           [ 4.64769229e-02,  3.14844176e-02,  6.14694245e-02,  ...,
            -2.84855980e-02, -4.34781015e-02, -7.34631121e-02],
           [-2.84855980e-02, -1.34930937e-02,  1.64919142e-02,  ...,
            -8.84556174e-02, -1.18440613e-01, -1.63418129e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0461 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.31059456, -9.19869709, -6.36061764, -5.86587429, -6.10512066,
         -5.87761021, -5.44350815, -7.33536816, -9.65457726, -9.34368134]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [529]; unstable size 529; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 279, 1, 529] with unstable size 278 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 529] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 529] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [278]; unstable size 278; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 278] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 278] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.59141195,  2.18968153,  0.02786517, -0.24016404, -0.01105540,
         -0.84800005,  0.91358435,  2.79599762,  2.43839073]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.31059456, -9.19869709, -6.36061764, -5.86587429, -6.10512066,
         -5.87761021, -5.44350815, -7.33536816, -9.65457726, -9.34368134]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.31059361, -9.19869709, -6.36061716, -5.86587334, -6.10511971,
          -5.87760925, -5.44350719, -7.33536768, -9.65457630, -9.34368038],
         [-8.31059361, -9.19869709, -6.36061716, -5.86587334, -6.10511971,
          -5.87760925, -5.44350719, -7.33536768, -9.65457630, -9.34368038]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.23924637,  0.01173592, -0.42236614]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0725 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.56623745, -11.41576767, -10.07493591,  -9.61873627,  -8.49861526,
          -9.59471893, -10.02411652,  -5.97250652, -15.06334496, -10.70611000]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [380]; unstable size 380; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 380] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 380] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 380] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 170] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.77624798, 4.21952915, 3.57391572, 2.98815560, 2.16194487, 2.97055149,
         3.34188151, 7.80460072, 3.62507772]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0323 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965576,
         -7.48542309, -5.95269966, -6.55542850, -6.95760822, -7.28021479]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [718]; unstable size 718; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 226, 1, 718] with unstable size 225 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 718] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 718] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [225]; unstable size 225; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 225] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.73039460, -0.79011083,  0.57272565, -1.24159360,  0.72255588,
         -0.83794022, -0.30544654,  0.50340194,  0.65051723]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965576,
         -7.48542309, -5.95269966, -6.55542850, -6.95760822, -7.28021479]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965672,
          -7.48542261, -5.95269966, -6.55542803, -6.95760727, -7.28021431],
         [-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965672,
          -7.48542261, -5.95269966, -6.55542803, -6.95760727, -7.28021431]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.17822742, -0.57796001, -0.08491707,  0.51781130]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0520 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.97952795, -8.99672222, -2.56834173, -6.00308132, -2.85744190,
         -6.12038279, -4.47296047, -6.33899212, -7.67273140, -9.32237816]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [671]; unstable size 671; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 671] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 671] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 671] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 138] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.03369832, 5.73617172, 3.16968560, 0.11967242, 3.28296471, 1.49780869,
         3.40163088, 4.61310005, 6.06763172]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0362 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.72943306, -13.36404133, -10.46452236, -10.18775558, -10.67775059,
         -10.31442547, -10.42091751, -12.09385109, -14.04162884, -12.43282795]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [519]; unstable size 519; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 208, 1, 519] with unstable size 207 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 519] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 519] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [207]; unstable size 207; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 207] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 207] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.77904427,  2.09425759, -0.17746961, -0.14749081, -0.04247403,
         -0.25705299,  1.25096059,  2.87834311,  1.30093026]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.72943306, -13.36404133, -10.46452236, -10.18775558, -10.67775059,
         -10.31442547, -10.42091751, -12.09385109, -14.04162884, -12.43282795]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.72943401, -13.36404228, -10.46452332, -10.18775558, -10.67775154,
          -10.31442547, -10.42091846, -12.09385109, -14.04162884, -12.43282604],
         [-12.72943401, -13.36404228, -10.46452332, -10.18775558, -10.67775154,
          -10.31442547, -10.42091846, -12.09385109, -14.04162884, -12.43282604]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.15009785, -0.12666988,  0.36332607,  0.10649300]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0433 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.06531239,  -7.74203110,  -9.88070679,  -9.82949257,  -9.60023689,
          -9.98339939, -10.37213230,  -9.42480564,  -7.49855232,  -6.63923311]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [475]; unstable size 475; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 475] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 475] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 475] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 175] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.84191799, 0.84316367, 2.53841209, 2.50969028, 2.26216412, 2.65042353,
         3.05267382, 2.06743336, 0.15342283]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0317 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.73141861, -11.30915737,  -4.88030291,  -7.12666321,  -4.79732800,
          -7.23894691,  -4.88668823,  -8.34137917, -11.50362206, -11.30148792]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [430]; unstable size 430; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 430] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 430] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 430] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 147] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.51234388,  5.89082575, -0.09712332,  2.02813911,  2.13893557,
         -0.29849362,  3.28444505,  6.09165287,  5.92712975]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.73141861, -11.30915737,  -4.88030291,  -7.12666321,  -4.79732800,
          -7.23894691,  -4.88668823,  -8.34137917, -11.50362206, -11.30148792]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.57346249, -11.22899342,  -4.74797535,  -7.02396488,  -4.79112053,
           -7.14028025,  -4.77940559,  -8.43676853, -11.36150742, -11.23217297],
         [ -8.57346249, -11.22899342,  -4.74797535,  -7.02396488,  -4.79112053,
           -7.14028025,  -4.77940559,  -8.43676853, -11.36150742, -11.23217297]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04314518, -0.01171494]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0143 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0842 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.23663616,  -7.30285454, -10.59052181, -11.18651009,  -9.79314327,
         -11.32224941, -10.81732941, -10.63050747,  -8.28581619,  -8.59702969]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [473]; unstable size 473; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 473] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 473] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 473] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 188] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.20088100, 2.32582426, 2.93001938, 1.51513958, 3.04989457, 2.44549131,
         2.25616646, 0.37113976, 1.01464093]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0724 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.20327091, -13.29206181, -10.09174442, -10.56737804, -10.67555809,
         -10.55320644, -10.67248249, -11.32285500, -14.20694542, -13.81692600]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 540] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 540] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 159] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.68249464, 2.60424328, 0.24534428, 0.40565336, 0.23199639, 0.28501636,
         0.98760176, 3.62160492, 3.12635517]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0486 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.88856792, -8.49503231, -5.36369038, -4.94106483, -4.84540939,
         -4.91523314, -4.41490841, -5.03733397, -9.81567383, -8.20178318]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [406]; unstable size 406; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 406] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 406] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 406] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 177] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.21111035,  2.55126286, -0.03250957, -0.36227441, -0.47769570,
         -0.38185108, -1.15160513,  3.89880323,  2.32914233]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.88856792, -8.49503231, -5.36369038, -4.94106483, -4.84540939,
         -4.91523314, -4.41490841, -5.03733397, -9.81567383, -8.20178318]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.88856697, -8.49503231, -5.36369038, -4.94106483, -4.84540987,
          -4.91523314, -4.41490841, -5.03733492, -9.81567383, -8.20178318],
         [-8.88856697, -8.49503231, -5.36369038, -4.94106483, -4.84540987,
          -4.91523314, -4.41490841, -5.03733492, -9.81567383, -8.20178318]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.32635546, -0.09627008, -0.19192505, -0.12210178, -0.62242651]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0802 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.65746784, -6.18078041, -1.80823123, -1.86352706, -2.33689523,
         -1.93374062, -3.13896918, -1.17628169, -6.39098358, -3.11623693]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [313]; unstable size 313; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 117, 1, 313] with unstable size 116 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 313] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 313] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [116]; unstable size 116; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 116] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 116] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.51907647,  3.67257738, -0.19120371,  0.28516862, -0.12094021,
          0.99198133, -0.98088288,  3.95130229,  0.65798235]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.65746784, -6.18078041, -1.80823123, -1.86352706, -2.33689523,
         -1.93374062, -3.13896918, -1.17628169, -6.39098358, -3.11623693]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.65746784, -6.18078041, -1.80823135, -1.86352754, -2.33689499,
          -1.93374085, -3.13896894, -1.17628217, -6.39098454, -3.11623693],
         [-3.65746784, -6.18078041, -1.80823135, -1.86352754, -2.33689499,
          -1.93374085, -3.13896894, -1.17628217, -6.39098454, -3.11623693]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.05529618,  0.12550950, -0.63194919]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0421 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
         -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [462]; unstable size 462; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 180, 1, 462] with unstable size 179 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 462] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 462] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [179]; unstable size 179; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 179] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 179] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.67029428,  1.91223383,  2.76860142,  2.38123465,  2.85544062,
          2.41773987,  3.34567499, -0.93968225,  0.84438062]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
         -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
          -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.33573914]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.67142856, -1.65555561,  ..., -0.27460307,
            -0.32222211, -0.24285704],
           [-1.09999990, -0.90952379, -0.89365077,  ...,  0.02698422,
            -0.22698402, -0.35396814],
           [-0.70317459, -0.57619047, -0.73492062,  ...,  0.09047628,
            -0.08412688, -0.16349196],
           ...,
           [ 0.64603180,  0.61428577,  0.63015878,  ..., -1.86190474,
            -1.81428576, -1.52857137],
           [ 0.61428577,  0.55079371,  0.56666672,  ..., -1.70317459,
            -1.36984122, -0.87777776],
           [ 0.01111121, -0.17936498, -0.24285704,  ..., -0.98888886,
            -0.78253967, -0.62380952]],

          [[-1.64251208, -1.57809973, -1.56199670,  ..., -0.70853460,
            -0.77294683, -0.67632848],
           [-0.86956519, -0.67632848, -0.66022539,  ..., -0.59581316,
            -0.78904986, -0.83735907],
           [-0.33816412, -0.20933965, -0.35426718,  ..., -0.62801927,
            -0.74074072, -0.69243151],
           ...,
           [ 0.64412248,  0.62801939,  0.64412248,  ..., -1.77133656,
            -1.72302747, -1.44927526],
           [ 0.64412248,  0.57971025,  0.59581327,  ..., -1.64251208,
            -1.32045078, -0.80515295],
           [ 0.11272153, -0.08051517, -0.16103047,  ..., -0.95008045,
            -0.74074072, -0.59581316]],

          [[-1.28785622, -1.22788620, -1.21289361,  ..., -0.56821585,
            -0.67316341, -0.59820086],
           [-0.43328333, -0.25337315, -0.23838064,  ..., -0.47826082,
            -0.70314842, -0.76311839],
           [ 0.16641696,  0.28635699,  0.13643195,  ..., -0.56821585,
            -0.68815589, -0.62818587],
           ...,
           [ 0.61619210,  0.60119957,  0.61619210,  ..., -1.46776617,
            -1.40779614, -1.15292358],
           [ 0.66116959,  0.60119957,  0.61619210,  ..., -1.36281872,
            -1.04797614, -0.58320838],
           [ 0.24137947,  0.06146942, -0.01349309,  ..., -0.73313338,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0316 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.84198666, -4.72074509, -2.69757771, -2.34419656, -2.72111034,
         -2.42904544, -2.38987303, -3.45313597, -5.43384743, -4.25232363]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [597]; unstable size 597; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 597] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 597] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 597] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 203] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.79418397,  1.27176404, -0.11253989, -0.41002411, -0.13396978,
         -0.34127319,  0.48139548,  2.23571205,  0.95288730]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.84198666, -4.72074509, -2.69757771, -2.34419656, -2.72111034,
         -2.42904544, -2.38987303, -3.45313597, -5.43384743, -4.25232363]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.84198666, -4.72074509, -2.69757748, -2.34419608, -2.72111011,
          -2.42904544, -2.38987303, -3.45313621, -5.43384695, -4.25232363],
         [-4.84198666, -4.72074509, -2.69757748, -2.34419608, -2.72111011,
          -2.42904544, -2.38987303, -3.45313621, -5.43384695, -4.25232363]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.30770445, -0.04567695,  0.33123708,  0.03917241]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0784 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.19456577,  -8.36557293, -13.55558205, -13.23456478, -12.32262707,
         -13.37201500, -13.57000160, -12.17472267, -11.16325188,  -8.78851414]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [588]; unstable size 588; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 588] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 588] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 588] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 142] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.16457796, 4.29507446, 3.98237896, 3.06007886, 4.11273384, 4.28068447,
         2.84930634, 2.22545958, 0.24410954]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0696 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.71225262, -12.01007652,  -8.29110718,  -7.58899784,  -8.32572460,
          -7.52227640,  -8.05987549,  -8.91144371, -14.67064476, -11.80937672]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 458] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 458] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.67991829, 3.77827549, 0.47558522, 0.04749578, 0.50099051, 0.13609672,
         1.01967597, 6.51381016, 3.67172766]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0667 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.25923347,  -8.93387318, -12.07442665, -12.36280155, -11.61011887,
         -12.40742683, -12.73714542, -11.05641937,  -9.61292076, -10.40355968]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 515] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 515] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 138] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.75624776, 2.35665607, 2.62816501, 1.91056156, 2.66094518, 2.94464588,
         1.34808433, 0.20877779, 1.29339421]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0318 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-0.12398815, -7.37717056, -1.18167615, -3.64735293, -2.90664721,
         -3.76087618, -4.92453289, -5.42116880, -1.31887615, -6.85669994]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 128, 1, 515] with unstable size 127 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 515] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [127]; unstable size 127; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 127] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 127] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.24615049,  5.69084597,  2.23981619,  1.54952383,  2.35145092,
          3.44640017,  3.95842123, -0.23636365,  5.13023090]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.12398815, -7.37717056, -1.18167615, -3.64735293, -2.90664721,
         -3.76087618, -4.92453289, -5.42116880, -1.31887615, -6.85669994]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.12398925, -7.37717152, -1.18167734, -3.64735389, -2.90664840,
          -3.76087666, -4.92453480, -5.42116880, -1.31887758, -6.85670042],
         [-0.12398925, -7.37717152, -1.18167734, -3.64735389, -2.90664840,
          -3.76087666, -4.92453480, -5.42116880, -1.31887758, -6.85670042]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.05768812,  0.13720024]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]],


         [[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0346 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.27392960, -10.40883446, -10.95635605, -11.48171997, -11.53870010,
         -11.52956009, -10.56092262, -12.92515469, -12.09226036, -11.58665943]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [407]; unstable size 407; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 156, 1, 407] with unstable size 155 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 407] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 407] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [155]; unstable size 155; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 155] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 155] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.79021215, -0.15416002,  0.34587622,  0.41858816,  0.38338351,
         -0.53462267,  1.75449777,  0.91765881,  0.82849878]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.27392960, -10.40883446, -10.95635605, -11.48171997, -11.53870010,
         -11.52956009, -10.56092262, -12.92515469, -12.09226036, -11.58665943]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.27393055, -10.40883350, -10.95635605, -11.48171997, -11.53870010,
          -11.52956009, -10.56092167, -12.92515469, -12.09225941, -11.58665943],
         [-10.27393055, -10.40883350, -10.95635605, -11.48171997, -11.53870010,
          -11.52956009, -10.56092167, -12.92515469, -12.09225941, -11.58665943]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13490295,  0.54752254,  0.15208817]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]],


         [[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]],


         [[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0351 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.03281784, -8.23260021, -1.84217274, -3.97030663, -2.07109594,
         -4.04030323, -2.67588925, -4.08758450, -7.76276398, -8.17520523]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [391]; unstable size 391; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 391] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 391] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 391] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 169] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.71139073,  4.86630106, -1.22754920,  0.94557452, -1.01543319,
          1.00673783,  0.82872826,  4.49218941,  4.77490377]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.03281784, -8.23260021, -1.84217274, -3.97030663, -2.07109594,
         -4.04030323, -2.67588925, -4.08758450, -7.76276398, -8.17520523]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.03281879, -8.23260021, -1.84217358, -3.97030759, -2.07109690,
          -4.04030418, -2.67589021, -4.08758593, -7.76276398, -8.17520523],
         [-5.03281879, -8.23260021, -1.84217358, -3.97030759, -2.07109690,
          -4.04030418, -2.67589021, -4.08758593, -7.76276398, -8.17520523]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.83371663, -0.60479331]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0764 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
         -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [746]; unstable size 746; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 746] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 746] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 746] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 260] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.64249682,  4.36007452,  0.44215173, -0.09383833,  0.53698552,
          0.11810172,  1.25011325,  2.22731781,  3.35412169]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
         -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.59it/s]100%|██████████| 1/1 [00:00<00:00,  8.58it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.02882814, -6.13730335, -0.72621405, -1.43307424, -0.73920232,
          -1.52886283, -1.13457453, -2.27671862, -4.01522541, -5.08771849]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.01298827]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1196 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.183820724487305
alpha/beta optimization time: 1.2323102951049805
initial alpha-crown bounds: tensor([[ 1.68035626,  4.42551947,  0.46530288, -0.08068648,  0.55969673,
          0.14187527,  1.27987528,  2.29280472,  3.41907692]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08068647980690002
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6088421344757
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6088047027588
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.60877799987793
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6087567806244
Verifying property 3 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08068648]], device='cuda:0') need to verify.
Model prediction is: tensor([-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
        -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08068648]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 746
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 254
Node /15 input 0: size torch.Size([100]) unstable 9
-----------------
# of unstable neurons: 1009
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010704994201660156
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08068550378084183
10 lb beta sum: 0.0, worst -0.080685555934906
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0549    transfer 0.0001    finalize 0.0001    func 0.0554    
Accumulated time: func 0.0554    prepare 0.0002    bound 0.0549    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] 
split level 1: [/input-12, 69] 
split level 2: [/input-8, 549] 
split level 3: [/input-8, 545] 
split level 4: [/input-8, 546] 
split level 5: [/input-8, 537] 
split level 6: [/input-8, 1453] 
split level 7: [/input-8, 330] 
split level 8: [/input-8, 548] 
split level 9: [/input-8, 1467] 
split level 10: [/input-8, 547] 
split level 11: [/input-8, 331] 
split level 12: [/input-8, 939] 
split level 13: [/input, 807] 
split level 14: [/input, 715] 
split level 15: [/input-8, 520] 
split level 16: [/input-8, 1470] 
split level 17: [/input-8, 329] 
split level 18: [/input-8, 1259] 
split level 19: [/input-8, 1233] 
split level 20: [/input-8, 1175] 
split level 21: [/input-8, 740] 
split level 22: [/input-8, 1197] 
split level 23: [/input-8, 990] 
split level 24: [/input-8, 900] 
split level 25: [/input-8, 1251] 
split level 26: [/input-8, 1944] 
split level 27: [/input-8, 100] 
split level 28: [/input-8, 88] 
split level 29: [/input-8, 925] 
split level 30: [/input-8, 1243] 
split level 31: [/input, 1079] 
split level 32: [/input-8, 1258] 
split level 33: [/input-8, 266] 
split level 34: [/input-8, 1461] 
split level 35: [/input-8, 1252] 
split level 36: [/input-8, 932] 
split level 37: [/input-8, 949] 
split level 38: [/input-8, 941] 
split level 39: [/input, 2385] 
split level 40: [/input-8, 931] 
split level 41: [/input-8, 1227] 
split level 42: [/input-8, 1217] 
split level 43: [/input-8, 942] 
split level 44: [/input-8, 977] 
split level 45: [/input, 1878] 
split level 46: [/input-8, 1235] 
split level 47: [/input-8, 1218] 
split level 48: [/input, 734] 
split level 49: [/input, 1061] 
split level 50: [/input-8, 2003] 
split level 51: [/input, 1129] 
split level 52: [/input, 1891] 
split level 53: [/input-8, 2004] 
split level 54: [/input, 3052] 
split level 55: [/input-8, 66] 
split level 56: [/input-8, 933] 
split level 57: [/input-8, 1250] 
split level 58: [/input, 1064] 
split level 59: [/input-8, 917] 
split level 60: [/input-8, 1265] 
split level 61: [/input-8, 1514] 
split level 62: [/input, 1892] 
split level 63: [/input, 3656] 
split level 64: [/input, 1893] 
split level 65: [/input, 2243] 
split level 66: [/input, 3620] 
split level 67: [/input, 1046] 
split level 68: [/input, 1877] 
split level 69: [/input-8, 373] 
split level 70: [/input, 1864] 
split level 71: [/input-8, 1952] 
split level 72: [/input, 2276] 
split level 73: [/input-8, 924] 
split level 74: [/input-8, 1204] 
split level 75: [/input-8, 938] 
split level 76: [/input-8, 1242] 
split level 77: [/input, 536] 
split level 78: [/input-8, 1244] 
split level 79: [/input-8, 901] 
split level 80: [/input, 1861] 
split level 81: [/input-8, 1515] 
split level 82: [/input-8, 1257] 
split level 83: [/input-8, 747] 
split level 84: [/input-8, 1006] 
split level 85: [/input, 2788] 
split level 86: [/input-8, 1953] 
split level 87: [/input-8, 367] 
split level 88: [/input, 1813] 
split level 89: [/input-8, 908] 
split level 90: [/input, 613] 
split level 91: [/input-8, 997] 
split level 92: [/input, 2524] 
split level 93: [/input-8, 731] 
split level 94: [/input-8, 989] 
split level 95: [/input, 3641] 
split level 96: [/input, 2508] 
split level 97: [/input-8, 916] 
split level 98: [/input, 650] 
split level 99: [/input, 1032] 
split level 100: [/input-8, 1960] 
split level 101: [/input, 1224] 
split level 102: [/input, 1062] 
split level 103: [/input, 1847] 
split level 104: [/input, 3607] 
split level 105: [/input, 711] 
split level 106: [/input, 936] 
split level 107: [/input-8, 1567] 
split level 108: [/input, 3162] 
split level 109: [/input, 1192] 
split level 110: [/input, 1811] 
split level 111: [/input, 577] 
split level 112: [/input-8, 1211] 
split level 113: [/input, 1846] 
split level 114: [/input, 694] 
split level 115: [/input, 1875] 
split level 116: [/input, 710] 
split level 117: [/input-8, 1241] 
split level 118: [/input, 806] 
split level 119: [/input-8, 1505] 
split level 120: [/input, 1809] 
split level 121: [/input-8, 1601] 
split level 122: [/input, 2386] 
split level 123: [/input, 2756] 
split level 124: [/input, 2363] 
split level 125: [/input-8, 1956] 
split level 126: [/input-8, 1459] 
split level 127: [/input, 1874] 
split level 128: [/input-8, 981] 
split level 129: [/input-8, 730] 
split level 130: [/input, 1125] 
split level 131: [/input, 3617] 
split level 132: [/input-8, 1330] 
split level 133: [/input, 1876] 
split level 134: [/input-8, 1955] 
split level 135: [/input, 1852] 
split level 136: [/input, 958] 
split level 137: [/input-8, 909] 
split level 138: [/input, 1222] 
split level 139: [/input, 1826] 
split level 140: [/input, 2525] 
split level 141: [/input, 1894] 
split level 142: [/input-8, 93] 
split level 143: [/input-8, 359] 
split level 144: [/input, 2613] 
split level 145: [/input, 1930] 
split level 146: [/input, 1114] 
split level 147: [/input, 1914] 
split level 148: [/input, 1860] 
split level 149: [/input, 1160] 
split level 150: [/input-8, 132] 
split level 151: [/input, 1197] 
split level 152: [/input, 1929] 
split level 153: [/input-8, 1962] 
split level 154: [/input, 794] 
split level 155: [/input, 520] 
split level 156: [/input-8, 261] 
split level 157: [/input, 1193] 
split level 158: [/input-8, 1595] 
split level 159: [/input, 789] 
split level 160: [/input, 2220] 
split level 161: [/input-8, 1333] 
split level 162: [/input, 1911] 
split level 163: [/input, 1925] 
split level 164: [/input, 1928] 
split level 165: [/input, 614] 
split level 166: [/input, 537] 
split level 167: [/input, 565] 
split level 168: [/input, 1220] 
split level 169: [/input, 1985] 
split level 170: [/input, 1096] 
split level 171: [/input, 849] 
split level 172: [/input, 2146] 
split level 173: [/input, 2025] 
split level 174: [/input, 2395] 
split level 175: [/input, 1226] 
split level 176: [/input, 1812] 
split level 177: [/input, 3674] 
split level 178: [/input, 1868] 
split level 179: [/input-8, 1583] 
split level 180: [/input, 2677] 
split level 181: [/input, 1922] 
split level 182: [/input, 1912] 
split level 183: [/input, 2614] 
split level 184: [/input, 1835] 
split level 185: [/input, 2387] 
split level 186: [/input, 1836] 
split level 187: [/input, 1969] 
split level 188: [/input, 618] 
split level 189: [/input, 1838] 
split level 190: [/input, 937] 
split level 191: [/input-8, 1596] 
split level 192: [/input, 1350] 
split level 193: [/input, 2390] 
split level 194: [/input, 646] 
split level 195: [/input, 3961] 
split level 196: [/input, 551] 
split level 197: [/input, 1819] 
split level 198: [/input-8, 104] 
split level 199: [/input, 1156] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08065588027238846
10 lb beta sum: 0.0, worst -0.08065586537122726
Time: prepare 0.0118    bound 0.1037    transfer 0.0020    finalize 0.0032    func 0.1234    
Accumulated time: func 0.1788    prepare 0.0225    bound 0.1586    transfer 0.0021    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.00262415) min lb tensor(-0.08065477)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010871410369873047 
BICCOS Cumulative time: 0.010871410369873047
Preprocessing time: 0.010432004928588867 Inference time: 0.00011301040649414062 Add cuts time: 5.14984130859375e-05 Cut analysis time: 0.00027489662170410156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07899 (1), -0.07895 (1), -0.07890 (1), -0.07887 (1), -0.07886 (1), -0.07881 (1), -0.07878 (1), -0.07872 (1), -0.07867 (1), -0.07867 (1), -0.07860 (1), -0.07859 (1), -0.07858 (1), -0.07847 (1), -0.07842 (1), -0.07840 (1), -0.07837 (1), -0.07834 (1), -0.07826 (1), -0.07821 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5251    set_bounds 0.0090    solve 0.1235    add 0.0725    
Accumulated time: pickout 0.0003    decision 0.5251    set_bounds 0.0090    solve 0.1235    add 0.0725    
Current (lb-rhs): -0.0789862796664238
50 domains visited
Cumulative time: 0.8017427921295166

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 69] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-8, 549] [/input-8, 545] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-8, 549] [/input-12, 69] [/input-12, 69] [/input-12, 69] 
split level 2: [/input-8, 546] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 545] [/input-8, 549] [/input-8, 549] [/input-8, 549] 
split level 3: [/input-8, 1467] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07714386284351349
10 lb beta sum: 0.16869805753231049, worst -0.06838516891002655
Time: prepare 0.0075    bound 0.1218    transfer 0.0019    finalize 0.0027    func 0.1368    
Accumulated time: func 0.3156    prepare 0.0303    bound 0.2804    transfer 0.0041    finalize 0.0060    
all_split False
======================Cut inference begins======================
max lb tensor(0.02423793) min lb tensor(-0.06820939)
Number of Verified Splits: 49 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.015284061431884766 
BICCOS Cumulative time: 0.026155471801757812
Preprocessing time: 0.01213216781616211 Inference time: 0.0017275810241699219 Add cuts time: 0.001148223876953125 Cut analysis time: 0.0002760887145996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02295 (2), -0.02286 (2), -0.02275 (2), -0.02272 (2), -0.02270 (2), -0.02258 (2), -0.02245 (2), -0.02236 (2), -0.02231 (2), -0.02218 (2), -0.02218 (2), -0.02216 (2), -0.02211 (2), -0.02204 (2), -0.02190 (2), -0.02183 (2), -0.02167 (2), -0.02162 (2), -0.02160 (2), -0.02160 (2), 
Length of domains: 50
Time: pickout 0.0015    decision 0.0258    set_bounds 0.0135    solve 0.1369    add 0.0820    
Accumulated time: pickout 0.0018    decision 0.5508    set_bounds 0.0225    solve 0.2604    add 0.1544    
Current (lb-rhs): -0.022945940494537354
100 domains visited
Cumulative time: 1.076902151107788

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-8, 546] [/input-8, 549] [/input-8, 1467] [/input-8, 549] [/input-8, 546] [/input-8, 549] [/input-8, 546] [/input-8, 549] [/input-8, 549] [/input-8, 546] 
split level 2: [/input-8, 1467] [/input-8, 1467] [/input, 901] [/input-8, 546] [/input-8, 1467] [/input-8, 546] [/input-8, 1467] [/input-8, 1467] [/input-8, 546] [/input-8, 1467] 
split level 3: [/input-8, 949] [/input-8, 949] [/input, 917] [/input-8, 1467] [/input, 852] [/input-8, 1467] [/input-8, 949] [/input-8, 949] [/input-8, 1467] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.22440406680107117, worst -0.022946149110794067
10 lb beta sum: 0.22440406680107117, worst -0.023908182978630066
Time: prepare 0.0199    bound 0.1223    transfer 0.0008    finalize 0.0026    func 0.1484    
Accumulated time: func 0.4639    prepare 0.0505    bound 0.4028    transfer 0.0049    finalize 0.0086    
all_split False
======================Cut inference begins======================
max lb tensor(0.03816617) min lb tensor(-0.02237587)
Number of Verified Splits: 53 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 1
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.016138315200805664 
BICCOS Cumulative time: 0.04229378700256348
Preprocessing time: 0.01225733757019043 Inference time: 0.002210855484008789 Add cuts time: 0.0012657642364501953 Cut analysis time: 0.00040435791015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01392 (3), -0.01383 (3), -0.01366 (3), -0.01365 (3), -0.01361 (3), -0.01345 (3), -0.01338 (3), -0.01318 (3), -0.01314 (3), -0.01310 (3), -0.01306 (3), -0.01293 (3), -0.01269 (3), -0.01267 (3), -0.01266 (3), -0.01255 (3), -0.01250 (3), -0.01250 (3), -0.01246 (3), -0.01244 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0200    set_bounds 0.0153    solve 0.1485    add 0.0917    
Accumulated time: pickout 0.0030    decision 0.5708    set_bounds 0.0378    solve 0.4089    add 0.2461    
Current (lb-rhs): -0.013923853635787964
150 domains visited
Cumulative time: 1.3699417114257812

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-8, 549] [/input-8, 549] [/input-8, 546] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 546] [/input-8, 549] 
split level 2: [/input-8, 1467] [/input-8, 546] [/input-8, 1467] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 1467] [/input-8, 1467] [/input-8, 1467] [/input-8, 546] 
split level 3: [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 1467] [/input-8, 1467] [/input-8, 949] [/input-8, 547] [/input-8, 949] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025380581617355347
10 lb beta sum: 0.13922446966171265, worst -0.015734702348709106
Time: prepare 0.0085    bound 0.1548    transfer 0.0008    finalize 0.0027    func 0.1704    
Accumulated time: func 0.6344    prepare 0.0593    bound 0.5576    transfer 0.0057    finalize 0.0113    
all_split False
======================Cut inference begins======================
max lb tensor(0.04271984) min lb tensor(-0.01338315)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 1
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.0190887451171875 
BICCOS Cumulative time: 0.06138253211975098
Preprocessing time: 0.01428365707397461 Inference time: 0.003054380416870117 Add cuts time: 0.0012316703796386719 Cut analysis time: 0.0005190372467041016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00475 (4), -0.00471 (4), -0.00470 (4), -0.00469 (4), -0.00468 (4), -0.00468 (4), -0.00467 (4), -0.00466 (4), -0.00465 (4), -0.00465 (4), -0.00443 (4), -0.00443 (4), -0.00441 (4), -0.00439 (4), -0.00439 (4), -0.00437 (4), -0.00436 (4), -0.00426 (4), -0.00423 (4), -0.00417 (4), 
Length of domains: 50
Time: pickout 0.0016    decision 0.0217    set_bounds 0.0179    solve 0.1706    add 0.0989    
Accumulated time: pickout 0.0046    decision 0.5925    set_bounds 0.0557    solve 0.5795    add 0.3449    
Current (lb-rhs): -0.004748702049255371
200 domains visited
Cumulative time: 1.7000024318695068

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-8, 546] 
split level 1: [/input-8, 547] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 1467] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 547] 
split level 2: [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 546] [/input-8, 547] [/input-8, 547] [/input-8, 1467] 
split level 3: [/input-8, 949] [/input-8, 949] [/input-8, 547] [/input-8, 949] [/input-8, 547] [/input-8, 949] [/input-8, 1467] [/input-8, 949] [/input-8, 949] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2210291624069214, worst -0.004748672246932983
10 lb beta sum: 0.2210291624069214, worst -0.007425293326377869
Time: prepare 0.0175    bound 0.1546    transfer 0.0008    finalize 0.0029    func 0.1787    
Accumulated time: func 0.8131    prepare 0.0771    bound 0.7122    transfer 0.0066    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.04608624) min lb tensor(-0.00432603)
Number of Verified Splits: 144 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.02272319793701172 
BICCOS Cumulative time: 0.0841057300567627
Preprocessing time: 0.011998891830444336 Inference time: 0.007400989532470703 Add cuts time: 0.002644777297973633 Cut analysis time: 0.0006785392761230469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00097 (5), -0.00094 (5), -0.00092 (5), -0.00092 (5), -0.00092 (5), -0.00090 (5), -0.00089 (5), -0.00089 (5), -0.00088 (5), -0.00088 (5), -0.00085 (5), -0.00079 (5), -0.00076 (5), -0.00074 (5), -0.00072 (5), -0.00071 (5), -0.00069 (5), -0.00069 (5), -0.00068 (5), -0.00065 (5), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0206    set_bounds 0.0159    solve 0.1788    add 0.3585    
Accumulated time: pickout 0.0058    decision 0.6132    set_bounds 0.0715    solve 0.7583    add 0.7034    
Current (lb-rhs): -0.0009684860706329346
250 domains visited
Cumulative time: 2.2985787391662598

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1461]), tensor([-1.]), tensor([0]), tensor([1.40129846e-45]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 549], [1.0, -1.0, -1.0], [0, 0, 0], [0.00609158119186759, 0.003952519502490759, 0.0017051713075488806], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.40793245e-36, 4.28888202e-02]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 549], [1.0, -1.0, -1.0], [0, 0, 0], [0.00609158119186759, 0.003952519502490759, 0.0017051713075488806], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.40793245e-36, 5.60359797e-04]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 549], [1.0, -1.0, 1.0], [0, 0, 0], [0.00609158119186759, 0.003952519502490759, 0.005888418760150671], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.40793245e-36, 4.32740897e-02]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 549], [1.0, -1.0, 1.0], [0, 0, 0], [0.00609158119186759, 0.003952519502490759, 0.005888418760150671], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.40793245e-36, 7.93980202e-04]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 546], [1.0, 1.0, -1.0], [0, 0, 0], [0.00609158119186759, 0.0034605131950229406, 0.002154977759346366], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.40793245e-36, 4.27261889e-02]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 546], [1.0, 1.0, -1.0], [0, 0, 0], [0.00609158119186759, 0.0034605131950229406, 0.002154977759346366], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.40793245e-36, 9.96457180e-04]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 546], [1.0, 1.0, 1.0], [0, 0, 0], [0.00609158119186759, 0.0034605131950229406, 0.003350140294060111], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.40793245e-36, 4.31883633e-02]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 546], [1.0, 1.0, 1.0], [0, 0, 0], [0.00609158119186759, 0.0034605131950229406, 0.003350140294060111], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.40793245e-36, 9.76072391e-04]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461], [1.0], [0], [0.00609158119186759], [0]), '/input-12': (tensor([69]), tensor([1.]), tensor([0]), tensor([0.01725955]), tensor([1]))}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08054983615875244
10 lb beta sum: 0.06185091659426689, worst -0.06996539235115051
Time: prepare 0.0011    bound 0.2042    transfer 0.0009    finalize 0.0003    func 0.2067    
Accumulated time: func 1.0197    prepare 0.0782    bound 0.9164    transfer 0.0075    finalize 0.0145    
After pruning, left:  6

Back to Regular BaB

BaB round 1
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-8, 546] [/input-8, 546] [/input-8, 549] [/input-8, 549] [/input-12, 61] 
split level 1: [/input-12, 69] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 549] 
split level 2: [/input-8, 549] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 545] 
split level 3: [/input-8, 545] [/input-8, 941] [/input-8, 949] [/input-8, 941] [/input-8, 941] [/input-8, 546] 
split level 4: [/input-8, 546] [/input-8, 949] [/input-8, 941] [/input-8, 949] [/input-8, 949] [/input-8, 537] 
split level 5: [/input-8, 537] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 547] 
cut re-enabled after branching node selection
0 lb beta sum: 0.11756213754415512, worst -0.05613785982131958
10 lb beta sum: 0.11763125658035278, worst -0.056003689765930176
Time: prepare 0.0187    bound 0.1928    transfer 0.0053    finalize 0.0040    func 0.2236    
Accumulated time: func 1.2433    prepare 0.0974    bound 1.1092    transfer 0.0127    finalize 0.0186    
all_split False
======================Cut inference begins======================
max lb tensor(0.02518660) min lb tensor(-0.05594650)
Number of Verified Splits: 320 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.09360923618078232, worst -0.062087684869766235
10 lb beta sum: 0.29289552569389343, worst -0.061950892210006714
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 1
#cuts 4-6: 14
#cuts 7-9: 41
#cuts >= 20: 0
BICCOS time: 0.47306036949157715 
BICCOS Cumulative time: 0.5571660995483398
Preprocessing time: 0.012300491333007812 Inference time: 0.4363288879394531 Add cuts time: 0.020800113677978516 Cut analysis time: 0.0036308765411376953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05595 (6), -0.05452 (6), -0.05440 (6), -0.05394 (6), -0.05366 (6), -0.05265 (6), -0.05250 (6), -0.05239 (6), -0.05193 (6), -0.05165 (6), -0.05109 (6), -0.05083 (6), -0.05064 (6), -0.04993 (6), -0.04909 (6), -0.04882 (6), -0.04750 (6), -0.04708 (6), -0.04637 (6), -0.04598 (6), 
Length of domains: 64
Time: pickout 0.0029    decision 0.0226    set_bounds 0.0400    solve 0.2238    add 0.0044    
Accumulated time: pickout 0.0087    decision 0.6358    set_bounds 0.1116    solve 0.9821    add 0.7078    
Current (lb-rhs): -0.05594649910926819
314 domains visited
Cumulative time: 3.313641309738159

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] 
split level 1: [/input-8, 1467] [/input-8, 1259] [/input-8, 1467] [/input-8, 1259] [/input-8, 1467] [/input-8, 1259] [/input-8, 1467] [/input-8, 1259] [/input-8, 1467] [/input-8, 1259] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.053125254809856415
10 lb beta sum: 0.0016381016466766596, worst -0.053041502833366394
Time: prepare 0.0055    bound 0.1554    transfer 0.0011    finalize 0.0032    func 0.1673    
Accumulated time: func 1.4106    prepare 0.1032    bound 1.2646    transfer 0.0138    finalize 0.0217    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00704806) min lb tensor(-0.05299070)
Number of Verified Splits: 0 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 56.
#cuts 1-3: 1
#cuts 4-6: 14
#cuts 7-9: 41
#cuts >= 20: 0
BICCOS time: 0.009084939956665039 
BICCOS Cumulative time: 0.5662510395050049
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05299 (8), -0.05275 (8), -0.05245 (8), -0.05221 (8), -0.05188 (8), -0.05151 (8), -0.05134 (8), -0.05112 (8), -0.05108 (8), -0.05097 (8), -0.05094 (8), -0.05057 (8), -0.05054 (8), -0.05049 (8), -0.05040 (8), -0.05031 (8), -0.05013 (8), -0.04995 (8), -0.04983 (8), -0.04977 (8), 
Length of domains: 256
Time: pickout 0.0135    decision 0.0164    set_bounds 0.0136    solve 0.1674    add 0.0227    
Accumulated time: pickout 0.0222    decision 0.6521    set_bounds 0.1252    solve 1.1495    add 0.7305    
Current (lb-rhs): -0.05299069732427597
570 domains visited
Cumulative time: 3.5571351051330566

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1259] [/input, 715] [/input-8, 1259] [/input, 715] [/input-8, 1259] [/input, 715] [/input-8, 1259] [/input, 715] [/input-8, 1259] [/input, 715] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0012546200305223465, worst -0.052149541676044464
10 lb beta sum: 0.0009796726517379284, worst -0.052102021872997284
Time: prepare 0.0269    bound 0.2044    transfer 0.0018    finalize 0.0035    func 0.2402    
Accumulated time: func 1.6508    prepare 0.1304    bound 1.4690    transfer 0.0156    finalize 0.0252    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00436845) min lb tensor(-0.05208901)
Number of Verified Splits: 0 of 512
No cut inferred: All or none verified.
Total number of valid cuts: 56.
#cuts 1-3: 1
#cuts 4-6: 14
#cuts 7-9: 41
#cuts >= 20: 0
BICCOS time: 0.016765356063842773 
BICCOS Cumulative time: 0.5830163955688477
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05209 (9), -0.05185 (9), -0.05155 (9), -0.05131 (9), -0.05118 (9), -0.05104 (9), -0.05085 (9), -0.05067 (9), -0.05064 (9), -0.05049 (9), -0.05034 (9), -0.05026 (9), -0.05022 (9), -0.05010 (9), -0.05006 (9), -0.04983 (9), -0.04973 (9), -0.04972 (9), -0.04968 (9), -0.04955 (9), 
Length of domains: 512
Time: pickout 0.0064    decision 0.0338    set_bounds 0.0234    solve 0.2404    add 0.0072    
Accumulated time: pickout 0.0285    decision 0.6860    set_bounds 0.1486    solve 1.3899    add 0.7378    
Current (lb-rhs): -0.052089013159275055
1082 domains visited
Cumulative time: 3.886638641357422

BaB round 4
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 949] [/input-8, 548] [/input, 715] [/input-8, 548] [/input-8, 949] [/input-8, 548] [/input, 715] [/input-8, 548] [/input-8, 949] [/input-8, 548] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0013228892348706722, worst -0.05109824985265732
10 lb beta sum: 0.0013558452483266592, worst -0.051083169877529144
Time: prepare 0.0681    bound 0.2055    transfer 0.0151    finalize 0.0071    func 0.3029    
Accumulated time: func 1.9537    prepare 0.1988    bound 1.6745    transfer 0.0307    finalize 0.0323    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00079868) min lb tensor(-0.05107252)
Number of Verified Splits: 0 of 1024
No cut inferred: All or none verified.
Total number of valid cuts: 56.
#cuts 1-3: 1
#cuts 4-6: 14
#cuts 7-9: 41
#cuts >= 20: 0
BICCOS time: 0.03568434715270996 
BICCOS Cumulative time: 0.6187007427215576
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05107 (10), -0.05083 (10), -0.05053 (10), -0.05051 (10), -0.05029 (10), -0.05026 (10), -0.05016 (10), -0.05006 (10), -0.04997 (10), -0.04984 (10), -0.04972 (10), -0.04966 (10), -0.04963 (10), -0.04961 (10), -0.04952 (10), -0.04947 (10), -0.04932 (10), -0.04929 (10), -0.04928 (10), -0.04920 (10), 
Length of domains: 1024
Time: pickout 0.0097    decision 0.0485    set_bounds 0.0504    solve 0.3033    add 0.0132    
Accumulated time: pickout 0.0382    decision 0.7345    set_bounds 0.1989    solve 1.6932    add 0.7510    
Current (lb-rhs): -0.05107252299785614
2106 domains visited
Cumulative time: 4.349606990814209

BaB round 5
batch: 1024
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 941] [/input-8, 1470] [/input-8, 548] [/input-8, 1470] [/input-8, 941] [/input-8, 1470] [/input-8, 548] [/input-8, 1470] [/input-8, 941] [/input-8, 932] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0013566992711275816, worst -0.05034365504980087
10 lb beta sum: 0.0014469352317973971, worst -0.05031633377075195
Time: prepare 0.1115    bound 0.2456    transfer 0.0062    finalize 0.0137    func 0.3906    
Accumulated time: func 2.3444    prepare 0.3106    bound 1.9202    transfer 0.0369    finalize 0.0460    
all_split False
======================Cut inference begins======================
max lb tensor(0.00089266) min lb tensor(-0.05031234)
Number of Verified Splits: 36 of 2048
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 1
#cuts 4-6: 14
#cuts 7-9: 41
#cuts >= 20: 0
BICCOS time: 0.08485078811645508 
BICCOS Cumulative time: 0.7035515308380127
Preprocessing time: 0.0712893009185791 Inference time: 0.004772663116455078 Add cuts time: 0.005583047866821289 Cut analysis time: 0.0032057762145996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05031 (11), -0.05001 (11), -0.04977 (11), -0.04974 (11), -0.04948 (11), -0.04944 (11), -0.04941 (11), -0.04933 (11), -0.04920 (11), -0.04904 (11), -0.04890 (11), -0.04890 (11), -0.04887 (11), -0.04886 (11), -0.04879 (11), -0.04873 (11), -0.04856 (11), -0.04853 (11), -0.04848 (11), -0.04842 (11), 
Length of domains: 2012
Time: pickout 0.0225    decision 0.0787    set_bounds 0.0969    solve 0.3923    add 0.0306    
Accumulated time: pickout 0.0607    decision 0.8132    set_bounds 0.2958    solve 2.0855    add 0.7816    
Current (lb-rhs): -0.050312340259552
4118 domains visited
Cumulative time: 5.059590816497803

BaB round 6
batch: 2012
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 330] [/input-8, 1470] [/input-8, 330] [/input-8, 1470] [/input-8, 330] [/input-8, 1470] [/input-8, 330] [/input-8, 731] [/input-8, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0013017080491408706, worst -0.049371130764484406
10 lb beta sum: 0.003318519564345479, worst -0.05222900211811066
Time: prepare 0.2112    bound 0.3959    transfer 0.0158    finalize 0.0250    func 0.6750    
Accumulated time: func 3.0193    prepare 0.5222    bound 2.3161    transfer 0.0527    finalize 0.0710    
all_split False
======================Cut inference begins======================
max lb tensor(0.01228990) min lb tensor(-0.04935340)
Number of Verified Splits: 233 of 4024
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 61.
#cuts 1-3: 1
#cuts 4-6: 19
#cuts 7-9: 41
#cuts >= 20: 0
BICCOS time: 0.18802523612976074 
BICCOS Cumulative time: 0.8915767669677734
Preprocessing time: 0.1427631378173828 Inference time: 0.03327226638793945 Add cuts time: 0.008389711380004883 Cut analysis time: 0.0036001205444335938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04935 (12), -0.04906 (12), -0.04900 (12), -0.04881 (12), -0.04878 (12), -0.04870 (12), -0.04852 (12), -0.04848 (12), -0.04846 (12), -0.04846 (12), -0.04845 (12), -0.04833 (12), -0.04824 (12), -0.04816 (12), -0.04816 (12), -0.04808 (12), -0.04805 (12), -0.04794 (12), -0.04794 (12), -0.04792 (12), 
Length of domains: 3791
Time: pickout 0.0331    decision 0.3468    set_bounds 0.1980    solve 0.6760    add 0.0236    
Accumulated time: pickout 0.0938    decision 1.1599    set_bounds 0.4938    solve 2.7615    add 0.8052    
Current (lb-rhs): -0.04935339838266373
7909 domains visited
Cumulative time: 6.535190582275391

BaB round 7
batch: 3791
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 731] [/input-8, 1453] [/input-8, 330] [/input-8, 1453] [/input-8, 1453] [/input-8, 330] [/input-8, 1453] [/input-8, 1470] [/input-8, 1453] [/input-8, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04886821657419205
10 lb beta sum: 0.002810576232150197, worst -0.061141230165958405
Time: prepare 0.2135    bound 0.6733    transfer 0.0426    finalize 0.0552    func 1.0359    
Accumulated time: func 4.0552    prepare 0.7360    bound 2.9894    transfer 0.0953    finalize 0.1262    
all_split False
======================Cut inference begins======================
max lb tensor(0.00511591) min lb tensor(-0.04885877)
Number of Verified Splits: 528 of 7582
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 2
#cuts 4-6: 17
#cuts 7-9: 32
#cuts >= 20: 0
BICCOS time: 0.36721014976501465 
BICCOS Cumulative time: 1.258786916732788
Preprocessing time: 0.2651822566986084 Inference time: 0.07872319221496582 Add cuts time: 0.019960641860961914 Cut analysis time: 0.0033440589904785156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04886 (13), -0.04856 (13), -0.04851 (13), -0.04832 (13), -0.04829 (13), -0.04821 (13), -0.04802 (13), -0.04799 (13), -0.04797 (13), -0.04796 (13), -0.04795 (13), -0.04784 (13), -0.04775 (13), -0.04767 (13), -0.04766 (13), -0.04758 (13), -0.04755 (13), -0.04745 (13), -0.04745 (13), -0.04741 (13), 
Length of domains: 7054
Time: pickout 0.0574    decision 0.2303    set_bounds 0.5975    solve 1.0383    add 0.0370    
Accumulated time: pickout 0.1512    decision 1.3902    set_bounds 1.0913    solve 3.7999    add 0.8421    
Current (lb-rhs): -0.04885876923799515
14963 domains visited
Cumulative time: 8.88283395767212

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1515] [/input-8, 932] [/input-8, 1453] [/input-8, 932] [/input-8, 932] [/input-8, 1453] [/input-8, 932] [/input-8, 1470] [/input-8, 1453] [/input-8, 1470] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04837966710329056
10 lb beta sum: 0.004126757383346558, worst -0.048373229801654816
Time: prepare 0.2480    bound 0.7039    transfer 0.0174    finalize 0.0523    func 1.0768    
Accumulated time: func 5.1320    prepare 0.9845    bound 3.6934    transfer 0.1127    finalize 0.1785    
all_split False
======================Cut inference begins======================
max lb tensor(0.00700103) min lb tensor(-0.04836889)
Number of Verified Splits: 688 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.5943036079406738 
BICCOS Cumulative time: 1.853090524673462
Preprocessing time: 0.4828979969024658 Inference time: 0.10103559494018555 Add cuts time: 0.009887218475341797 Cut analysis time: 0.00048279762268066406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04837 (14), -0.04808 (14), -0.04802 (14), -0.04783 (14), -0.04780 (14), -0.04772 (14), -0.04754 (14), -0.04751 (14), -0.04747 (14), -0.04747 (14), -0.04745 (14), -0.04735 (14), -0.04726 (14), -0.04718 (14), -0.04716 (14), -0.04708 (14), -0.04706 (14), -0.04697 (14), -0.04696 (14), -0.04692 (14), 
Length of domains: 10462
Time: pickout 0.0609    decision 0.4728    set_bounds 0.4279    solve 1.0792    add 0.0600    
Accumulated time: pickout 0.2121    decision 1.8630    set_bounds 1.5193    solve 4.8790    add 0.9021    
Current (lb-rhs): -0.048368893563747406
22467 domains visited
current_vram/total_varm: 29.2GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.598445892333984

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 932] [/input-8, 1453] [/input-8, 941] [/input-8, 932] [/input-8, 1453] [/input-8, 941] [/input-8, 1515] [/input-8, 932] [/input-8, 1453] [/input-8, 1453] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04737742245197296
10 lb beta sum: 0.008128825575113297, worst -0.04737100750207901
Time: prepare 0.4300    bound 0.7483    transfer 0.0607    finalize 0.0937    func 1.4432    
Accumulated time: func 6.5752    prepare 1.4149    bound 4.4416    transfer 0.1734    finalize 0.2722    
all_split False
======================Cut inference begins======================
max lb tensor(0.00582591) min lb tensor(-0.04736579)
Number of Verified Splits: 828 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 2
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.9867329597473145 
BICCOS Cumulative time: 2.8398234844207764
Preprocessing time: 0.817509651184082 Inference time: 0.16031312942504883 Add cuts time: 0.008295774459838867 Cut analysis time: 0.0006144046783447266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04802 (14), -0.04772 (14), -0.04747 (14), -0.04745 (14), -0.04737 (15), -0.04718 (14), -0.04716 (14), -0.04707 (15), -0.04707 (15), -0.04706 (14), -0.04691 (14), -0.04687 (15), -0.04682 (15), -0.04680 (15), -0.04678 (14), -0.04673 (14), -0.04662 (14), -0.04660 (15), -0.04657 (14), -0.04654 (14), 
Length of domains: 17826
Time: pickout 0.1168    decision 0.4598    set_bounds 1.0035    solve 1.4470    add 0.0696    
Accumulated time: pickout 0.3288    decision 2.3228    set_bounds 2.5227    solve 6.3261    add 0.9717    
Current (lb-rhs): -0.048016421496868134
38023 domains visited
current_vram/total_varm: 29.2GB/99.9GB, batch_size increase to 16384
Cumulative time: 15.713876485824585

BaB round 10
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 932] [/input-8, 941] [/input-8, 330] [/input-8, 932] [/input-8, 1515] [/input-8, 941] [/input-8, 932] [/input-8, 1470] [/input-8, 941] [/input-8, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0470251590013504
10 lb beta sum: 0.0031070178374648094, worst -0.04701966047286987
Time: prepare 0.8778    bound 2.4825    transfer 0.1577    finalize 0.2186    func 3.9535    
Accumulated time: func 10.5286    prepare 2.2932    bound 6.9242    transfer 0.3311    finalize 0.4908    
all_split False
======================Cut inference begins======================
max lb tensor(0.00562024) min lb tensor(-0.04701520)
Number of Verified Splits: 994 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 2
#cuts 7-9: 13
#cuts 13-15: 1
#cuts >= 20: 0
BICCOS time: 1.3017287254333496 
BICCOS Cumulative time: 4.141552209854126
Preprocessing time: 1.0667848587036133 Inference time: 0.21680617332458496 Add cuts time: 0.016266584396362305 Cut analysis time: 0.0018711090087890625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04707 (15), -0.04702 (15), -0.04687 (15), -0.04680 (16), -0.04676 (15), -0.04672 (15), -0.04660 (15), -0.04653 (15), -0.04650 (15), -0.04650 (15), -0.04647 (15), -0.04646 (16), -0.04645 (15), -0.04633 (15), -0.04630 (15), -0.04626 (16), -0.04623 (16), -0.04623 (15), -0.04621 (15), -0.04621 (15), 
Length of domains: 33216
Time: pickout 0.2426    decision 1.7162    set_bounds 1.8417    solve 4.3083    add 0.1383    
Accumulated time: pickout 0.5714    decision 4.0391    set_bounds 4.3644    solve 10.6344    add 1.1100    
Current (lb-rhs): -0.04706959426403046
69797 domains visited
current_vram/total_varm: 41.0GB/99.9GB, batch_size increase to 32768
Cumulative time: 25.310163736343384

BaB round 11
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 933] [/input-8, 939] [/input-8, 939] [/input-8, 933] [/input-8, 939] [/input-8, 941] [/input-8, 933] [/input-8, 1453] [/input-8, 939] [/input-8, 941] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04648657143115997
10 lb beta sum: 0.0009597835596650839, worst -0.04647448658943176
Time: prepare 1.7727    bound 10.1099    transfer 0.4491    finalize 1.0021    func 13.7653    
Accumulated time: func 24.2939    prepare 4.0665    bound 17.0341    transfer 0.7802    finalize 1.4929    
all_split False
======================Cut inference begins======================
max lb tensor(0.00813688) min lb tensor(-0.04646606)
Number of Verified Splits: 2274 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 2
#cuts 4-6: 3
#cuts 7-9: 15
#cuts 10-12: 9
#cuts 13-15: 2
#cuts >= 20: 0
BICCOS time: 3.3083159923553467 
BICCOS Cumulative time: 7.449868202209473
Preprocessing time: 2.729954957962036 Inference time: 0.5254406929016113 Add cuts time: 0.0504307746887207 Cut analysis time: 0.0024895668029785156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04647 (16), -0.04645 (16), -0.04626 (16), -0.04616 (16), -0.04612 (16), -0.04597 (16), -0.04593 (16), -0.04591 (16), -0.04590 (16), -0.04588 (16), -0.04586 (16), -0.04585 (17), -0.04572 (16), -0.04569 (16), -0.04562 (16), -0.04561 (16), -0.04559 (16), -0.04558 (16), -0.04555 (16), -0.04554 (17), 
Length of domains: 63710
Time: pickout 0.4787    decision 3.7295    set_bounds 3.6471    solve 13.7762    add 0.2300    
Accumulated time: pickout 1.0502    decision 7.7686    set_bounds 8.0115    solve 24.4106    add 1.3400    
Current (lb-rhs): -0.04646605998277664
133059 domains visited
Cumulative time: 50.58352303504944

BaB round 12
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1243] [/input-8, 1243] [/input-8, 1243] [/input-8, 520] [/input-8, 1243] [/input-8, 939] [/input-8, 1243] [/input-8, 1243] [/input-8, 1243] [/input-8, 1243] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04555034637451172
10 lb beta sum: 0.00024334693443961442, worst -0.045525744557380676
Time: prepare 1.8698    bound 10.1613    transfer 0.4637    finalize 0.5724    func 14.2724    
Accumulated time: func 38.5664    prepare 5.9368    bound 27.1954    transfer 1.2440    finalize 2.0654    
all_split False
======================Cut inference begins======================
max lb tensor(0.00877082) min lb tensor(-0.04551053)
Number of Verified Splits: 2857 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 2
#cuts 4-6: 3
#cuts 7-9: 6
#cuts 10-12: 7
#cuts 13-15: 1
#cuts >= 20: 0
BICCOS time: 2.8445069789886475 
BICCOS Cumulative time: 10.29437518119812
Preprocessing time: 2.144763469696045 Inference time: 0.6341066360473633 Add cuts time: 0.06379199028015137 Cut analysis time: 0.0018448829650878906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04645 (16), -0.04616 (16), -0.04612 (16), -0.04591 (16), -0.04588 (16), -0.04586 (16), -0.04585 (17), -0.04562 (16), -0.04561 (16), -0.04559 (16), -0.04555 (16), -0.04551 (16), -0.04551 (17), -0.04549 (17), -0.04534 (16), -0.04532 (16), -0.04532 (17), -0.04530 (17), -0.04530 (17), -0.04526 (16), 
Length of domains: 93621
Time: pickout 0.4887    decision 3.4646    set_bounds 4.1075    solve 14.2844    add 2.8546    
Accumulated time: pickout 1.5389    decision 11.2332    set_bounds 12.1190    solve 38.6950    add 4.1947    
Current (lb-rhs): -0.04644846171140671
195738 domains visited
Cumulative time: 78.81944870948792

BaB round 13
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 1453] [/input-8, 1243] [/input-8, 1470] [/input-8, 1453] [/input-8, 1243] [/input-8, 1470] [/input-8, 1453] [/input-8, 1243] [/input-8, 941] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.045535385608673096
10 lb beta sum: 0.007332953624427319, worst -0.045522622764110565
Time: prepare 1.8204    bound 10.1201    transfer 0.4690    finalize 0.5792    func 14.4421    
Accumulated time: func 53.0085    prepare 7.7578    bound 37.3155    transfer 1.7130    finalize 2.6446    
all_split False
======================Cut inference begins======================
max lb tensor(0.00857982) min lb tensor(-0.04550896)
Number of Verified Splits: 2954 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 2
#cuts 4-6: 3
#cuts 7-9: 7
#cuts 10-12: 2
#cuts 13-15: 1
#cuts >= 20: 0
BICCOS time: 3.0649900436401367 
BICCOS Cumulative time: 13.359365224838257
Preprocessing time: 2.279993772506714 Inference time: 0.6656825542449951 Add cuts time: 0.11786890029907227 Cut analysis time: 0.0014448165893554688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04551 (17), -0.04551 (17), -0.04542 (18), -0.04530 (17), -0.04523 (17), -0.04519 (17), -0.04517 (17), -0.04517 (17), -0.04512 (18), -0.04505 (18), -0.04502 (17), -0.04502 (17), -0.04498 (17), -0.04497 (17), -0.04496 (17), -0.04496 (17), -0.04496 (17), -0.04488 (18), -0.04488 (17), -0.04486 (18), 
Length of domains: 123435
Time: pickout 0.5096    decision 4.1744    set_bounds 4.5020    solve 14.4544    add 0.2325    
Accumulated time: pickout 2.0484    decision 15.4077    set_bounds 16.6210    solve 53.1494    add 4.4271    
Current (lb-rhs): -0.04551053047180176
258320 domains visited
Cumulative time: 105.86591053009033

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1243] [/input, 2201] [/input, 1193] [/input, 1144] [/input, 2201] [/input-8, 933] [/input-8, 520] [/input-8, 520] [/input, 1144] [/input, 1193] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.044801704585552216
10 lb beta sum: 0.011592600494623184, worst -0.04479615390300751
Time: prepare 1.9261    bound 10.1075    transfer 0.4718    finalize 1.7457    func 14.6956    
Accumulated time: func 67.7041    prepare 9.6844    bound 47.4230    transfer 2.1848    finalize 4.3903    
all_split False
======================Cut inference begins======================
max lb tensor(0.01111966) min lb tensor(-0.04479253)
Number of Verified Splits: 2523 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 2
#cuts 4-6: 3
#cuts 7-9: 7
#cuts 10-12: 3
#cuts 13-15: 3
#cuts >= 20: 0
BICCOS time: 4.253973722457886 
BICCOS Cumulative time: 17.613338947296143
Preprocessing time: 2.3079631328582764 Inference time: 1.8437626361846924 Add cuts time: 0.1005401611328125 Cut analysis time: 0.0017077922821044922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04551 (17), -0.04551 (17), -0.04542 (18), -0.04530 (17), -0.04519 (17), -0.04517 (17), -0.04517 (17), -0.04505 (18), -0.04498 (17), -0.04497 (17), -0.04496 (17), -0.04496 (17), -0.04496 (17), -0.04488 (18), -0.04488 (17), -0.04486 (18), -0.04485 (17), -0.04479 (18), -0.04476 (17), -0.04474 (17), 
Length of domains: 153680
Time: pickout 0.5158    decision 3.9973    set_bounds 3.5913    solve 14.7064    add 0.2278    
Accumulated time: pickout 2.5643    decision 19.4049    set_bounds 20.2122    solve 67.8558    add 4.6549    
Current (lb-rhs): -0.04551053047180176
321333 domains visited
Cumulative time: 133.30100536346436

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1243] [/input, 1144] [/input, 3771] [/input-8, 939] [/input-8, 1243] [/input, 2201] [/input-8, 520] [/input-8, 1243] [/input-8, 939] [/input-8, 939] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04508642852306366
10 lb beta sum: 0.007786640897393227, worst -0.045077115297317505
Time: prepare 1.9388    bound 10.1276    transfer 0.4776    finalize 1.9824    func 14.9726    
Accumulated time: func 82.6767    prepare 11.6238    bound 57.5506    transfer 2.6624    finalize 6.3727    
all_split False
======================Cut inference begins======================
max lb tensor(0.01044956) min lb tensor(-0.04507294)
Number of Verified Splits: 2182 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 2
#cuts 4-6: 3
#cuts 7-9: 14
#cuts 10-12: 3
#cuts 13-15: 7
#cuts >= 20: 0
BICCOS time: 2.9862303733825684 
BICCOS Cumulative time: 20.59956932067871
Preprocessing time: 2.4516031742095947 Inference time: 0.48348474502563477 Add cuts time: 0.04860877990722656 Cut analysis time: 0.0025336742401123047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04551 (17), -0.04542 (18), -0.04517 (17), -0.04517 (17), -0.04507 (18), -0.04505 (18), -0.04497 (17), -0.04496 (17), -0.04496 (17), -0.04488 (18), -0.04488 (17), -0.04487 (18), -0.04486 (18), -0.04479 (18), -0.04476 (18), -0.04466 (17), -0.04464 (17), -0.04463 (17), -0.04462 (17), -0.04461 (17), 
Length of domains: 184266
Time: pickout 0.5387    decision 3.3645    set_bounds 3.7614    solve 14.9850    add 0.5554    
Accumulated time: pickout 3.1029    decision 22.7695    set_bounds 23.9736    solve 82.8408    add 5.2103    
Current (lb-rhs): -0.04550895839929581
384687 domains visited
Cumulative time: 159.68366146087646

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1144] [/input-8, 933] [/input-8, 520] [/input-8, 1243] [/input-8, 520] [/input-8, 520] [/input, 2201] [/input-8, 520] [/input-8, 520] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04508458077907562
10 lb beta sum: 0.005707231815904379, worst -0.04507838189601898
Time: prepare 1.8840    bound 10.1595    transfer 0.4987    finalize 2.3652    func 15.3473    
Accumulated time: func 98.0241    prepare 13.5084    bound 67.7101    transfer 3.1611    finalize 8.7379    
all_split False
======================Cut inference begins======================
max lb tensor(0.01125258) min lb tensor(-0.04507513)
Number of Verified Splits: 1796 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 2
#cuts 4-6: 4
#cuts 7-9: 13
#cuts 10-12: 3
#cuts 13-15: 11
#cuts >= 20: 0
BICCOS time: 3.055182456970215 
BICCOS Cumulative time: 23.654751777648926
Preprocessing time: 2.577725887298584 Inference time: 0.43195271492004395 Add cuts time: 0.04214787483215332 Cut analysis time: 0.0033559799194335938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04517 (17), -0.04508 (18), -0.04507 (18), -0.04496 (17), -0.04489 (19), -0.04487 (18), -0.04479 (18), -0.04476 (18), -0.04473 (18), -0.04464 (17), -0.04461 (17), -0.04459 (19), -0.04458 (18), -0.04457 (18), -0.04454 (18), -0.04454 (18), -0.04453 (19), -0.04452 (18), -0.04452 (18), -0.04444 (18), 
Length of domains: 215238
Time: pickout 0.5238    decision 4.9388    set_bounds 3.5915    solve 15.3608    add 0.5495    
Accumulated time: pickout 3.6267    decision 27.7083    set_bounds 27.5651    solve 98.2016    add 5.7598    
Current (lb-rhs): -0.0451677143573761
448427 domains visited
Cumulative time: 187.92126297950745

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 939] [/input-8, 939] [/input, 1226] [/input-8, 1252] [/input-8, 939] [/input-8, 939] [/input-8, 939] [/input-8, 939] [/input-8, 520] [/input-8, 939] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04474339634180069
10 lb beta sum: 0.005134391598403454, worst -0.04473557323217392
Time: prepare 1.8261    bound 10.2010    transfer 0.5231    finalize 0.6223    func 13.6007    
Accumulated time: func 111.6248    prepare 15.3351    bound 77.9111    transfer 3.6842    finalize 9.3603    
all_split False
======================Cut inference begins======================
max lb tensor(0.00998065) min lb tensor(-0.04472965)
Number of Verified Splits: 1608 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 2
#cuts 4-6: 4
#cuts 7-9: 16
#cuts 10-12: 7
#cuts 13-15: 12
#cuts >= 20: 0
BICCOS time: 4.701831817626953 
BICCOS Cumulative time: 28.35658359527588
Preprocessing time: 2.1357579231262207 Inference time: 2.524599552154541 Add cuts time: 0.03776717185974121 Cut analysis time: 0.0037071704864501953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04508 (18), -0.04507 (18), -0.04489 (19), -0.04487 (18), -0.04479 (18), -0.04476 (18), -0.04473 (18), -0.04473 (18), -0.04459 (19), -0.04458 (18), -0.04457 (18), -0.04454 (18), -0.04454 (18), -0.04453 (19), -0.04453 (18), -0.04452 (18), -0.04452 (18), -0.04444 (18), -0.04441 (18), -0.04435 (19), 
Length of domains: 246398
Time: pickout 0.5446    decision 3.3860    set_bounds 5.3999    solve 13.6163    add 0.5252    
Accumulated time: pickout 4.1713    decision 31.0942    set_bounds 32.9650    solve 111.8179    add 6.2850    
Current (lb-rhs): -0.04507513344287872
512355 domains visited
Time out!!!!!!!!
Result: unknown in 220.5186 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.37744045, -10.80906868,  -8.33961296,  -7.23910141,  -7.87373829,
          -7.23198557,  -8.77867413,  -8.54426098,  -8.87928581, -11.17584705]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [575]; unstable size 575; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 575] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 575] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 575] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 203] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.58143544,  2.85189390,  0.84675455, -0.01254817,  0.32769120,
          1.16247261,  0.93366635,  1.05069172,  3.29250598]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.37744045, -10.80906868,  -8.33961296,  -7.23910141,  -7.87373829,
          -7.23198557,  -8.77867413,  -8.54426098,  -8.87928581, -11.17584705]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.25428486, -10.69138241,  -8.43463802,  -7.42673492,  -7.95977592,
           -7.43381834,  -8.90330410,  -8.69818687,  -8.78907394, -11.06161213]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00708342]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0076 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0789 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.58199978, -10.54873943,  -7.14900303,  -7.91397190,  -7.28075123,
          -7.99828959,  -6.68323803,  -8.80146408, -10.43879700, -10.40846443]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [399]; unstable size 399; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 399] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 399] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 399] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 148] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.51980424, 3.39100218, 0.25737596, 1.03177989, 0.39332855, 1.10958409,
         1.78996491, 3.33789635, 3.28931856]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0371 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 100, vnnlib ID: 100 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.83844137, -7.17797089, -2.05605650, -2.00732827, -2.00628233,
         -2.03319240, -2.81610751, -2.43622375, -6.60829258, -6.27670431]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [528]; unstable size 528; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 528] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 528] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 528] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 219] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.83865023,  4.03018188, -0.40402746, -0.52554798,  0.00620086,
          0.34507656, -0.21024555,  3.40293145,  3.30322170]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.83844137, -7.17797089, -2.05605650, -2.00732827, -2.00628233,
         -2.03319240, -2.81610751, -2.43622375, -6.60829258, -6.27670431]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.83844137, -7.17797089, -2.05605650, -2.00732780, -2.00628185,
          -2.03319216, -2.81610799, -2.43622375, -6.60829067, -6.27670383],
         [-4.83844137, -7.17797089, -2.05605650, -2.00732780, -2.00628185,
          -2.03319216, -2.81610799, -2.43622375, -6.60829067, -6.27670383]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04872870, -0.00104594,  0.42889595]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0802 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 101, vnnlib ID: 101 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.07705116,  -8.48606205,  -8.37792206, -10.12561226,  -8.12428093,
         -10.33940601, -10.15317154,  -9.66516113,  -4.95619965,  -7.79425383]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [671]; unstable size 671; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 129, 1, 671] with unstable size 128 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 671] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 671] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [128]; unstable size 128; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 128] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 128] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.19773501,  2.97831345,  2.78014851,  4.45424080,  2.49679518,
          4.66083670,  4.47122574,  3.93926191,  2.36554980]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.07705116,  -8.48606205,  -8.37792206, -10.12561226,  -8.12428093,
         -10.33940601, -10.15317154,  -9.66516113,  -4.95619965,  -7.79425383]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.05900955,  -8.47574997,  -8.22770882,  -9.97550106,  -7.97159195,
          -10.18599319,  -9.99292660,  -9.50112343,  -5.14422226,  -7.78701639]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.08521271]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0749 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 102, vnnlib ID: 102 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.02811790, -5.76409245,  0.56327426, -0.35700279, -0.37683630,
         -0.41983262, -1.42136240, -0.92577142, -3.90326118, -3.97468066]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [607]; unstable size 607; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 607] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 607] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 607] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 193] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.11922979,  4.51170063, -1.18529093, -0.36719000, -0.30698454,
          0.61107689,  0.20735407,  2.80999279,  2.81428099]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.02811790, -5.76409245,  0.56327426, -0.35700279, -0.37683630,
         -0.41983262, -1.42136240, -0.92577142, -3.90326118, -3.97468066]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.02811766, -5.76409245,  0.56327415, -0.35700274, -0.37683612,
          -0.41983256, -1.42136264, -0.92577130, -3.90326071, -3.97468066],
         [-2.02811766, -5.76409245,  0.56327415, -0.35700274, -0.37683612,
          -0.41983256, -1.42136264, -0.92577130, -3.90326071, -3.97468066]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.94011027, -0.01983339,  0.04299644]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0744 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 103, vnnlib ID: 103 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.43231535, -10.02100658,  -4.30439758,  -6.53697205,  -3.91013026,
          -6.62372160,  -5.03309059,  -6.37713289, -10.00526237, -10.26388931]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [627]; unstable size 627; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 151, 1, 627] with unstable size 150 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 627] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 627] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 150] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.15813851, 5.56159401, 0.26368931, 2.36857629, 2.45099640, 0.80457848,
         2.22993994, 5.61817694, 5.84348679]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0580 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 104, vnnlib ID: 104 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.93001795, -6.11589432, -2.52689791, -2.70035768, -2.83776188,
         -2.69209170, -3.78257012, -3.50543237, -5.88740206, -5.34398603]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 636] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 636] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 174] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.56663609,  2.53126121, -0.52419865, -0.01101995, -0.24716067,
          0.67171991,  0.37379950,  2.27086020,  1.89936233]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.93001795, -6.11589432, -2.52689791, -2.70035768, -2.83776188,
         -2.69209170, -3.78257012, -3.50543237, -5.88740206, -5.34398603]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.93001842, -6.11589527, -2.52689838, -2.70035863, -2.83776259,
          -2.69209194, -3.78257155, -3.50543332, -5.88740253, -5.34398603],
         [-4.93001842, -6.11589527, -2.52689838, -2.70035863, -2.83776259,
          -2.69209194, -3.78257155, -3.50543332, -5.88740253, -5.34398603]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16519356,  0.00826669,  0.14567065]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]],


         [[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]],


         [[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0344 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 105, vnnlib ID: 105 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.00338268, -10.28219223,  -7.15202951,  -7.92889309,  -7.82962704,
          -8.00282669,  -8.39284706,  -8.90988731,  -9.23245716,  -9.69780827]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [521]; unstable size 521; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 521] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 521] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 521] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 238] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.72178555,  0.36531401, -2.17974448, -1.32797313, -1.40488410,
         -1.24957287, -1.02663398, -0.66461623, -0.09302133]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.00338268, -10.28219223,  -7.15202951,  -7.92889309,  -7.82962704,
          -8.00282669,  -8.39284706,  -8.90988731,  -9.23245716,  -9.69780827]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.00338173, -10.28219318,  -7.15202951,  -7.92889309,  -7.82962799,
           -8.00282669,  -8.39284611,  -8.90988731,  -9.23245621,  -9.69780731],
         [ -8.00338173, -10.28219318,  -7.15202951,  -7.92889309,  -7.82962799,
           -8.00282669,  -8.39284611,  -8.90988731,  -9.23245621,  -9.69780731]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.90650558, -1.75785780, -0.98099422, -1.08025932, -0.90706062,
          -0.51704121,  0.32256889,  0.78792000]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         ...,


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0806 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 106, vnnlib ID: 106 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.55728149, -3.29340839, -5.60895300, -5.84854221, -5.21763039,
         -5.96553278, -5.89570904, -5.05772591, -2.31981516, -3.37378526]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 503] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 503] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 171] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30047584,  1.62997246,  1.88469386,  1.13955164,  1.99374723,
          1.89228368,  0.82793856, -1.50930858, -0.16130126]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.55728149, -3.29340839, -5.60895300, -5.84854221, -5.21763039,
         -5.96553278, -5.89570904, -5.05772591, -2.31981516, -3.37378526]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.55728054, -3.29340792, -5.60895252, -5.84854126, -5.21762943,
          -5.96553278, -5.89570808, -5.05772543, -2.31981421, -3.37378430],
         [-3.55728054, -3.29340792, -5.60895252, -5.84854126, -5.21762943,
          -5.96553278, -5.89570808, -5.05772543, -2.31981421, -3.37378430]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.26387262, -0.97359371,  0.08037639]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]],


         [[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]],


         [[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0470 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 107, vnnlib ID: 107 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.40574551, -9.71419811, -7.44596434, -8.90537739, -7.12733173,
         -9.08124161, -9.19281673, -8.36250019, -6.23399162, -9.56327915]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [557]; unstable size 557; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 190, 1, 557] with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 557] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 557] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 189] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.60151052, 1.47714329, 2.81160617, 1.12638509, 2.97082520, 2.97414351,
         2.26859927, 0.29780346, 3.46658802]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0551 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 108, vnnlib ID: 108 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.84473133, -10.54042339,  -8.17759705,  -8.29182148,  -7.74204731,
          -8.36287403,  -7.75897408,  -9.04864311, -11.14440346, -10.47354794]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 585] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 585] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 216] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.04735827,  1.40457702, -0.36931920, -0.89572740,  0.04944559,
         -0.85430741,  0.22342488,  2.20092034,  1.37345648]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.84473133, -10.54042339,  -8.17759705,  -8.29182148,  -7.74204731,
          -8.36287403,  -7.75897408,  -9.04864311, -11.14440346, -10.47354794]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.84472942, -10.54042244,  -8.17759705,  -8.29182243,  -7.74204826,
           -8.36287403,  -7.75897312,  -9.04864311, -11.14440155, -10.47354794],
         [ -9.84472942, -10.54042244,  -8.17759705,  -8.29182243,  -7.74204826,
           -8.36287403,  -7.75897312,  -9.04864311, -11.14440155, -10.47354794]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11422539, -0.54977417, -0.53284931]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0754 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 109, vnnlib ID: 109 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.50140810, -11.02397823,  -8.54122639, -10.14165115,  -9.63691139,
         -10.37123966, -10.39661026, -10.64028358,  -9.73715496, -10.65245342]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [237]; unstable size 237; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 100, 1, 237] with unstable size 99 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 237] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 237] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [99]; unstable size 99; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 99] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 99] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.88083577, 1.77790594, 3.23222113, 2.73587132, 3.45677853, 3.48044491,
         3.60492182, 2.78642988, 3.66938210]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 110, vnnlib ID: 110 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.10360909, -14.90222263, -10.64630795, -10.67387867, -10.32881927,
         -10.73543262,  -8.65091515, -12.13699913, -14.77171898, -15.26986790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 377] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 377] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 241] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.91985512, 5.48559284, 1.68281019, 1.66879559, 1.33047330, 1.72007775,
         2.92767096, 5.54262447, 5.84726381]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0642 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 111, vnnlib ID: 111 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.24005079, -9.04290104, -4.47385645, -6.15989971, -3.75543547,
         -6.18814945, -5.15722942, -4.77376652, -9.54131126, -8.83624268]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [550]; unstable size 550; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 550] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 550] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 550] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 203] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.75045252, 4.26294136, 0.44944513, 1.99260736, 2.02144289, 0.96410066,
         0.68850255, 4.72861528, 4.22467470]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0673 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 112, vnnlib ID: 112 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.06766558, -6.83603859, -6.95109749, -7.23270035, -7.89028740,
         -7.38764238, -7.01568794, -7.03979397, -5.81813335, -5.25799608]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 509] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 509] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 146] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.27733994, 1.24176252, 0.94732475, 1.20107555, 1.83796215, 1.33658981,
         1.02798748, 0.93377829, 0.00646114]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0452 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 113, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
          -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [596]; unstable size 596; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 596] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 596] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 596] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 200] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.83063102,  2.85584378,  0.91094625,  1.03836179, -0.07551450,
          0.71604657,  1.38741755,  4.26548862,  2.89728880]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
          -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
           -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05672598]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.00476182, -0.75079364,  ..., -0.68730158,
            -0.90952379, -1.62380958],
           [-0.44920623, -0.95714283, -0.67142856,  ..., -0.32222211,
            -0.65555555, -1.62380958],
           [-0.09999990, -0.92539680, -0.63968253,  ..., -0.22698402,
            -0.57619047, -1.63968253],
           ...,
           [-0.27460307, -0.29047608, -0.33809513,  ..., -0.87777776,
            -0.51269841, -0.48095238],
           [-0.30634910, -0.30634910, -0.33809513,  ..., -1.09999990,
            -0.65555555, -0.49682540],
           [-0.40158719, -0.40158719, -0.41746020,  ..., -1.29047608,
            -0.87777776, -0.62380952]],

          [[-1.62640905, -1.72302747, -1.65861523,  ..., -1.49758446,
            -1.57809973, -1.75523353],
           [-1.38486302, -1.77133656, -1.61030602,  ..., -1.35265696,
            -1.49758446, -1.75523353],
           [-1.09500802, -1.80354273, -1.62640905,  ..., -1.22383249,
            -1.40096617, -1.75523353],
           ...,
           [-1.25603855, -1.25603855, -1.28824472,  ..., -0.72463763,
            -0.43478248, -0.51529789],
           [-1.28824472, -1.25603855, -1.28824472,  ..., -0.88566822,
            -0.48309177, -0.45088565],
           [-1.33655393, -1.33655393, -1.33655393,  ..., -1.12721407,
            -0.67632848, -0.46698871]],

          [[-1.48275876, -1.52773619, -1.49775124,  ..., -1.28785622,
            -1.34782624, -1.42278874],
           [-1.15292358, -1.55772126, -1.54272878,  ..., -1.12293863,
            -1.19790113, -1.42278874],
           [-0.89805096, -1.54272878, -1.51274371,  ..., -1.06296861,
            -1.13793111, -1.43778121],
           ...,
           [-0.94302845, -0.94302845, -0.95802099,  ..., -0.61319339,
            -0.38830581, -0.52323836],
           [-0.94302845, -0.94302845, -0.94302845,  ..., -0.70314842,
            -0.34332830, -0.38830581],
           [-0.98800600, -1.00299859, -1.00299859,  ..., -0.89805096,
            -0.52323836, -0.31334329]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0672 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 114, vnnlib ID: 114 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.65542030, -10.12491035,  -9.28998947, -10.89940071,  -9.46046829,
         -11.02120876, -10.39476299, -11.24895477,  -7.53916931, -10.56444263]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 197, 1, 509] with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 509] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 196] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 196] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.85671949, 2.11677980, 3.61477733, 2.21671772, 3.72679424, 3.03720021,
         3.80708647, 0.44335413, 3.26269913]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0615 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 115, vnnlib ID: 115 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.92224836, -9.30357933, -4.86471462, -5.74703979, -3.76322746,
         -5.79184532, -4.91436577, -5.34334707, -8.45374775, -9.23935318]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 509] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 509] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 239] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.55012655, 4.69829416, 0.87078327, 1.70267856, 1.74382305, 0.83639121,
         1.21680450, 3.97037983, 4.71871233]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0465 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 116, vnnlib ID: 116 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.46497631, -11.33358383,  -8.85467815,  -7.44927025,  -9.22317123,
          -7.37944174,  -9.60250664,  -8.70856094, -10.32826042, -10.40810776]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 161, 1, 540] with unstable size 160 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 540] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [160]; unstable size 160; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 160] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.58313560, 3.18968081, 1.22978044, 0.05482836, 1.50812221, 1.89584732,
         0.94890082, 2.30877233, 2.35839391]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0430 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 117, vnnlib ID: 117 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.46045923, -4.62828922, -5.05963278, -6.18664169, -5.28851128,
         -6.36921692, -6.12083912, -6.04943180, -0.93621290, -3.70123649]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [537]; unstable size 537; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 537] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 537] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 537] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 159] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.17089832, 3.15421629, 3.54188728, 4.60494947, 3.75584602, 4.77829981,
         4.57753897, 4.42675877, 2.20462656]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0498 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 118, vnnlib ID: 118 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.41606951, -3.73614860, -5.60977221, -6.62537479, -6.33034801,
         -6.65032578, -8.53272724, -6.92770529, -4.97527218, -5.08467150]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [406]; unstable size 406; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 406] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 406] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 406] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.06374407, 1.19116282, 2.15339327, 1.93856001, 2.16962671, 4.05398273,
         2.44965196, 0.61252069, 1.12175798]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0674 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 119, vnnlib ID: 119 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.60672903, -5.77713490, -1.78710592, -1.64563823, -1.64935160,
         -1.71567798, -2.18223453, -2.02389979, -4.62978458, -4.60459995]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [778]; unstable size 778; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 219, 1, 778] with unstable size 218 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 778] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 778] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [218]; unstable size 218; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 218] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.25424433,  3.26128483, -0.22337782, -0.42366970,  0.04887801,
          0.13689709, -0.16968268,  2.10664463,  2.17941189]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.60672903, -5.77713490, -1.78710592, -1.64563823, -1.64935160,
         -1.71567798, -2.18223453, -2.02389979, -4.62978458, -4.60459995]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.61329794, -5.77425766, -1.79143727, -1.65318608, -1.64977872,
          -1.72312260, -2.18866110, -2.02094007, -4.63334703, -4.60565472],
         [-3.61329794, -5.77425766, -1.79143727, -1.65318608, -1.64977872,
          -1.72312260, -2.18866110, -2.02094007, -4.63334703, -4.60565472]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.13825119, -0.00340736,  0.36775398]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0167 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0856 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 120, vnnlib ID: 120 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -4.54532385, -11.30416203,  -4.10411549,  -4.39919186,  -6.40133953,
          -4.42965555,  -6.84690285,  -5.18702269, -10.52285004, -10.39758968]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [314]; unstable size 314; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 97, 1, 314] with unstable size 96 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 314] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 314] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [96]; unstable size 96; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 96] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 96] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 6.35177326, -0.66230345, -0.42160916,  1.53926945, -0.39580536,
          1.98930931,  0.27601612,  5.74486685,  5.50957346]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -4.54532385, -11.30416203,  -4.10411549,  -4.39919186,  -6.40133953,
          -4.42965555,  -6.84690285,  -5.18702269, -10.52285004, -10.39758968]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -4.54532337, -11.30416203,  -4.10411406,  -4.39919186,  -6.40133953,
           -4.42965508,  -6.84690189,  -5.18702173, -10.52284813, -10.39758873],
         [ -4.54532337, -11.30416203,  -4.10411406,  -4.39919186,  -6.40133953,
           -4.42965508,  -6.84690189,  -5.18702173, -10.52284813, -10.39758873]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44120932, -0.14613152, -0.11566830]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0868 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 121, vnnlib ID: 121 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.59993410, -4.38716555, -7.01152945, -7.42306519, -6.37219429,
         -7.47539234, -7.27996445, -6.98678732, -7.51602745, -5.72939539]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 503] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 503] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 201] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.36778927, 1.58436394, 2.04665804, 0.99501896, 2.08592606, 1.87148952,
         1.65961504, 2.34397411, 1.09861779]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0664 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 122, vnnlib ID: 122 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.81995726, -5.13494205, -8.06528854, -7.87783623, -8.02696037,
         -7.91830969, -8.81726456, -7.94001102, -5.16691113, -6.43881178]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [420]; unstable size 420; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 420] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 420] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 420] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 174] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08343554,  2.05495119,  1.84661865,  2.02149105,  1.87067604,
          2.72653341,  1.89364624, -0.51825690,  1.03387249]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.81995726, -5.13494205, -8.06528854, -7.87783623, -8.02696037,
         -7.91830969, -8.81726456, -7.94001102, -5.16691113, -6.43881178]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.81014204, -5.15443516, -8.05149078, -7.86225891, -8.01039028,
          -7.90261698, -8.80574799, -7.92409134, -5.15398884, -6.44848347]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00044632]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0048 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0573 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 123, vnnlib ID: 123 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
          -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [384]; unstable size 384; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 384] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 384] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 384] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 187] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.17096823,  3.39843297,  1.51453519,  2.57439923,  2.68033528,
          2.71090770,  2.60011530,  4.45497894,  4.01961613]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
          -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.86it/s]100%|██████████| 1/1 [00:00<00:00,  8.85it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.24572372, -10.14930725,  -8.09828663,  -9.24239445,  -9.37958050,
           -9.39315701,  -9.30120564, -11.22938156,  -6.21674156, -10.66067028]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02898216]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1158 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 23.99014663696289
alpha/beta optimization time: 1.2501282691955566
initial alpha-crown bounds: tensor([[-0.16154659,  3.43210220,  1.52814221,  2.59574986,  2.69813704,
          2.73191357,  2.61714005,  4.47211790,  4.07639122]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.16154658794403076
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5629699230194
Verifying property 0 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16154659]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
         -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16154659]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 384
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 185
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 574
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001163482666015625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16154932975769043
10 lb beta sum: 0.0, worst -0.16155052185058594
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0557    transfer 0.0001    finalize 0.0001    func 0.0562    
Accumulated time: func 0.0562    prepare 0.0002    bound 0.0557    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 10] 
split level 2: [/input-12, 50] 
split level 3: [/input-8, 276] 
split level 4: [/input, 2215] 
split level 5: [/input-8, 692] 
split level 6: [/input-8, 1707] 
split level 7: [/input-8, 684] 
split level 8: [/input-8, 2004] 
split level 9: [/input-8, 2028] 
split level 10: [/input-8, 948] 
split level 11: [/input-8, 357] 
split level 12: [/input-8, 693] 
split level 13: [/input-8, 949] 
split level 14: [/input-8, 1910] 
split level 15: [/input, 2231] 
split level 16: [/input-8, 1709] 
split level 17: [/input-8, 942] 
split level 18: [/input-8, 1451] 
split level 19: [/input-8, 2011] 
split level 20: [/input-8, 1250] 
split level 21: [/input-8, 691] 
split level 22: [/input-8, 685] 
split level 23: [/input, 3765] 
split level 24: [/input-8, 1460] 
split level 25: [/input, 2168] 
split level 26: [/input-8, 1268] 
split level 27: [/input-8, 2034] 
split level 28: [/input-8, 956] 
split level 29: [/input-8, 1903] 
split level 30: [/input-8, 933] 
split level 31: [/input-8, 1683] 
split level 32: [/input-8, 2039] 
split level 33: [/input-8, 1721] 
split level 34: [/input-8, 1697] 
split level 35: [/input-8, 1956] 
split level 36: [/input-8, 947] 
split level 37: [/input, 1240] 
split level 38: [/input-8, 1909] 
split level 39: [/input-8, 2031] 
split level 40: [/input-8, 1750] 
split level 41: [/input-8, 2010] 
split level 42: [/input-8, 220] 
split level 43: [/input-8, 1482] 
split level 44: [/input-8, 2005] 
split level 45: [/input-8, 729] 
split level 46: [/input-8, 267] 
split level 47: [/input-8, 1723] 
split level 48: [/input, 2250] 
split level 49: [/input-8, 2044] 
split level 50: [/input, 1958] 
split level 51: [/input-8, 1274] 
split level 52: [/input-8, 2001] 
split level 53: [/input-8, 1944] 
split level 54: [/input-8, 1584] 
split level 55: [/input-8, 1264] 
split level 56: [/input-8, 2045] 
split level 57: [/input-8, 1099] 
split level 58: [/input-8, 2047] 
split level 59: [/input, 2205] 
split level 60: [/input-8, 649] 
split level 61: [/input, 2116] 
split level 62: [/input-8, 2037] 
split level 63: [/input-8, 2009] 
split level 64: [/input, 1162] 
split level 65: [/input, 2221] 
split level 66: [/input-8, 1595] 
split level 67: [/input-8, 2021] 
split level 68: [/input, 2206] 
split level 69: [/input-8, 2032] 
split level 70: [/input, 2670] 
split level 71: [/input-8, 1429] 
split level 72: [/input-8, 1433] 
split level 73: [/input, 2663] 
split level 74: [/input, 2739] 
split level 75: [/input, 82] 
split level 76: [/input-8, 567] 
split level 77: [/input-8, 1933] 
split level 78: [/input-8, 2030] 
split level 79: [/input-8, 1701] 
split level 80: [/input-8, 1575] 
split level 81: [/input, 2147] 
split level 82: [/input, 442] 
split level 83: [/input-8, 1840] 
split level 84: [/input, 1996] 
split level 85: [/input-8, 662] 
split level 86: [/input, 2782] 
split level 87: [/input-8, 1272] 
split level 88: [/input, 2178] 
split level 89: [/input-8, 1863] 
split level 90: [/input-8, 1217] 
split level 91: [/input-8, 1499] 
split level 92: [/input-8, 158] 
split level 93: [/input-8, 566] 
split level 94: [/input, 1271] 
split level 95: [/input-8, 737] 
split level 96: [/input-8, 1248] 
split level 97: [/input, 2668] 
split level 98: [/input-8, 1056] 
split level 99: [/input, 2012] 
split level 100: [/input, 849] 
split level 101: [/input, 2292] 
split level 102: [/input, 2100] 
split level 103: [/input, 2010] 
split level 104: [/input, 2142] 
split level 105: [/input-8, 1218] 
split level 106: [/input-8, 895] 
split level 107: [/input, 93] 
split level 108: [/input-8, 1825] 
split level 109: [/input-8, 1226] 
split level 110: [/input, 1995] 
split level 111: [/input-8, 914] 
split level 112: [/input, 671] 
split level 113: [/input, 2659] 
split level 114: [/input, 2066] 
split level 115: [/input-8, 750] 
split level 116: [/input, 2007] 
split level 117: [/input, 1106] 
split level 118: [/input-8, 1596] 
split level 119: [/input, 2077] 
split level 120: [/input-8, 908] 
split level 121: [/input, 2660] 
split level 122: [/input, 785] 
split level 123: [/input-8, 721] 
split level 124: [/input, 2027] 
split level 125: [/input, 1121] 
split level 126: [/input-8, 375] 
split level 127: [/input, 910] 
split level 128: [/input, 3602] 
split level 129: [/input, 460] 
split level 130: [/input-8, 1814] 
split level 131: [/input, 3604] 
split level 132: [/input, 2061] 
split level 133: [/input-8, 1221] 
split level 134: [/input, 818] 
split level 135: [/input, 429] 
split level 136: [/input, 1040] 
split level 137: [/input-8, 1695] 
split level 138: [/input, 2155] 
split level 139: [/input, 1805] 
split level 140: [/input, 349] 
split level 141: [/input-8, 1679] 
split level 142: [/input, 1197] 
split level 143: [/input, 2293] 
split level 144: [/input, 1104] 
split level 145: [/input, 850] 
split level 146: [/input, 1047] 
split level 147: [/input, 3596] 
split level 148: [/input, 795] 
split level 149: [/input, 959] 
split level 150: [/input, 2546] 
split level 151: [/input, 445] 
split level 152: [/input, 1122] 
split level 153: [/input, 3617] 
split level 154: [/input, 2101] 
split level 155: [/input-8, 1048] 
split level 156: [/input, 971] 
split level 157: [/input, 1221] 
split level 158: [/input, 1133] 
split level 159: [/input, 895] 
split level 160: [/input, 3449] 
split level 161: [/input, 2065] 
split level 162: [/input, 1911] 
split level 163: [/input, 2087] 
split level 164: [/input-8, 1224] 
split level 165: [/input, 829] 
split level 166: [/input-8, 744] 
split level 167: [/input, 1107] 
split level 168: [/input, 3623] 
split level 169: [/input, 2644] 
split level 170: [/input, 2568] 
split level 171: [/input, 383] 
split level 172: [/input, 264] 
split level 173: [/input, 2677] 
split level 174: [/input, 2487] 
split level 175: [/input-8, 1626] 
split level 176: [/input-8, 2016] 
split level 177: [/input-8, 536] 
split level 178: [/input-8, 835] 
split level 179: [/input, 2120] 
split level 180: [/input, 582] 
split level 181: [/input-8, 520] 
split level 182: [/input-8, 1509] 
split level 183: [/input-8, 153] 
split level 184: [/input, 2446] 
split level 185: [/input, 468] 
split level 186: [/input, 22] 
split level 187: [/input, 633] 
split level 188: [/input, 1112] 
split level 189: [/input, 265] 
split level 190: [/input, 3670] 
split level 191: [/input-8, 1895] 
split level 192: [/input, 3653] 
split level 193: [/input, 2373] 
split level 194: [/input-8, 535] 
split level 195: [/input, 700] 
split level 196: [/input, 2492] 
split level 197: [/input-8, 169] 
split level 198: [/input-8, 1141] 
split level 199: [/input-8, 1830] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1706557273864746
10 lb beta sum: 0.0, worst -0.16185635328292847
Time: prepare 0.0115    bound 0.1032    transfer 0.0013    finalize 0.0029    func 0.1216    
Accumulated time: func 0.1777    prepare 0.0217    bound 0.1589    transfer 0.0014    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.10640395) min lb tensor(-0.16154659)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010567426681518555 
BICCOS Cumulative time: 0.010567426681518555
Preprocessing time: 0.010089397430419922 Inference time: 0.0001423358917236328 Add cuts time: 7.176399230957031e-05 Cut analysis time: 0.0002639293670654297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15661 (1), -0.15659 (1), -0.15643 (1), -0.15638 (1), -0.15638 (1), -0.15617 (1), -0.15604 (1), -0.15595 (1), -0.15589 (1), -0.15589 (1), -0.15585 (1), -0.15573 (1), -0.15556 (1), -0.15554 (1), -0.15545 (1), -0.15489 (1), -0.15487 (1), -0.15453 (1), -0.15435 (1), -0.15424 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5150    set_bounds 0.0092    solve 0.1217    add 0.0694    
Accumulated time: pickout 0.0003    decision 0.5150    set_bounds 0.0092    solve 0.1217    add 0.0694    
Current (lb-rhs): -0.1566072702407837
50 domains visited
Cumulative time: 0.7875912189483643

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 50] [/input-12, 50] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-8, 1707] [/input-8, 1707] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 3: [/input-8, 949] [/input-8, 949] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15293776988983154
10 lb beta sum: 0.3097730278968811, worst -0.14704346656799316
Time: prepare 0.0077    bound 0.1223    transfer 0.0008    finalize 0.0030    func 0.1367    
Accumulated time: func 0.3144    prepare 0.0297    bound 0.2812    transfer 0.0022    finalize 0.0061    
all_split False
======================Cut inference begins======================
max lb tensor(0.36704949) min lb tensor(-0.14704210)
Number of Verified Splits: 100 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.018166542053222656 
BICCOS Cumulative time: 0.02873396873474121
Preprocessing time: 0.012390375137329102 Inference time: 0.004104137420654297 Add cuts time: 0.0013568401336669922 Cut analysis time: 0.0003151893615722656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04409 (2), -0.04406 (2), -0.04405 (2), -0.04393 (2), -0.04384 (2), -0.04349 (2), -0.04339 (2), -0.04334 (2), -0.04309 (2), -0.04292 (2), -0.04285 (2), -0.04210 (2), -0.04193 (2), -0.04173 (2), -0.04114 (2), -0.04075 (2), -0.04072 (2), -0.04060 (2), -0.04038 (2), -0.04028 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0249    set_bounds 0.0123    solve 0.1368    add 0.0855    
Accumulated time: pickout 0.0015    decision 0.5400    set_bounds 0.0215    solve 0.2585    add 0.1549    
Current (lb-rhs): -0.044088900089263916
100 domains visited
Cumulative time: 1.0668392181396484

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 2: [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] 
split level 3: [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0594487190246582
10 lb beta sum: 0.4094133675098419, worst -0.043778419494628906
Time: prepare 0.0083    bound 0.1409    transfer 0.0008    finalize 0.0024    func 0.1562    
Accumulated time: func 0.4707    prepare 0.0383    bound 0.4221    transfer 0.0030    finalize 0.0085    
all_split False
======================Cut inference begins======================
max lb tensor(0.13711035) min lb tensor(-0.04374133)
Number of Verified Splits: 104 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.01925206184387207 
BICCOS Cumulative time: 0.04798603057861328
Preprocessing time: 0.012166023254394531 Inference time: 0.0039119720458984375 Add cuts time: 0.0028128623962402344 Cut analysis time: 0.0003612041473388672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02392 (3), -0.02326 (3), -0.02318 (3), -0.02296 (3), -0.02273 (3), -0.02232 (3), -0.02033 (3), -0.02001 (3), -0.02001 (3), -0.01978 (3), -0.01962 (3), -0.01924 (3), -0.01832 (3), -0.01785 (3), -0.01776 (3), -0.01766 (3), -0.01765 (3), -0.01706 (3), -0.01657 (3), -0.01557 (3), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0197    set_bounds 0.0159    solve 0.1563    add 0.0924    
Accumulated time: pickout 0.0027    decision 0.5596    set_bounds 0.0374    solve 0.4148    add 0.2473    
Current (lb-rhs): -0.02392098307609558
150 domains visited
Cumulative time: 1.3718960285186768

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 2: [/input-8, 1707] [/input-8, 949] [/input-8, 1707] [/input-8, 949] [/input-8, 684] [/input-8, 684] [/input-8, 1707] [/input-8, 949] [/input-8, 1707] [/input-8, 1707] 
split level 3: [/input-8, 949] [/input-8, 2010] [/input-8, 2010] [/input-8, 2010] [/input-8, 949] [/input-8, 949] [/input-8, 2010] [/input-8, 2010] [/input-8, 693] [/input-8, 693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04084250330924988
10 lb beta sum: 0.5273047089576721, worst -0.02298569679260254
Time: prepare 0.0084    bound 0.1420    transfer 0.0009    finalize 0.0027    func 0.1567    
Accumulated time: func 0.6274    prepare 0.0469    bound 0.5641    transfer 0.0039    finalize 0.0113    
all_split False
======================Cut inference begins======================
max lb tensor(0.25415969) min lb tensor(-0.02281743)
Number of Verified Splits: 138 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 7
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.02325439453125 
BICCOS Cumulative time: 0.07124042510986328
Preprocessing time: 0.012251853942871094 Inference time: 0.0067746639251708984 Add cuts time: 0.0034694671630859375 Cut analysis time: 0.0007584095001220703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00640 (4), -0.00640 (4), -0.00638 (4), -0.00604 (4), -0.00604 (4), -0.00590 (4), -0.00584 (4), -0.00580 (4), -0.00580 (4), -0.00579 (4), -0.00579 (4), -0.00579 (4), -0.00579 (4), -0.00578 (4), -0.00539 (4), -0.00535 (4), -0.00532 (4), -0.00529 (4), -0.00527 (4), -0.00523 (4), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0204    set_bounds 0.0164    solve 0.1569    add 0.0963    
Accumulated time: pickout 0.0039    decision 0.5801    set_bounds 0.0538    solve 0.5717    add 0.3435    
Current (lb-rhs): -0.006400376558303833
200 domains visited
Cumulative time: 1.686579704284668

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 2: [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 1707] [/input-8, 2010] [/input-8, 2010] [/input-8, 1707] [/input-8, 1707] [/input-8, 949] 
split level 3: [/input-8, 691] [/input-8, 691] [/input-8, 691] [/input-8, 691] [/input-8, 691] [/input-8, 693] [/input-8, 693] [/input-8, 693] [/input-8, 691] [/input-8, 691] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023676365613937378
10 lb beta sum: 0.9208541512489319, worst -0.22406220436096191
Time: prepare 0.0082    bound 0.1628    transfer 0.0015    finalize 0.0025    func 0.1778    
Accumulated time: func 0.8051    prepare 0.0554    bound 0.7269    transfer 0.0054    finalize 0.0137    
all_split False
======================Cut inference begins======================
max lb tensor(0.33278251) min lb tensor(-0.00608882)
Number of Verified Splits: 227 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.031358957290649414 
BICCOS Cumulative time: 0.1025993824005127
Preprocessing time: 0.012276172637939453 Inference time: 0.011575698852539062 Add cuts time: 0.006589651107788086 Cut analysis time: 0.0009174346923828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00609 (5), -0.00609 (5), -0.00537 (5), -0.00537 (5), -0.00532 (5), -0.00531 (5), -0.00525 (5), -0.00525 (5), -0.00524 (5), -0.00524 (5), -0.00377 (5), -0.00357 (5), -0.00341 (5), -0.00338 (5), -0.00338 (5), -0.00338 (5), -0.00337 (5), -0.00337 (5), -0.00337 (5), -0.00336 (5), 
Length of domains: 48
Time: pickout 0.0011    decision 0.0196    set_bounds 0.1794    solve 0.1779    add 0.1483    
Accumulated time: pickout 0.0050    decision 0.5997    set_bounds 0.2332    solve 0.7496    add 0.4918    
Current (lb-rhs): -0.006088823080062866
248 domains visited
Cumulative time: 2.2450356483459473

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([684]), tensor([-1.]), tensor([0]), tensor([-1.83002104e-16]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [-1.8300210352900203e-16, 0.007783518638461828], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([8.45677278e-06, 4.76731500e-03, 5.46628982e-02]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [-1.8300210352900203e-16, 0.007783518638461828], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([8.45677278e-06, 4.76731500e-03, 3.00380751e-03]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [-1.8300210352900203e-16, 0.007783518638461828], [0, 2]), '/input-12': (tensor([10, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([8.45677278e-06, 1.35311887e-01]), tensor([1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949, 2010], [1.0, 1.0, -1.0], [0, 0, 0], [-1.8300210352900203e-16, 0.004183517303317785, 0.012470470741391182], [0, 2, 3]), '/input-12': (tensor([10, 33]), tensor([-1., -1.]), tensor([0, 0]), tensor([8.45677278e-06, 1.01082190e-03]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949, 2010], [1.0, 1.0, -1.0], [0, 0, 0], [-1.8300210352900203e-16, 0.004183517303317785, 0.012470470741391182], [0, 2, 3]), '/input-12': (tensor([10, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([8.45677278e-06, 1.29176244e-01]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 684,  949, 2010]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([-1.83002104e-16,  4.18351730e-03,  7.24575063e-03]), tensor([0, 2, 3])), '/input-12': ([10], [-1.0], [0], [8.456772775389254e-06], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [-1.8300210352900203e-16, 0.00534157594665885], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([0.11487065, 0.00504066, 0.04394366]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [-1.8300210352900203e-16, 0.00534157594665885], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([0.11487065, 0.00504066, 0.00355078]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [-1.8300210352900203e-16, 0.00534157594665885], [0, 2]), '/input-12': (tensor([10, 33]), tensor([1., 1.]), tensor([0, 0]), tensor([0.11487065, 0.12795191]), tensor([1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, 1.0], [0, 0], [-1.8300210352900203e-16, 0.004408018197864294], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([0.11487065, 0.00489943, 0.04428722]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, 1.0], [0, 0], [-1.8300210352900203e-16, 0.004408018197864294], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([0.11487065, 0.00489943, 0.00348784]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, 1.0], [0, 0], [-1.8300210352900203e-16, 0.004408018197864294], [0, 2]), '/input-12': (tensor([10, 33]), tensor([1., 1.]), tensor([0, 0]), tensor([0.11487065, 0.12789400]), tensor([1, 3]))}
Shallow branching resets to n domains:  13
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1605808138847351
10 lb beta sum: 0.3597407937049866, worst -0.14598870277404785
Time: prepare 0.0008    bound 0.1681    transfer 0.0003    finalize 0.0003    func 0.1697    
Accumulated time: func 0.9748    prepare 0.0562    bound 0.8950    transfer 0.0057    finalize 0.0140    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-8, 276] [/input-12, 50] [/input-12, 33] 
split level 1: [/input-12, 10] [/input-8, 1451] [/input-8, 1707] [/input-12, 50] 
split level 2: [/input-12, 50] [/input-8, 2011] [/input-8, 1451] [/input-8, 1707] 
split level 3: [/input-8, 1707] [/input-8, 2010] [/input-8, 2011] [/input-8, 1451] 
split level 4: [/input-8, 693] [/input-8, 693] [/input-8, 693] [/input-8, 2011] 
split level 5: [/input-8, 949] [/input-8, 685] [/input-8, 685] [/input-8, 693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8862548470497131, worst -0.04320812225341797
10 lb beta sum: 0.9027959108352661, worst -0.0475442111492157
Time: prepare 0.0125    bound 0.1906    transfer 0.0029    finalize 0.0019    func 0.2098    
Accumulated time: func 1.1846    prepare 0.0691    bound 1.0856    transfer 0.0086    finalize 0.0160    
all_split False
======================Cut inference begins======================
max lb tensor(0.67578638) min lb tensor(-0.04201031)
Number of Verified Splits: 238 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.89812171459198, worst -0.14394640922546387
10 lb beta sum: 1.1256219148635864, worst -0.13276350498199463
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 8
#cuts 4-6: 18
#cuts 7-9: 25
#cuts >= 20: 0
BICCOS time: 0.3500645160675049 
BICCOS Cumulative time: 0.4526638984680176
Preprocessing time: 0.009116411209106445 Inference time: 0.3257441520690918 Add cuts time: 0.012487411499023438 Cut analysis time: 0.002716541290283203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04201 (6), -0.04056 (6), -0.04011 (6), -0.03866 (6), -0.03850 (6), -0.03711 (6), -0.03698 (6), -0.03625 (6), -0.03594 (6), -0.03592 (6), -0.03503 (6), -0.03487 (6), -0.03257 (6), -0.03112 (6), -0.03068 (6), -0.02945 (6), -0.00305 (6), -0.00072 (6), 
Length of domains: 18
Time: pickout 0.0008    decision 0.0209    set_bounds 0.0298    solve 0.2100    add 0.0015    
Accumulated time: pickout 0.0058    decision 0.6206    set_bounds 0.2631    solve 0.9596    add 0.4934    
Current (lb-rhs): -0.04201030731201172
266 domains visited
Cumulative time: 3.066251516342163

BaB round 2
batch: 18
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] 
split level 1: [/input-8, 2011] [/input-8, 691] [/input-8, 2011] [/input-8, 685] [/input-8, 2011] [/input-8, 691] [/input-8, 685] [/input-8, 2011] [/input-8, 1909] [/input-8, 2011] 
split level 2: [/input-8, 2010] [/input-8, 685] [/input-8, 2010] [/input-8, 1909] [/input-8, 2010] [/input-8, 1909] [/input-8, 1482] [/input-8, 2010] [/input-8, 691] [/input-8, 2010] 
split level 3: [/input-8, 685] [/input-8, 1909] [/input-8, 685] [/input-8, 691] [/input-8, 685] [/input-8, 685] [/input-8, 691] [/input-8, 685] [/input-8, 685] [/input-8, 685] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03532910346984863
10 lb beta sum: 0.40816885232925415, worst -0.03768046200275421
Time: prepare 0.0062    bound 0.1660    transfer 0.0019    finalize 0.0022    func 0.1802    
Accumulated time: func 1.3648    prepare 0.0756    bound 1.2517    transfer 0.0105    finalize 0.0181    
all_split False
======================Cut inference begins======================
max lb tensor(0.02049637) min lb tensor(-0.03428569)
Number of Verified Splits: 145 of 288
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 8
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.02784419059753418 
BICCOS Cumulative time: 0.48050808906555176
Preprocessing time: 0.00980520248413086 Inference time: 0.014436483383178711 Add cuts time: 0.0029730796813964844 Cut analysis time: 0.000629425048828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03429 (10), -0.03304 (10), -0.03284 (10), -0.03266 (10), -0.03155 (10), -0.03123 (10), -0.03109 (10), -0.03075 (10), -0.02976 (10), -0.02952 (10), -0.02933 (10), -0.02916 (10), -0.02870 (10), -0.02812 (10), -0.02796 (10), -0.02793 (10), -0.02744 (10), -0.02741 (10), -0.02738 (10), -0.02716 (10), 
Length of domains: 143
Time: pickout 0.0022    decision 0.0218    set_bounds 0.0183    solve 0.1803    add 0.0018    
Accumulated time: pickout 0.0080    decision 0.6424    set_bounds 0.2814    solve 1.1399    add 0.4952    
Current (lb-rhs): -0.03428569436073303
409 domains visited
Cumulative time: 3.3201987743377686

BaB round 3
batch: 143
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1451] [/input-8, 1910] [/input-8, 1451] [/input-8, 1910] [/input-8, 948] [/input-8, 1910] [/input-8, 948] [/input-8, 1910] [/input-8, 948] [/input-8, 948] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03271770477294922
10 lb beta sum: 0.43939805030822754, worst -0.03206309676170349
Time: prepare 0.0065    bound 0.1754    transfer 0.0012    finalize 0.0020    func 0.1871    
Accumulated time: func 1.5519    prepare 0.0823    bound 1.4270    transfer 0.0117    finalize 0.0202    
all_split False
======================Cut inference begins======================
max lb tensor(0.00656569) min lb tensor(-0.03190655)
Number of Verified Splits: 21 of 286
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 8
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.013003349304199219 
BICCOS Cumulative time: 0.493511438369751
Preprocessing time: 0.009337425231933594 Inference time: 0.0023691654205322266 Add cuts time: 0.0006551742553710938 Cut analysis time: 0.0006415843963623047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03191 (11), -0.03077 (11), -0.03070 (11), -0.03025 (11), -0.02953 (11), -0.02904 (11), -0.02862 (11), -0.02837 (11), -0.02752 (11), -0.02715 (11), -0.02714 (11), -0.02686 (11), -0.02664 (11), -0.02628 (11), -0.02610 (11), -0.02597 (11), -0.02582 (11), -0.02558 (11), -0.02554 (11), -0.02517 (11), 
Length of domains: 265
Time: pickout 0.0025    decision 0.0221    set_bounds 0.0140    solve 0.1873    add 0.0023    
Accumulated time: pickout 0.0105    decision 0.6645    set_bounds 0.2953    solve 1.3272    add 0.4975    
Current (lb-rhs): -0.03190654516220093
674 domains visited
Cumulative time: 3.5628771781921387

BaB round 4
batch: 265
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 948] [/input-8, 357] [/input-8, 948] [/input-8, 357] [/input-8, 1451] [/input-8, 357] [/input-8, 1451] [/input-8, 357] [/input-8, 1451] [/input-8, 357] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5097854733467102, worst -0.02984827756881714
10 lb beta sum: 0.5105300545692444, worst -0.029665648937225342
Time: prepare 0.0251    bound 0.1610    transfer 0.0014    finalize 0.0027    func 0.1956    
Accumulated time: func 1.7474    prepare 0.1076    bound 1.5881    transfer 0.0131    finalize 0.0228    
all_split False
======================Cut inference begins======================
max lb tensor(0.00688523) min lb tensor(-0.02956039)
Number of Verified Splits: 75 of 530
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 9
#cuts 4-6: 11
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.0288236141204834 
BICCOS Cumulative time: 0.5223350524902344
Preprocessing time: 0.01697564125061035 Inference time: 0.007910013198852539 Add cuts time: 0.0030434131622314453 Cut analysis time: 0.0008945465087890625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02956 (12), -0.02854 (12), -0.02831 (12), -0.02796 (12), -0.02726 (12), -0.02670 (12), -0.02646 (12), -0.02610 (12), -0.02535 (12), -0.02526 (12), -0.02498 (12), -0.02486 (12), -0.02461 (12), -0.02446 (12), -0.02440 (12), -0.02416 (12), -0.02393 (12), -0.02373 (12), -0.02365 (12), -0.02365 (12), 
Length of domains: 455
Time: pickout 0.0038    decision 0.0295    set_bounds 0.0252    solve 0.1958    add 0.0100    
Accumulated time: pickout 0.0143    decision 0.6940    set_bounds 0.3205    solve 1.5230    add 0.5075    
Current (lb-rhs): -0.029560387134552002
1129 domains visited
Cumulative time: 3.8583083152770996

BaB round 5
batch: 455
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1482] [/input-8, 948] [/input-8, 1482] [/input-8, 948] [/input-8, 1482] [/input-8, 948] [/input-8, 1482] [/input-8, 948] [/input-8, 1268] [/input-8, 1910] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027679085731506348
10 lb beta sum: 0.46680667996406555, worst -0.0271950364112854
Time: prepare 0.0195    bound 0.1745    transfer 0.0126    finalize 0.0057    func 0.2186    
Accumulated time: func 1.9660    prepare 0.1274    bound 1.7626    transfer 0.0257    finalize 0.0285    
all_split False
======================Cut inference begins======================
max lb tensor(0.00467700) min lb tensor(-0.02714974)
Number of Verified Splits: 159 of 910
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 11
#cuts 4-6: 12
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.054670095443725586 
BICCOS Cumulative time: 0.57700514793396
Preprocessing time: 0.03175163269042969 Inference time: 0.01927042007446289 Add cuts time: 0.002360105514526367 Cut analysis time: 0.0012879371643066406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02715 (13), -0.02613 (13), -0.02586 (13), -0.02567 (13), -0.02556 (13), -0.02486 (13), -0.02465 (13), -0.02439 (13), -0.02434 (13), -0.02430 (13), -0.02408 (13), -0.02407 (13), -0.02339 (13), -0.02334 (13), -0.02294 (13), -0.02282 (13), -0.02271 (13), -0.02259 (13), -0.02258 (13), -0.02242 (13), 
Length of domains: 751
Time: pickout 0.0131    decision 0.0422    set_bounds 0.0459    solve 0.2191    add 0.0734    
Accumulated time: pickout 0.0274    decision 0.7362    set_bounds 0.3664    solve 1.7422    add 0.5808    
Current (lb-rhs): -0.027149736881256104
1880 domains visited
Cumulative time: 4.316790819168091

BaB round 6
batch: 751
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 942] [/input-8, 692] [/input-8, 942] [/input-8, 692] [/input-8, 942] [/input-8, 692] [/input-8, 942] [/input-8, 692] [/input-8, 942] [/input-8, 692] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02597057819366455
10 lb beta sum: 0.4499933421611786, worst -0.02549034357070923
Time: prepare 0.0325    bound 0.1984    transfer 0.0145    finalize 0.0123    func 0.5816    
Accumulated time: func 2.5476    prepare 0.1603    bound 1.9609    transfer 0.0402    finalize 0.0408    
all_split False
======================Cut inference begins======================
max lb tensor(0.01631524) min lb tensor(-0.02544907)
Number of Verified Splits: 534 of 1502
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 50.
#cuts 1-3: 15
#cuts 4-6: 29
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.12685775756835938 
BICCOS Cumulative time: 0.7038629055023193
Preprocessing time: 0.050750732421875 Inference time: 0.06434798240661621 Add cuts time: 0.009587287902832031 Cut analysis time: 0.002171754837036133
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02545 (14), -0.02418 (14), -0.02416 (14), -0.02398 (14), -0.02396 (14), -0.02288 (14), -0.02273 (14), -0.02269 (14), -0.02268 (14), -0.02267 (14), -0.02249 (14), -0.02239 (14), -0.02237 (14), -0.02205 (14), -0.02163 (14), -0.02159 (14), -0.02139 (14), -0.02124 (14), -0.02124 (14), -0.02114 (14), 
Length of domains: 968
Time: pickout 0.0232    decision 0.0625    set_bounds 0.0741    solve 0.5823    add 0.0323    
Accumulated time: pickout 0.0507    decision 0.7987    set_bounds 0.4405    solve 2.3244    add 0.6131    
Current (lb-rhs): -0.02544906735420227
2848 domains visited
Cumulative time: 5.225032806396484

BaB round 7
batch: 968
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 1268] [/input-8, 942] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0238797664642334
10 lb beta sum: 0.6334259510040283, worst -0.029722020030021667
Time: prepare 0.0405    bound 0.1968    transfer 0.0128    finalize 0.0110    func 0.2740    
Accumulated time: func 2.8216    prepare 0.2010    bound 2.1577    transfer 0.0529    finalize 0.0518    
all_split False
======================Cut inference begins======================
max lb tensor(0.00899088) min lb tensor(-0.02271080)
Number of Verified Splits: 566 of 1936
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 67.
#cuts 1-3: 15
#cuts 4-6: 39
#cuts 7-9: 13
#cuts >= 20: 0
BICCOS time: 0.15325045585632324 
BICCOS Cumulative time: 0.8571133613586426
Preprocessing time: 0.06169009208679199 Inference time: 0.07409167289733887 Add cuts time: 0.014481067657470703 Cut analysis time: 0.0029876232147216797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02271 (15), -0.02145 (15), -0.02130 (15), -0.02122 (15), -0.02092 (15), -0.02063 (15), -0.02061 (15), -0.02038 (15), -0.02035 (15), -0.02027 (15), -0.01981 (15), -0.01979 (15), -0.01975 (15), -0.01953 (15), -0.01950 (15), -0.01945 (15), -0.01943 (15), -0.01940 (15), -0.01930 (15), -0.01919 (15), 
Length of domains: 1370
Time: pickout 0.0244    decision 0.0698    set_bounds 0.0938    solve 0.2745    add 0.0115    
Accumulated time: pickout 0.0750    decision 0.8685    set_bounds 0.5343    solve 2.5990    add 0.6247    
Current (lb-rhs): -0.022710800170898438
4218 domains visited
Cumulative time: 5.860296249389648

BaB round 8
batch: 1370
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02223360538482666
10 lb beta sum: 0.6835842728614807, worst -0.02796614170074463
Time: prepare 0.0769    bound 0.2304    transfer 0.0092    finalize 0.0188    func 0.3555    
Accumulated time: func 3.1770    prepare 0.2783    bound 2.3882    transfer 0.0621    finalize 0.0706    
all_split False
======================Cut inference begins======================
max lb tensor(0.00766647) min lb tensor(-0.02110922)
Number of Verified Splits: 817 of 2740
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 103.
#cuts 1-3: 17
#cuts 4-6: 63
#cuts 7-9: 23
#cuts >= 20: 0
BICCOS time: 0.2646341323852539 
BICCOS Cumulative time: 1.1217474937438965
Preprocessing time: 0.10532927513122559 Inference time: 0.12580537796020508 Add cuts time: 0.029252290725708008 Cut analysis time: 0.004247188568115234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02111 (16), -0.01970 (16), -0.01964 (16), -0.01960 (16), -0.01932 (16), -0.01906 (16), -0.01901 (16), -0.01867 (16), -0.01867 (16), -0.01854 (16), -0.01832 (16), -0.01822 (16), -0.01820 (16), -0.01820 (16), -0.01800 (16), -0.01793 (16), -0.01786 (16), -0.01782 (16), -0.01759 (16), -0.01757 (16), 
Length of domains: 1923
Time: pickout 0.0209    decision 0.0913    set_bounds 0.1459    solve 0.6165    add 0.0327    
Accumulated time: pickout 0.0959    decision 0.9599    set_bounds 0.6802    solve 3.2155    add 0.6574    
Current (lb-rhs): -0.02110922336578369
6141 domains visited
Cumulative time: 7.049720048904419

BaB round 9
batch: 1923
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2011] [/input-8, 2011] [/input, 2250] [/input-8, 2011] [/input, 2250] [/input, 2250] [/input, 2250] [/input-8, 691] [/input, 2250] [/input, 2250] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01966726779937744
10 lb beta sum: 0.653556227684021, worst -0.026491686701774597
Time: prepare 0.0893    bound 0.3879    transfer 0.0332    finalize 0.0257    func 0.5625    
Accumulated time: func 3.7395    prepare 0.3679    bound 2.7761    transfer 0.0953    finalize 0.0963    
all_split False
======================Cut inference begins======================
max lb tensor(0.77836144) min lb tensor(-0.01859450)
Number of Verified Splits: 1304 of 3846
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 116.
#cuts 1-3: 18
#cuts 4-6: 79
#cuts 7-9: 19
#cuts >= 20: 0
BICCOS time: 0.6946110725402832 
BICCOS Cumulative time: 1.8163585662841797
Preprocessing time: 0.13093113899230957 Inference time: 0.5091698169708252 Add cuts time: 0.049408912658691406 Cut analysis time: 0.005101203918457031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01859 (17), -0.01794 (17), -0.01789 (17), -0.01749 (17), -0.01736 (17), -0.01718 (17), -0.01711 (17), -0.01708 (17), -0.01707 (17), -0.01695 (17), -0.01688 (17), -0.01688 (17), -0.01686 (17), -0.01648 (17), -0.01647 (17), -0.01643 (17), -0.01638 (17), -0.01636 (17), -0.01625 (17), -0.01624 (17), 
Length of domains: 2542
Time: pickout 0.0371    decision 0.1246    set_bounds 0.1827    solve 0.5642    add 0.0331    
Accumulated time: pickout 0.1329    decision 1.0845    set_bounds 0.8629    solve 3.7797    add 0.6905    
Current (lb-rhs): -0.01859450340270996
8683 domains visited
Cumulative time: 8.723029613494873

BaB round 10
batch: 2542
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2004] [/input-8, 729] [/input-8, 2004] [/input-8, 729] [/input-8, 2034] [/input-8, 2004] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01909935474395752
10 lb beta sum: 0.5951155424118042, worst -0.04513674974441528
Time: prepare 0.1289    bound 0.4909    transfer 0.0173    finalize 0.0362    func 0.7108    
Accumulated time: func 4.4503    prepare 0.4972    bound 3.2671    transfer 0.1126    finalize 0.1325    
all_split False
======================Cut inference begins======================
max lb tensor(0.44823515) min lb tensor(-0.01719093)
Number of Verified Splits: 2504 of 5084
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 66.
#cuts 1-3: 23
#cuts 4-6: 42
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.9455845355987549 
BICCOS Cumulative time: 2.7619431018829346
Preprocessing time: 0.19173717498779297 Inference time: 0.6707675457000732 Add cuts time: 0.08083033561706543 Cut analysis time: 0.002249479293823242
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01719 (18), -0.01707 (18), -0.01661 (18), -0.01636 (18), -0.01635 (18), -0.01632 (18), -0.01618 (18), -0.01593 (18), -0.01592 (18), -0.01589 (18), -0.01586 (18), -0.01583 (18), -0.01574 (18), -0.01567 (18), -0.01556 (18), -0.01550 (18), -0.01541 (18), -0.01530 (18), -0.01524 (18), -0.01523 (18), 
Length of domains: 2580
Time: pickout 0.0432    decision 0.1730    set_bounds 0.2944    solve 0.7129    add 0.0197    
Accumulated time: pickout 0.1761    decision 1.2575    set_bounds 1.1573    solve 4.4926    add 0.7102    
Current (lb-rhs): -0.017190933227539062
11263 domains visited
Cumulative time: 10.974109649658203

BaB round 11
batch: 2580
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2250] [/input-8, 2021] [/input, 2250] [/input-8, 2021] [/input, 2250] [/input-8, 2021] [/input, 2250] [/input-8, 2021] [/input-8, 2021] [/input-8, 2034] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01809251308441162
10 lb beta sum: 1.1377161741256714, worst -0.03027607500553131
Time: prepare 0.1340    bound 0.4811    transfer 0.0114    finalize 0.0376    func 0.7019    
Accumulated time: func 5.1521    prepare 0.6316    bound 3.7481    transfer 0.1240    finalize 0.1701    
all_split False
======================Cut inference begins======================
max lb tensor(0.45549849) min lb tensor(-0.01603776)
Number of Verified Splits: 3617 of 5160
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 29
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 1.1939032077789307 
BICCOS Cumulative time: 3.9558463096618652
Preprocessing time: 0.19545483589172363 Inference time: 0.9081509113311768 Add cuts time: 0.08804631233215332 Cut analysis time: 0.002251148223876953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01604 (19), -0.01576 (19), -0.01493 (19), -0.01487 (19), -0.01480 (19), -0.01453 (19), -0.01438 (19), -0.01423 (19), -0.01421 (19), -0.01405 (19), -0.01403 (19), -0.01397 (19), -0.01373 (19), -0.01370 (19), -0.01369 (19), -0.01369 (19), -0.01350 (19), -0.01339 (19), -0.01328 (19), -0.01322 (19), 
Length of domains: 1543
Time: pickout 0.0550    decision 0.1654    set_bounds 0.2752    solve 0.7037    add 0.0149    
Accumulated time: pickout 0.2311    decision 1.4229    set_bounds 1.4325    solve 5.1963    add 0.7251    
Current (lb-rhs): -0.01603776216506958
12806 domains visited
Cumulative time: 13.438689231872559

BaB round 12
batch: 1543
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 947] [/input-8, 1709] [/input, 1996] [/input-8, 947] [/input-8, 947] [/input-8, 947] [/input, 1996] [/input-8, 1709] [/input-8, 947] [/input-8, 947] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.016603469848632812
10 lb beta sum: 2.221590757369995, worst -0.014299541711807251
Time: prepare 0.0855    bound 0.3107    transfer 0.0124    finalize 0.0201    func 0.4497    
Accumulated time: func 5.6019    prepare 0.7174    bound 4.0588    transfer 0.1364    finalize 0.1902    
all_split False
======================Cut inference begins======================
max lb tensor(0.93122315) min lb tensor(-0.01429257)
Number of Verified Splits: 2751 of 3086
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.5312831401824951 
BICCOS Cumulative time: 4.48712944984436
Preprocessing time: 0.10202908515930176 Inference time: 0.39299869537353516 Add cuts time: 0.035897254943847656 Cut analysis time: 0.0003581047058105469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01429 (20), -0.01349 (20), -0.01317 (20), -0.01277 (20), -0.01244 (20), -0.01235 (20), -0.01231 (20), -0.01220 (20), -0.01165 (20), -0.01164 (20), -0.01141 (20), -0.01110 (20), -0.01105 (20), -0.01104 (20), -0.01093 (20), -0.01080 (20), -0.01068 (20), -0.01063 (20), -0.01038 (20), -0.01029 (20), 
Length of domains: 335
Time: pickout 0.0399    decision 0.0996    set_bounds 0.1442    solve 0.4516    add 0.0249    
Accumulated time: pickout 0.2710    decision 1.5225    set_bounds 1.5768    solve 5.6479    add 0.7500    
Current (lb-rhs): -0.01429256796836853
13141 domains visited
Cumulative time: 14.761118173599243

BaB round 13
batch: 335
splitting decisions: 
split level 0: [/input-8, 1709] [/input-8, 956] [/input-8, 1709] [/input-8, 956] [/input-8, 1709] [/input-8, 956] [/input-8, 1709] [/input-8, 956] [/input, 1996] [/input-8, 1709] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.015593528747558594

all verified at 1th iter
Time: prepare 0.0170    bound 0.0176    transfer 0.0051    finalize 0.0039    func 0.0482    
Accumulated time: func 5.6500    prepare 0.7347    bound 4.0764    transfer 0.1415    finalize 0.1942    
all_split False
======================Cut inference begins======================
max lb tensor(0.05287896) min lb tensor(3.21567059e-05)
Number of Verified Splits: 670 of 670
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.021106958389282227 
BICCOS Cumulative time: 4.508236408233643
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0305    set_bounds 0.0329    solve 0.0484    add 0.0001    
Accumulated time: pickout 0.2788    decision 1.5530    set_bounds 1.6097    solve 5.6963    add 0.7501    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
13141 domains visited
Cumulative time: 14.908425569534302


Properties batch 1, size 1
Remaining timeout: 183.4194793701172
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 183.41934323310852
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 183.41931676864624
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 183.4192967414856
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 183.41927576065063
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 183.41866517066956
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 183.41864466667175
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 183.41862559318542
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 16.5814 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 124, vnnlib ID: 124 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.69559193, -7.96780491, -6.96483183, -7.45871067, -6.68889904,
         -7.58828831, -6.67497444, -6.98177767, -8.06610775, -8.63962460]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [547]; unstable size 547; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 228, 1, 547] with unstable size 227 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 547] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 547] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [227]; unstable size 227; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 227] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 227] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.58523273, -0.92486894, -2.40603924, -1.88837290, -2.64663792,
         -1.76642704, -2.72795200, -2.38057566, -1.24313211]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.69559193, -7.96780491, -6.96483183, -7.45871067, -6.68889904,
         -7.58828831, -6.67497444, -6.98177767, -8.06610775, -8.63962460]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.69559193, -7.96780586, -6.96483278, -7.45871067, -6.68889999,
          -7.58828878, -6.67497540, -6.98177910, -8.06610775, -8.63962555],
         [-7.69559193, -7.96780586, -6.96483278, -7.45871067, -6.68889999,
          -7.58828878, -6.67497540, -6.98177910, -8.06610775, -8.63962555]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.94403362, -0.67181969, -1.67479277, -1.18091488, -1.95072556,
          -1.05133677, -1.96465015, -1.65784645, -0.57351780]]],
       device='cuda:0')
number of violation:  9
clean attack image tensor([[[[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         ...,


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0486 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 125, vnnlib ID: 125 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.45314455,  -7.18863773,  -8.37823200,  -9.04793167,  -9.03023815,
          -9.23170471, -10.10972786, -10.12581825,  -6.64005661,  -7.36846209]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [564]; unstable size 564; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 564] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 564] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 564] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 148] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.44336748, -0.41944861,  0.41273689,  1.05374670,  1.06570005,
          1.21813250,  2.11687565,  2.11616468, -1.28266501]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.45314455,  -7.18863773,  -8.37823200,  -9.04793167,  -9.03023815,
          -9.23170471, -10.10972786, -10.12581825,  -6.64005661,  -7.36846209]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.45314312,  -7.18863678,  -8.37823296,  -9.04792976,  -9.03023720,
           -9.23170471, -10.10972786, -10.12581825,  -6.64005566,  -7.36846113],
         [ -7.45314312,  -7.18863678,  -8.37823296,  -9.04792976,  -9.03023720,
           -9.23170471, -10.10972786, -10.12581825,  -6.64005566,  -7.36846113]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08468199, -0.17982435, -0.72840548]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0753 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 126, vnnlib ID: 126 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.54385185, -7.41220284, -2.34506559, -2.95553207, -2.41963601,
         -3.01310992, -2.81382346, -2.59146428, -7.24296570, -5.83741570]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [396]; unstable size 396; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 396] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 396] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 396] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 177] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.65073204,  4.21796799, -0.26915106,  0.22882628,  0.28623390,
         -0.01064329, -0.09029412,  4.20063782,  2.69216037]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.54385185, -7.41220284, -2.34506559, -2.95553207, -2.41963601,
         -3.01310992, -2.81382346, -2.59146428, -7.24296570, -5.83741570]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.54385185, -7.41220379, -2.34506559, -2.95553231, -2.41963625,
          -3.01311040, -2.81382322, -2.59146428, -7.24296570, -5.83741570],
         [-5.54385185, -7.41220379, -2.34506559, -2.95553231, -2.41963625,
          -3.01311040, -2.81382322, -2.59146428, -7.24296570, -5.83741570]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07457066,  0.39418697,  0.17182803]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0741 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 127, vnnlib ID: 127 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.39800262, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
         -5.32085514, -5.70522690, -5.39239740, -4.68354988, -5.44279432]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [602]; unstable size 602; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 602] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 602] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 602] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.73008370,  1.05035090, -0.48766088, -0.22834897, -0.77157784,
         -0.10954207,  0.24981642, -0.21459520,  0.21009302]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.39800262, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
         -5.32085514, -5.70522690, -5.39239740, -4.68354988, -5.44279432]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.39800215, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
          -5.32085562, -5.70522690, -5.39239693, -4.68354988, -5.44279432],
         [-4.39800215, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
          -5.32085562, -5.70522690, -5.39239693, -4.68354988, -5.44279432]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.28554773,  0.22653723,  0.50871849, -0.00213194,  0.63730574,
           0.70884705]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0544 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 128, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
          -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [471]; unstable size 471; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 210, 1, 471] with unstable size 209 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 471] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 471] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [209]; unstable size 209; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 209] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 209] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17617583,  2.53004241,  0.03650141,  0.78286886, -0.09084690,
          0.84507638,  0.92964882,  2.50925684,  1.68634820]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
          -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.53it/s]100%|██████████| 1/1 [00:00<00:00,  8.52it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.12287617, -9.92002869, -6.60754442, -7.37705517, -6.42930222,
          -7.44449568, -6.38382149, -7.65928459, -9.62154961, -8.92986012]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04548073]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1203 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.553853988647461
alpha/beta optimization time: 1.2577645778656006
initial alpha-crown bounds: tensor([[ 1.19834375,  2.55369473,  0.05347449,  0.79098058, -0.08158457,
          0.85336882,  0.94275779,  2.53685880,  1.70595980]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08158457279205322
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.55237436294556
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.55233240127563
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.55230569839478
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.55228400230408
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.5522656440735
Verifying property 4 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08158457]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
         -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08158457]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 471
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 206
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 681
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001220703125
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08158421516418457
10 lb beta sum: 0.0, worst -0.08158421516418457
Time: prepare 0.0002    bound 0.0936    transfer 0.0001    finalize 0.0001    func 0.0941    
Accumulated time: func 0.0941    prepare 0.0002    bound 0.0936    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] 
split level 1: [/input-12, 5] 
split level 2: [/input-8, 1443] 
split level 3: [/input-8, 555] 
split level 4: [/input-8, 20] 
split level 5: [/input-8, 1457] 
split level 6: [/input-8, 1207] 
split level 7: [/input-8, 28] 
split level 8: [/input-8, 1451] 
split level 9: [/input-8, 1437] 
split level 10: [/input-8, 750] 
split level 11: [/input-8, 1462] 
split level 12: [/input-8, 19] 
split level 13: [/input-8, 313] 
split level 14: [/input-8, 1425] 
split level 15: [/input-8, 339] 
split level 16: [/input-8, 1225] 
split level 17: [/input-8, 916] 
split level 18: [/input-8, 233] 
split level 19: [/input-8, 1628] 
split level 20: [/input-8, 796] 
split level 21: [/input-8, 1458] 
split level 22: [/input-8, 805] 
split level 23: [/input-8, 1195] 
split level 24: [/input-8, 1274] 
split level 25: [/input-8, 1637] 
split level 26: [/input-8, 908] 
split level 27: [/input-8, 1674] 
split level 28: [/input-8, 757] 
split level 29: [/input-8, 797] 
split level 30: [/input-8, 1035] 
split level 31: [/input-8, 803] 
split level 32: [/input-8, 148] 
split level 33: [/input-8, 737] 
split level 34: [/input-8, 915] 
split level 35: [/input-8, 1292] 
split level 36: [/input-8, 1321] 
split level 37: [/input-8, 1134] 
split level 38: [/input-8, 1466] 
split level 39: [/input-8, 567] 
split level 40: [/input-8, 923] 
split level 41: [/input-8, 1250] 
split level 42: [/input-8, 718] 
split level 43: [/input-8, 927] 
split level 44: [/input-8, 1186] 
split level 45: [/input-8, 1171] 
split level 46: [/input-8, 1226] 
split level 47: [/input-8, 934] 
split level 48: [/input-8, 938] 
split level 49: [/input-8, 1291] 
split level 50: [/input-8, 1236] 
split level 51: [/input, 1721] 
split level 52: [/input-8, 1645] 
split level 53: [/input-8, 1214] 
split level 54: [/input-8, 946] 
split level 55: [/input-8, 1775] 
split level 56: [/input-8, 1330] 
split level 57: [/input-8, 2014] 
split level 58: [/input-8, 1766] 
split level 59: [/input, 1253] 
split level 60: [/input-8, 1270] 
split level 61: [/input-8, 726] 
split level 62: [/input-8, 570] 
split level 63: [/input, 2890] 
split level 64: [/input, 1099] 
split level 65: [/input-8, 1228] 
split level 66: [/input-8, 375] 
split level 67: [/input-8, 1581] 
split level 68: [/input-8, 52] 
split level 69: [/input-8, 1626] 
split level 70: [/input, 1115] 
split level 71: [/input-8, 1325] 
split level 72: [/input-8, 1098] 
split level 73: [/input-8, 1254] 
split level 74: [/input-8, 907] 
split level 75: [/input-8, 951] 
split level 76: [/input-8, 1267] 
split level 77: [/input-8, 1582] 
split level 78: [/input, 629] 
split level 79: [/input-8, 1767] 
split level 80: [/input-8, 1322] 
split level 81: [/input, 3668] 
split level 82: [/input, 3652] 
split level 83: [/input, 839] 
split level 84: [/input-8, 1036] 
split level 85: [/input-8, 1324] 
split level 86: [/input, 680] 
split level 87: [/input, 1773] 
split level 88: [/input, 4010] 
split level 89: [/input-8, 1246] 
split level 90: [/input-8, 1745] 
split level 91: [/input, 2113] 
split level 92: [/input, 1251] 
split level 93: [/input-8, 929] 
split level 94: [/input-8, 1218] 
split level 95: [/input, 3975] 
split level 96: [/input-8, 937] 
split level 97: [/input-8, 1289] 
split level 98: [/input, 1094] 
split level 99: [/input-8, 1294] 
split level 100: [/input, 1720] 
split level 101: [/input, 4007] 
split level 102: [/input, 1479] 
split level 103: [/input, 4025] 
split level 104: [/input-8, 535] 
split level 105: [/input, 3828] 
split level 106: [/input-8, 1612] 
split level 107: [/input-8, 374] 
split level 108: [/input-8, 1153] 
split level 109: [/input, 745] 
split level 110: [/input-8, 920] 
split level 111: [/input-8, 64] 
split level 112: [/input-8, 811] 
split level 113: [/input, 3642] 
split level 114: [/input, 4009] 
split level 115: [/input, 3249] 
split level 116: [/input-8, 6] 
split level 117: [/input-8, 1220] 
split level 118: [/input-8, 936] 
split level 119: [/input, 988] 
split level 120: [/input, 822] 
split level 121: [/input-8, 1609] 
split level 122: [/input-8, 1230] 
split level 123: [/input-8, 324] 
split level 124: [/input, 2117] 
split level 125: [/input-8, 1639] 
split level 126: [/input, 1378] 
split level 127: [/input, 3213] 
split level 128: [/input, 3230] 
split level 129: [/input, 1377] 
split level 130: [/input, 194] 
split level 131: [/input-8, 1840] 
split level 132: [/input, 1493] 
split level 133: [/input-8, 2023] 
split level 134: [/input, 1864] 
split level 135: [/input, 2625] 
split level 136: [/input-8, 351] 
split level 137: [/input-8, 899] 
split level 138: [/input, 1393] 
split level 139: [/input-8, 953] 
split level 140: [/input, 1410] 
split level 141: [/input-8, 1224] 
split level 142: [/input, 1475] 
split level 143: [/input-8, 1575] 
split level 144: [/input, 1473] 
split level 145: [/input, 1390] 
split level 146: [/input, 1760] 
split level 147: [/input, 1169] 
split level 148: [/input, 280] 
split level 149: [/input, 3155] 
split level 150: [/input-8, 2024] 
split level 151: [/input, 4028] 
split level 152: [/input, 3748] 
split level 153: [/input-8, 1686] 
split level 154: [/input, 208] 
split level 155: [/input, 490] 
split level 156: [/input, 3914] 
split level 157: [/input, 3912] 
split level 158: [/input, 4092] 
split level 159: [/input, 940] 
split level 160: [/input, 2538] 
split level 161: [/input, 2772] 
split level 162: [/input, 887] 
split level 163: [/input-8, 1678] 
split level 164: [/input-8, 1091] 
split level 165: [/input, 1128] 
split level 166: [/input, 149] 
split level 167: [/input-8, 345] 
split level 168: [/input, 2398] 
split level 169: [/input, 2362] 
split level 170: [/input, 1160] 
split level 171: [/input, 294] 
split level 172: [/input-8, 1640] 
split level 173: [/input, 323] 
split level 174: [/input, 2526] 
split level 175: [/input, 1159] 
split level 176: [/input, 1779] 
split level 177: [/input, 1144] 
split level 178: [/input, 1130] 
split level 179: [/input, 3931] 
split level 180: [/input, 3428] 
split level 181: [/input, 2412] 
split level 182: [/input, 4058] 
split level 183: [/input, 276] 
split level 184: [/input, 2406] 
split level 185: [/input, 408] 
split level 186: [/input-8, 369] 
split level 187: [/input, 346] 
split level 188: [/input, 895] 
split level 189: [/input-8, 72] 
split level 190: [/input-8, 1316] 
split level 191: [/input, 2400] 
split level 192: [/input, 2396] 
split level 193: [/input, 2275] 
split level 194: [/input-8, 1695] 
split level 195: [/input-8, 1891] 
split level 196: [/input-8, 1902] 
split level 197: [/input, 452] 
split level 198: [/input, 379] 
split level 199: [/input, 2597] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08314025402069092
10 lb beta sum: 0.0, worst -0.08185315132141113
Time: prepare 0.0118    bound 0.1094    transfer 0.0026    finalize 0.0030    func 0.1295    
Accumulated time: func 0.2236    prepare 0.0221    bound 0.2030    transfer 0.0027    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03181183) min lb tensor(-0.08158100)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010327339172363281 
BICCOS Cumulative time: 0.010327339172363281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07840 (1), -0.07838 (1), -0.07830 (1), -0.07823 (1), -0.07817 (1), -0.07811 (1), -0.07806 (1), -0.07805 (1), -0.07804 (1), -0.07793 (1), -0.07791 (1), -0.07772 (1), -0.07767 (1), -0.07766 (1), -0.07753 (1), -0.07729 (1), -0.07729 (1), -0.07724 (1), -0.07708 (1), -0.07704 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5223    set_bounds 0.0093    solve 0.1296    add 0.0730    
Accumulated time: pickout 0.0003    decision 0.5223    set_bounds 0.0093    solve 0.1296    add 0.0730    
Current (lb-rhs): -0.07840466499328613
50 domains visited
Cumulative time: 0.8441781997680664

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 5] [/input-12, 5] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 1: [/input-8, 555] [/input-8, 555] [/input-12, 5] [/input-8, 555] [/input-12, 5] [/input-12, 5] [/input-8, 555] [/input-12, 5] [/input-12, 5] [/input-12, 5] 
split level 2: [/input-8, 28] [/input-8, 1457] [/input-8, 555] [/input-8, 28] [/input-8, 555] [/input-8, 28] [/input-8, 1457] [/input-8, 555] [/input-8, 555] [/input-8, 555] 
split level 3: [/input-8, 1437] [/input-8, 28] [/input-8, 28] [/input-8, 1437] [/input-8, 28] [/input, 1667] [/input-8, 28] [/input-8, 28] [/input-8, 28] [/input-8, 28] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07675468921661377
10 lb beta sum: 0.0, worst -0.07679224014282227
Time: prepare 0.0128    bound 0.1037    transfer 0.0008    finalize 0.0026    func 0.1226    
Accumulated time: func 0.3462    prepare 0.0352    bound 0.3067    transfer 0.0035    finalize 0.0057    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01291913) min lb tensor(-0.07674348)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.012392044067382812 
BICCOS Cumulative time: 0.022719383239746094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02638 (2), -0.02634 (2), -0.02617 (2), -0.02614 (2), -0.02570 (2), -0.02547 (2), -0.02532 (2), -0.02523 (2), -0.02503 (2), -0.02472 (2), -0.02464 (2), -0.02459 (2), -0.02450 (2), -0.02442 (2), -0.02431 (2), -0.02428 (2), -0.02425 (2), -0.02422 (2), -0.02396 (2), -0.02396 (2), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0212    set_bounds 0.0133    solve 0.1228    add 0.1530    
Accumulated time: pickout 0.0016    decision 0.5434    set_bounds 0.0226    solve 0.2523    add 0.2260    
Current (lb-rhs): -0.02637934684753418
100 domains visited
Cumulative time: 1.1686427593231201

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 5] [/input-12, 5] [/input-8, 555] [/input-8, 555] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-8, 555] [/input-8, 555] 
split level 1: [/input-8, 555] [/input-8, 555] [/input-8, 28] [/input-8, 28] [/input-8, 28] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 28] [/input-8, 28] 
split level 2: [/input-8, 28] [/input-8, 1457] [/input-8, 1451] [/input-8, 1451] [/input-8, 1437] [/input-8, 28] [/input-8, 28] [/input-8, 1457] [/input-8, 1437] [/input-8, 1437] 
split level 3: [/input-8, 1437] [/input-8, 28] [/input-8, 1437] [/input-8, 1437] [/input, 3682] [/input-8, 1437] [/input-8, 1437] [/input-8, 28] [/input-8, 313] [/input-8, 313] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030404627323150635
10 lb beta sum: 0.0, worst -0.02506166696548462
Time: prepare 0.0148    bound 0.1279    transfer 0.0031    finalize 0.0033    func 0.1521    
Accumulated time: func 0.4982    prepare 0.0504    bound 0.4346    transfer 0.0066    finalize 0.0090    
all_split False
======================Cut inference begins======================
max lb tensor(0.00377178) min lb tensor(-0.02484238)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 1
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.017116785049438477 
BICCOS Cumulative time: 0.03983616828918457
Preprocessing time: 0.014495849609375 Inference time: 0.0003845691680908203 Add cuts time: 0.00031828880310058594 Cut analysis time: 0.0019180774688720703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00799 (3), -0.00784 (3), -0.00779 (3), -0.00778 (3), -0.00773 (3), -0.00750 (3), -0.00746 (3), -0.00731 (3), -0.00730 (3), -0.00726 (3), -0.00724 (3), -0.00723 (3), -0.00723 (3), -0.00721 (3), -0.00719 (3), -0.00715 (3), -0.00714 (3), -0.00710 (3), -0.00705 (3), -0.00702 (3), 
Length of domains: 50
Time: pickout 0.0021    decision 0.0253    set_bounds 0.0198    solve 0.1523    add 0.1223    
Accumulated time: pickout 0.0037    decision 0.5687    set_bounds 0.0424    solve 0.4046    add 0.3483    
Current (lb-rhs): -0.00799262523651123
150 domains visited
Cumulative time: 1.5080671310424805

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 555] [/input-8, 28] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] 
split level 1: [/input-8, 28] [/input-8, 1437] [/input-8, 28] [/input-8, 28] [/input-8, 1457] [/input-8, 28] [/input-8, 1457] [/input-8, 28] [/input-8, 1457] [/input-8, 1457] 
split level 2: [/input-8, 1451] [/input-8, 313] [/input-8, 1437] [/input-8, 1437] [/input-8, 28] [/input-8, 1451] [/input-8, 28] [/input-8, 1451] [/input-8, 28] [/input-8, 28] 
split level 3: [/input-8, 1437] [/input, 3682] [/input-8, 313] [/input-8, 313] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1801] [/input, 3682] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01567786931991577
10 lb beta sum: 0.17435136437416077, worst -0.006228923797607422
Time: prepare 0.0091    bound 0.1510    transfer 0.0020    finalize 0.0025    func 0.1674    
Accumulated time: func 0.6657    prepare 0.0599    bound 0.5856    transfer 0.0087    finalize 0.0116    
all_split False
======================Cut inference begins======================
max lb tensor(0.00984526) min lb tensor(-0.00610244)
Number of Verified Splits: 104 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 7
#cuts 4-6: 26
#cuts >= 20: 0
BICCOS time: 0.024688243865966797 
BICCOS Cumulative time: 0.06452441215515137
Preprocessing time: 0.012590408325195312 Inference time: 0.005731105804443359 Add cuts time: 0.005119800567626953 Cut analysis time: 0.0012469291687011719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00166 (4), -0.00163 (4), -0.00161 (4), -0.00161 (4), -0.00151 (4), -0.00147 (4), -0.00147 (4), -0.00145 (4), -0.00144 (4), -0.00144 (4), -0.00142 (4), -0.00142 (4), -0.00136 (4), -0.00135 (4), -0.00134 (4), -0.00131 (4), -0.00128 (4), -0.00124 (4), -0.00124 (4), -0.00122 (4), 
Length of domains: 50
Time: pickout 0.0015    decision 0.0233    set_bounds 0.0200    solve 0.1676    add 0.1336    
Accumulated time: pickout 0.0052    decision 0.5920    set_bounds 0.0624    solve 0.5722    add 0.4819    
Current (lb-rhs): -0.001664191484451294
200 domains visited
Cumulative time: 1.879089593887329

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 555] [/input-8, 28] [/input-8, 28] [/input-8, 555] [/input-8, 28] [/input-8, 28] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] 
split level 1: [/input-8, 28] [/input-8, 1437] [/input-8, 1437] [/input-8, 1451] [/input-8, 1437] [/input-8, 1437] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] 
split level 2: [/input-8, 1451] [/input-8, 313] [/input-8, 313] [/input-8, 1437] [/input-8, 313] [/input-8, 313] [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] 
split level 3: [/input-8, 1134] [/input-8, 19] [/input-8, 19] [/input-8, 1134] [/input-8, 19] [/input-8, 19] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01335453987121582
10 lb beta sum: 0.1696765124797821, worst -0.0001515597105026245
Time: prepare 0.0083    bound 0.1640    transfer 0.0008    finalize 0.0036    func 0.3762    
Accumulated time: func 1.0419    prepare 0.0685    bound 0.7497    transfer 0.0095    finalize 0.0151    
all_split False
======================Cut inference begins======================
max lb tensor(0.01146162) min lb tensor(1.19209290e-06)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 7
#cuts 4-6: 34
#cuts >= 20: 0
BICCOS time: 0.050185441970825195 
BICCOS Cumulative time: 0.11470985412597656
Preprocessing time: 0.012573480606079102 Inference time: 0.018932819366455078 Add cuts time: 0.017080307006835938 Cut analysis time: 0.0015988349914550781
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0200    set_bounds 0.0160    solve 0.3764    add 0.0323    
Accumulated time: pickout 0.0064    decision 0.6120    set_bounds 0.0784    solve 0.9486    add 0.5142    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1., -1.]), tensor([0, 0]), tensor([5.66601877e-10, 1.95376738e-03]), tensor([1, 3])), '/input-12': ([50, 5], [-1.0, -1.0], [0, 0], [2.7985672115750544e-16, 0.014154838398098946], [0, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457,   28]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.66601877e-10, 6.66009029e-03, 1.28720864e-03]), tensor([1, 3, 4])), '/input-12': ([50, 5], [-1.0, -1.0], [0, 0], [2.7985672115750544e-16, 0.014154838398098946], [0, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457,   28]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([5.66601877e-10, 6.66009029e-03, 2.37475499e-03]), tensor([1, 3, 4])), '/input-12': ([50, 5], [-1.0, -1.0], [0, 0], [2.7985672115750544e-16, 0.014154838398098946], [0, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555,   28, 1451]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.66601877e-10, 3.57303745e-03, 1.80688105e-03]), tensor([1, 3, 4])), '/input-12': ([50, 5], [-1.0, 1.0], [0, 0], [2.7985672115750544e-16, 0.015989230945706367], [0, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555,   28, 1451]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.66601877e-10, 3.57303745e-03, 2.23409734e-03]), tensor([1, 3, 4])), '/input-12': ([50, 5], [-1.0, 1.0], [0, 0], [2.7985672115750544e-16, 0.015989230945706367], [0, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555,   28, 1437]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.66601877e-10, 4.68148431e-03, 1.03826984e-03]), tensor([1, 3, 4])), '/input-12': ([50, 5], [-1.0, 1.0], [0, 0], [2.7985672115750544e-16, 0.015989230945706367], [0, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555,   28, 1437]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([5.66601877e-10, 4.68148431e-03, 1.85598596e-03]), tensor([1, 3, 4])), '/input-12': ([50, 5], [-1.0, 1.0], [0, 0], [2.7985672115750544e-16, 0.015989230945706367], [0, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([555]), tensor([1.]), tensor([0]), tensor([0.00147407]), tensor([1])), '/input-12': ([50], [-1.0], [0], [2.7985672115750544e-16], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.83001892e-16,  2.43698223e-03]), tensor([2, 3])), '/input-12': ([50, 5], [1.0, -1.0], [0, 0], [6.310407751897174e-11, 0.014730321243405342], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.83001892e-16,  8.12100060e-03]), tensor([2, 3])), '/input-12': ([50, 5], [1.0, -1.0], [0, 0], [6.310407751897174e-11, 0.014730321243405342], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([555]), tensor([1.]), tensor([0]), tensor([-1.83002739e-16]), tensor([2])), '/input-12': ([50, 5], [1.0, -1.0], [0, 0], [6.310407751897174e-11, 0.014730321243405342], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.83002104e-16,  2.36271485e-03]), tensor([2, 3])), '/input-12': ([50, 5], [1.0, 1.0], [0, 0], [6.310407751897174e-11, 0.014466987922787666], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.83002104e-16,  7.96620734e-03]), tensor([2, 3])), '/input-12': ([50, 5], [1.0, 1.0], [0, 0], [6.310407751897174e-11, 0.014466987922787666], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([555]), tensor([1.]), tensor([0]), tensor([0.00238531]), tensor([2])), '/input-12': ([50, 5], [1.0, 1.0], [0, 0], [6.310407751897174e-11, 0.014466987922787666], [0, 1])}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.031200647354125977
10 lb beta sum: 0.6491562724113464, worst -0.02975243330001831
Time: prepare 0.0007    bound 0.1664    transfer 0.0002    finalize 0.0002    func 0.1676    
Accumulated time: func 1.2095    prepare 0.0691    bound 0.9160    transfer 0.0097    finalize 0.0154    
After pruning, left:  6

Back to Regular BaB

BaB round 1
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 28] [/input-12, 5] [/input-8, 28] [/input-8, 1457] [/input-8, 28] [/input-8, 1457] 
split level 1: [/input-8, 1437] [/input-8, 1457] [/input-8, 1458] [/input-8, 28] [/input-8, 796] [/input-8, 28] 
split level 2: [/input-8, 1451] [/input-8, 28] [/input-8, 19] [/input-8, 1458] [/input-8, 1458] [/input-8, 1451] 
split level 3: [/input-8, 313] [/input-8, 1451] [/input-8, 1437] [/input-8, 19] [/input-8, 19] [/input-8, 1458] 
split level 4: [/input-8, 19] [/input-8, 1437] [/input-8, 313] [/input-8, 1437] [/input-8, 1451] [/input-8, 19] 
split level 5: [/input-8, 1134] [/input-8, 313] [/input-8, 1451] [/input-8, 313] [/input-8, 1437] [/input-8, 1437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7154447436332703, worst -0.008691519498825073
10 lb beta sum: 0.7570524215698242, worst -0.05281141400337219
Time: prepare 0.0150    bound 0.1588    transfer 0.0008    finalize 0.0020    func 0.1792    
Accumulated time: func 1.3887    prepare 0.0846    bound 1.0748    transfer 0.0104    finalize 0.0174    
all_split False
======================Cut inference begins======================
max lb tensor(0.01419635) min lb tensor(-0.00782833)
Number of Verified Splits: 309 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.7123169302940369, worst -0.10382384061813354
10 lb beta sum: 0.708553671836853, worst -0.10312400758266449
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 7
#cuts 4-6: 35
#cuts >= 20: 0
BICCOS time: 0.35939669609069824 
BICCOS Cumulative time: 0.4741065502166748
Preprocessing time: 0.010277271270751953 Inference time: 0.34466075897216797 Add cuts time: 0.0028963088989257812 Cut analysis time: 0.001562356948852539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00783 (6), -0.00694 (6), -0.00669 (6), -0.00660 (6), -0.00586 (6), -0.00574 (6), -0.00552 (6), -0.00468 (6), -0.00441 (6), -0.00440 (6), -0.00429 (6), -0.00422 (6), -0.00384 (6), -0.00370 (6), -0.00364 (6), -0.00349 (6), -0.00345 (6), -0.00332 (6), -0.00329 (6), -0.00300 (6), 
Length of domains: 75
Time: pickout 0.0006    decision 0.0220    set_bounds 0.0306    solve 0.1801    add 0.0024    
Accumulated time: pickout 0.0071    decision 0.6340    set_bounds 0.1089    solve 1.1286    add 0.5166    
Current (lb-rhs): -0.007828325033187866
275 domains visited
Cumulative time: 3.1763076782226562

BaB round 2
batch: 75
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1628] [/input-8, 1451] [/input-8, 796] [/input-8, 19] [/input-8, 1628] [/input-8, 1451] [/input-8, 796] [/input-8, 1628] [/input-8, 1451] [/input-8, 19] 
split level 1: [/input-8, 19] [/input-8, 148] [/input-8, 757] [/input-8, 1134] [/input-8, 19] [/input-8, 1195] [/input-8, 757] [/input-8, 19] [/input-8, 148] [/input-8, 1134] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006119847297668457
10 lb beta sum: 0.21529020369052887, worst -0.004887789487838745
Time: prepare 0.0053    bound 0.1624    transfer 0.0012    finalize 0.0022    func 0.1731    
Accumulated time: func 1.5618    prepare 0.0901    bound 1.2371    transfer 0.0117    finalize 0.0195    
all_split False
======================Cut inference begins======================
max lb tensor(0.00446087) min lb tensor(-0.00481665)
Number of Verified Splits: 262 of 300
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 16
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.03722405433654785 
BICCOS Cumulative time: 0.5113306045532227
Preprocessing time: 0.009215354919433594 Inference time: 0.024324893951416016 Add cuts time: 0.003008604049682617 Cut analysis time: 0.000675201416015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00482 (8), -0.00397 (8), -0.00361 (8), -0.00358 (8), -0.00349 (8), -0.00312 (8), -0.00283 (8), -0.00276 (8), -0.00270 (8), -0.00245 (8), -0.00236 (8), -0.00231 (8), -0.00226 (8), -0.00192 (8), -0.00182 (8), -0.00162 (8), -0.00159 (8), -0.00157 (8), -0.00153 (8), -0.00124 (8), 
Length of domains: 38
Time: pickout 0.0025    decision 0.0187    set_bounds 0.0148    solve 0.1732    add 0.0018    
Accumulated time: pickout 0.0096    decision 0.6527    set_bounds 0.1237    solve 1.3018    add 0.5184    
Current (lb-rhs): -0.004816651344299316
313 domains visited
Cumulative time: 3.426429510116577

BaB round 3
batch: 38
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 313] [/input-8, 1134] [/input-8, 1134] 
split level 1: [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 1195] [/input-8, 52] [/input-8, 52] 
split level 2: [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.001448988914489746

all verified at 3th iter
Time: prepare 0.0058    bound 0.0343    transfer 0.0011    finalize 0.0018    func 0.0449    
Accumulated time: func 1.6067    prepare 0.0960    bound 1.2714    transfer 0.0128    finalize 0.0213    
all_split False
======================Cut inference begins======================
max lb tensor(0.11321422) min lb tensor(8.82148743e-06)
Number of Verified Splits: 304 of 304
No cut inferred: All or none verified.
Total number of valid cuts: 21.
#cuts 1-3: 16
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.00919795036315918 
BICCOS Cumulative time: 0.5205285549163818
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0018    decision 0.0170    set_bounds 0.0162    solve 0.0450    add 0.0001    
Accumulated time: pickout 0.0114    decision 0.6696    set_bounds 0.1399    solve 1.3468    add 0.5185    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
313 domains visited
Cumulative time: 3.5173864364624023


Properties batch 5, size 1
Remaining timeout: 194.81551337242126
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 194.81539845466614
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 194.81537318229675
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 194.8153533935547
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 5.1847 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 129, vnnlib ID: 129 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.83963740, -5.78964806, -1.83691561, -1.95573735, -1.63162184,
         -2.07016230, -3.15051937, -3.26623225, -1.61969507, -4.62280273]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [452]; unstable size 452; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 452] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 452] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 452] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 203] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.03636253,  2.65717578, -0.59098864, -0.13531050, -0.81601846,
          0.63781679,  0.66199291, -1.23648894,  1.56749058]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.83963740, -5.78964806, -1.83691561, -1.95573735, -1.63162184,
         -2.07016230, -3.15051937, -3.26623225, -1.61969507, -4.62280273]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.83963752, -5.78964806, -1.83691537, -1.95573735, -1.63162184,
          -2.07016230, -3.15051913, -3.26623249, -1.61969483, -4.62280178],
         [-1.83963752, -5.78964806, -1.83691537, -1.95573735, -1.63162184,
          -2.07016230, -3.15051913, -3.26623249, -1.61969483, -4.62280178]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.23052478, -0.23324692, -0.11442494, -0.43854046, -0.45046747]]],
       device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0493 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 130, vnnlib ID: 130 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.94819498, -10.50515652,  -5.49739599,  -6.42426491,  -5.53212261,
          -6.49647903,  -6.45488739,  -5.53136778, -11.77412796,  -9.99837017]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [381]; unstable size 381; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 381] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 381] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 381] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.93346721,  3.23020005, -1.30597448, -0.08756113, -1.34070385,
         -0.31846690, -1.51010025,  4.62570953,  2.77353883]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.94819498, -10.50515652,  -5.49739599,  -6.42426491,  -5.53212261,
          -6.49647903,  -6.45488739,  -5.53136778, -11.77412796,  -9.99837017]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.94819546, -10.50515652,  -5.49739647,  -6.42426586,  -5.53212261,
           -6.49647903,  -6.45488739,  -5.53136826, -11.77412796,  -9.99836922],
         [ -7.94819546, -10.50515652,  -5.49739647,  -6.42426586,  -5.53212261,
           -6.49647903,  -6.45488739,  -5.53136826, -11.77412796,  -9.99836922]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.99908257, -0.07221317, -0.96435642, -0.04159164, -0.96511078]]],
       device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0614 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 131, vnnlib ID: 131 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.40095615,  -9.83375263,  -7.76689386,  -9.66946220,  -8.91213799,
          -9.84124184, -11.04437828, -10.26787376,  -3.98419762,  -9.49902916]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [464]; unstable size 464; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 155, 1, 464] with unstable size 154 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 464] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 464] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [154]; unstable size 154; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 154] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 154] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.04108191, 5.15906668, 3.08301497, 4.88842583, 4.12479210, 5.03533173,
         6.29986477, 5.32776594, 4.85973024]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0669 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 132, vnnlib ID: 132 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.95324135, -15.74180508, -20.80966187, -22.22572708, -21.19065666,
         -22.59031105, -22.29429626, -21.67894745, -16.55251884, -15.91638851]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [432]; unstable size 432; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 132, 1, 432] with unstable size 131 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 432] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 432] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [131]; unstable size 131; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 131] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 131] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.68451214,  4.31257486,  5.69330359,  4.56155634,  6.04201651,
          5.73533583,  5.05597878,  0.24247551, -0.06809068]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.95324135, -15.74180508, -20.80966187, -22.22572708, -21.19065666,
         -22.59031105, -22.29429626, -21.67894745, -16.55251884, -15.91638851]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.31996536, -15.27309704, -20.08948708, -21.46234131, -20.40325928,
          -21.81718063, -21.57792282, -20.87321854, -15.90462685, -15.27287483]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00022221]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0742 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 133, vnnlib ID: 133 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -3.23170614, -10.46739864,  -2.10017300,  -3.30273414,  -5.96899986,
          -3.33501148,  -5.76224136,  -4.57778931,  -9.25406361,  -8.82499790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [286]; unstable size 286; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 61, 1, 286] with unstable size 60 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 286] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [60]; unstable size 60; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 60] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 60] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93707120, 8.02992725, 1.03405452, 3.70453072, 1.06637490, 3.43099546,
         2.30599809, 6.81840992, 6.35690308]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0372 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 134, vnnlib ID: 134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
         -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 164, 1, 608] with unstable size 163 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 608] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [163]; unstable size 163; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 163] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 163] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.48984313,  1.58062875,  3.18308473,  1.96417892,  3.38943839,
          2.37361097,  3.29370761, -0.33310562,  2.16880155]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
         -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
          -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00309324]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.15396857,  1.01111114,  1.01111114,  ...,  1.02698421,
             1.04285717,  1.10634947],
           [ 1.02698421,  0.94761908,  0.94761908,  ...,  1.12222254,
             1.12222254,  1.16984153],
           [ 0.99523818,  0.91587305,  0.86825401,  ...,  1.12222254,
             1.13809550,  1.16984153],
           ...,
           [-0.14761895, -0.41746020, -0.43333322,  ..., -0.36984116,
            -0.33809513, -0.41746020],
           [-0.30634910, -0.56031746, -0.57619047,  ..., -0.68730158,
            -0.54444444, -0.36984116],
           [-0.22698402, -0.33809513, -0.40158719,  ..., -0.59206349,
            -0.32222211, -0.14761895]],

          [[ 1.20772982,  1.06280196,  1.06280196,  ...,  1.07890511,
             1.09500813,  1.15942061],
           [ 1.07890511,  0.99838978,  0.99838978,  ...,  1.17552364,
             1.17552364,  1.22383285],
           [ 1.04669893,  0.96618366,  0.91787446,  ...,  1.17552364,
             1.19162667,  1.22383285],
           ...,
           [-0.11272129, -0.38647330, -0.40257636,  ..., -0.33816412,
            -0.30595800, -0.38647330],
           [-0.27375188, -0.53140092, -0.54750401,  ..., -0.66022539,
            -0.51529789, -0.33816412],
           [-0.19323659, -0.30595800, -0.37037024,  ..., -0.56360704,
            -0.28985494, -0.11272129]],

          [[ 1.26086998,  1.12593722,  1.12593722,  ...,  1.14092970,
             1.15592217,  1.21589243],
           [ 1.14092970,  1.06596720,  1.06596720,  ...,  1.23088503,
             1.23088503,  1.27586246],
           [ 1.11094475,  1.03598225,  0.99100471,  ...,  1.23088503,
             1.24587750,  1.27586246],
           ...,
           [ 0.03148442, -0.22338814, -0.23838064,  ..., -0.17841063,
            -0.14842562, -0.22338814],
           [-0.11844061, -0.35832080, -0.37331331,  ..., -0.47826082,
            -0.34332830, -0.17841063],
           [-0.04347810, -0.14842562, -0.20839565,  ..., -0.38830581,
            -0.13343313,  0.03148442]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0704 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 135, vnnlib ID: 135 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.85584545,  -6.89210796, -11.20330238, -10.48305511, -10.31528664,
         -10.58248711, -11.25512695, -10.38301277,  -8.54595566,  -7.81960535]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [417]; unstable size 417; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 417] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 417] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 417] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 171] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.35080290, 3.51902580, 2.76685762, 2.67035389, 2.85706806, 3.53440428,
         2.64734840, 1.17310023, 0.69272709]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0591 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 136, vnnlib ID: 136 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.31404114, -11.99935341,  -8.52472019,  -9.11652184,  -8.93289280,
          -9.32760048, -10.07054329, -10.77766991,  -8.21101475, -11.86982346]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [351]; unstable size 351; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 351] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 351] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 351] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.09101152, 0.87874734, 1.34494686, 1.28547025, 1.54521215, 2.33845377,
         2.98431849, 0.63081133, 3.98045588]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0568 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 137, vnnlib ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
          -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [390]; unstable size 390; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 390] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 390] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 390] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 239] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.07701015,  3.63565111, -0.04559040,  0.64380234, -0.00980759,
          0.65270019,  1.48101175,  3.16953421,  3.15534258]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
          -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.55it/s]100%|██████████| 1/1 [00:00<00:00,  8.53it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.36132240, -11.14967251,  -6.83248758,  -7.53480721,  -6.91983700,
           -7.54735374,  -6.71112919,  -8.56491947, -10.71888256, -10.59876251],
         [ -9.36132240, -11.14967251,  -6.83248758,  -7.53480721,  -6.91983700,
           -7.54735374,  -6.71112919,  -8.56491947, -10.71888256, -10.59876251]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.12135839, 0.20870781]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1201 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.945514678955078
alpha/beta optimization time: 1.275850772857666
initial alpha-crown bounds: tensor([[ 2.10259438,  3.66781878, -0.03308141,  0.65345061,  0.00669611,
          0.66249573,  1.49558294,  3.20632148,  3.18363595]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.03308141231536865
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.52956533432007
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5295226573944
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5294966697693
Verifying property 2 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03308141]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
         -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03308141]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 390
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 237
Node /15 input 0: size torch.Size([100]) unstable 9
-----------------
# of unstable neurons: 636
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011372566223144531
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03308004140853882
10 lb beta sum: 0.0, worst -0.033082544803619385
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0582    transfer 0.0001    finalize 0.0002    func 0.0587    
Accumulated time: func 0.0587    prepare 0.0002    bound 0.0582    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 62] 
split level 2: [/input-12, 5] 
split level 3: [/input-12, 61] 
split level 4: [/input-8, 20] 
split level 5: [/input-12, 27] 
split level 6: [/input-8, 29] 
split level 7: [/input-8, 1826] 
split level 8: [/input-8, 1131] 
split level 9: [/input-8, 1114] 
split level 10: [/input-8, 310] 
split level 11: [/input-8, 154] 
split level 12: [/input-8, 1910] 
split level 13: [/input-8, 1172] 
split level 14: [/input-8, 45] 
split level 15: [/input-8, 1827] 
split level 16: [/input-8, 1892] 
split level 17: [/input-8, 1706] 
split level 18: [/input-8, 1169] 
split level 19: [/input-8, 22] 
split level 20: [/input-8, 53] 
split level 21: [/input-8, 1433] 
split level 22: [/input-8, 1850] 
split level 23: [/input-8, 1195] 
split level 24: [/input-8, 347] 
split level 25: [/input-8, 313] 
split level 26: [/input-8, 1097] 
split level 27: [/input-8, 1121] 
split level 28: [/input-8, 346] 
split level 29: [/input-8, 1205] 
split level 30: [/input-8, 1772] 
split level 31: [/input-8, 171] 
split level 32: [/input-8, 139] 
split level 33: [/input-8, 924] 
split level 34: [/input-8, 90] 
split level 35: [/input-8, 1249] 
split level 36: [/input-8, 739] 
split level 37: [/input-8, 1620] 
split level 38: [/input-8, 2026] 
split level 39: [/input, 740] 
split level 40: [/input-8, 754] 
split level 41: [/input-8, 1745] 
split level 42: [/input-8, 1451] 
split level 43: [/input-8, 2018] 
split level 44: [/input-8, 916] 
split level 45: [/input-8, 917] 
split level 46: [/input-8, 54] 
split level 47: [/input-8, 1276] 
split level 48: [/input-8, 1529] 
split level 49: [/input-8, 932] 
split level 50: [/input-8, 95] 
split level 51: [/input-8, 1677] 
split level 52: [/input-8, 1161] 
split level 53: [/input-8, 918] 
split level 54: [/input-8, 1110] 
split level 55: [/input-8, 1750] 
split level 56: [/input-8, 957] 
split level 57: [/input-8, 61] 
split level 58: [/input-8, 1819] 
split level 59: [/input, 3027] 
split level 60: [/input-8, 1197] 
split level 61: [/input-8, 1595] 
split level 62: [/input-8, 1619] 
split level 63: [/input-8, 923] 
split level 64: [/input-8, 927] 
split level 65: [/input-8, 1629] 
split level 66: [/input-8, 94] 
split level 67: [/input-8, 2009] 
split level 68: [/input-8, 1862] 
split level 69: [/input-8, 737] 
split level 70: [/input-8, 1500] 
split level 71: [/input-8, 955] 
split level 72: [/input-8, 1305] 
split level 73: [/input-8, 1232] 
split level 74: [/input-8, 1227] 
split level 75: [/input-8, 1916] 
split level 76: [/input-8, 338] 
split level 77: [/input-8, 1688] 
split level 78: [/input-8, 1446] 
split level 79: [/input, 3143] 
split level 80: [/input-8, 725] 
split level 81: [/input, 2152] 
split level 82: [/input-8, 1127] 
split level 83: [/input-8, 1311] 
split level 84: [/input-8, 349] 
split level 85: [/input, 824] 
split level 86: [/input-8, 1762] 
split level 87: [/input, 1080] 
split level 88: [/input-8, 929] 
split level 89: [/input, 2780] 
split level 90: [/input-8, 1225] 
split level 91: [/input, 3209] 
split level 92: [/input-8, 104] 
split level 93: [/input-8, 1263] 
split level 94: [/input-8, 1290] 
split level 95: [/input-8, 1254] 
split level 96: [/input-8, 1763] 
split level 97: [/input, 4010] 
split level 98: [/input, 2221] 
split level 99: [/input, 1112] 
split level 100: [/input-8, 1230] 
split level 101: [/input-8, 1686] 
split level 102: [/input-8, 1270] 
split level 103: [/input-8, 1463] 
split level 104: [/input-8, 2039] 
split level 105: [/input-8, 1448] 
split level 106: [/input-8, 1851] 
split level 107: [/input, 2930] 
split level 108: [/input, 721] 
split level 109: [/input-8, 2047] 
split level 110: [/input-8, 1269] 
split level 111: [/input-8, 1135] 
split level 112: [/input-8, 1994] 
split level 113: [/input-8, 1337] 
split level 114: [/input-8, 383] 
split level 115: [/input, 1633] 
split level 116: [/input-8, 1932] 
split level 117: [/input, 3925] 
split level 118: [/input-8, 1992] 
split level 119: [/input, 707] 
split level 120: [/input, 3261] 
split level 121: [/input, 2778] 
split level 122: [/input, 2899] 
split level 123: [/input-8, 1481] 
split level 124: [/input-8, 942] 
split level 125: [/input, 2926] 
split level 126: [/input, 1754] 
split level 127: [/input, 2837] 
split level 128: [/input-8, 1573] 
split level 129: [/input-8, 1261] 
split level 130: [/input-8, 937] 
split level 131: [/input, 3211] 
split level 132: [/input, 2069] 
split level 133: [/input, 2220] 
split level 134: [/input, 1586] 
split level 135: [/input, 3702] 
split level 136: [/input-8, 1668] 
split level 137: [/input, 1681] 
split level 138: [/input, 793] 
split level 139: [/input, 1744] 
split level 140: [/input, 2727] 
split level 141: [/input-8, 1312] 
split level 142: [/input, 2311] 
split level 143: [/input, 693] 
split level 144: [/input, 2973] 
split level 145: [/input, 616] 
split level 146: [/input-8, 1861] 
split level 147: [/input, 1759] 
split level 148: [/input-8, 1662] 
split level 149: [/input, 2946] 
split level 150: [/input-8, 1314] 
split level 151: [/input, 3747] 
split level 152: [/input, 2421] 
split level 153: [/input, 4087] 
split level 154: [/input-8, 259] 
split level 155: [/input, 2388] 
split level 156: [/input, 882] 
split level 157: [/input, 904] 
split level 158: [/input, 60] 
split level 159: [/input, 2513] 
split level 160: [/input-8, 370] 
split level 161: [/input, 2957] 
split level 162: [/input, 1122] 
split level 163: [/input-8, 1659] 
split level 164: [/input, 323] 
split level 165: [/input-8, 350] 
split level 166: [/input-8, 345] 
split level 167: [/input, 109] 
split level 168: [/input-8, 352] 
split level 169: [/input, 2376] 
split level 170: [/input, 2333] 
split level 171: [/input-8, 362] 
split level 172: [/input-8, 977] 
split level 173: [/input, 954] 
split level 174: [/input, 2770] 
split level 175: [/input-8, 336] 
split level 176: [/input, 750] 
split level 177: [/input-8, 364] 
split level 178: [/input, 2452] 
split level 179: [/input-8, 1876] 
split level 180: [/input, 681] 
split level 181: [/input-8, 332] 
split level 182: [/input, 2444] 
split level 183: [/input-8, 2008] 
split level 184: [/input, 970] 
split level 185: [/input, 1714] 
split level 186: [/input, 3992] 
split level 187: [/input, 588] 
split level 188: [/input-8, 1489] 
split level 189: [/input, 2786] 
split level 190: [/input-12, 4] 
split level 191: [/input, 2258] 
split level 192: [/input, 919] 
split level 193: [/input, 881] 
split level 194: [/input, 821] 
split level 195: [/input, 1176] 
split level 196: [/input, 2475] 
split level 197: [/input, 397] 
split level 198: [/input, 934] 
split level 199: [/input, 1189] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06406247615814209
10 lb beta sum: 0.0, worst -0.03329157829284668
Time: prepare 0.0116    bound 0.1041    transfer 0.0028    finalize 0.0031    func 0.1243    
Accumulated time: func 0.1830    prepare 0.0218    bound 0.1623    transfer 0.0029    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.02745169) min lb tensor(-0.03308004)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010883569717407227 
BICCOS Cumulative time: 0.010883569717407227
Preprocessing time: 0.010389089584350586 Inference time: 0.00014781951904296875 Add cuts time: 6.222724914550781e-05 Cut analysis time: 0.00028443336486816406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02625 (1), -0.02575 (1), -0.02554 (1), -0.02504 (1), -0.02490 (1), -0.02444 (1), -0.02427 (1), -0.02423 (1), -0.02423 (1), -0.02412 (1), -0.02406 (1), -0.02402 (1), -0.02400 (1), -0.02326 (1), -0.02295 (1), -0.02271 (1), -0.02261 (1), -0.02226 (1), -0.02220 (1), -0.02162 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5141    set_bounds 0.0091    solve 0.1245    add 0.1243    
Accumulated time: pickout 0.0004    decision 0.5141    set_bounds 0.0091    solve 0.1245    add 0.1243    
Current (lb-rhs): -0.026248514652252197
50 domains visited
Cumulative time: 0.8615176677703857

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 62] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 5] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] 
split level 2: [/input-12, 61] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 61] [/input-12, 5] 
split level 3: [/input-12, 27] [/input-12, 27] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 27] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01614236831665039

all verified at 1th iter
Time: prepare 0.0075    bound 0.0129    transfer 0.0008    finalize 0.0024    func 0.0261    
Accumulated time: func 0.2091    prepare 0.0295    bound 0.1751    transfer 0.0037    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.06513262) min lb tensor(0.00011164)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03611421585083008 
BICCOS Cumulative time: 0.046997785568237305
Preprocessing time: 0.012589454650878906 Inference time: 0.014472246170043945 Add cuts time: 0.008766889572143555 Cut analysis time: 0.0002856254577636719
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0207    set_bounds 0.0128    solve 0.0262    add 0.0155    
Accumulated time: pickout 0.0015    decision 0.5347    set_bounds 0.0219    solve 0.1507    add 0.1398    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 5, 33]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.83002104e-16,  5.91773838e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 5, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.83002104e-16,  3.21366638e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 5, 33]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.83002104e-16,  6.12360686e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 5, 33]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.83002104e-16,  3.15257162e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.01964259147644043

all verified at 0th iter
Time: prepare 0.0004    bound 0.0049    transfer 0.0001    finalize 0.0001    func 0.0056    
Accumulated time: func 0.2147    prepare 0.0299    bound 0.1800    transfer 0.0038    finalize 0.0058    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.31220245361328
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.31211304664612
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.3120903968811
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.31207060813904
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.31182503700256
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.3118052482605
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.6882 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 138, vnnlib ID: 138 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.78461742, -7.78471851, -6.68574715, -7.54008961, -6.71664238,
         -7.68185663, -7.60335922, -7.74536133, -7.44903946, -7.66552782]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [390]; unstable size 390; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 390] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 390] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 390] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 164] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.46082890, 0.41245520, 1.06713557, 0.36194956, 1.19837451, 1.11187434,
         1.25493670, 1.29937816, 1.30356193]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0493 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 139, vnnlib ID: 139 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.36590004, -7.92974758, -3.18712282, -4.35600662, -3.02723885,
         -4.45325327, -2.34703112, -4.90892315, -8.33985519, -7.64006281]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [432]; unstable size 432; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 432] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 432] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 432] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 188] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.30574822, 4.53140736, 0.46472597, 1.64646161, 0.30628777, 1.73555946,
         2.01324773, 5.01047754, 4.32014847]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0258 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 140, vnnlib ID: 140 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.67068291,  -8.63208675, -12.35949326, -11.84118938, -12.90088081,
         -12.06089878, -11.65532017, -11.34745598, -11.09524727,  -7.12381601]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [439]; unstable size 439; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 439] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 1, 1, 439] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 439] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 1, 1, 166] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.93782830, 1.22470033, 4.46517467, 4.00368023, 4.95243645, 4.21050644,
         3.68815422, 3.40154791, 3.39086008]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0462 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 141, vnnlib ID: 141 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.23027992, -5.59671307, -8.10045242, -8.03788757, -7.89279747,
         -8.14015102, -7.49874401, -7.77289391, -6.25006390, -5.63300037]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [449]; unstable size 449; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 164, 1, 449] with unstable size 163 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 449] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 449] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [163]; unstable size 163; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 163] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 163] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.13565826,  1.81420469,  1.73954344,  1.59858179,  1.83115482,
          1.20980716,  1.41279840,  0.24145019, -0.16323662]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.23027992, -5.59671307, -8.10045242, -8.03788757, -7.89279747,
         -8.14015102, -7.49874401, -7.77289391, -6.25006390, -5.63300037]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.93233824, -5.38019562, -7.65612125, -7.53466606, -7.42454910,
          -7.63522720, -7.07436752, -7.25748777, -5.98633766, -5.26369810]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11649752]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0067 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0795 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 142, vnnlib ID: 142 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.83678341, -8.62305260, -5.57152319, -6.19232559, -5.90445709,
         -6.32129097, -3.83951640, -7.52650928, -9.32637024, -8.57943630]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [435]; unstable size 435; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 435] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 435] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 435] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 216] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.17719865, 3.78496790, 1.30179667, 1.96983469, 1.59501159, 2.08713460,
         2.99925995, 4.44833374, 3.73394704]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0304 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 143, vnnlib ID: 143 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
          -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 145, 1, 527] with unstable size 144 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 527] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [144]; unstable size 144; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 144] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 144] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.59060431,  6.26868439, -0.24463531,  1.11096752,  1.21317482,
          0.31436092,  1.29949200,  6.03089809,  5.42754269]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
          -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
           -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04849601]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.31269872e+00,  1.32857168e+00,  5.98412752e-01,  ...,
             5.03174663e-01,  8.68254006e-01,  1.13809550e+00],
           [ 1.40793681e+00,  1.28095269e+00,  1.13809550e+00,  ...,
             1.26507962e+00,  1.42380977e+00,  1.23333359e+00],
           [ 1.10634947e+00,  1.47142887e+00,  1.47142887e+00,  ...,
             1.39206374e+00,  1.40793681e+00,  1.37619078e+00],
           ...,
           [ 1.42380977e+00,  1.09047651e+00,  9.79365110e-01,  ...,
             1.26507962e+00,  1.28095269e+00,  1.21746063e+00],
           [ 1.29682565e+00,  1.04285717e+00,  1.20158756e+00,  ...,
             9.63492095e-01,  8.68254006e-01,  8.20634961e-01],
           [ 1.10634947e+00,  1.36031771e+00,  1.32857168e+00,  ...,
             9.15873051e-01,  6.14285767e-01,  6.46031797e-01]],

          [[ 9.33977544e-01,  1.17552364e+00,  5.79710245e-01,  ...,
             4.34782714e-01,  7.89049983e-01,  9.66183662e-01],
           [ 1.40096653e+00,  1.27214205e+00,  1.06280196e+00,  ...,
             1.14331758e+00,  1.28824508e+00,  1.09500813e+00],
           [ 1.28824508e+00,  1.56199706e+00,  1.44927561e+00,  ...,
             1.09500813e+00,  1.17552364e+00,  1.28824508e+00],
           ...,
           [ 1.17552364e+00,  9.82286692e-01,  8.85668337e-01,  ...,
             1.30434811e+00,  1.33655429e+00,  1.28824508e+00],
           [ 1.06280196e+00,  8.21256101e-01,  9.01771426e-01,  ...,
             1.12721443e+00,  1.04669893e+00,  1.03059590e+00],
           [ 8.69565308e-01,  1.12721443e+00,  9.98389781e-01,  ...,
             1.09500813e+00,  8.21256101e-01,  9.01771426e-01]],

          [[ 3.14844176e-02,  3.01349491e-01,  1.06446937e-01,  ...,
             9.14544314e-02,  1.21439442e-01,  1.51424453e-01],
           [ 1.36431947e-01,  1.64919142e-02,  1.81409463e-01,  ...,
             5.11244535e-01,  4.51274544e-01,  1.21439442e-01],
           [-1.48425624e-01,  1.51424453e-01,  2.26386964e-01,  ...,
             2.56371975e-01,  1.51424453e-01,  6.14694245e-02],
           ...,
           [ 3.16341996e-01,  1.49940979e-03, -1.33433133e-01,  ...,
            -2.84855980e-02,  1.64919142e-02, -2.84855980e-02],
           [ 1.36431947e-01, -1.18440613e-01,  1.49940979e-03,  ...,
            -2.83358276e-01, -3.28335792e-01, -3.58320802e-01],
           [ 1.64919142e-02,  2.26386964e-01,  1.51424453e-01,  ...,
            -2.38380641e-01, -5.23238361e-01, -5.23238361e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0674 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 144, vnnlib ID: 144 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.79352665, -12.23771381,  -9.42079353,  -8.18088913,  -9.67141724,
          -8.12612629,  -9.56548309,  -9.96920204, -11.10543823, -11.25221634]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 427] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 427] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 169] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.20623159, 3.44203925, 1.05065632, 0.04120035, 1.25533807, 1.08397412,
         1.56545269, 2.38391042, 2.54189825]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0753 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 145, vnnlib ID: 145 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.00209332, -8.59088707, -2.82365561, -3.22743535, -3.59733486,
         -3.29684186, -4.70374870, -4.82936382, -7.53730106, -8.04424858]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [667]; unstable size 667; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 667] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 667] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 667] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 174] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.19111562,  4.58325720, -0.76220047, -0.08250546, -0.05808830,
          1.11135769,  1.00770724,  3.64658070,  4.12331247]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.00209332, -8.59088707, -2.82365561, -3.22743535, -3.59733486,
         -3.29684186, -4.70374870, -4.82936382, -7.53730106, -8.04424858]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.00209332, -8.59088707, -2.82365608, -3.22743607, -3.59733486,
          -3.29684305, -4.70374966, -4.82936430, -7.53730202, -8.04424763],
         [-5.00209332, -8.59088707, -2.82365608, -3.22743607, -3.59733486,
          -3.29684305, -4.70374966, -4.82936430, -7.53730202, -8.04424763]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.47318697, -0.06940699,  0.30049181]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]],


         [[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]],


         [[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0891 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 146, vnnlib ID: 146 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.50118589,  -9.62631321, -11.06040764, -11.60052204, -11.25030899,
         -11.77759075, -11.48435974, -10.44144726,  -6.63968658,  -9.16156864]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [439]; unstable size 439; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 439] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 439] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 439] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 153] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.49919516, 2.48104453, 3.67119670, 4.11645269, 3.79514408, 4.28060198,
         4.02054405, 2.84020495, 1.95948529]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0331 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 147, vnnlib ID: 147 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.61050510, -18.19259834, -14.86876678, -16.21520042, -15.81747723,
         -16.15572166, -15.55497742, -15.71164322, -17.60300827, -19.53060722]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 540] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 540] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 185] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.21178174, 2.48819017, 0.96625054, 0.66403449, 0.90339816, 0.26163766,
         0.41980028, 1.96595526, 3.83946896]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0683 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 148, vnnlib ID: 148 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.16096544, -5.40149117, -3.63111496, -3.02717566, -3.77620387,
         -3.01623964, -4.59425926, -2.84824109, -5.91380119, -4.83607054]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [455]; unstable size 455; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 145, 1, 455] with unstable size 144 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 455] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 455] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [144]; unstable size 144; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 144] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 144] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.78772759,  1.81875563,  0.45767760, -0.11035347,  0.65982604,
         -0.12342572,  1.28189778,  2.28518796,  1.34910393]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.16096544, -5.40149117, -3.63111496, -3.02717566, -3.77620387,
         -3.01623964, -4.59425926, -2.84824109, -5.91380119, -4.83607054]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.40923071, -5.67548466, -3.81281948, -3.15027142, -4.00697517,
          -3.13820839, -4.74294853, -3.15190148, -6.05144215, -5.10408592],
         [-6.40923071, -5.67548466, -3.81281948, -3.15027142, -4.00697517,
          -3.13820839, -4.74294853, -3.15190148, -6.05144215, -5.10408592]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00163007, -0.01369309]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0093 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0804 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 149, vnnlib ID: 149 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.46979618, -12.58957005,  -7.37592888,  -8.55527401,  -7.20859337,
          -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046116]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 527] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 527] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 256] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.46516299,  4.14436531,  0.83085930, -0.49284080,  0.88343525,
         -0.76752162,  1.28632295,  3.93838739,  3.79598117]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.46979618, -12.58957005,  -7.37592888,  -8.55527401,  -7.20859337,
          -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046116]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.46979618, -12.58956909,  -7.37592793,  -8.55527496,  -7.20859337,
           -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046211],
         [-10.46979618, -12.58956909,  -7.37592793,  -8.55527496,  -7.20859337,
           -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046211]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16733456, -0.39017296]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.32222211, -1.13174593, -1.17936504,  ..., -0.68730158,
            -0.81428570, -0.54444444],
           [-1.24285710, -1.09999990, -1.38571417,  ..., -0.68730158,
            -0.78253967, -0.79841268],
           [-1.08412695, -0.90952379, -1.13174593,  ..., -0.49682540,
            -0.84603173, -0.87777776],
           ...,
           [-0.19523799,  1.31269872,  0.43968260,  ..., -0.95714283,
            -0.84603173, -0.68730158],
           [ 0.07460327,  1.37619078,  0.90000004,  ..., -0.95714283,
            -0.75079364, -0.84603173],
           [ 0.26507944,  0.78888893,  0.43968260,  ..., -0.97301590,
            -0.92539680, -0.97301590]],

          [[-1.30434775, -1.01449275, -0.98228657,  ..., -0.51529789,
            -0.45088565, -0.25764883],
           [-1.06280184, -0.83735907, -1.19162631,  ..., -0.43478248,
            -0.41867942, -0.30595800],
           [-0.93397743, -0.67632848, -0.93397743,  ..., -0.35426718,
            -0.38647330, -0.41867942],
           ...,
           [-0.24154577,  0.62801939,  0.12882459,  ..., -0.98228657,
            -0.85346210, -0.70853460],
           [-0.09661824,  0.70853472,  0.43478271,  ..., -0.99838966,
            -0.78904986, -0.91787434],
           [ 0.04830930,  0.51529801,  0.28985518,  ..., -0.95008045,
            -0.90177131, -0.98228657]],

          [[-1.16791618, -0.98800600, -1.03298354,  ..., -0.70314842,
            -0.65817088, -0.28335828],
           [-1.00299859, -0.92803597, -1.16791618,  ..., -0.58320838,
            -0.53823084, -0.49325335],
           [-0.92803597, -0.86806595, -1.06296861,  ..., -0.26836565,
            -0.53823084, -0.55322337],
           ...,
           [-0.35832080,  0.45127454, -0.05847061,  ..., -0.85307342,
            -0.74812591, -0.56821585],
           [-0.26836565,  0.48125952,  0.33133450,  ..., -0.85307342,
            -0.70314842, -0.76311839],
           [ 0.03148442,  0.51124454,  0.42128953,  ..., -0.83808094,
            -0.79310340, -0.82308841]]],


         [[[-1.32222211, -1.13174593, -1.17936504,  ..., -0.68730158,
            -0.81428570, -0.54444444],
           [-1.24285710, -1.09999990, -1.38571417,  ..., -0.68730158,
            -0.78253967, -0.79841268],
           [-1.08412695, -0.90952379, -1.13174593,  ..., -0.49682540,
            -0.84603173, -0.87777776],
           ...,
           [-0.19523799,  1.31269872,  0.43968260,  ..., -0.95714283,
            -0.84603173, -0.68730158],
           [ 0.07460327,  1.37619078,  0.90000004,  ..., -0.95714283,
            -0.75079364, -0.84603173],
           [ 0.26507944,  0.78888893,  0.43968260,  ..., -0.97301590,
            -0.92539680, -0.97301590]],

          [[-1.30434775, -1.01449275, -0.98228657,  ..., -0.51529789,
            -0.45088565, -0.25764883],
           [-1.06280184, -0.83735907, -1.19162631,  ..., -0.43478248,
            -0.41867942, -0.30595800],
           [-0.93397743, -0.67632848, -0.93397743,  ..., -0.35426718,
            -0.38647330, -0.41867942],
           ...,
           [-0.24154577,  0.62801939,  0.12882459,  ..., -0.98228657,
            -0.85346210, -0.70853460],
           [-0.09661824,  0.70853472,  0.43478271,  ..., -0.99838966,
            -0.78904986, -0.91787434],
           [ 0.04830930,  0.51529801,  0.28985518,  ..., -0.95008045,
            -0.90177131, -0.98228657]],

          [[-1.16791618, -0.98800600, -1.03298354,  ..., -0.70314842,
            -0.65817088, -0.28335828],
           [-1.00299859, -0.92803597, -1.16791618,  ..., -0.58320838,
            -0.53823084, -0.49325335],
           [-0.92803597, -0.86806595, -1.06296861,  ..., -0.26836565,
            -0.53823084, -0.55322337],
           ...,
           [-0.35832080,  0.45127454, -0.05847061,  ..., -0.85307342,
            -0.74812591, -0.56821585],
           [-0.26836565,  0.48125952,  0.33133450,  ..., -0.85307342,
            -0.70314842, -0.76311839],
           [ 0.03148442,  0.51124454,  0.42128953,  ..., -0.83808094,
            -0.79310340, -0.82308841]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0820 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 150, vnnlib ID: 150 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.71911144, -10.78857327, -13.80652714, -15.57193089, -13.78481674,
         -15.82200527, -15.45771599, -13.88326550,  -9.93582153, -10.41513634]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [582]; unstable size 582; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 582] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 582] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 582] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 186] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.74895859,  1.97158384,  3.71107388,  1.79468918,  3.93884850,
          3.53552532,  1.82552361, -1.48514700, -0.67360967]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.71911144, -10.78857327, -13.80652714, -15.57193089, -13.78481674,
         -15.82200527, -15.45771599, -13.88326550,  -9.93582153, -10.41513634]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.71911335, -10.78857327, -13.80652618, -15.57193279, -13.78481674,
          -15.82200718, -15.45771790, -13.88326550,  -9.93582153, -10.41513634],
         [ -9.71911335, -10.78857327, -13.80652618, -15.57193279, -13.78481674,
          -15.82200718, -15.45771790, -13.88326550,  -9.93582153, -10.41513634]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.06945992, -0.85275173, -0.37343693]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0985 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 151, vnnlib ID: 151 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
          -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [436]; unstable size 436; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 436] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 436] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 436] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 170] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.49995494,  4.81325483,  0.79489219, -0.03725126,  0.90810919,
          1.23507929,  0.64367211,  4.26866436,  4.34728575]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
          -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
           -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01991272]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0752 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 152, vnnlib ID: 152 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.10573387, -12.44030190,  -8.55103970,  -9.26790047,  -7.95741177,
          -9.40282917,  -8.36335182, -10.19440269, -12.55924797, -12.84323978]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [434]; unstable size 434; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 434] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 434] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 434] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 156] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.99604273,  3.13732719,  0.34504724, -0.83755273,  0.47180045,
         -0.58407056,  1.10311353,  3.33464861,  3.55361891]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.10573387, -12.44030190,  -8.55103970,  -9.26790047,  -7.95741177,
          -9.40282917,  -8.36335182, -10.19440269, -12.55924797, -12.84323978]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.10573483, -12.44030285,  -8.55103970,  -9.26790047,  -7.95741272,
           -9.40283012,  -8.36335182, -10.19440365, -12.55924892, -12.84324265],
         [-10.10573483, -12.44030285,  -8.55103970,  -9.26790047,  -7.95741272,
           -9.40283012,  -8.36335182, -10.19440365, -12.55924892, -12.84324265]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.59362698, -0.18768787]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-9.41269815e-01, -9.09523785e-01, -1.33809519e+00,  ...,
            -6.39682531e-01,  7.46032670e-02,  1.85714364e-01],
           [-5.28571427e-01, -7.98412681e-01, -1.25873005e+00,  ...,
            -5.76190472e-01, -2.42857039e-01,  1.06349289e-01],
           [-4.65079248e-01, -4.01587188e-01, -7.66666651e-01,  ...,
            -3.85714173e-01, -3.53968143e-01, -1.63491964e-01],
           ...,
           [ 1.97936535e+00,  1.10634947e+00,  1.42380977e+00,  ...,
             1.94761932e+00,  1.94761932e+00,  1.97936535e+00],
           [ 1.94761932e+00,  1.47142887e+00,  1.37619078e+00,  ...,
             1.96349227e+00,  1.82063520e+00,  1.80476213e+00],
           [ 1.99523830e+00,  1.78888917e+00,  1.85238123e+00,  ...,
             1.99523830e+00,  1.99523830e+00,  1.94761932e+00]],

          [[-1.12721294e-01, -1.44927412e-01, -6.28019273e-01,  ...,
            -2.25442708e-01,  3.54267418e-01,  6.28019392e-01],
           [ 2.09339887e-01, -1.12721294e-01, -5.47504008e-01,  ...,
            -2.89854944e-01,  1.22934580e-07,  5.47504127e-01],
           [ 1.93236828e-01,  2.25442946e-01, -1.61029361e-02,  ...,
            -8.05151686e-02, -8.05151686e-02,  2.89855182e-01],
           ...,
           [ 1.70692456e+00,  8.37359190e-01,  1.14331758e+00,  ...,
             1.75523376e+00,  1.73913074e+00,  1.78743994e+00],
           [ 1.73913074e+00,  1.20772982e+00,  1.04669893e+00,  ...,
             1.72302771e+00,  1.57810009e+00,  1.61030626e+00],
           [ 1.85185218e+00,  1.57810009e+00,  1.56199706e+00,  ...,
             1.75523376e+00,  1.75523376e+00,  1.73913074e+00]],

          [[-1.39280367e+00, -1.30284870e+00, -1.61769128e+00,  ...,
            -1.27286363e+00, -7.48125911e-01, -3.73313308e-01],
           [-1.19790113e+00, -1.39280367e+00, -1.60269880e+00,  ...,
            -1.25787115e+00, -1.03298354e+00, -4.33283329e-01],
           [-1.13793111e+00, -1.21289361e+00, -1.45277369e+00,  ...,
            -1.18290865e+00, -1.03298354e+00, -7.18140900e-01],
           ...,
           [ 1.84557760e+00,  9.76012170e-01,  1.24587750e+00,  ...,
             1.87556267e+00,  1.84557760e+00,  1.87556267e+00],
           [ 1.87556267e+00,  1.33583248e+00,  1.15592217e+00,  ...,
             1.83058512e+00,  1.69565260e+00,  1.69565260e+00],
           [ 1.96551764e+00,  1.69565260e+00,  1.68066013e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.84557760e+00]]],


         [[[-9.41269815e-01, -9.09523785e-01, -1.33809519e+00,  ...,
            -6.39682531e-01,  7.46032670e-02,  1.85714364e-01],
           [-5.28571427e-01, -7.98412681e-01, -1.25873005e+00,  ...,
            -5.76190472e-01, -2.42857039e-01,  1.06349289e-01],
           [-4.65079248e-01, -4.01587188e-01, -7.66666651e-01,  ...,
            -3.85714173e-01, -3.53968143e-01, -1.63491964e-01],
           ...,
           [ 1.97936535e+00,  1.10634947e+00,  1.42380977e+00,  ...,
             1.94761932e+00,  1.94761932e+00,  1.97936535e+00],
           [ 1.94761932e+00,  1.47142887e+00,  1.37619078e+00,  ...,
             1.96349227e+00,  1.82063520e+00,  1.80476213e+00],
           [ 1.99523830e+00,  1.78888917e+00,  1.85238123e+00,  ...,
             1.99523830e+00,  1.99523830e+00,  1.94761932e+00]],

          [[-1.12721294e-01, -1.44927412e-01, -6.28019273e-01,  ...,
            -2.25442708e-01,  3.54267418e-01,  6.28019392e-01],
           [ 2.09339887e-01, -1.12721294e-01, -5.47504008e-01,  ...,
            -2.89854944e-01,  1.22934580e-07,  5.47504127e-01],
           [ 1.93236828e-01,  2.25442946e-01, -1.61029361e-02,  ...,
            -8.05151686e-02, -8.05151686e-02,  2.89855182e-01],
           ...,
           [ 1.70692456e+00,  8.37359190e-01,  1.14331758e+00,  ...,
             1.75523376e+00,  1.73913074e+00,  1.78743994e+00],
           [ 1.73913074e+00,  1.20772982e+00,  1.04669893e+00,  ...,
             1.72302771e+00,  1.57810009e+00,  1.61030626e+00],
           [ 1.85185218e+00,  1.57810009e+00,  1.56199706e+00,  ...,
             1.75523376e+00,  1.75523376e+00,  1.73913074e+00]],

          [[-1.39280367e+00, -1.30284870e+00, -1.61769128e+00,  ...,
            -1.27286363e+00, -7.48125911e-01, -3.73313308e-01],
           [-1.19790113e+00, -1.39280367e+00, -1.60269880e+00,  ...,
            -1.25787115e+00, -1.03298354e+00, -4.33283329e-01],
           [-1.13793111e+00, -1.21289361e+00, -1.45277369e+00,  ...,
            -1.18290865e+00, -1.03298354e+00, -7.18140900e-01],
           ...,
           [ 1.84557760e+00,  9.76012170e-01,  1.24587750e+00,  ...,
             1.87556267e+00,  1.84557760e+00,  1.87556267e+00],
           [ 1.87556267e+00,  1.33583248e+00,  1.15592217e+00,  ...,
             1.83058512e+00,  1.69565260e+00,  1.69565260e+00],
           [ 1.96551764e+00,  1.69565260e+00,  1.68066013e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.84557760e+00]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0778 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 153, vnnlib ID: 153 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.04411221,  -6.56294537, -10.49686623, -10.71459293, -10.65121841,
         -10.91873455, -10.75874615, -10.58030510,  -7.05852127,  -5.32773304]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [560]; unstable size 560; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 560] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 560] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 560] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 159] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.93047810, 0.90146828, 4.35855293, 4.67746639, 4.44866705, 4.86577225,
         4.63573074, 4.36071730, 1.07372689]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0757 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 154, vnnlib ID: 154 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.33148384, -10.59604359,  -6.13104391,  -5.15102005,  -5.68771362,
          -5.06781912,  -6.22119141,  -6.70600891,  -8.64515400, -10.90875530]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [554]; unstable size 554; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 554] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 554] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 554] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 149] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.75479221, 4.87106228, 0.82534444, 0.06818698, 0.31933570, 0.85642600,
         1.17236507, 2.96178937, 5.26937962]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0726 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 155, vnnlib ID: 155 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.94084406, -4.36918736, -2.39931107, -2.66348886, -2.53788948,
         -2.76773334, -2.43246198, -3.65804195, -1.78550899, -3.21363306]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 225, 1, 458] with unstable size 224 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 458] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [224]; unstable size 224; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 224] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 224] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.23604912,  1.11150885, -0.46573162, -0.15052673, -0.32735419,
         -0.05409914,  0.68027079, -1.50479579, -0.02969646]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.94084406, -4.36918736, -2.39931107, -2.66348886, -2.53788948,
         -2.76773334, -2.43246198, -3.65804195, -1.78550899, -3.21363306]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.94084358, -4.36918688, -2.39931107, -2.66348863, -2.53788924,
          -2.76773310, -2.43246150, -3.65804195, -1.78550875, -3.21363282],
         [-2.94084358, -4.36918688, -2.39931107, -2.66348863, -2.53788924,
          -2.76773310, -2.43246150, -3.65804195, -1.78550875, -3.21363282]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.50838208, -0.03315043,  0.23102713,  0.10542774,  0.33527160,
          -0.64695275,  0.78117132]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         ...,


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0856 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 156, vnnlib ID: 156 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-9.18817234, -8.52420235, -6.17824697, -5.90761089, -6.00881290,
         -5.93657160, -5.09397602, -7.20189238, -9.47287750, -8.95226574]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [492]; unstable size 492; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 492] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 492] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 492] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 177] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.78877187e+00,  1.95449352e+00,  8.94069672e-04, -4.40961272e-02,
         -1.61327600e-01, -1.15325046e+00,  1.05116034e+00,  3.01431727e+00,
          2.46340585e+00]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-9.18817234, -8.52420235, -6.17824697, -5.90761089, -6.00881290,
         -5.93657160, -5.09397602, -7.20189238, -9.47287750, -8.95226574]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-9.18817234, -8.52420330, -6.17824793, -5.90761185, -6.00881290,
          -5.93657255, -5.09397602, -7.20189381, -9.47287750, -8.95226765],
         [-9.18817234, -8.52420330, -6.17824793, -5.90761185, -6.00881290,
          -5.93657255, -5.09397602, -7.20189381, -9.47287750, -8.95226765]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02896070,  0.07224035, -0.84259653]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0806 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 157, vnnlib ID: 157 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.42523384, -13.67537022, -17.12404442, -17.76034546, -18.02211761,
         -18.14136124, -17.20537567, -17.92313957, -14.93622971, -12.06187916]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 118, 1, 403] with unstable size 117 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [117]; unstable size 117; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 117] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.82648945, 1.30361068, 4.42907429, 5.04763699, 5.31513500, 5.40978765,
         4.49749613, 5.15742683, 2.39878798]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0719 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 158, vnnlib ID: 158 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.89985514, -8.20181656, -7.95871973, -6.18419170, -7.78199673,
         -6.14752007, -7.65328979, -6.98220968, -6.28924084, -8.29117870]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 445] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 445] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 170] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.18119693,  1.26755595,  0.96031809, -0.95989799,  0.70830965,
         -1.01292515,  0.53413916, -0.22250199,  1.41924667]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.89985514, -8.20181656, -7.95871973, -6.18419170, -7.78199673,
         -6.14752007, -7.65328979, -6.98220968, -6.28924084, -8.29117870]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.89985371, -8.20181370, -7.95871830, -6.18419075, -7.78199673,
          -6.14751959, -7.65328884, -6.98220921, -6.28923941, -8.29117870],
         [-7.89985371, -8.20181370, -7.95871830, -6.18419075, -7.78199673,
          -6.14751959, -7.65328884, -6.98220921, -6.28923941, -8.29117870]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.10504866, -0.14171982,  0.69296980]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]],


         [[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]],


         [[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0787 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 159, vnnlib ID: 159 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
         -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [381]; unstable size 381; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 146, 1, 381] with unstable size 145 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 381] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 381] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [145]; unstable size 145; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 145] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 145] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.04605174,  1.32969475,  1.10167634,  0.96962851,  2.23392868,
          1.26165533,  3.33647394,  1.48339975,  1.25178504]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
         -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.06it/s]100%|██████████| 1/1 [00:00<00:00,  8.05it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.66336918, -16.24439430, -15.76870918, -15.69548130, -16.94470787,
          -16.00302887, -14.51145744, -18.16604233, -16.27715111, -16.16013527]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.15191174]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1274 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.085121154785156
alpha/beta optimization time: 1.4252605438232422
initial alpha-crown bounds: tensor([[-0.02563965,  1.36089849,  1.10909140,  0.97797811,  2.24304676,
          1.27068961,  3.34929466,  1.51245987,  1.28730321]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.025639653205871582
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.36885619163513
Verifying property 0 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02563965]], device='cuda:0') need to verify.
Model prediction is: tensor([-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
        -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02563965]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 381
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 144
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 531
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011301040649414062
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025637269020080566
10 lb beta sum: 0.0, worst -0.025640010833740234
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0599    transfer 0.0001    finalize 0.0001    func 0.0605    
Accumulated time: func 0.0605    prepare 0.0002    bound 0.0599    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 27] 
split level 1: [/input-12, 33] 
split level 2: [/input-12, 61] 
split level 3: [/input-12, 57] 
split level 4: [/input-8, 995] 
split level 5: [/input-8, 988] 
split level 6: [/input-8, 2018] 
split level 7: [/input-8, 741] 
split level 8: [/input-12, 47] 
split level 9: [/input-8, 989] 
split level 10: [/input-8, 987] 
split level 11: [/input-8, 1628] 
split level 12: [/input-8, 1770] 
split level 13: [/input-8, 1765] 
split level 14: [/input-8, 997] 
split level 15: [/input-8, 739] 
split level 16: [/input-8, 1762] 
split level 17: [/input-8, 346] 
split level 18: [/input-8, 1771] 
split level 19: [/input-8, 738] 
split level 20: [/input-8, 1331] 
split level 21: [/input-8, 731] 
split level 22: [/input, 3175] 
split level 23: [/input-8, 1750] 
split level 24: [/input, 165] 
split level 25: [/input-8, 1425] 
split level 26: [/input-8, 2029] 
split level 27: [/input-8, 729] 
split level 28: [/input-8, 1782] 
split level 29: [/input, 3176] 
split level 30: [/input-8, 91] 
split level 31: [/input, 2712] 
split level 32: [/input, 3225] 
split level 33: [/input-8, 356] 
split level 34: [/input, 2131] 
split level 35: [/input-8, 924] 
split level 36: [/input-8, 782] 
split level 37: [/input-8, 819] 
split level 38: [/input-8, 29] 
split level 39: [/input, 2713] 
split level 40: [/input-8, 1882] 
split level 41: [/input-8, 357] 
split level 42: [/input-8, 164] 
split level 43: [/input-8, 1333] 
split level 44: [/input-8, 1430] 
split level 45: [/input-8, 1874] 
split level 46: [/input-8, 781] 
split level 47: [/input, 3211] 
split level 48: [/input, 3173] 
split level 49: [/input, 3243] 
split level 50: [/input-8, 1759] 
split level 51: [/input, 2711] 
split level 52: [/input-8, 1778] 
split level 53: [/input-8, 1314] 
split level 54: [/input, 2705] 
split level 55: [/input-8, 818] 
split level 56: [/input-8, 737] 
split level 57: [/input, 2694] 
split level 58: [/input-8, 1203] 
split level 59: [/input-8, 918] 
split level 60: [/input-8, 1187] 
split level 61: [/input, 606] 
split level 62: [/input-8, 1324] 
split level 63: [/input-8, 1763] 
split level 64: [/input-8, 1883] 
split level 65: [/input, 2397] 
split level 66: [/input, 122] 
split level 67: [/input, 374] 
split level 68: [/input, 2411] 
split level 69: [/input, 3161] 
split level 70: [/input-8, 1330] 
split level 71: [/input-8, 1325] 
split level 72: [/input-8, 1323] 
split level 73: [/input, 155] 
split level 74: [/input-8, 926] 
split level 75: [/input, 3189] 
split level 76: [/input, 3227] 
split level 77: [/input, 2900] 
split level 78: [/input, 371] 
split level 79: [/input-8, 1334] 
split level 80: [/input, 3212] 
split level 81: [/input-8, 1321] 
split level 82: [/input-8, 790] 
split level 83: [/input, 3242] 
split level 84: [/input, 1672] 
split level 85: [/input, 156] 
split level 86: [/input-8, 1322] 
split level 87: [/input-8, 930] 
split level 88: [/input-8, 817] 
split level 89: [/input, 2431] 
split level 90: [/input-8, 828] 
split level 91: [/input, 106] 
split level 92: [/input-8, 827] 
split level 93: [/input, 3177] 
split level 94: [/input, 3171] 
split level 95: [/input, 3260] 
split level 96: [/input, 691] 
split level 97: [/input, 3156] 
split level 98: [/input, 2204] 
split level 99: [/input-8, 1241] 
split level 100: [/input-8, 826] 
split level 101: [/input, 1673] 
split level 102: [/input-8, 829] 
split level 103: [/input, 3962] 
split level 104: [/input-8, 830] 
split level 105: [/input-8, 1309] 
split level 106: [/input, 94] 
split level 107: [/input-8, 1326] 
split level 108: [/input, 3213] 
split level 109: [/input, 434] 
split level 110: [/input, 572] 
split level 111: [/input, 2455] 
split level 112: [/input-8, 825] 
split level 113: [/input-8, 720] 
split level 114: [/input, 2940] 
split level 115: [/input, 2380] 
split level 116: [/input-8, 1664] 
split level 117: [/input-8, 849] 
split level 118: [/input, 305] 
split level 119: [/input, 3174] 
split level 120: [/input-8, 1755] 
split level 121: [/input-8, 1237] 
split level 122: [/input, 458] 
split level 123: [/input, 2899] 
split level 124: [/input-8, 778] 
split level 125: [/input, 3963] 
split level 126: [/input, 1675] 
split level 127: [/input, 3979] 
split level 128: [/input-8, 1316] 
split level 129: [/input, 306] 
split level 130: [/input, 683] 
split level 131: [/input, 2203] 
split level 132: [/input, 2205] 
split level 133: [/input, 3196] 
split level 134: [/input, 2169] 
split level 135: [/input, 446] 
split level 136: [/input-8, 1253] 
split level 137: [/input, 2202] 
split level 138: [/input, 681] 
split level 139: [/input, 2444] 
split level 140: [/input, 635] 
split level 141: [/input, 3154] 
split level 142: [/input, 2443] 
split level 143: [/input, 630] 
split level 144: [/input-8, 1756] 
split level 145: [/input, 1707] 
split level 146: [/input, 3219] 
split level 147: [/input, 100] 
split level 148: [/input, 1228] 
split level 149: [/input, 1674] 
split level 150: [/input, 2422] 
split level 151: [/input, 2440] 
split level 152: [/input, 2758] 
split level 153: [/input-8, 1981] 
split level 154: [/input, 2684] 
split level 155: [/input-8, 1248] 
split level 156: [/input, 2154] 
split level 157: [/input, 749] 
split level 158: [/input-8, 1575] 
split level 159: [/input-8, 1112] 
split level 160: [/input, 3929] 
split level 161: [/input, 836] 
split level 162: [/input, 732] 
split level 163: [/input, 825] 
split level 164: [/input, 1419] 
split level 165: [/input, 1218] 
split level 166: [/input, 727] 
split level 167: [/input, 2502] 
split level 168: [/input, 718] 
split level 169: [/input, 3991] 
split level 170: [/input, 1240] 
split level 171: [/input, 923] 
split level 172: [/input, 1217] 
split level 173: [/input, 741] 
split level 174: [/input, 873] 
split level 175: [/input, 1239] 
split level 176: [/input, 1206] 
split level 177: [/input, 2369] 
split level 178: [/input, 1241] 
split level 179: [/input, 1201] 
split level 180: [/input, 740] 
split level 181: [/input, 3720] 
split level 182: [/input, 3908] 
split level 183: [/input, 1404] 
split level 184: [/input, 1203] 
split level 185: [/input, 1255] 
split level 186: [/input, 733] 
split level 187: [/input, 4007] 
split level 188: [/input, 1413] 
split level 189: [/input, 3941] 
split level 190: [/input, 1220] 
split level 191: [/input, 3643] 
split level 192: [/input, 717] 
split level 193: [/input, 739] 
split level 194: [/input, 1412] 
split level 195: [/input, 1242] 
split level 196: [/input, 674] 
split level 197: [/input, 3992] 
split level 198: [/input, 3930] 
split level 199: [/input, 946] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02840554714202881
10 lb beta sum: 0.0, worst -0.025799870491027832
Time: prepare 0.0119    bound 0.1118    transfer 0.0039    finalize 0.0036    func 0.1339    
Accumulated time: func 0.1944    prepare 0.0224    bound 0.1717    transfer 0.0040    finalize 0.0038    
all_split False
======================Cut inference begins======================
max lb tensor(0.21094930) min lb tensor(-0.02563727)
Number of Verified Splits: 18 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01336979866027832 
BICCOS Cumulative time: 0.01336979866027832
Preprocessing time: 0.011485576629638672 Inference time: 0.001379251480102539 Add cuts time: 0.0002675056457519531 Cut analysis time: 0.00023746490478515625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5355    set_bounds 0.0121    solve 0.1340    add 0.0114    
Accumulated time: pickout 0.0004    decision 0.5355    set_bounds 0.0121    solve 0.1340    add 0.0114    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([27]), tensor([-1.]), tensor([0]), tensor([4.63872940e-10]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([27]), tensor([1.]), tensor([0]), tensor([4.44618120e-10]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.01522517204284668

all verified at 0th iter
Time: prepare 0.0004    bound 0.0049    transfer 0.0001    finalize 0.0002    func 0.0056    
Accumulated time: func 0.2000    prepare 0.0228    bound 0.1766    transfer 0.0041    finalize 0.0039    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 197.33183574676514
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 197.3317677974701
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 197.33174324035645
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.3317232131958
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.33170342445374
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.33168411254883
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.3316638469696
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.3316445350647
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.6684 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 160, vnnlib ID: 160 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.49879074, -9.55830097, -5.11135626, -6.59453297, -4.63026714,
         -6.67742062, -5.16739082, -6.71435833, -9.42285538, -9.37638187]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [669]; unstable size 669; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 669] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 669] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 669] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 192] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.34096289, 4.10190248, 0.30777758, 1.68400633, 1.76496494, 0.30022144,
         1.81714153, 4.01539278, 3.94053698]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0692 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 161, vnnlib ID: 161 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.87970066, -14.66562939,  -9.85256958,  -8.82474613, -10.40148449,
          -8.68280125,  -9.99558353, -10.62414360, -13.25842571, -14.81057453]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [425]; unstable size 425; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 169, 1, 425] with unstable size 168 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 425] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 425] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [168]; unstable size 168; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 168] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 168] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.58588171, 5.25564861, 0.84904134, 0.12145444, 1.39071870, 0.90202546,
         1.64734638, 3.90297675, 5.47198582]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0675 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 162, vnnlib ID: 162 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87640285, -12.87582302,  -8.50058079, -10.47419071,  -8.70230770,
         -10.56670856,  -8.81984520, -11.36477280, -11.69618988, -13.20551491]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [477]; unstable size 477; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 477] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 477] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 477] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 161] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86706138,  3.64629698,  1.61399448, -0.01080489,  1.69744170,
          0.02841198,  2.42314339,  2.43144679,  3.97708631]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87640285, -12.87582302,  -8.50058079, -10.47419071,  -8.70230770,
         -10.56670856,  -8.81984520, -11.36477280, -11.69618988, -13.20551491]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.15it/s]100%|██████████| 1/1 [00:00<00:00,  8.14it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.73246670, -12.68345451,  -8.39245701, -10.23877811,  -8.46293736,
          -10.33113194,  -8.62541771, -11.11933708, -11.50778389, -12.95249939]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07048035]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1258 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 12th iter
best_l after optimization: 16.799541473388672
alpha/beta optimization time: 0.18246817588806152
initial alpha-crown bounds: tensor([[8.82857919e-01, 3.66166139e+00, 1.62423432e+00, 3.00407410e-05,
         1.70782304e+00, 3.46807241e-02, 2.44014621e+00, 2.45263147e+00,
         3.99547553e+00]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 3.0040740966796875e-05
verified with init bound!
Result: safe-incomplete in 0.3428 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 163, vnnlib ID: 163 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.01543331,  -8.50793934,  -8.28173351,  -8.84521961,  -8.12535572,
          -8.88524437,  -8.74754906,  -8.41619205, -10.82264996,  -8.60353184]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [616]; unstable size 616; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 616] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 616] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 616] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 159] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-8.43454003e-02, -8.76670837e-01, -5.83441019e-01, -4.16055918e-02,
         -5.99727392e-01,  1.43575668e-03, -2.22274303e-01,  1.54696393e+00,
         -7.14367151e-01]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.01543331,  -8.50793934,  -8.28173351,  -8.84521961,  -8.12535572,
          -8.88524437,  -8.74754906,  -8.41619205, -10.82264996,  -8.60353184]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.01543331,  -8.50793839,  -8.28173351,  -8.84521961,  -8.12535477,
           -8.88524532,  -8.74754715,  -8.41619205, -10.82264996,  -8.60353088],
         [ -9.01543331,  -8.50793839,  -8.28173351,  -8.84521961,  -8.12535477,
           -8.88524532,  -8.74754715,  -8.41619205, -10.82264996,  -8.60353088]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.59924126,  0.09174633, -0.13445854,  0.42902756, -0.29083729,
           0.33135509,  0.18733883]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         ...,


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0868 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 164, vnnlib ID: 164 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.65704536, -8.06795883, -5.25074387, -4.81809998, -5.40738297,
         -4.78305626, -5.53884125, -6.33654642, -8.16578388, -7.93662977]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 177, 1, 599] with unstable size 176 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 599] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [176]; unstable size 176; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 176] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 176] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.34938383, 2.50165510, 0.22862637, 0.01722103, 0.35063827, 0.36827171,
         1.27956533, 2.61070609, 2.51747704]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0654 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 165, vnnlib ID: 165 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.43569374, -7.82689762, -6.75649071, -7.24614143, -7.06519032,
         -7.31342793, -8.26335907, -8.11638641, -7.34807396, -7.95840502]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [552]; unstable size 552; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 552] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 552] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 552] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 203] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.37668705, -1.05399323, -1.66841137, -1.10696745, -1.28876460,
         -1.03613186, -0.23888946, -1.47692060, -0.85666394]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.43569374, -7.82689762, -6.75649071, -7.24614143, -7.06519032,
         -7.31342793, -8.26335907, -8.11638641, -7.34807396, -7.95840502]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.43569374, -7.82689667, -6.75648975, -7.24613953, -7.06518936,
          -7.31342697, -8.26335716, -8.11638546, -7.34807396, -7.95840406],
         [-7.43569374, -7.82689667, -6.75648975, -7.24613953, -7.06518936,
          -7.31342697, -8.26335716, -8.11638546, -7.34807396, -7.95840406]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.68069172, -0.28948879, -1.35989571, -0.87024593, -1.05119610,
          -0.80295849,  0.14697170, -0.76831150, -0.15798140]]],
       device='cuda:0')
number of violation:  8
clean attack image tensor([[[[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         ...,


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0924 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 166, vnnlib ID: 166 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.11932993, -4.82532978, -2.47477031, -2.84284973, -2.40484571,
         -3.00597310, -1.59280419, -3.88199234, -4.35127544, -4.01034117]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 458] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 458] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 243] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.65978789, 2.30001354, 0.46589673, 0.87081158, 0.39240396, 1.02510440,
         1.69761920, 1.67752361, 1.51655388]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0677 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 167, vnnlib ID: 167 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
         -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [510]; unstable size 510; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 213, 1, 510] with unstable size 212 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 510] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 510] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [212]; unstable size 212; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 212] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 212] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.16538978,  0.02639794,  1.23263621,  1.06774688,  1.37462723,
          1.93852615,  2.49895382, -0.35096419,  2.43112779]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
         -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
          -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04281914]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[1.90000021, 1.80476213, 1.74127007,  ..., 1.40793681,
            1.55079389, 1.55079389],
           [1.96349227, 1.85238123, 1.85238123,  ..., 1.09047651,
            1.39206374, 1.45555580],
           [1.88412726, 1.80476213, 1.80476213,  ..., 0.64603180,
            1.07460344, 1.18571460],
           ...,
           [1.64603198, 1.47142887, 1.34444475,  ..., 0.42380959,
            0.55079371, 0.64603180],
           [1.67777801, 1.53492093, 1.26507962,  ..., 0.47142863,
            0.59841275, 0.72539687],
           [1.59841299, 1.26507962, 0.88412702,  ..., 0.63015878,
            0.77301592, 0.86825401]],

          [[1.99677968, 1.85185218, 1.73913074,  ..., 1.20772982,
            1.23993587, 1.22383285],
           [2.04508877, 1.88405824, 1.81964600,  ..., 0.93397754,
            1.14331758, 1.17552364],
           [1.94847047, 1.83574903, 1.75523376,  ..., 0.51529801,
            0.88566834, 0.96618366],
           ...,
           [1.65861547, 1.41706955, 1.28824508,  ..., 0.28985518,
            0.30595824, 0.35426742],
           [1.67471850, 1.44927561, 1.25603890,  ..., 0.28985518,
            0.35426742, 0.43478271],
           [1.65861547, 1.30434811, 0.98228669,  ..., 0.38647354,
            0.48309189, 0.53140104]],

          [[2.02548766, 1.89055514, 1.81559265,  ..., 1.29085493,
            1.38081002, 1.42578757],
           [2.07046509, 1.93553269, 1.87556267,  ..., 1.12593722,
            1.35082495, 1.42578757],
           [1.98051023, 1.87556267, 1.80060017,  ..., 0.84107965,
            1.18590748, 1.27586246],
           ...,
           [1.60569763, 1.41079497, 1.35082495,  ..., 0.58620709,
            0.63118458, 0.67616212],
           [1.65067506, 1.48575759, 1.23088503,  ..., 0.57121456,
            0.63118458, 0.70614707],
           [1.68066013, 1.39580250, 0.94602716,  ..., 0.64617711,
            0.72113961, 0.76611710]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0776 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 168, vnnlib ID: 168 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.77010298, -9.56792831, -3.51737452, -7.98014259, -4.43413353,
         -8.13228130, -7.63488007, -7.35559034, -9.32965469, -9.84434509]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 93, 1, 608] with unstable size 92 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 608] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [92]; unstable size 92; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 92] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 92] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.91945100, 5.40677595, 4.21947527, 0.74099821, 4.36890173, 3.83588839,
         3.49529505, 5.35575199, 5.79974079]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0742 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 169, vnnlib ID: 169 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
          -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 152, 1, 442] with unstable size 151 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 442] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [151]; unstable size 151; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 151] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.31049490,  1.82715607, -0.04293871,  1.07361519,  1.18260849,
          0.86679065,  0.03638697,  1.20158577,  1.79956222]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
          -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.26it/s]100%|██████████| 1/1 [00:00<00:00,  8.25it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.67833710, -10.47902393,  -8.10711384,  -9.37081242,  -8.07628441,
           -9.48413372,  -9.13742447,  -8.56529427,  -9.67664242, -10.46873760]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.03082943]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1246 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 8.407691955566406
alpha/beta optimization time: 1.3177318572998047
initial alpha-crown bounds: tensor([[ 0.32534218,  1.84551072, -0.02267262,  1.09125614,  1.19872808,
          0.89233619,  0.04136038,  1.21694779,  1.81888366]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0226726233959198
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.4894723892212
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.4894323348999
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.4894073009491
Verifying property 2 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02267262]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
         -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02267262]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 442
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 149
Node /15 input 0: size torch.Size([100]) unstable 2
-----------------
# of unstable neurons: 593
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011730194091796875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.022672414779663086
10 lb beta sum: 0.0, worst -0.02267289161682129
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0557    transfer 0.0001    finalize 0.0001    func 0.0561    
Accumulated time: func 0.0561    prepare 0.0002    bound 0.0557    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 57] 
split level 1: [/input-8, 1835] 
split level 2: [/input-8, 1877] 
split level 3: [/input-8, 1886] 
split level 4: [/input-8, 20] 
split level 5: [/input-8, 1898] 
split level 6: [/input-8, 1843] 
split level 7: [/input-8, 1491] 
split level 8: [/input-8, 1842] 
split level 9: [/input-8, 1773] 
split level 10: [/input-8, 1772] 
split level 11: [/input-8, 1769] 
split level 12: [/input-8, 1490] 
split level 13: [/input-8, 1315] 
split level 14: [/input-8, 217] 
split level 15: [/input, 2488] 
split level 16: [/input-8, 1508] 
split level 17: [/input-8, 193] 
split level 18: [/input, 2212] 
split level 19: [/input-8, 139] 
split level 20: [/input, 2442] 
split level 21: [/input, 2455] 
split level 22: [/input, 1955] 
split level 23: [/input-8, 1164] 
split level 24: [/input-8, 1148] 
split level 25: [/input-8, 36] 
split level 26: [/input-8, 1800] 
split level 27: [/input-8, 185] 
split level 28: [/input-8, 1762] 
split level 29: [/input, 2502] 
split level 30: [/input-8, 1779] 
split level 31: [/input-8, 188] 
split level 32: [/input-8, 1774] 
split level 33: [/input-8, 716] 
split level 34: [/input, 394] 
split level 35: [/input-8, 1713] 
split level 36: [/input-8, 1765] 
split level 37: [/input, 1939] 
split level 38: [/input-8, 1712] 
split level 39: [/input-8, 846] 
split level 40: [/input, 2758] 
split level 41: [/input-8, 2033] 
split level 42: [/input-8, 1816] 
split level 43: [/input, 149] 
split level 44: [/input-8, 158] 
split level 45: [/input-8, 725] 
split level 46: [/input, 1914] 
split level 47: [/input-8, 1981] 
split level 48: [/input, 1884] 
split level 49: [/input, 2962] 
split level 50: [/input, 422] 
split level 51: [/input, 1928] 
split level 52: [/input-8, 1867] 
split level 53: [/input-8, 1599] 
split level 54: [/input-8, 1739] 
split level 55: [/input-8, 1679] 
split level 56: [/input-8, 1634] 
split level 57: [/input, 2106] 
split level 58: [/input, 2461] 
split level 59: [/input-8, 1758] 
split level 60: [/input-8, 726] 
split level 61: [/input, 3876] 
split level 62: [/input-8, 845] 
split level 63: [/input-8, 844] 
split level 64: [/input, 2437] 
split level 65: [/input, 2953] 
split level 66: [/input-8, 944] 
split level 67: [/input, 2583] 
split level 68: [/input-8, 150] 
split level 69: [/input-8, 1303] 
split level 70: [/input, 457] 
split level 71: [/input-8, 1929] 
split level 72: [/input, 2534] 
split level 73: [/input, 3275] 
split level 74: [/input, 2697] 
split level 75: [/input, 3703] 
split level 76: [/input-8, 1112] 
split level 77: [/input, 1922] 
split level 78: [/input, 452] 
split level 79: [/input, 3273] 
split level 80: [/input, 1403] 
split level 81: [/input, 3946] 
split level 82: [/input, 1018] 
split level 83: [/input, 1923] 
split level 84: [/input-8, 1741] 
split level 85: [/input-8, 112] 
split level 86: [/input, 1419] 
split level 87: [/input, 3525] 
split level 88: [/input-8, 953] 
split level 89: [/input, 887] 
split level 90: [/input, 2844] 
split level 91: [/input, 147] 
split level 92: [/input-8, 1215] 
split level 93: [/input, 2585] 
split level 94: [/input-8, 1961] 
split level 95: [/input, 2157] 
split level 96: [/input, 3890] 
split level 97: [/input, 264] 
split level 98: [/input, 3559] 
split level 99: [/input, 720] 
split level 100: [/input-8, 1419] 
split level 101: [/input, 2217] 
split level 102: [/input-8, 1605] 
split level 103: [/input, 2215] 
split level 104: [/input, 3162] 
split level 105: [/input-8, 1420] 
split level 106: [/input, 1689] 
split level 107: [/input-8, 883] 
split level 108: [/input, 2980] 
split level 109: [/input, 933] 
split level 110: [/input, 2230] 
split level 111: [/input, 2186] 
split level 112: [/input-8, 2003] 
split level 113: [/input-8, 1813] 
split level 114: [/input-8, 1660] 
split level 115: [/input-8, 869] 
split level 116: [/input, 936] 
split level 117: [/input, 2392] 
split level 118: [/input-8, 1336] 
split level 119: [/input, 1162] 
split level 120: [/input-8, 859] 
split level 121: [/input-8, 799] 
split level 122: [/input-8, 1663] 
split level 123: [/input, 1236] 
split level 124: [/input-8, 1571] 
split level 125: [/input, 2436] 
split level 126: [/input-8, 884] 
split level 127: [/input-8, 801] 
split level 128: [/input, 971] 
split level 129: [/input, 4008] 
split level 130: [/input-8, 886] 
split level 131: [/input, 2261] 
split level 132: [/input, 3750] 
split level 133: [/input, 3657] 
split level 134: [/input-8, 1299] 
split level 135: [/input-8, 1662] 
split level 136: [/input, 3642] 
split level 137: [/input, 979] 
split level 138: [/input, 674] 
split level 139: [/input, 2435] 
split level 140: [/input, 1195] 
split level 141: [/input, 2362] 
split level 142: [/input, 2687] 
split level 143: [/input, 1253] 
split level 144: [/input, 921] 
split level 145: [/input, 3751] 
split level 146: [/input, 974] 
split level 147: [/input, 3804] 
split level 148: [/input-8, 375] 
split level 149: [/input-8, 1079] 
split level 150: [/input, 3916] 
split level 151: [/input, 3802] 
split level 152: [/input, 2272] 
split level 153: [/input, 2251] 
split level 154: [/input, 2969] 
split level 155: [/input-8, 785] 
split level 156: [/input, 460] 
split level 157: [/input, 3619] 
split level 158: [/input, 1239] 
split level 159: [/input, 332] 
split level 160: [/input, 3603] 
split level 161: [/input-8, 1022] 
split level 162: [/input, 3944] 
split level 163: [/input, 2450] 
split level 164: [/input-8, 1323] 
split level 165: [/input, 3117] 
split level 166: [/input-8, 1023] 
split level 167: [/input-8, 1334] 
split level 168: [/input, 3911] 
split level 169: [/input, 3788] 
split level 170: [/input-8, 1020] 
split level 171: [/input-8, 1021] 
split level 172: [/input-8, 367] 
split level 173: [/input, 399] 
split level 174: [/input, 1101] 
split level 175: [/input, 1146] 
split level 176: [/input, 686] 
split level 177: [/input, 2810] 
split level 178: [/input, 3203] 
split level 179: [/input-8, 992] 
split level 180: [/input, 846] 
split level 181: [/input, 3715] 
split level 182: [/input, 2401] 
split level 183: [/input, 3963] 
split level 184: [/input-8, 885] 
split level 185: [/input, 941] 
split level 186: [/input, 1210] 
split level 187: [/input, 2639] 
split level 188: [/input, 599] 
split level 189: [/input, 3621] 
split level 190: [/input, 2160] 
split level 191: [/input, 642] 
split level 192: [/input, 2671] 
split level 193: [/input, 1223] 
split level 194: [/input-8, 360] 
split level 195: [/input, 2433] 
split level 196: [/input, 791] 
split level 197: [/input, 1252] 
split level 198: [/input, 2627] 
split level 199: [/input, 2220] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029333174228668213
10 lb beta sum: 0.0, worst -0.022914886474609375
Time: prepare 0.0115    bound 0.1008    transfer 0.0023    finalize 0.0027    func 0.1200    
Accumulated time: func 0.1762    prepare 0.0218    bound 0.1564    transfer 0.0024    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.00372498) min lb tensor(-0.02267241)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.011058330535888672 
BICCOS Cumulative time: 0.011058330535888672
Preprocessing time: 0.010126113891601562 Inference time: 0.0001900196075439453 Add cuts time: 8.7738037109375e-05 Cut analysis time: 0.0006544589996337891
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02010 (1), -0.02007 (1), -0.02005 (1), -0.02002 (1), -0.01975 (1), -0.01957 (1), -0.01928 (1), -0.01924 (1), -0.01904 (1), -0.01895 (1), -0.01858 (1), -0.01850 (1), -0.01836 (1), -0.01829 (1), -0.01828 (1), -0.01820 (1), -0.01819 (1), -0.01808 (1), -0.01794 (1), -0.01779 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5174    set_bounds 0.0097    solve 0.1201    add 0.2043    
Accumulated time: pickout 0.0004    decision 0.5174    set_bounds 0.0097    solve 0.1201    add 0.2043    
Current (lb-rhs): -0.02009826898574829
50 domains visited
Cumulative time: 0.9462404251098633

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-8, 1835] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-8, 1835] [/input-12, 57] 
split level 1: [/input-8, 1877] [/input-8, 1835] [/input-8, 1835] [/input-8, 1877] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1877] [/input-8, 1835] 
split level 2: [/input-8, 1842] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] 
split level 3: [/input-8, 1843] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018817901611328125
10 lb beta sum: 0.34331533312797546, worst -0.018183231353759766
Time: prepare 0.0072    bound 0.1250    transfer 0.0012    finalize 0.0024    func 0.1385    
Accumulated time: func 0.3147    prepare 0.0292    bound 0.2815    transfer 0.0036    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.01591574) min lb tensor(-0.01809168)
Number of Verified Splits: 114 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 38
#cuts >= 20: 0
BICCOS time: 0.02028942108154297 
BICCOS Cumulative time: 0.03134775161743164
Preprocessing time: 0.012215375900268555 Inference time: 0.004814863204956055 Add cuts time: 0.002416372299194336 Cut analysis time: 0.0008428096771240234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00622 (2), -0.00599 (2), -0.00573 (2), -0.00572 (2), -0.00564 (2), -0.00552 (2), -0.00533 (2), -0.00511 (2), -0.00479 (2), -0.00473 (2), -0.00461 (2), -0.00451 (2), -0.00440 (2), -0.00440 (2), -0.00438 (2), -0.00432 (2), -0.00415 (2), -0.00404 (2), -0.00399 (2), -0.00385 (2), 
Length of domains: 50
Time: pickout 0.0085    decision 0.0213    set_bounds 0.0148    solve 0.1386    add 0.1422    
Accumulated time: pickout 0.0089    decision 0.5387    set_bounds 0.0246    solve 0.2588    add 0.3465    
Current (lb-rhs): -0.006220728158950806
100 domains visited
Cumulative time: 1.2922749519348145

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] 
split level 1: [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] 
split level 2: [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] 
split level 3: [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006386816501617432
10 lb beta sum: 1.6075642108917236, worst -0.0013751983642578125
Time: prepare 0.0089    bound 0.1598    transfer 0.0009    finalize 0.0024    func 0.1755    
Accumulated time: func 0.4903    prepare 0.0384    bound 0.4413    transfer 0.0045    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.01140183) min lb tensor(-0.00123811)
Number of Verified Splits: 382 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 50.
#cuts 1-3: 50
#cuts >= 20: 0
BICCOS time: 0.040692806243896484 
BICCOS Cumulative time: 0.07204055786132812
Preprocessing time: 0.012398242950439453 Inference time: 0.013670921325683594 Add cuts time: 0.013705253601074219 Cut analysis time: 0.0009183883666992188
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0013    decision 0.0199    set_bounds 0.0139    solve 0.1757    add 0.0236    
Accumulated time: pickout 0.0101    decision 0.5586    set_bounds 0.0384    solve 0.4345    add 0.3702    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1835]), tensor([-1.]), tensor([0]), tensor([7.74984521e-11]), tensor([1])), '/input-12': ([57], [-1.0], [0], [1.1937828503505443e-08], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1835, 1877]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.83002951e-16,  9.28385742e-03]), tensor([1, 2])), '/input-12': ([57], [-1.0], [0], [1.1937828503505443e-08], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1835, 1877]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.83002951e-16,  2.80912383e-03]), tensor([1, 2])), '/input-12': ([57], [-1.0], [0], [1.1937828503505443e-08], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1843, 1835]), tensor([-1., -1.]), tensor([0, 0]), tensor([0.00506838, 0.00948130]), tensor([1, 2])), '/input-12': ([57], [1.0], [0], [-1.8300189177076522e-16], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1843, 1835]), tensor([-1.,  1.]), tensor([0, 0]), tensor([0.00506838, 0.00461210]), tensor([1, 2])), '/input-12': ([57], [1.0], [0], [-1.8300189177076522e-16], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1843]), tensor([1.]), tensor([0]), tensor([0.00287379]), tensor([1])), '/input-12': ([57], [1.0], [0], [-1.8300189177076522e-16], [0])}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.007325798273086548

all verified at 1th iter
Time: prepare 0.0005    bound 0.0155    transfer 0.0002    finalize 0.0002    func 0.0165    
Accumulated time: func 0.5067    prepare 0.0389    bound 0.4568    transfer 0.0046    finalize 0.0079    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 196.6298007965088
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 196.62970089912415
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 196.62921714782715
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 196.62919569015503
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.62917351722717
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.6291537284851
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.3709 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 170, vnnlib ID: 170 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
          -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [631]; unstable size 631; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 631] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 631] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 631] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 138] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.05669785,  7.12348557, -0.81237477,  2.57512522,  2.65363836,
          2.42923689,  1.37826777,  5.74696732,  6.64974642]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
          -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
           -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.58955538]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.84603173, -0.94126981, -0.86190474,  ..., -0.33809513,
            -0.48095238, -0.51269841],
           [-0.25873005, -0.30634910, -0.27460307,  ..., -0.29047608,
            -0.33809513, -0.43333322],
           [ 0.42380959,  0.36031753,  0.39206356,  ..., -0.08412688,
            -0.14761895, -0.32222211],
           ...,
           [ 0.47142863,  0.48730165,  0.55079371,  ...,  0.05873025,
             0.01111121,  0.12222230],
           [ 0.12222230,  0.10634929,  0.23333341,  ..., -0.02063482,
            -0.02063482,  0.16984135],
           [-0.19523799, -0.41746020, -0.29047608,  ...,  0.16984135,
             0.31269848,  0.58253974]],

          [[-0.67632848, -0.78904986, -0.72463763,  ..., -0.03220600,
            -0.17713353, -0.20933965],
           [ 0.04830930, -0.01610294,  0.01610318,  ...,  0.03220624,
            -0.01610294, -0.11272129],
           [ 0.88566834,  0.82125610,  0.85346222,  ...,  0.24154601,
             0.19323683, -0.01610294],
           ...,
           [ 0.95008057,  0.98228669,  1.03059590,  ...,  0.62801939,
             0.56360716,  0.61191636],
           [ 0.70853472,  0.72463775,  0.85346222,  ...,  0.66022551,
             0.62801939,  0.77294695],
           [ 0.46698883,  0.22544295,  0.40257660,  ...,  0.77294695,
             0.85346222,  1.14331758]],

          [[-0.01349309, -0.07346311,  0.03148442,  ...,  0.76611710,
             0.66116959,  0.64617711],
           [-0.02848560, -0.04347810,  0.00149941,  ...,  0.78110963,
             0.78110963,  0.78110963],
           [-0.14842562, -0.19340314, -0.14842562,  ...,  0.81109464,
             0.81109464,  0.76611710],
           ...,
           [-0.53823084, -0.56821585, -0.50824583,  ..., -0.68815589,
            -0.65817088, -0.49325335],
           [-0.58320838, -0.73313338, -0.61319339,  ..., -0.83808094,
            -0.83808094, -0.65817088],
           [-0.80809593, -1.04797614, -0.85307342,  ..., -0.74812591,
            -0.67316341, -0.43328333]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0738 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 171, vnnlib ID: 171 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.63988018, -11.70766258, -10.72140884, -10.78502178, -10.30626678,
         -10.96242046,  -9.89720917, -10.94630241, -13.04552364, -11.00957012]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [493]; unstable size 493; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 493] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 493] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 493] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 177] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.11123198, 1.11106300, 0.48803031, 0.63042790, 0.00368500, 0.79707968,
         0.55721855, 2.39154482, 0.42870808]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0686 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 172, vnnlib ID: 172 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.49745131, -8.20798206, -6.12458706, -8.36979198, -6.27434921,
         -8.58381653, -8.11138153, -7.94669247, -4.75123119, -7.89815950]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 561] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 561] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 147] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.08015418,  1.10043216,  3.16933346,  1.15053511,  3.37255096,
          2.91001010,  2.77714491, -0.19217908,  2.78871465]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.49745131, -8.20798206, -6.12458706, -8.36979198, -6.27434921,
         -8.58381653, -8.11138153, -7.94669247, -4.75123119, -7.89815950]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.70938110, -8.28709698, -6.37382412, -8.52355671, -6.53355598,
          -8.73983860, -8.32157516, -8.20209694, -4.68664932, -7.95726824]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02273178]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0736 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 173, vnnlib ID: 173 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.48213387, -8.01494122, -6.49922419, -6.44987583, -6.58213425,
         -6.60465574, -5.89261341, -7.75944138, -8.76826668, -7.64277458]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 608] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 608] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 216] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.16914642,  0.51496124, -0.35071123, -0.32186103,  0.12535100,
         -1.02238858,  0.66660726,  1.28926635,  0.21741533]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.48213387, -8.01494122, -6.49922419, -6.44987583, -6.58213425,
         -6.60465574, -5.89261341, -7.75944138, -8.76826668, -7.64277458]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.48213339, -8.01494217, -6.49922466, -6.44987679, -6.58213520,
          -6.60465670, -5.89261341, -7.75944233, -8.76826763, -7.64277506],
         [-7.48213339, -8.01494217, -6.49922466, -6.44987679, -6.58213520,
          -6.60465670, -5.89261341, -7.75944233, -8.76826763, -7.64277506]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04934788,  0.13225842, -0.55726337]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0414 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 174, vnnlib ID: 174 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
         -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [588]; unstable size 588; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 199, 1, 588] with unstable size 198 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 588] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 588] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [198]; unstable size 198; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 198] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 198] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.61178422,  4.32749891, -0.36567217,  0.41240394,  0.48770016,
          0.50044847,  0.68070054,  2.37939596,  3.58202100]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
         -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
          -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07760429]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.32222211, -0.29047608, -0.17936498,  ...,  0.67777783,
             0.83650798,  1.15396857],
           [-0.33809513, -0.08412688,  0.16984135,  ...,  0.70952386,
             0.94761908,  1.29682565],
           [-0.13174593,  0.16984135,  0.39206356,  ...,  0.70952386,
             0.94761908,  1.45555580],
           ...,
           [-0.06825387, -0.08412688, -0.08412688,  ..., -0.14761895,
            -0.09999990, -0.02063482],
           [-0.05238085, -0.09999990, -0.06825387,  ..., -0.13174593,
            -0.02063482,  0.10634929],
           [-0.13174593, -0.17936498, -0.09999990,  ...,  0.07460327,
             0.16984135,  0.23333341]],

          [[-0.45088565, -0.43478248, -0.38647330,  ...,  0.48309189,
             0.62801939,  0.93397754],
           [-0.48309177, -0.25764883, -0.06441211,  ...,  0.49919492,
             0.70853472,  1.01449287],
           [-0.28985494, -0.03220600,  0.16103071,  ...,  0.48309189,
             0.67632860,  1.12721443],
           ...,
           [-0.22544271, -0.24154577, -0.24154577,  ..., -0.30595800,
            -0.27375188, -0.17713353],
           [-0.20933965, -0.24154577, -0.22544271,  ..., -0.32206106,
            -0.19323659, -0.03220600],
           [-0.28985494, -0.33816412, -0.25764883,  ..., -0.12882435,
            -0.03220600,  0.08051541]],

          [[-0.55322337, -0.52323836, -0.46326834,  ...,  0.25637197,
             0.45127454,  0.79610211],
           [-0.59820086, -0.37331331, -0.17841063,  ...,  0.19640197,
             0.43628204,  0.76611710],
           [-0.43328333, -0.17841063,  0.00149941,  ...,  0.13643195,
             0.34632701,  0.79610211],
           ...,
           [-0.29835078, -0.31334329, -0.31334329,  ..., -0.32833579,
            -0.29835078, -0.20839565],
           [-0.26836565, -0.31334329, -0.28335828,  ..., -0.32833579,
            -0.22338814, -0.08845562],
           [-0.32833579, -0.35832080, -0.29835078,  ..., -0.14842562,
            -0.05847061,  0.04647692]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0720 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 175, vnnlib ID: 175 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.66825104, -7.97197151, -6.85186052, -7.69482708, -6.41166210,
         -7.79411554, -7.01330566, -7.14677095, -7.18919182, -7.63720417]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [604]; unstable size 604; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 604] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 604] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 604] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 186] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.53241515, 0.56145525, 1.23012340, 0.07895291, 1.31490338, 0.48338461,
         0.64640111, 1.02218056, 1.28158712]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0702 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 176, vnnlib ID: 176 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.87314558, -8.19042587, -4.13985491, -4.64103413, -4.94530869,
         -4.76780462, -4.91272449, -6.20926189, -6.63870811, -7.66739511]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [597]; unstable size 597; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 597] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 597] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 597] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 153] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.23613921,  2.79050136, -0.77878726, -0.04329729,  0.11112864,
          0.04540646,  1.03803015,  1.36925077,  2.36230230]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.87314558, -8.19042587, -4.13985491, -4.64103413, -4.94530869,
         -4.76780462, -4.91272449, -6.20926189, -6.63870811, -7.66739511]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.87314510, -8.19042587, -4.13985491, -4.64103413, -4.94530916,
          -4.76780462, -4.91272354, -6.20926237, -6.63870811, -7.66739511],
         [-4.87314510, -8.19042587, -4.13985491, -4.64103413, -4.94530916,
          -4.76780462, -4.91272354, -6.20926237, -6.63870811, -7.66739511]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.23211098, -0.50117922,  0.30427504]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0792 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 177, vnnlib ID: 177 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.53732777, -16.52824783, -10.35078621, -13.07399178, -13.29616356,
         -13.26419640, -14.66434383, -13.61211491, -15.27535629, -16.57476234]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [276]; unstable size 276; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 76, 1, 276] with unstable size 75 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 276] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 276] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [75]; unstable size 75; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 75] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 75] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01606524, 5.64310646, 2.54551029, 2.74233031, 2.73602724, 4.06365871,
         3.03769207, 4.63138247, 5.85097408]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0556 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 178, vnnlib ID: 178 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
         -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [453]; unstable size 453; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 141, 1, 453] with unstable size 140 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 453] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 453] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [140]; unstable size 140; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 140] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 5.29551125, -0.05402613,  1.48138261,  0.06260347,  1.59185386,
          1.62150908,  0.04656303,  4.47954416,  4.37859154]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
         -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.37it/s]100%|██████████| 1/1 [00:00<00:00,  8.35it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -4.25827217, -10.05697727,  -4.28648949,  -5.97811222,  -4.47851419,
           -6.09019661,  -6.11976624,  -4.58179903,  -9.12149048,  -9.06482506]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02821732]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1227 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.004981994628906
alpha/beta optimization time: 1.2742993831634521
initial alpha-crown bounds: tensor([[ 5.31581020, -0.04664302,  1.49123049,  0.07164526,  1.60213947,
          1.62857985,  0.05959058,  4.48958206,  4.39304781]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.04664301872253418
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.53782773017883
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.53778648376465
Verifying property 1 with 1 instances.
##### Instance 178 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04664302]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
        -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04664302]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 453
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 138
Node /15 input 0: size torch.Size([100]) unstable 3
-----------------
# of unstable neurons: 594
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011992454528808594
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04664254188537598
10 lb beta sum: 0.0, worst -0.046643733978271484
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0566    transfer 0.0001    finalize 0.0001    func 0.0571    
Accumulated time: func 0.0571    prepare 0.0002    bound 0.0566    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 60] 
split level 1: [/input-8, 1316] 
split level 2: [/input-8, 1099] 
split level 3: [/input-8, 653] 
split level 4: [/input-8, 1326] 
split level 5: [/input-8, 1] 
split level 6: [/input, 547] 
split level 7: [/input-8, 1102] 
split level 8: [/input-8, 61] 
split level 9: [/input-8, 1313] 
split level 10: [/input-8, 1308] 
split level 11: [/input-8, 956] 
split level 12: [/input-8, 226] 
split level 13: [/input-8, 648] 
split level 14: [/input-8, 1525] 
split level 15: [/input-8, 54] 
split level 16: [/input-8, 1325] 
split level 17: [/input-8, 1139] 
split level 18: [/input, 2341] 
split level 19: [/input-8, 1116] 
split level 20: [/input-8, 46] 
split level 21: [/input-8, 1670] 
split level 22: [/input, 1401] 
split level 23: [/input-8, 9] 
split level 24: [/input-8, 213] 
split level 25: [/input-8, 62] 
split level 26: [/input, 998] 
split level 27: [/input-8, 698] 
split level 28: [/input, 987] 
split level 29: [/input-8, 1829] 
split level 30: [/input, 908] 
split level 31: [/input-8, 884] 
split level 32: [/input-8, 838] 
split level 33: [/input, 924] 
split level 34: [/input, 3815] 
split level 35: [/input, 2603] 
split level 36: [/input-8, 155] 
split level 37: [/input-8, 1863] 
split level 38: [/input-8, 1921] 
split level 39: [/input-8, 870] 
split level 40: [/input-8, 94] 
split level 41: [/input-8, 86] 
split level 42: [/input, 1898] 
split level 43: [/input, 1148] 
split level 44: [/input-8, 1741] 
split level 45: [/input, 1378] 
split level 46: [/input-8, 1666] 
split level 47: [/input, 1179] 
split level 48: [/input-8, 1329] 
split level 49: [/input-8, 883] 
split level 50: [/input, 989] 
split level 51: [/input, 1431] 
split level 52: [/input, 534] 
split level 53: [/input, 581] 
split level 54: [/input, 2588] 
split level 55: [/input, 2110] 
split level 56: [/input, 2602] 
split level 57: [/input, 1211] 
split level 58: [/input, 874] 
split level 59: [/input, 1433] 
split level 60: [/input, 566] 
split level 61: [/input, 2025] 
split level 62: [/input, 988] 
split level 63: [/input-8, 41] 
split level 64: [/input, 2502] 
split level 65: [/input-8, 2] 
split level 66: [/input, 2028] 
split level 67: [/input, 2012] 
split level 68: [/input, 2140] 
split level 69: [/input-8, 217] 
split level 70: [/input, 817] 
split level 71: [/input, 1400] 
split level 72: [/input, 2534] 
split level 73: [/input, 37] 
split level 74: [/input, 939] 
split level 75: [/input, 2092] 
split level 76: [/input, 932] 
split level 77: [/input, 1017] 
split level 78: [/input, 1001] 
split level 79: [/input, 1195] 
split level 80: [/input, 909] 
split level 81: [/input-8, 1977] 
split level 82: [/input, 486] 
split level 83: [/input-8, 211] 
split level 84: [/input, 1146] 
split level 85: [/input, 488] 
split level 86: [/input-8, 893] 
split level 87: [/input, 2326] 
split level 88: [/input, 2536] 
split level 89: [/input-8, 1513] 
split level 90: [/input, 1220] 
split level 91: [/input, 1003] 
split level 92: [/input-8, 1303] 
split level 93: [/input, 931] 
split level 94: [/input, 2790] 
split level 95: [/input-8, 1321] 
split level 96: [/input-8, 914] 
split level 97: [/input, 1134] 
split level 98: [/input, 964] 
split level 99: [/input-8, 1982] 
split level 100: [/input, 1915] 
split level 101: [/input, 1447] 
split level 102: [/input, 1019] 
split level 103: [/input, 1002] 
split level 104: [/input, 3992] 
split level 105: [/input, 781] 
split level 106: [/input, 1154] 
split level 107: [/input, 925] 
split level 108: [/input, 489] 
split level 109: [/input, 972] 
split level 110: [/input, 1417] 
split level 111: [/input, 1897] 
split level 112: [/input, 483] 
split level 113: [/input, 725] 
split level 114: [/input, 1108] 
split level 115: [/input, 897] 
split level 116: [/input, 889] 
split level 117: [/input, 468] 
split level 118: [/input, 947] 
split level 119: [/input, 1260] 
split level 120: [/input, 2307] 
split level 121: [/input, 969] 
split level 122: [/input, 3781] 
split level 123: [/input, 980] 
split level 124: [/input-8, 13] 
split level 125: [/input, 910] 
split level 126: [/input, 1095] 
split level 127: [/input, 1004] 
split level 128: [/input, 1463] 
split level 129: [/input, 1188] 
split level 130: [/input, 926] 
split level 131: [/input, 2322] 
split level 132: [/input, 1273] 
split level 133: [/input, 798] 
split level 134: [/input, 1258] 
split level 135: [/input, 986] 
split level 136: [/input, 2590] 
split level 137: [/input, 2042] 
split level 138: [/input, 2029] 
split level 139: [/input, 974] 
split level 140: [/input, 484] 
split level 141: [/input, 1005] 
split level 142: [/input, 854] 
split level 143: [/input, 856] 
split level 144: [/input, 792] 
split level 145: [/input, 1058] 
split level 146: [/input-8, 85] 
split level 147: [/input, 2353] 
split level 148: [/input, 1233] 
split level 149: [/input, 2280] 
split level 150: [/input, 1133] 
split level 151: [/input, 1416] 
split level 152: [/input, 786] 
split level 153: [/input, 963] 
split level 154: [/input, 857] 
split level 155: [/input, 1806] 
split level 156: [/input, 1165] 
split level 157: [/input-8, 862] 
split level 158: [/input, 796] 
split level 159: [/input, 2504] 
split level 160: [/input, 1080] 
split level 161: [/input, 958] 
split level 162: [/input, 481] 
split level 163: [/input-8, 346] 
split level 164: [/input, 979] 
split level 165: [/input-8, 1711] 
split level 166: [/input, 1348] 
split level 167: [/input, 741] 
split level 168: [/input, 1880] 
split level 169: [/input, 797] 
split level 170: [/input, 601] 
split level 171: [/input, 630] 
split level 172: [/input-8, 1981] 
split level 173: [/input, 2173] 
split level 174: [/input, 1114] 
split level 175: [/input, 1810] 
split level 176: [/input, 1020] 
split level 177: [/input, 2234] 
split level 178: [/input, 1057] 
split level 179: [/input, 870] 
split level 180: [/input, 4008] 
split level 181: [/input, 2417] 
split level 182: [/input, 1359] 
split level 183: [/input, 1850] 
split level 184: [/input, 286] 
split level 185: [/input, 1994] 
split level 186: [/input, 894] 
split level 187: [/input, 1205] 
split level 188: [/input, 1073] 
split level 189: [/input, 3769] 
split level 190: [/input, 296] 
split level 191: [/input, 1021] 
split level 192: [/input, 1242] 
split level 193: [/input, 1317] 
split level 194: [/input, 1202] 
split level 195: [/input, 1354] 
split level 196: [/input, 3639] 
split level 197: [/input, 3643] 
split level 198: [/input-8, 1257] 
split level 199: [/input, 1047] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04660916328430176
10 lb beta sum: 0.0, worst -0.04660916328430176
Time: prepare 0.0114    bound 0.1065    transfer 0.0024    finalize 0.0027    func 0.1257    
Accumulated time: func 0.1828    prepare 0.0219    bound 0.1631    transfer 0.0025    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01850271) min lb tensor(-0.04660845)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010617971420288086 
BICCOS Cumulative time: 0.010617971420288086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04421 (1), -0.04421 (1), -0.04406 (1), -0.04405 (1), -0.04394 (1), -0.04386 (1), -0.04382 (1), -0.04364 (1), -0.04358 (1), -0.04336 (1), -0.04331 (1), -0.04320 (1), -0.04320 (1), -0.04307 (1), -0.04302 (1), -0.04283 (1), -0.04282 (1), -0.04276 (1), -0.04270 (1), -0.04255 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5235    set_bounds 0.0102    solve 0.1258    add 0.0808    
Accumulated time: pickout 0.0004    decision 0.5235    set_bounds 0.0102    solve 0.1258    add 0.0808    
Current (lb-rhs): -0.04420733451843262
50 domains visited
Cumulative time: 0.8133511543273926

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] 
split level 1: [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] 
split level 2: [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] 
split level 3: [/input-8, 1116] [/input-8, 1116] [/input-8, 1139] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 217] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.043031930923461914
10 lb beta sum: 0.0, worst -0.043202877044677734
Time: prepare 0.0123    bound 0.1046    transfer 0.0008    finalize 0.0024    func 0.1228    
Accumulated time: func 0.3056    prepare 0.0344    bound 0.2677    transfer 0.0033    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01407886) min lb tensor(-0.04301190)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.012568473815917969 
BICCOS Cumulative time: 0.023186445236206055
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02643 (2), -0.02629 (2), -0.02622 (2), -0.02618 (2), -0.02596 (2), -0.02585 (2), -0.02582 (2), -0.02576 (2), -0.02568 (2), -0.02566 (2), -0.02560 (2), -0.02557 (2), -0.02554 (2), -0.02519 (2), -0.02486 (2), -0.02482 (2), -0.02482 (2), -0.02479 (2), -0.02470 (2), -0.02464 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0208    set_bounds 0.0152    solve 0.1229    add 0.0831    
Accumulated time: pickout 0.0015    decision 0.5443    set_bounds 0.0254    solve 0.2488    add 0.1639    
Current (lb-rhs): -0.02642536163330078
100 domains visited
Cumulative time: 1.0693385601043701

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 61] [/input-8, 653] [/input-8, 61] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 61] [/input-8, 653] 
split level 1: [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 61] [/input-8, 61] [/input-8, 61] [/input-8, 61] [/input-8, 1139] [/input-8, 1139] 
split level 2: [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1116] [/input-8, 1116] 
split level 3: [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1139] [/input-8, 1116] [/input, 2025] [/input, 2025] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025249719619750977
10 lb beta sum: 0.0, worst -0.025191068649291992
Time: prepare 0.0116    bound 0.1055    transfer 0.0008    finalize 0.0032    func 0.1239    
Accumulated time: func 0.4295    prepare 0.0463    bound 0.3733    transfer 0.0041    finalize 0.0085    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00966501) min lb tensor(-0.02515841)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.012492179870605469 
BICCOS Cumulative time: 0.03567862510681152
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01277 (3), -0.01272 (3), -0.01272 (3), -0.01268 (3), -0.01265 (3), -0.01265 (3), -0.01259 (3), -0.01251 (3), -0.01245 (3), -0.01240 (3), -0.01239 (3), -0.01235 (3), -0.01232 (3), -0.01232 (3), -0.01229 (3), -0.01228 (3), -0.01228 (3), -0.01228 (3), -0.01224 (3), -0.01224 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0204    set_bounds 0.0160    solve 0.1241    add 0.0830    
Accumulated time: pickout 0.0026    decision 0.5647    set_bounds 0.0413    solve 0.3729    add 0.2468    
Current (lb-rhs): -0.012766599655151367
150 domains visited
Cumulative time: 1.3266487121582031

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1102] [/input-8, 61] [/input-8, 653] [/input-8, 1102] [/input-8, 61] [/input-8, 1102] [/input-8, 1102] [/input-8, 653] [/input-8, 653] [/input-8, 1102] 
split level 1: [/input-8, 1525] [/input-8, 1525] [/input-8, 1116] [/input-8, 1525] [/input-8, 1525] [/input-8, 61] [/input-8, 61] [/input-8, 1102] [/input-8, 61] [/input-8, 61] 
split level 2: [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1116] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] 
split level 3: [/input-8, 1116] [/input-8, 1116] [/input, 2406] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.011751890182495117
10 lb beta sum: 0.0, worst -0.01154470443725586
Time: prepare 0.0115    bound 0.1051    transfer 0.0012    finalize 0.0023    func 0.1228    
Accumulated time: func 0.5524    prepare 0.0581    bound 0.4783    transfer 0.0053    finalize 0.0108    
all_split False
======================Cut inference begins======================
max lb tensor(0.00105762) min lb tensor(-0.01134443)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.013645410537719727 
BICCOS Cumulative time: 0.04932403564453125
Preprocessing time: 0.012557268142700195 Inference time: 0.0006327629089355469 Add cuts time: 0.00010824203491210938 Cut analysis time: 0.000347137451171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00714 (4), -0.00712 (4), -0.00712 (4), -0.00707 (4), -0.00705 (4), -0.00705 (4), -0.00703 (4), -0.00700 (4), -0.00700 (4), -0.00698 (4), -0.00698 (4), -0.00697 (4), -0.00697 (4), -0.00696 (4), -0.00696 (4), -0.00689 (4), -0.00687 (4), -0.00683 (4), -0.00682 (4), -0.00680 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0201    set_bounds 0.0162    solve 0.1230    add 0.2602    
Accumulated time: pickout 0.0036    decision 0.5848    set_bounds 0.0575    solve 0.4958    add 0.5070    
Current (lb-rhs): -0.007143974304199219
200 domains visited
Cumulative time: 1.7610747814178467

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 956] [/input-8, 653] [/input-8, 653] [/input-8, 956] [/input-8, 61] [/input-8, 1102] [/input-8, 653] [/input-8, 61] [/input-8, 61] [/input-8, 653] 
split level 1: [/input-8, 1525] [/input-8, 1525] [/input-8, 956] [/input-8, 1525] [/input-8, 1116] [/input-8, 1525] [/input-8, 956] [/input-8, 956] [/input-8, 956] [/input-8, 956] 
split level 2: [/input-8, 1116] [/input-8, 1139] [/input-8, 1525] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] 
split level 3: [/input-8, 1139] [/input, 2406] [/input-8, 1139] [/input-8, 1116] [/input, 2406] [/input-8, 1139] [/input-8, 1116] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006295204162597656
10 lb beta sum: 0.0, worst -0.006029844284057617
Time: prepare 0.0062    bound 0.1416    transfer 0.0020    finalize 0.0022    func 0.1546    
Accumulated time: func 0.7070    prepare 0.0646    bound 0.6199    transfer 0.0072    finalize 0.0129    
all_split False
======================Cut inference begins======================
max lb tensor(0.00261116) min lb tensor(-0.00584269)
Number of Verified Splits: 11 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.014576196670532227 
BICCOS Cumulative time: 0.06390023231506348
Preprocessing time: 0.012245416641235352 Inference time: 0.0006668567657470703 Add cuts time: 0.00046515464782714844 Cut analysis time: 0.0011987686157226562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00147 (5), -0.00146 (5), -0.00146 (5), -0.00145 (5), -0.00145 (5), -0.00143 (5), -0.00142 (5), -0.00141 (5), -0.00140 (5), -0.00138 (5), -0.00137 (5), -0.00135 (5), -0.00134 (5), -0.00134 (5), -0.00133 (5), -0.00131 (5), -0.00130 (5), -0.00130 (5), -0.00129 (5), -0.00129 (5), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0200    set_bounds 0.0166    solve 0.1548    add 0.0916    
Accumulated time: pickout 0.0048    decision 0.6048    set_bounds 0.0741    solve 0.6506    add 0.5986    
Current (lb-rhs): -0.0014688968658447266
250 domains visited
Cumulative time: 2.0601558685302734

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.23893409e-14, 1.68089732e-03, 2.38542422e-03]), tensor([0, 1, 2])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1., -1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.23893409e-14, 1.68089732e-03, 4.37455019e-03, 5.91401896e-03,
        5.70611795e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1., -1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.23893409e-14, 1.68089732e-03, 4.37455019e-03, 5.91401896e-03,
        1.60007342e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.23893409e-14, 1.68089732e-03, 4.37455019e-03, 1.49540766e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.23893409e-14, 4.42485651e-03, 2.42667063e-03, 5.29317698e-03,
        5.84297022e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.23893409e-14, 4.42485651e-03, 2.42667063e-03, 5.29317698e-03,
        1.39789446e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.23893409e-14, 4.42485651e-03, 2.42667063e-03, 1.55954226e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.23893409e-14, 4.42485651e-03, 4.41484293e-03, 5.30605158e-03,
        5.08622965e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.23893409e-14, 4.42485651e-03, 4.41484293e-03, 5.30605158e-03,
        1.44629343e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.23893409e-14, 4.42485651e-03, 4.41484293e-03, 1.57313212e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316]), tensor([1.]), tensor([0]), tensor([1.23893409e-14]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  11
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04640817642211914
10 lb beta sum: 0.0003580936754588038, worst -0.046407222747802734
Time: prepare 0.0006    bound 0.1386    transfer 0.0002    finalize 0.0002    func 0.1397    
Accumulated time: func 0.8467    prepare 0.0651    bound 0.7586    transfer 0.0074    finalize 0.0132    
After pruning, left:  11

Back to Regular BaB

BaB round 1
batch: 11
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1102] [/input-8, 226] [/input-8, 226] [/input-8, 956] [/input-8, 226] [/input-8, 226] [/input-8, 956] [/input-8, 226] [/input-8, 226] [/input-8, 956] 
split level 1: [/input-8, 956] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] 
split level 2: [/input-8, 1525] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] 
split level 3: [/input-8, 1139] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] 
split level 4: [/input-8, 1116] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.000104702623502817, worst -0.03746938705444336
10 lb beta sum: 0.000104702623502817, worst -0.03745532035827637
Time: prepare 0.0134    bound 0.1432    transfer 0.0015    finalize 0.0021    func 0.1626    
Accumulated time: func 1.0093    prepare 0.0789    bound 0.9017    transfer 0.0089    finalize 0.0152    
all_split False
======================Cut inference begins======================
max lb tensor(0.01090055) min lb tensor(-0.03744960)
Number of Verified Splits: 254 of 352
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.00014509969332721084, worst -0.03181576728820801
10 lb beta sum: 0.00014105983427725732, worst -0.006732940673828125
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 4-6: 12
#cuts 7-9: 25
#cuts >= 20: 0
BICCOS time: 0.3077826499938965 
BICCOS Cumulative time: 0.37168288230895996
Preprocessing time: 0.009142637252807617 Inference time: 0.2868385314941406 Add cuts time: 0.009569168090820312 Cut analysis time: 0.0022323131561279297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03745 (5), -0.03743 (5), -0.03706 (5), -0.03704 (5), -0.03671 (5), -0.03670 (5), -0.03633 (5), -0.03631 (5), -0.03568 (5), -0.03566 (5), -0.03524 (5), -0.03522 (5), -0.03471 (5), -0.03471 (5), -0.03469 (5), -0.03468 (5), -0.03431 (5), -0.03429 (5), -0.03428 (5), -0.03427 (5), 
Length of domains: 98
Time: pickout 0.0006    decision 0.0168    set_bounds 0.0233    solve 0.1628    add 0.0015    
Accumulated time: pickout 0.0055    decision 0.6215    set_bounds 0.0974    solve 0.8134    add 0.6001    
Current (lb-rhs): -0.03744959831237793
348 domains visited
Cumulative time: 2.7396740913391113

BaB round 2
batch: 98
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1102] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 1102] [/input-8, 226] [/input-8, 1102] [/input-8, 226] [/input-8, 226] [/input-8, 226] 
split level 1: [/input-8, 956] [/input-8, 213] [/input-8, 698] [/input-8, 9] [/input-8, 956] [/input-8, 213] [/input-8, 956] [/input-8, 213] [/input-8, 698] [/input-8, 9] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03559470176696777
10 lb beta sum: 0.0, worst -0.035593271255493164
Time: prepare 0.0058    bound 0.1460    transfer 0.0008    finalize 0.0021    func 0.1574    
Accumulated time: func 1.1667    prepare 0.0848    bound 1.0477    transfer 0.0097    finalize 0.0173    
all_split False
======================Cut inference begins======================
max lb tensor(0.00428867) min lb tensor(-0.03559208)
Number of Verified Splits: 220 of 392
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 4
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.038196563720703125 
BICCOS Cumulative time: 0.4098794460296631
Preprocessing time: 0.012053966522216797 Inference time: 0.022693157196044922 Add cuts time: 0.0028281211853027344 Cut analysis time: 0.0006213188171386719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03559 (7), -0.03557 (7), -0.03522 (7), -0.03520 (7), -0.03479 (7), -0.03477 (7), -0.03443 (7), -0.03441 (7), -0.03377 (7), -0.03375 (7), -0.03335 (7), -0.03333 (7), -0.03277 (7), -0.03275 (7), -0.03273 (7), -0.03273 (7), -0.03240 (7), -0.03236 (7), -0.03235 (7), -0.03233 (7), 
Length of domains: 172
Time: pickout 0.0019    decision 0.0204    set_bounds 0.0193    solve 0.1576    add 0.0053    
Accumulated time: pickout 0.0074    decision 0.6420    set_bounds 0.1167    solve 0.9710    add 0.6054    
Current (lb-rhs): -0.035592079162597656
520 domains visited
Cumulative time: 2.9840216636657715

BaB round 3
batch: 172
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 1099] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 1099] [/input-8, 226] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.034323930740356445
10 lb beta sum: 0.001720706350170076, worst -0.034323692321777344
Time: prepare 0.0051    bound 0.1453    transfer 0.0008    finalize 0.0020    func 0.1556    
Accumulated time: func 1.3224    prepare 0.0902    bound 1.1930    transfer 0.0105    finalize 0.0194    
all_split False
======================Cut inference begins======================
max lb tensor(0.00417995) min lb tensor(-0.03432274)
Number of Verified Splits: 66 of 344
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 1
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.019238710403442383 
BICCOS Cumulative time: 0.42911815643310547
Preprocessing time: 0.010528564453125 Inference time: 0.006757259368896484 Add cuts time: 0.0008096694946289062 Cut analysis time: 0.0011432170867919922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03432 (8), -0.03430 (8), -0.03395 (8), -0.03393 (8), -0.03352 (8), -0.03350 (8), -0.03316 (8), -0.03314 (8), -0.03250 (8), -0.03248 (8), -0.03208 (8), -0.03206 (8), -0.03174 (8), -0.03174 (8), -0.03149 (8), -0.03148 (8), -0.03145 (8), -0.03145 (8), -0.03137 (8), -0.03137 (8), 
Length of domains: 278
Time: pickout 0.0032    decision 0.0220    set_bounds 0.0157    solve 0.1558    add 0.0047    
Accumulated time: pickout 0.0105    decision 0.6640    set_bounds 0.1324    solve 1.1267    add 0.6101    
Current (lb-rhs): -0.03432273864746094
798 domains visited
Cumulative time: 3.205648183822632

BaB round 4
batch: 278
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 9] [/input-8, 9] [/input-8, 213] [/input-8, 1325] [/input-8, 213] [/input-8, 9] [/input-8, 9] [/input-8, 213] [/input-8, 1325] [/input-8, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03326082229614258
10 lb beta sum: 0.011259724386036396, worst -0.033257484436035156
Time: prepare 0.0082    bound 0.1465    transfer 0.0017    finalize 0.0038    func 0.1639    
Accumulated time: func 1.4862    prepare 0.0987    bound 1.3395    transfer 0.0122    finalize 0.0232    
all_split False
======================Cut inference begins======================
max lb tensor(0.00181079) min lb tensor(-0.03325438)
Number of Verified Splits: 24 of 556
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 1
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.020637035369873047 
BICCOS Cumulative time: 0.4497551918029785
Preprocessing time: 0.016297340393066406 Inference time: 0.0025730133056640625 Add cuts time: 0.0005059242248535156 Cut analysis time: 0.0012607574462890625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03325 (9), -0.03276 (9), -0.03246 (9), -0.03241 (9), -0.03238 (9), -0.03237 (9), -0.03209 (9), -0.03208 (9), -0.03203 (9), -0.03199 (9), -0.03196 (9), -0.03161 (9), -0.03160 (9), -0.03125 (9), -0.03120 (9), -0.03094 (9), -0.03093 (9), -0.03083 (9), -0.03064 (9), -0.03059 (9), 
Length of domains: 532
Time: pickout 0.0032    decision 0.0272    set_bounds 0.0245    solve 0.1641    add 0.0074    
Accumulated time: pickout 0.0137    decision 0.6912    set_bounds 0.1569    solve 1.2908    add 0.6176    
Current (lb-rhs): -0.033254384994506836
1330 domains visited
Cumulative time: 3.4543991088867188

BaB round 5
batch: 532
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1099] [/input-8, 9] [/input, 547] [/input-8, 9] [/input-8, 1099] [/input-8, 1099] [/input-8, 9] [/input, 547] [/input-8, 9] 
cut re-enabled after branching node selection
0 lb beta sum: 0.009041661396622658, worst -0.03272867202758789
10 lb beta sum: 0.009167223237454891, worst -0.034530412405729294
Time: prepare 0.0417    bound 0.1568    transfer 0.0039    finalize 0.0063    func 0.2160    
Accumulated time: func 1.7022    prepare 0.1406    bound 1.4963    transfer 0.0161    finalize 0.0295    
all_split False
======================Cut inference begins======================
max lb tensor(0.00321908) min lb tensor(-0.03271675)
Number of Verified Splits: 36 of 1064
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 1
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.03738880157470703 
BICCOS Cumulative time: 0.48714399337768555
Preprocessing time: 0.03258109092712402 Inference time: 0.003726482391357422 Add cuts time: 0.0004961490631103516 Cut analysis time: 0.0005850791931152344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03272 (10), -0.03222 (10), -0.03192 (10), -0.03187 (10), -0.03184 (10), -0.03183 (10), -0.03156 (10), -0.03154 (10), -0.03150 (10), -0.03144 (10), -0.03142 (10), -0.03108 (10), -0.03106 (10), -0.03071 (10), -0.03064 (10), -0.03029 (10), -0.02989 (10), -0.02987 (10), -0.02986 (10), -0.02985 (10), 
Length of domains: 1028
Time: pickout 0.0084    decision 0.0420    set_bounds 0.0464    solve 0.2173    add 0.0072    
Accumulated time: pickout 0.0221    decision 0.7332    set_bounds 0.2033    solve 1.5081    add 0.6247    
Current (lb-rhs): -0.03271675109863281
2358 domains visited
Cumulative time: 3.8146510124206543

BaB round 6
batch: 1028
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1325] [/input-8, 1325] [/input-8, 1099] [/input-8, 1099] [/input-8, 1325] [/input-8, 1325] [/input-8, 1099] [/input-8, 1099] [/input-8, 1325] [/input-8, 1325] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0010590165620669723, worst -0.03133201599121094
10 lb beta sum: 0.0012649878626689315, worst -0.031330108642578125
Time: prepare 0.0809    bound 0.2170    transfer 0.0086    finalize 0.0164    func 0.3377    
Accumulated time: func 2.0399    prepare 0.2217    bound 1.7133    transfer 0.0247    finalize 0.0459    
all_split False
======================Cut inference begins======================
max lb tensor(0.00182672) min lb tensor(-0.03132868)
Number of Verified Splits: 8 of 2056
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 1
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.06643176078796387 
BICCOS Cumulative time: 0.5535757541656494
Preprocessing time: 0.06448030471801758 Inference time: 0.0009629726409912109 Add cuts time: 0.0003523826599121094 Cut analysis time: 0.0006361007690429688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03133 (11), -0.03132 (11), -0.03115 (11), -0.03114 (11), -0.03107 (11), -0.03103 (11), -0.03098 (11), -0.03085 (11), -0.03081 (11), -0.03058 (11), -0.03035 (11), -0.03034 (11), -0.03024 (11), -0.03007 (11), -0.03002 (11), -0.02988 (11), -0.02986 (11), -0.02979 (11), -0.02958 (11), -0.02956 (11), 
Length of domains: 2048
Time: pickout 0.0128    decision 0.2448    set_bounds 0.0915    solve 0.3385    add 0.0182    
Accumulated time: pickout 0.0350    decision 0.9780    set_bounds 0.2948    solve 1.8465    add 0.6429    
Current (lb-rhs): -0.031328678131103516
4406 domains visited
Cumulative time: 4.5895161628723145

BaB round 7
batch: 2048
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 547] [/input, 547] [/input-8, 1325] [/input-8, 1325] [/input, 547] [/input, 547] [/input-8, 1325] [/input-8, 1325] [/input, 547] [/input, 547] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0001343846961390227, worst -0.031175613403320312
10 lb beta sum: 0.0004094149044249207, worst -0.031174898147583008
Time: prepare 0.1786    bound 0.3665    transfer 0.0177    finalize 0.0217    func 0.6131    
Accumulated time: func 2.6530    prepare 0.4007    bound 2.0798    transfer 0.0424    finalize 0.0676    
all_split False
======================Cut inference begins======================
max lb tensor(0.00271988) min lb tensor(-0.03117371)
Number of Verified Splits: 53 of 4096
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 1
#cuts 4-6: 5
#cuts 7-9: 8
#cuts >= 20: 0
BICCOS time: 0.1392512321472168 
BICCOS Cumulative time: 0.6928269863128662
Preprocessing time: 0.12932538986206055 Inference time: 0.007450103759765625 Add cuts time: 0.0012972354888916016 Cut analysis time: 0.0011785030364990234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03117 (12), -0.03116 (12), -0.03090 (12), -0.03087 (12), -0.03083 (12), -0.03063 (12), -0.03062 (12), -0.03043 (12), -0.03033 (12), -0.03029 (12), -0.03008 (12), -0.02987 (12), -0.02985 (12), -0.02974 (12), -0.02956 (12), -0.02953 (12), -0.02937 (12), -0.02933 (12), -0.02904 (12), -0.02901 (12), 
Length of domains: 4043
Time: pickout 0.0324    decision 0.1269    set_bounds 0.3437    solve 0.6140    add 0.0243    
Accumulated time: pickout 0.0673    decision 1.1049    set_bounds 0.6384    solve 2.4606    add 0.6672    
Current (lb-rhs): -0.0311737060546875
8449 domains visited
Cumulative time: 5.875082492828369

BaB round 8
batch: 4043
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 213] [/input-8, 213] [/input, 547] [/input, 547] [/input-8, 213] [/input-8, 213] [/input, 547] [/input, 547] [/input-8, 213] [/input-8, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030465126037597656
10 lb beta sum: 0.00024098328140098602, worst -0.03046393394470215
Time: prepare 0.1743    bound 0.6621    transfer 0.0277    finalize 0.0454    func 0.9636    
Accumulated time: func 3.6166    prepare 0.5754    bound 2.7419    transfer 0.0701    finalize 0.1130    
all_split False
======================Cut inference begins======================
max lb tensor(0.00337386) min lb tensor(-0.03046250)
Number of Verified Splits: 301 of 8086
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 1
#cuts 4-6: 5
#cuts 7-9: 28
#cuts >= 20: 0
BICCOS time: 0.3158574104309082 
BICCOS Cumulative time: 1.0086843967437744
Preprocessing time: 0.2595398426055908 Inference time: 0.04883456230163574 Add cuts time: 0.005168437957763672 Cut analysis time: 0.0023145675659179688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03046 (13), -0.03045 (13), -0.03016 (13), -0.03012 (13), -0.03009 (13), -0.03008 (13), -0.02979 (13), -0.02975 (13), -0.02969 (13), -0.02968 (13), -0.02940 (13), -0.02937 (13), -0.02934 (13), -0.02932 (13), -0.02930 (13), -0.02928 (13), -0.02904 (13), -0.02901 (13), -0.02900 (13), -0.02896 (13), 
Length of domains: 7785
Time: pickout 0.0473    decision 0.2313    set_bounds 0.4883    solve 0.9661    add 0.0596    
Accumulated time: pickout 0.1146    decision 1.3362    set_bounds 1.1268    solve 3.4266    add 0.7268    
Current (lb-rhs): -0.03046250343322754
16234 domains visited
Cumulative time: 7.994643926620483

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1] [/input-8, 1] [/input-8, 698] [/input-8, 698] [/input-8, 1] [/input-8, 1] [/input-8, 698] [/input-8, 698] [/input-8, 1] [/input-8, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02936720848083496
10 lb beta sum: 0.00027073395904153585, worst -0.030355380848050117
Time: prepare 0.1827    bound 0.6713    transfer 0.0190    finalize 0.2844    func 1.2124    
Accumulated time: func 4.8291    prepare 0.7585    bound 3.4132    transfer 0.0891    finalize 0.3974    
all_split False
======================Cut inference begins======================
max lb tensor(0.00342584) min lb tensor(-0.02936697)
Number of Verified Splits: 336 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 1
#cuts 4-6: 7
#cuts 7-9: 35
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.3347148895263672 
BICCOS Cumulative time: 1.3433992862701416
Preprocessing time: 0.2616860866546631 Inference time: 0.06210970878601074 Add cuts time: 0.008104562759399414 Cut analysis time: 0.0028145313262939453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02937 (14), -0.02936 (14), -0.02907 (14), -0.02904 (13), -0.02902 (14), -0.02902 (14), -0.02901 (14), -0.02894 (13), -0.02893 (13), -0.02872 (14), -0.02868 (14), -0.02865 (13), -0.02862 (13), -0.02860 (14), -0.02859 (14), -0.02836 (14), -0.02835 (14), -0.02830 (14), -0.02827 (14), -0.02827 (14), 
Length of domains: 11545
Time: pickout 0.0528    decision 0.4302    set_bounds 0.3647    solve 1.2148    add 0.0330    
Accumulated time: pickout 0.1675    decision 1.7664    set_bounds 1.4915    solve 4.6414    add 0.7599    
Current (lb-rhs): -0.02936697006225586
24090 domains visited
current_vram/total_varm: 12.6GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.439655303955078

BaB round 10
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input, 547] [/input, 547] [/input-8, 698] [/input-8, 698] [/input, 547] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028751611709594727
10 lb beta sum: 0.0002578006824478507, worst -0.028751850128173828
Time: prepare 0.6333    bound 1.2863    transfer 0.0836    finalize 0.0968    func 2.2115    
Accumulated time: func 7.0406    prepare 1.3922    bound 4.6995    transfer 0.1726    finalize 0.4942    
all_split False
======================Cut inference begins======================
max lb tensor(0.00352669) min lb tensor(-0.02875090)
Number of Verified Splits: 1061 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 81.
#cuts 1-3: 1
#cuts 4-6: 8
#cuts 7-9: 69
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.7520608901977539 
BICCOS Cumulative time: 2.0954601764678955
Preprocessing time: 0.5339407920837402 Inference time: 0.19002246856689453 Add cuts time: 0.023366689682006836 Cut analysis time: 0.004730939865112305
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02875 (15), -0.02874 (15), -0.02845 (15), -0.02841 (15), -0.02840 (15), -0.02839 (15), -0.02810 (15), -0.02806 (15), -0.02806 (14), -0.02798 (15), -0.02797 (15), -0.02797 (14), -0.02786 (14), -0.02786 (14), -0.02774 (15), -0.02773 (15), -0.02768 (15), -0.02768 (15), -0.02766 (15), -0.02765 (15), 
Length of domains: 18676
Time: pickout 0.1067    decision 0.4645    set_bounds 1.0032    solve 2.2147    add 0.0609    
Accumulated time: pickout 0.2741    decision 2.2310    set_bounds 2.4947    solve 6.8561    add 0.8207    
Current (lb-rhs): -0.028750896453857422
39413 domains visited
current_vram/total_varm: 22.1GB/99.9GB, batch_size increase to 16384
Cumulative time: 15.071689128875732

BaB round 11
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1] [/input, 3815] [/input, 3815] [/input-8, 1] [/input-8, 1] [/input, 3815] [/input, 3815] [/input-8, 1] [/input-8, 1] [/input, 3815] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027894973754882812
10 lb beta sum: 0.0002517994144000113, worst -0.029500961303710938
Time: prepare 0.7438    bound 2.5532    transfer 0.1723    finalize 0.1853    func 4.2476    
Accumulated time: func 11.2882    prepare 2.1365    bound 7.2528    transfer 0.3449    finalize 0.6795    
all_split False
======================Cut inference begins======================
max lb tensor(0.00353193) min lb tensor(-0.02789378)
Number of Verified Splits: 2519 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 173.
#cuts 1-3: 1
#cuts 4-6: 11
#cuts 7-9: 154
#cuts 10-12: 7
#cuts >= 20: 0
BICCOS time: 1.640045404434204 
BICCOS Cumulative time: 3.7355055809020996
Preprocessing time: 1.094470500946045 Inference time: 0.4549248218536377 Add cuts time: 0.0803680419921875 Cut analysis time: 0.010282039642333984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02789 (16), -0.02774 (15), -0.02773 (15), -0.02760 (16), -0.02759 (16), -0.02755 (16), -0.02754 (16), -0.02753 (16), -0.02744 (15), -0.02742 (15), -0.02735 (15), -0.02735 (15), -0.02734 (15), -0.02734 (15), -0.02733 (15), -0.02724 (16), -0.02720 (16), -0.02712 (16), -0.02712 (16), -0.02708 (16), 
Length of domains: 32541
Time: pickout 0.2166    decision 1.9557    set_bounds 2.2185    solve 4.2527    add 0.1058    
Accumulated time: pickout 0.4907    decision 4.1866    set_bounds 4.7131    solve 11.1088    add 0.9266    
Current (lb-rhs): -0.027893781661987305
69662 domains visited
Cumulative time: 25.537989854812622

BaB round 12
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1] [/input-8, 1] [/input-8, 1829] [/input-8, 1829] [/input-8, 1] [/input-8, 1] [/input-8, 62] [/input-8, 62] [/input-8, 1] [/input-8, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026883840560913086
10 lb beta sum: 0.0002319704508408904, worst -0.027019739151000977
Time: prepare 0.7490    bound 2.7238    transfer 0.1649    finalize 0.2088    func 4.5595    
Accumulated time: func 15.8477    prepare 2.8861    bound 9.9765    transfer 0.5098    finalize 0.8883    
all_split False
======================Cut inference begins======================
max lb tensor(0.00357681) min lb tensor(-0.02688050)
Number of Verified Splits: 3622 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 358.
#cuts 1-3: 1
#cuts 4-6: 14
#cuts 7-9: 316
#cuts 10-12: 27
#cuts >= 20: 0
BICCOS time: 1.9627647399902344 
BICCOS Cumulative time: 5.698270320892334
Preprocessing time: 1.0765695571899414 Inference time: 0.6401536464691162 Add cuts time: 0.22424864768981934 Cut analysis time: 0.021792888641357422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02789 (16), -0.02760 (16), -0.02755 (16), -0.02754 (16), -0.02753 (16), -0.02744 (15), -0.02735 (15), -0.02734 (15), -0.02733 (15), -0.02724 (16), -0.02720 (16), -0.02712 (16), -0.02712 (16), -0.02708 (16), -0.02703 (15), -0.02699 (15), -0.02688 (16), -0.02683 (16), -0.02682 (16), -0.02681 (16), 
Length of domains: 45303
Time: pickout 0.2194    decision 1.8255    set_bounds 2.0231    solve 4.5651    add 0.1692    
Accumulated time: pickout 0.7101    decision 6.0121    set_bounds 6.7363    solve 15.6739    add 1.0957    
Current (lb-rhs): -0.027893781661987305
98808 domains visited
Cumulative time: 36.39346742630005

BaB round 13
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1829] [/input-8, 1829] [/input-8, 62] [/input-8, 62] [/input-8, 1829] [/input-8, 1829] [/input-8, 62] [/input-8, 62] [/input-8, 1829] [/input-8, 1829] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026889801025390625
10 lb beta sum: 0.0002839507651515305, worst -0.026890039443969727
Time: prepare 0.7399    bound 3.0143    transfer 0.1658    finalize 0.2209    func 4.3634    
Accumulated time: func 20.2112    prepare 3.6265    bound 12.9909    transfer 0.6756    finalize 1.1092    
all_split False
======================Cut inference begins======================
max lb tensor(0.00352812) min lb tensor(-0.02688861)
Number of Verified Splits: 3428 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 420.
#cuts 1-3: 1
#cuts 4-6: 16
#cuts 7-9: 365
#cuts 10-12: 38
#cuts >= 20: 0
BICCOS time: 2.7061245441436768 
BICCOS Cumulative time: 8.40439486503601
Preprocessing time: 1.122588872909546 Inference time: 1.2595162391662598 Add cuts time: 0.29885053634643555 Cut analysis time: 0.025168895721435547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02689 (17), -0.02688 (16), -0.02659 (17), -0.02659 (17), -0.02658 (16), -0.02655 (16), -0.02654 (17), -0.02654 (17), -0.02653 (17), -0.02650 (16), -0.02649 (16), -0.02648 (16), -0.02648 (16), -0.02647 (16), -0.02629 (16), -0.02624 (17), -0.02619 (17), -0.02619 (16), -0.02617 (16), -0.02614 (17), 
Length of domains: 58259
Time: pickout 0.2243    decision 1.9363    set_bounds 2.2276    solve 4.3700    add 0.1547    
Accumulated time: pickout 0.9344    decision 7.9484    set_bounds 8.9639    solve 20.0439    add 1.2505    
Current (lb-rhs): -0.026888608932495117
128148 domains visited
Cumulative time: 48.085994482040405

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 62] [/input-8, 1829] [/input-8, 1829] [/input-8, 62] [/input-8, 62] [/input-8, 1829] [/input-8, 1829] [/input-8, 62] [/input-8, 62] [/input-8, 1829] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025876283645629883
10 lb beta sum: 0.00021881413704250008, worst -0.026035785675048828
Time: prepare 0.7571    bound 3.1354    transfer 0.1648    finalize 0.2113    func 4.4911    
Accumulated time: func 24.7023    prepare 4.3841    bound 16.1263    transfer 0.8404    finalize 1.3205    
all_split False
======================Cut inference begins======================
max lb tensor(0.00368956) min lb tensor(-0.02587628)
Number of Verified Splits: 4073 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 3.3233110904693604 
BICCOS Cumulative time: 11.727705955505371
Preprocessing time: 1.1098263263702393 Inference time: 1.490506649017334 Add cuts time: 0.6814479827880859 Cut analysis time: 0.04153013229370117
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02689 (17), -0.02659 (17), -0.02659 (17), -0.02654 (17), -0.02654 (17), -0.02653 (17), -0.02650 (16), -0.02648 (16), -0.02647 (16), -0.02629 (16), -0.02624 (17), -0.02619 (17), -0.02617 (16), -0.02614 (17), -0.02613 (17), -0.02612 (16), -0.02608 (17), -0.02588 (17), -0.02584 (17), -0.02583 (16), 
Length of domains: 70570
Time: pickout 0.2262    decision 1.6379    set_bounds 2.3453    solve 4.4966    add 0.1540    
Accumulated time: pickout 1.1606    decision 9.5864    set_bounds 11.3092    solve 24.5405    add 1.4045    
Current (lb-rhs): -0.026888608932495117
156843 domains visited
Cumulative time: 60.375327825546265

BaB round 15
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 62] [/input-8, 62] [/input-8, 1829] [/input-8, 1829] [/input-8, 62] [/input-8, 62] [/input-8, 1829] [/input-8, 1829] [/input-8, 62] [/input-8, 62] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02595996856689453
10 lb beta sum: 0.0002700227196328342, worst -0.02595996856689453
Time: prepare 0.7568    bound 3.5640    transfer 0.1658    finalize 0.2235    func 4.9342    
Accumulated time: func 29.6365    prepare 5.1414    bound 19.6903    transfer 1.0062    finalize 1.5440    
all_split False
======================Cut inference begins======================
max lb tensor(0.00439480) min lb tensor(-0.02595901)
Number of Verified Splits: 4104 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 0.001516580581665039 
BICCOS Cumulative time: 11.729222536087036
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02689 (17), -0.02659 (17), -0.02654 (17), -0.02654 (17), -0.02653 (17), -0.02650 (16), -0.02648 (16), -0.02647 (16), -0.02624 (17), -0.02619 (17), -0.02617 (16), -0.02614 (17), -0.02613 (17), -0.02612 (16), -0.02608 (17), -0.02596 (18), -0.02588 (17), -0.02584 (17), -0.02583 (16), -0.02582 (16), 
Length of domains: 82850
Time: pickout 0.2321    decision 1.6428    set_bounds 2.5586    solve 4.9400    add 0.1070    
Accumulated time: pickout 1.3928    decision 11.2291    set_bounds 13.8678    solve 29.4805    add 1.5114    
Current (lb-rhs): -0.026888608932495117
185507 domains visited
Cumulative time: 69.93280482292175

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1829] [/input-8, 62] [/input-8, 62] [/input-8, 1829] [/input-8, 1829] [/input-8, 62] [/input-8, 62] [/input-8, 1829] [/input-8, 1829] [/input-8, 62] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02550983428955078
10 lb beta sum: 0.00026137198437936604, worst -0.02590489387512207
Time: prepare 0.7788    bound 3.5644    transfer 0.1614    finalize 0.2281    func 4.9534    
Accumulated time: func 34.5899    prepare 5.9206    bound 23.2547    transfer 1.1676    finalize 1.7722    
all_split False
======================Cut inference begins======================
max lb tensor(0.00460076) min lb tensor(-0.02550983)
Number of Verified Splits: 3516 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 0.001995563507080078 
BICCOS Cumulative time: 11.731218099594116
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02689 (17), -0.02659 (17), -0.02654 (17), -0.02654 (17), -0.02653 (17), -0.02624 (17), -0.02619 (17), -0.02614 (17), -0.02613 (17), -0.02608 (17), -0.02596 (18), -0.02588 (17), -0.02584 (17), -0.02581 (17), -0.02581 (17), -0.02581 (17), -0.02580 (17), -0.02579 (17), -0.02558 (17), -0.02555 (17), 
Length of domains: 95718
Time: pickout 0.2236    decision 1.6368    set_bounds 2.5956    solve 4.9609    add 0.1096    
Accumulated time: pickout 1.6164    decision 12.8660    set_bounds 16.4634    solve 34.4414    add 1.6211    
Current (lb-rhs): -0.026888608932495117
214759 domains visited
Cumulative time: 79.56075954437256

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 998] [/input-8, 62] [/input-8, 62] [/input-8, 54] [/input-8, 1829] [/input-8, 62] [/input-8, 62] [/input-8, 54] [/input-8, 54] [/input-8, 62] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02626323699951172
10 lb beta sum: 0.00023795251036062837, worst -0.030431155115365982
Time: prepare 0.7932    bound 3.5617    transfer 0.1612    finalize 1.0777    func 5.8148    
Accumulated time: func 40.4047    prepare 6.7144    bound 26.8164    transfer 1.3288    finalize 2.8498    
all_split False
======================Cut inference begins======================
max lb tensor(0.00741744) min lb tensor(-0.02626324)
Number of Verified Splits: 4342 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 0.001352071762084961 
BICCOS Cumulative time: 11.732570171356201
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02588 (17), -0.02560 (18), -0.02558 (17), -0.02556 (18), -0.02555 (17), -0.02551 (17), -0.02551 (18), -0.02550 (18), -0.02549 (17), -0.02548 (17), -0.02547 (17), -0.02546 (17), -0.02545 (18), -0.02529 (17), 
Length of domains: 107760
Time: pickout 0.2383    decision 2.4839    set_bounds 1.6431    solve 5.8203    add 0.0969    
Accumulated time: pickout 1.8547    decision 15.3499    set_bounds 18.1065    solve 40.2617    add 1.7180    
Current (lb-rhs): -0.02626323699951172
243185 domains visited
Cumulative time: 89.93485641479492

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1001] [/input, 1001] [/input-8, 1670] [/input-8, 1670] [/input-8, 838] [/input-8, 838] [/input, 3815] [/input, 3815] [/input, 1001] [/input, 1001] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024950265884399414
10 lb beta sum: 0.00018579003517515957, worst -0.025102853775024414
Time: prepare 0.7842    bound 3.5621    transfer 0.1612    finalize 0.2364    func 4.9672    
Accumulated time: func 45.3719    prepare 7.4990    bound 30.3785    transfer 1.4900    finalize 3.0862    
all_split False
======================Cut inference begins======================
max lb tensor(0.00821137) min lb tensor(-0.02495027)
Number of Verified Splits: 4640 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 0.0018208026885986328 
BICCOS Cumulative time: 11.7343909740448
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02588 (17), -0.02560 (18), -0.02556 (18), -0.02555 (17), -0.02551 (17), -0.02551 (18), -0.02550 (18), -0.02549 (17), -0.02548 (17), -0.02547 (17), -0.02546 (17), -0.02545 (18), -0.02529 (17), -0.02521 (18), 
Length of domains: 119504
Time: pickout 0.2309    decision 1.6456    set_bounds 2.6183    solve 4.9764    add 0.1301    
Accumulated time: pickout 2.0856    decision 16.9955    set_bounds 20.7248    solve 45.2380    add 1.8481    
Current (lb-rhs): -0.02626323699951172
271313 domains visited
Cumulative time: 99.64495420455933

BaB round 19
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] 
cut re-enabled after branching node selection
0 lb beta sum: 6.336442311294377e-05, worst -0.025251150131225586
10 lb beta sum: 0.00022799457656219602, worst -0.025409936904907227
Time: prepare 1.3246    bound 3.5630    transfer 0.1641    finalize 0.1989    func 5.4722    
Accumulated time: func 50.8441    prepare 8.8242    bound 33.9415    transfer 1.6542    finalize 3.2851    
all_split False
======================Cut inference begins======================
max lb tensor(0.00748873) min lb tensor(-0.02525115)
Number of Verified Splits: 4659 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 0.001373291015625 
BICCOS Cumulative time: 11.735764265060425
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02560 (18), -0.02556 (18), -0.02551 (17), -0.02551 (18), -0.02550 (18), -0.02547 (17), -0.02546 (17), -0.02545 (18), -0.02529 (17), -0.02525 (18), -0.02521 (18), -0.02519 (18), -0.02518 (18), -0.02518 (18), 
Length of domains: 131229
Time: pickout 0.2481    decision 1.6637    set_bounds 2.6713    solve 5.4788    add 0.1007    
Accumulated time: pickout 2.3337    decision 18.6592    set_bounds 23.3961    solve 50.7168    add 1.9488    
Current (lb-rhs): -0.02626323699951172
299422 domains visited
Cumulative time: 109.91269731521606

BaB round 20
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1017] [/input-8, 1670] [/input-8, 62] [/input-8, 62] [/input, 1017] [/input-8, 1829] [/input-8, 62] [/input-8, 1829] [/input-8, 1670] [/input-8, 62] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00011297505261609331, worst -0.025307655334472656
10 lb beta sum: 0.0002666182699613273, worst -0.025308847427368164
Time: prepare 2.6115    bound 3.5619    transfer 0.1642    finalize 0.2269    func 6.7866    
Accumulated time: func 57.6307    prepare 11.4363    bound 37.5034    transfer 1.8184    finalize 3.5120    
all_split False
======================Cut inference begins======================
max lb tensor(0.00742340) min lb tensor(-0.02530766)
Number of Verified Splits: 4326 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 0.0017578601837158203 
BICCOS Cumulative time: 11.73752212524414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02560 (18), -0.02556 (18), -0.02551 (17), -0.02551 (18), -0.02550 (18), -0.02547 (17), -0.02546 (17), -0.02545 (18), -0.02531 (19), -0.02525 (18), -0.02521 (18), -0.02519 (18), -0.02518 (18), -0.02518 (18), -0.02517 (18), 
Length of domains: 143287
Time: pickout 0.2339    decision 1.6430    set_bounds 1.6484    solve 6.7947    add 0.1201    
Accumulated time: pickout 2.5676    decision 20.3021    set_bounds 25.0445    solve 57.5116    add 2.0689    
Current (lb-rhs): -0.02626323699951172
327864 domains visited
Cumulative time: 120.45987963676453

BaB round 21
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] 
cut re-enabled after branching node selection
0 lb beta sum: 9.315276111010462e-05, worst -0.02402782440185547
10 lb beta sum: 0.0002587611961644143, worst -0.024096012115478516
Time: prepare 1.5418    bound 3.5668    transfer 0.1610    finalize 1.4064    func 6.8969    
Accumulated time: func 64.5275    prepare 12.9786    bound 41.0701    transfer 1.9793    finalize 4.9184    
all_split False
======================Cut inference begins======================
max lb tensor(0.00719929) min lb tensor(-0.02402258)
Number of Verified Splits: 4772 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 0.0013515949249267578 
BICCOS Cumulative time: 11.738873720169067
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02560 (18), -0.02556 (18), -0.02551 (17), -0.02551 (18), -0.02550 (18), -0.02547 (17), -0.02546 (17), -0.02545 (18), -0.02531 (19), -0.02525 (18), -0.02521 (18), -0.02519 (18), -0.02518 (18), -0.02518 (18), -0.02517 (18), 
Length of domains: 154899
Time: pickout 0.2403    decision 1.6610    set_bounds 1.5969    solve 6.9037    add 0.0949    
Accumulated time: pickout 2.8078    decision 21.9632    set_bounds 26.6414    solve 64.4152    add 2.1638    
Current (lb-rhs): -0.02626323699951172
355860 domains visited
Cumulative time: 131.05721950531006

BaB round 22
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1829] [/input-8, 1829] [/input-8, 1670] [/input-8, 62] [/input-8, 1829] [/input-8, 1829] [/input-8, 1670] [/input-8, 1670] [/input, 998] [/input, 998] 
cut re-enabled after branching node selection
0 lb beta sum: 9.944073099177331e-05, worst -0.02487659454345703
10 lb beta sum: 0.0002715814916882664, worst -0.024921417236328125
Time: prepare 1.5440    bound 3.5613    transfer 0.1654    finalize 0.2128    func 7.0266    
Accumulated time: func 71.5541    prepare 14.5231    bound 44.6315    transfer 2.1448    finalize 5.1312    
all_split False
======================Cut inference begins======================
max lb tensor(0.00531602) min lb tensor(-0.02487659)
Number of Verified Splits: 3840 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 0.001316070556640625 
BICCOS Cumulative time: 11.740189790725708
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02560 (18), -0.02556 (18), -0.02551 (18), -0.02550 (18), -0.02545 (18), -0.02531 (19), -0.02525 (18), -0.02521 (18), -0.02519 (18), -0.02518 (18), -0.02518 (18), -0.02517 (18), -0.02517 (18), -0.02495 (18), -0.02491 (18), 
Length of domains: 167443
Time: pickout 0.2327    decision 1.6419    set_bounds 1.6317    solve 7.0326    add 0.1075    
Accumulated time: pickout 3.0405    decision 23.6051    set_bounds 28.2731    solve 71.4479    add 2.2713    
Current (lb-rhs): -0.02626323699951172
384788 domains visited
Cumulative time: 141.78106021881104

BaB round 23
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 838] [/input-8, 838] [/input-8, 54] [/input-8, 54] [/input, 1001] [/input, 1001] [/input-8, 54] [/input-8, 54] [/input, 1001] [/input, 1001] 
cut re-enabled after branching node selection
0 lb beta sum: 6.696223863400519e-05, worst -0.02382373809814453
10 lb beta sum: 0.00022439038730226457, worst -0.029552947729825974
Time: prepare 1.5483    bound 3.5626    transfer 0.1610    finalize 0.1941    func 5.6856    
Accumulated time: func 77.2397    prepare 16.0719    bound 48.1941    transfer 2.3058    finalize 5.3252    
all_split False
======================Cut inference begins======================
max lb tensor(0.00768399) min lb tensor(-0.02382374)
Number of Verified Splits: 4770 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 0.0015952587127685547 
BICCOS Cumulative time: 11.741785049438477
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02560 (18), -0.02556 (18), -0.02551 (18), -0.02550 (18), -0.02545 (18), -0.02531 (19), -0.02525 (18), -0.02521 (18), -0.02519 (18), -0.02518 (18), -0.02518 (18), -0.02517 (18), -0.02517 (18), -0.02495 (18), -0.02491 (18), 
Length of domains: 179057
Time: pickout 0.2316    decision 1.6547    set_bounds 1.5672    solve 5.6923    add 0.0977    
Accumulated time: pickout 3.2721    decision 25.2598    set_bounds 29.8403    solve 77.1402    add 2.3690    
Current (lb-rhs): -0.02626323699951172
412786 domains visited
Cumulative time: 151.12826323509216

BaB round 24
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1670] [/input-8, 62] [/input-8, 62] [/input-8, 1670] [/input-8, 1670] [/input-8, 62] [/input-8, 62] [/input-8, 1670] [/input-8, 1670] [/input-8, 62] 
cut re-enabled after branching node selection
0 lb beta sum: 7.412532431771979e-05, worst -0.025611162185668945
10 lb beta sum: 0.00022679418907500803, worst -0.025612592697143555
Time: prepare 1.5416    bound 3.5632    transfer 0.1612    finalize 0.2205    func 5.7046    
Accumulated time: func 82.9442    prepare 17.6140    bound 51.7572    transfer 2.4670    finalize 5.5458    
all_split False
======================Cut inference begins======================
max lb tensor(0.00788379) min lb tensor(-0.02561116)
Number of Verified Splits: 5185 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 0.0018270015716552734 
BICCOS Cumulative time: 11.743612051010132
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02561 (19), -0.02554 (19), -0.02553 (19), -0.02531 (19), -0.02530 (19), -0.02526 (19), -0.02525 (18), -0.02523 (19), -0.02519 (19), -0.02495 (18), -0.02491 (18), -0.02488 (18), -0.02486 (18), -0.02485 (18), -0.02485 (18), -0.02483 (18), -0.02480 (19), -0.02466 (18), -0.02462 (19), -0.02455 (18), 
Length of domains: 190256
Time: pickout 0.2415    decision 2.8010    set_bounds 1.6187    solve 5.7142    add 0.1112    
Accumulated time: pickout 3.5136    decision 28.0608    set_bounds 31.4590    solve 82.8544    add 2.4802    
Current (lb-rhs): -0.025611162185668945
440369 domains visited
Cumulative time: 161.73739337921143

BaB round 25
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 838] [/input-8, 838] [/input, 1017] [/input, 998] [/input, 998] [/input, 1017] [/input-8, 838] [/input-8, 838] [/input-8, 54] [/input-8, 54] 
cut re-enabled after branching node selection
0 lb beta sum: 6.398838013410568e-05, worst -0.024298429489135742
10 lb beta sum: 0.00020183595188427716, worst -0.024451255798339844
Time: prepare 1.5541    bound 3.5631    transfer 0.1602    finalize 0.2142    func 5.7179    
Accumulated time: func 88.6621    prepare 19.1685    bound 55.3203    transfer 2.6272    finalize 5.7600    
all_split False
======================Cut inference begins======================
max lb tensor(0.00817657) min lb tensor(-0.02429843)
Number of Verified Splits: 5866 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 0.0013914108276367188 
BICCOS Cumulative time: 11.745003461837769
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02561 (19), -0.02554 (19), -0.02553 (19), -0.02531 (19), -0.02530 (19), -0.02526 (19), -0.02525 (18), -0.02523 (19), -0.02519 (19), -0.02491 (18), -0.02488 (18), -0.02486 (18), -0.02485 (18), -0.02485 (18), -0.02483 (18), -0.02480 (19), -0.02466 (18), -0.02462 (19), -0.02455 (18), -0.02454 (19), 
Length of domains: 200774
Time: pickout 0.2468    decision 1.6616    set_bounds 3.1168    solve 5.7252    add 0.1012    
Accumulated time: pickout 3.7604    decision 29.7224    set_bounds 34.5759    solve 88.5796    add 2.5814    
Current (lb-rhs): -0.025611162185668945
467271 domains visited
Cumulative time: 172.73016333580017

BaB round 26
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 998] [/input, 998] [/input-8, 1670] [/input-8, 1670] [/input, 3815] [/input, 3815] [/input-8, 1670] [/input-8, 1670] [/input-8, 54] [/input-8, 54] 
cut re-enabled after branching node selection
0 lb beta sum: 5.52133860765025e-05, worst -0.021793842315673828
10 lb beta sum: 0.00019632477778941393, worst -0.022242307662963867
Time: prepare 1.5691    bound 3.5623    transfer 0.1606    finalize 0.2168    func 5.7298    
Accumulated time: func 94.3919    prepare 20.7382    bound 58.8826    transfer 2.7877    finalize 5.9768    
all_split False
======================Cut inference begins======================
max lb tensor(0.00838733) min lb tensor(-0.02179384)
Number of Verified Splits: 5792 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 0.0015377998352050781 
BICCOS Cumulative time: 11.746541261672974
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02561 (19), -0.02554 (19), -0.02553 (19), -0.02531 (19), -0.02530 (19), -0.02526 (19), -0.02525 (18), -0.02523 (19), -0.02519 (19), -0.02491 (18), -0.02488 (18), -0.02486 (18), -0.02485 (18), -0.02485 (18), -0.02483 (18), -0.02480 (19), -0.02466 (18), -0.02462 (19), -0.02455 (18), -0.02454 (19), 
Length of domains: 211366
Time: pickout 0.2759    decision 1.6643    set_bounds 1.5909    solve 7.4428    add 0.1054    
Accumulated time: pickout 4.0363    decision 31.3868    set_bounds 36.1668    solve 96.0224    add 2.6868    
Current (lb-rhs): -0.025611162185668945
494247 domains visited
Cumulative time: 183.91553950309753

BaB round 27
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3815] [/input, 3815] [/input-8, 1670] [/input-8, 1670] [/input-8, 1829] [/input-8, 1829] [/input-8, 1670] [/input-8, 1670] [/input, 3815] [/input, 3815] 
cut re-enabled after branching node selection
0 lb beta sum: 8.650278323329985e-05, worst -0.024599552154541016
10 lb beta sum: 0.00023281632456928492, worst -0.024758338928222656
Time: prepare 1.5695    bound 3.5638    transfer 0.1635    finalize 0.2428    func 5.7603    
Accumulated time: func 100.1523    prepare 22.3082    bound 62.4464    transfer 2.9513    finalize 6.2197    
all_split False
======================Cut inference begins======================
max lb tensor(0.00787544) min lb tensor(-0.02459955)
Number of Verified Splits: 5552 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 0.0015413761138916016 
BICCOS Cumulative time: 11.748082637786865
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02561 (19), -0.02554 (19), -0.02553 (19), -0.02531 (19), -0.02530 (19), -0.02526 (19), -0.02523 (19), -0.02519 (19), -0.02488 (18), -0.02485 (18), -0.02483 (18), -0.02480 (19), -0.02466 (18), -0.02462 (19), -0.02460 (19), -0.02454 (19), -0.02453 (19), -0.02453 (18), -0.02448 (18), -0.02443 (19), 
Length of domains: 222198
Time: pickout 0.2445    decision 1.6645    set_bounds 1.6053    solve 5.7703    add 0.1085    
Accumulated time: pickout 4.2808    decision 33.0513    set_bounds 37.7721    solve 101.7927    add 2.7953    
Current (lb-rhs): -0.025611162185668945
521463 domains visited
Cumulative time: 193.4362714290619

BaB round 28
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input, 3815] [/input, 3815] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] 
cut re-enabled after branching node selection
0 lb beta sum: 6.971479160711169e-05, worst -0.02445507049560547
10 lb beta sum: 0.00020093764760531485, worst -0.024455547332763672
Time: prepare 1.5714    bound 3.5616    transfer 0.1610    finalize 0.2140    func 5.7377    
Accumulated time: func 105.8900    prepare 23.8800    bound 66.0080    transfer 3.1122    finalize 6.4337    
all_split False
======================Cut inference begins======================
max lb tensor(0.00816846) min lb tensor(-0.02445436)
Number of Verified Splits: 6207 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 686.
#cuts 1-3: 1
#cuts 4-6: 17
#cuts 7-9: 575
#cuts 10-12: 93
#cuts >= 20: 0
BICCOS time: 0.0014629364013671875 
BICCOS Cumulative time: 11.749545574188232
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02561 (19), -0.02554 (19), -0.02553 (19), -0.02530 (19), -0.02526 (19), -0.02523 (19), -0.02519 (19), -0.02488 (18), -0.02485 (18), -0.02483 (18), -0.02480 (19), -0.02466 (18), -0.02462 (19), -0.02460 (19), -0.02454 (19), -0.02453 (19), -0.02453 (18), -0.02448 (18), -0.02445 (20), -0.02436 (19), 
Length of domains: 232375
Time: pickout 0.2547    decision 1.6611    set_bounds 3.4139    solve 5.7448    add 0.1151    
Accumulated time: pickout 4.5355    decision 34.7124    set_bounds 41.1860    solve 107.5375    add 2.9103    
Current (lb-rhs): -0.025611162185668945
548024 domains visited
Time out!!!!!!!!
Result: unknown in 208.2712 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 179, vnnlib ID: 179 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.81497240, -9.61914158, -4.37678957, -7.16895294, -6.05048847,
         -7.32035542, -8.58375645, -7.87642765, -5.33914280, -9.25911236]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [423]; unstable size 423; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 423] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 423] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 423] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.06378555, 1.32269323, 4.03046036, 2.94304752, 4.17913628, 5.32646465,
         4.62639809, 2.15443444, 5.73307467]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0512 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 180, vnnlib ID: 180 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.18043327, -9.67250061, -4.03554153, -4.66885376, -3.01946378,
         -4.69520569, -4.94520855, -1.53955245, -9.21621990, -7.85623407]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 585] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 585] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 188] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.87333870, 7.17064381, 1.94768238, 2.44880009, 1.09218788, 2.47986341,
         2.62327337, 6.51520348, 5.40360260]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0307 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 181, vnnlib ID: 181 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
         -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [497]; unstable size 497; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 497] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 497] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 497] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 148] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.14809799,  2.07557440,  0.01328355,  1.37565887, -0.08653331,
          1.50969958,  1.94958782,  1.83056521,  2.30023432]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
         -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.61it/s]100%|██████████| 1/1 [00:00<00:00,  8.59it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.12310123, -6.43147659, -3.69320679, -5.09748745, -3.54227424,
          -5.23913240, -3.53681922, -5.74136019, -5.95448112, -6.58602953]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00545502]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1192 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.484098434448242
alpha/beta optimization time: 1.254002571105957
initial alpha-crown bounds: tensor([[ 2.17381620,  2.11343050,  0.04474783,  1.40611637, -0.02632546,
          1.54144156,  2.00770783,  1.88426280,  2.33890080]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.026325464248657227
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5706639289856
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.57062530517578
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.57060050964355
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5705795288086
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.570561170578
Verifying property 4 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02632546]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
        -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02632546]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 497
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 146
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 648
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00022530555725097656
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026325583457946777
10 lb beta sum: 0.0, worst -0.02633070945739746
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0553    transfer 0.0001    finalize 0.0001    func 0.0557    
Accumulated time: func 0.0557    prepare 0.0002    bound 0.0553    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-8, 51] 
split level 2: [/input-8, 1573] 
split level 3: [/input-8, 1099] 
split level 4: [/input-8, 923] 
split level 5: [/input-8, 1445] 
split level 6: [/input-8, 1241] 
split level 7: [/input-8, 1233] 
split level 8: [/input-8, 1236] 
split level 9: [/input-8, 811] 
split level 10: [/input-8, 1186] 
split level 11: [/input-8, 817] 
split level 12: [/input, 2216] 
split level 13: [/input-8, 315] 
split level 14: [/input-8, 354] 
split level 15: [/input-8, 1170] 
split level 16: [/input-8, 918] 
split level 17: [/input-8, 317] 
split level 18: [/input-8, 1249] 
split level 19: [/input-8, 2014] 
split level 20: [/input-8, 83] 
split level 21: [/input-8, 1331] 
split level 22: [/input-8, 930] 
split level 23: [/input-8, 560] 
split level 24: [/input-8, 113] 
split level 25: [/input-8, 748] 
split level 26: [/input-8, 1619] 
split level 27: [/input-8, 1106] 
split level 28: [/input-8, 1438] 
split level 29: [/input-8, 1180] 
split level 30: [/input-8, 41] 
split level 31: [/input-8, 2000] 
split level 32: [/input-8, 1098] 
split level 33: [/input-8, 229] 
split level 34: [/input, 2641] 
split level 35: [/input-8, 818] 
split level 36: [/input-8, 2002] 
split level 37: [/input-8, 819] 
split level 38: [/input-8, 789] 
split level 39: [/input-8, 790] 
split level 40: [/input-8, 812] 
split level 41: [/input, 2253] 
split level 42: [/input-8, 754] 
split level 43: [/input-8, 820] 
split level 44: [/input-8, 147] 
split level 45: [/input, 2217] 
split level 46: [/input, 2219] 
split level 47: [/input, 2238] 
split level 48: [/input-8, 75] 
split level 49: [/input, 2205] 
split level 50: [/input, 1115] 
split level 51: [/input-8, 1620] 
split level 52: [/input-8, 946] 
split level 53: [/input-8, 757] 
split level 54: [/input-8, 1473] 
split level 55: [/input, 753] 
split level 56: [/input, 3477] 
split level 57: [/input, 3672] 
split level 58: [/input-8, 34] 
split level 59: [/input, 1114] 
split level 60: [/input, 1096] 
split level 61: [/input-8, 1613] 
split level 62: [/input, 2662] 
split level 63: [/input, 2765] 
split level 64: [/input, 3214] 
split level 65: [/input-8, 713] 
split level 66: [/input, 2173] 
split level 67: [/input-8, 39] 
split level 68: [/input, 4012] 
split level 69: [/input, 1527] 
split level 70: [/input, 2181] 
split level 71: [/input-8, 1327] 
split level 72: [/input, 2638] 
split level 73: [/input, 1508] 
split level 74: [/input, 1526] 
split level 75: [/input-8, 1994] 
split level 76: [/input, 2163] 
split level 77: [/input, 1690] 
split level 78: [/input-8, 112] 
split level 79: [/input, 1159] 
split level 80: [/input, 4054] 
split level 81: [/input-8, 1158] 
split level 82: [/input, 4039] 
split level 83: [/input, 1468] 
split level 84: [/input, 1082] 
split level 85: [/input, 1515] 
split level 86: [/input, 1865] 
split level 87: [/input, 1897] 
split level 88: [/input, 67] 
split level 89: [/input-8, 1855] 
split level 90: [/input, 2419] 
split level 91: [/input, 472] 
split level 92: [/input, 2881] 
split level 93: [/input-8, 145] 
split level 94: [/input, 3943] 
split level 95: [/input, 2527] 
split level 96: [/input, 3926] 
split level 97: [/input, 2757] 
split level 98: [/input, 2739] 
split level 99: [/input, 201] 
split level 100: [/input, 883] 
split level 101: [/input, 2780] 
split level 102: [/input, 3174] 
split level 103: [/input, 2370] 
split level 104: [/input-8, 1621] 
split level 105: [/input-8, 73] 
split level 106: [/input, 77] 
split level 107: [/input, 3741] 
split level 108: [/input-8, 1458] 
split level 109: [/input-8, 692] 
split level 110: [/input, 3681] 
split level 111: [/input, 2355] 
split level 112: [/input, 2793] 
split level 113: [/input, 3146] 
split level 114: [/input-8, 139] 
split level 115: [/input, 2517] 
split level 116: [/input, 377] 
split level 117: [/input, 716] 
split level 118: [/input, 961] 
split level 119: [/input, 161] 
split level 120: [/input, 3325] 
split level 121: [/input, 437] 
split level 122: [/input, 3928] 
split level 123: [/input, 330] 
split level 124: [/input, 2732] 
split level 125: [/input, 881] 
split level 126: [/input, 614] 
split level 127: [/input, 2460] 
split level 128: [/input, 1107] 
split level 129: [/input, 3157] 
split level 130: [/input, 438] 
split level 131: [/input, 2390] 
split level 132: [/input, 1091] 
split level 133: [/input, 1123] 
split level 134: [/input, 3738] 
split level 135: [/input, 1255] 
split level 136: [/input-8, 67] 
split level 137: [/input, 622] 
split level 138: [/input-8, 1814] 
split level 139: [/input, 2779] 
split level 140: [/input, 1014] 
split level 141: [/input, 2403] 
split level 142: [/input, 1137] 
split level 143: [/input, 4051] 
split level 144: [/input, 1271] 
split level 145: [/input-8, 1517] 
split level 146: [/input, 2458] 
split level 147: [/input, 3652] 
split level 148: [/input, 2406] 
split level 149: [/input, 3953] 
split level 150: [/input, 2364] 
split level 151: [/input, 460] 
split level 152: [/input, 942] 
split level 153: [/input, 637] 
split level 154: [/input, 630] 
split level 155: [/input, 1270] 
split level 156: [/input, 1121] 
split level 157: [/input, 683] 
split level 158: [/input, 3972] 
split level 159: [/input, 854] 
split level 160: [/input, 594] 
split level 161: [/input, 833] 
split level 162: [/input, 1155] 
split level 163: [/input, 3803] 
split level 164: [/input-8, 1872] 
split level 165: [/input, 3637] 
split level 166: [/input, 471] 
split level 167: [/input, 2601] 
split level 168: [/input, 2433] 
split level 169: [/input-8, 74] 
split level 170: [/input, 2672] 
split level 171: [/input, 3896] 
split level 172: [/input-8, 350] 
split level 173: [/input, 3833] 
split level 174: [/input, 3417] 
split level 175: [/input, 3802] 
split level 176: [/input, 2619] 
split level 177: [/input, 33] 
split level 178: [/input-8, 1464] 
split level 179: [/input-8, 1839] 
split level 180: [/input, 866] 
split level 181: [/input, 735] 
split level 182: [/input, 163] 
split level 183: [/input, 3714] 
split level 184: [/input, 490] 
split level 185: [/input, 2425] 
split level 186: [/input, 2491] 
split level 187: [/input, 3959] 
split level 188: [/input, 2791] 
split level 189: [/input, 3944] 
split level 190: [/input, 2503] 
split level 191: [/input, 473] 
split level 192: [/input-8, 683] 
split level 193: [/input-12, 90] 
split level 194: [/input, 2796] 
split level 195: [/input, 3634] 
split level 196: [/input-8, 1813] 
split level 197: [/input, 213] 
split level 198: [/input-8, 1913] 
split level 199: [/input-12, 47] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06559211015701294
10 lb beta sum: 0.0, worst -0.02807033061981201
Time: prepare 0.0115    bound 0.1014    transfer 0.0009    finalize 0.0030    func 0.1196    
Accumulated time: func 0.1753    prepare 0.0217    bound 0.1566    transfer 0.0010    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.03216481) min lb tensor(-0.02632546)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010802984237670898 
BICCOS Cumulative time: 0.010802984237670898
Preprocessing time: 0.010396003723144531 Inference time: 9.942054748535156e-05 Add cuts time: 5.173683166503906e-05 Cut analysis time: 0.00025582313537597656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02469 (1), -0.02467 (1), -0.02462 (1), -0.02440 (1), -0.02436 (1), -0.02435 (1), -0.02428 (1), -0.02423 (1), -0.02420 (1), -0.02409 (1), -0.02408 (1), -0.02407 (1), -0.02406 (1), -0.02405 (1), -0.02393 (1), -0.02393 (1), -0.02389 (1), -0.02379 (1), -0.02374 (1), -0.02350 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5155    set_bounds 0.0088    solve 0.1197    add 0.0697    
Accumulated time: pickout 0.0003    decision 0.5155    set_bounds 0.0088    solve 0.1197    add 0.0697    
Current (lb-rhs): -0.024688363075256348
50 domains visited
Cumulative time: 0.7902734279632568

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] 
split level 2: [/input-8, 918] [/input-8, 918] [/input-8, 918] [/input-8, 918] [/input-8, 918] [/input-8, 918] [/input, 2217] [/input-8, 918] [/input-8, 918] [/input-8, 918] 
split level 3: [/input-8, 1249] [/input, 4039] [/input-8, 1249] [/input-8, 1249] [/input, 2181] [/input-8, 1249] [/input, 169] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024008631706237793
10 lb beta sum: 0.14502112567424774, worst -0.021682381629943848
Time: prepare 0.0071    bound 0.1212    transfer 0.0008    finalize 0.0025    func 0.1343    
Accumulated time: func 0.3096    prepare 0.0291    bound 0.2778    transfer 0.0018    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.05727351) min lb tensor(-0.02167666)
Number of Verified Splits: 57 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01604914665222168 
BICCOS Cumulative time: 0.026852130889892578
Preprocessing time: 0.012259483337402344 Inference time: 0.002087831497192383 Add cuts time: 0.0013523101806640625 Cut analysis time: 0.0003495216369628906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01403 (2), -0.01395 (2), -0.01375 (2), -0.01369 (2), -0.01359 (2), -0.01355 (2), -0.01355 (2), -0.01343 (2), -0.01333 (2), -0.01319 (2), -0.01308 (2), -0.01305 (2), -0.01303 (2), -0.01286 (2), -0.01271 (2), -0.01267 (2), -0.01248 (2), -0.01243 (2), -0.01217 (2), -0.01151 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0224    set_bounds 0.0136    solve 0.1344    add 0.0858    
Accumulated time: pickout 0.0014    decision 0.5379    set_bounds 0.0224    solve 0.2540    add 0.1555    
Current (lb-rhs): -0.014033123850822449
100 domains visited
Cumulative time: 1.0638556480407715

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-8, 1445] 
split level 1: [/input-8, 918] [/input-8, 1445] [/input-8, 1445] [/input-8, 918] [/input-8, 1445] [/input-8, 918] [/input-8, 1445] [/input-8, 1241] [/input-8, 1445] [/input-8, 918] 
split level 2: [/input-8, 1249] [/input-8, 1249] [/input-8, 918] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 918] [/input-8, 918] [/input-8, 1249] [/input-8, 1249] 
split level 3: [/input, 4039] [/input, 4039] [/input-8, 1249] [/input, 4053] [/input, 4039] [/input, 4039] [/input-8, 1249] [/input-8, 1249] [/input, 4053] [/input, 4039] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01742386817932129
10 lb beta sum: 0.37241819500923157, worst -0.01397562026977539
Time: prepare 0.0075    bound 0.1361    transfer 0.0008    finalize 0.0025    func 0.1505    
Accumulated time: func 0.4600    prepare 0.0368    bound 0.4139    transfer 0.0026    finalize 0.0080    
all_split False
======================Cut inference begins======================
max lb tensor(0.23563944) min lb tensor(-0.01392365)
Number of Verified Splits: 49 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.015716075897216797 
BICCOS Cumulative time: 0.042568206787109375
Preprocessing time: 0.012054204940795898 Inference time: 0.0018646717071533203 Add cuts time: 0.0014569759368896484 Cut analysis time: 0.0003402233123779297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00513 (3), -0.00511 (3), -0.00510 (3), -0.00510 (3), -0.00510 (3), -0.00510 (3), -0.00507 (3), -0.00506 (3), -0.00505 (3), -0.00487 (3), -0.00486 (3), -0.00484 (3), -0.00479 (3), -0.00476 (3), -0.00476 (3), -0.00474 (3), -0.00460 (3), -0.00460 (3), -0.00457 (3), -0.00455 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0199    set_bounds 0.0144    solve 0.1506    add 0.0843    
Accumulated time: pickout 0.0025    decision 0.5578    set_bounds 0.0367    solve 0.4047    add 0.2398    
Current (lb-rhs): -0.005127370357513428
150 domains visited
Cumulative time: 1.350142240524292

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-8, 918] [/input-8, 918] [/input-8, 1445] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1445] [/input-8, 1241] [/input-8, 1445] 
split level 2: [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 918] [/input-8, 1249] [/input-8, 918] [/input-8, 1249] [/input-8, 918] [/input-8, 918] 
split level 3: [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input, 4039] [/input-8, 1249] [/input, 4039] [/input-8, 1249] [/input-8, 1098] [/input, 4039] [/input-8, 1098] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5711288452148438, worst -0.005127251148223877
10 lb beta sum: 0.5800076723098755, worst -0.004934847354888916
Time: prepare 0.0174    bound 0.1366    transfer 0.0008    finalize 0.0025    func 0.1600    
Accumulated time: func 0.6201    prepare 0.0545    bound 0.5505    transfer 0.0034    finalize 0.0105    
all_split False
======================Cut inference begins======================
max lb tensor(0.05962233) min lb tensor(-0.00477141)
Number of Verified Splits: 82 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 3
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.01813030242919922 
BICCOS Cumulative time: 0.060698509216308594
Preprocessing time: 0.011907339096069336 Inference time: 0.0035893917083740234 Add cuts time: 0.0020813941955566406 Cut analysis time: 0.0005521774291992188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00123 (4), -0.00120 (4), -0.00120 (4), -0.00118 (4), -0.00118 (4), -0.00114 (4), -0.00113 (4), -0.00112 (4), -0.00110 (4), -0.00108 (4), -0.00105 (4), -0.00103 (4), -0.00102 (4), -0.00102 (4), -0.00099 (4), -0.00098 (4), -0.00097 (4), -0.00096 (4), -0.00090 (4), -0.00089 (4), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0146    solve 0.1602    add 0.0931    
Accumulated time: pickout 0.0036    decision 0.5775    set_bounds 0.0514    solve 0.5648    add 0.3329    
Current (lb-rhs): -0.0012339651584625244
200 domains visited
Cumulative time: 1.6572134494781494

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input, 1000] [/input-8, 1249] [/input-8, 1249] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input, 4053] 
split level 2: [/input, 984] [/input-8, 1106] [/input-8, 1106] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input, 968] 
split level 3: [/input, 968] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input, 1000] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006518125534057617
10 lb beta sum: 0.5762522220611572, worst -0.003979086875915527
Time: prepare 0.0080    bound 0.1569    transfer 0.0008    finalize 0.0027    func 0.1711    
Accumulated time: func 0.7912    prepare 0.0627    bound 0.7074    transfer 0.0042    finalize 0.0132    
all_split False
======================Cut inference begins======================
max lb tensor(0.06038690) min lb tensor(-0.00111580)
Number of Verified Splits: 360 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 3
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.03842592239379883 
BICCOS Cumulative time: 0.09912443161010742
Preprocessing time: 0.012124776840209961 Inference time: 0.018549203872680664 Add cuts time: 0.0069620609283447266 Cut analysis time: 0.0007898807525634766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00112 (5), -0.00045 (5), -0.00019 (5), -0.00015 (5), 
Length of domains: 4
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0146    solve 0.1713    add 0.2725    
Accumulated time: pickout 0.0047    decision 0.5970    set_bounds 0.0659    solve 0.7361    add 0.6054    
Current (lb-rhs): -0.0011157989501953125
204 domains visited
Cumulative time: 2.1749024391174316

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([811]), tensor([-1.]), tensor([0]), tensor([-1.83002104e-16]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918], [1.0, -1.0, -1.0], [0, 0, 0], [-1.8300210352900203e-16, 0.005676166620105505, 0.0019258426036685705], [0, 1, 2]), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([-1.83002104e-16]), tensor([3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918], [1.0, -1.0, -1.0], [0, 0, 0], [-1.8300210352900203e-16, 0.005676166620105505, 0.0019258426036685705], [0, 1, 2]), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([2.40793245e-36]), tensor([3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 811, 1445,  918]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([-1.83002104e-16,  5.67616662e-03,  1.65705546e-03]), tensor([0, 1, 2])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, -1.0, -1.0], [0, 0, 0, 0], [-1.8300210352900203e-16, 0.007984520867466927, 0.002270104130730033, 0.0016506181564182043], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([5.08085241e-11]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, -1.0, -1.0], [0, 0, 0, 0], [-1.8300210352900203e-16, 0.007984520867466927, 0.002270104130730033, 0.0016506181564182043], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([-1.83002527e-16]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, -1.0, 1.0], [0, 0, 0, 0], [-1.8300210352900203e-16, 0.007984520867466927, 0.002270104130730033, 0.0013458000030368567], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([1.06058957e-08]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, -1.0, 1.0], [0, 0, 0, 0], [-1.8300210352900203e-16, 0.007984520867466927, 0.002270104130730033, 0.0013458000030368567], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([-1.83002527e-16]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, 1.0, -1.0], [0, 0, 0, 0], [-1.8300210352900203e-16, 0.007984520867466927, 0.0019028948154300451, 0.001664923271164298], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([6.84712842e-11]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, 1.0, -1.0], [0, 0, 0, 0], [-1.8300210352900203e-16, 0.007984520867466927, 0.0019028948154300451, 0.001664923271164298], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([0.00102669]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 811, 1445,  918, 1249]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([-1.83002104e-16,  7.98452087e-03,  1.90289482e-03,  1.35700568e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  11
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02623295783996582
10 lb beta sum: 0.4673781991004944, worst -0.02214112877845764
Time: prepare 0.0006    bound 0.1507    transfer 0.0002    finalize 0.0002    func 0.1517    
Accumulated time: func 0.9429    prepare 0.0633    bound 0.8581    transfer 0.0044    finalize 0.0134    
After pruning, left:  7

Back to Regular BaB

BaB round 1
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-8, 1241] [/input-12, 10] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-12, 10] 
split level 1: [/input-8, 1445] [/input-8, 1249] [/input-8, 1241] [/input-8, 317] [/input-8, 1106] [/input-8, 1106] [/input-8, 1241] 
split level 2: [/input-8, 1241] [/input-8, 1106] [/input-8, 1249] [/input-8, 1106] [/input-8, 113] [/input-8, 113] [/input-8, 1106] 
split level 3: [/input-8, 918] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] 
split level 4: [/input-8, 1249] [/input, 4039] [/input, 4039] [/input, 4039] [/input, 4039] [/input, 4039] [/input, 4039] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8452616930007935, worst -0.01868550479412079
10 lb beta sum: 0.8523687720298767, worst -0.018621131777763367
Time: prepare 0.0108    bound 0.1590    transfer 0.0016    finalize 0.0015    func 0.1744    
Accumulated time: func 1.1173    prepare 0.0744    bound 1.0171    transfer 0.0060    finalize 0.0150    
all_split False
======================Cut inference begins======================
max lb tensor(0.05507788) min lb tensor(-0.01860504)
Number of Verified Splits: 186 of 224
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.9393215179443359, worst -0.022500157356262207
10 lb beta sum: 1.1308493614196777, worst -0.019313618540763855
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 3
#cuts 4-6: 21
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.28838491439819336 
BICCOS Cumulative time: 0.3875093460083008
Preprocessing time: 0.0071523189544677734 Inference time: 0.27318572998046875 Add cuts time: 0.006855010986328125 Cut analysis time: 0.001191854476928711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01861 (5), -0.01836 (5), -0.01800 (5), -0.01774 (5), -0.01670 (5), -0.01634 (5), -0.01607 (5), -0.01572 (5), -0.01270 (5), -0.01245 (5), -0.01243 (5), -0.01217 (5), -0.01076 (5), -0.01041 (5), -0.01041 (5), -0.01006 (5), -0.00256 (5), -0.00244 (5), -0.00226 (5), -0.00213 (5), 
Length of domains: 38
Time: pickout 0.0006    decision 0.0188    set_bounds 0.0217    solve 0.1745    add 0.0012    
Accumulated time: pickout 0.0053    decision 0.6158    set_bounds 0.0876    solve 0.9106    add 0.6065    
Current (lb-rhs): -0.01860503852367401
242 domains visited
Cumulative time: 2.858099937438965

BaB round 2
batch: 38
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1106] [/input-8, 1170] [/input-8, 1106] [/input-8, 1170] [/input-8, 1170] [/input-8, 1170] [/input-8, 1170] [/input-8, 1170] [/input-8, 1106] [/input-8, 1170] 
split level 1: [/input-8, 113] [/input-8, 1438] [/input-8, 113] [/input-8, 1438] [/input-8, 1106] [/input-8, 113] [/input-8, 113] [/input-8, 1106] [/input-8, 113] [/input-8, 1438] 
split level 2: [/input-8, 1098] [/input-8, 113] [/input-8, 1098] [/input-8, 113] [/input-8, 113] [/input-8, 1098] [/input-8, 1098] [/input-8, 113] [/input-8, 1098] [/input-8, 113] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.016553878784179688
10 lb beta sum: 0.132613405585289, worst -0.016478300094604492
Time: prepare 0.0070    bound 0.1526    transfer 0.0007    finalize 0.0021    func 0.1644    
Accumulated time: func 1.2817    prepare 0.0815    bound 1.1696    transfer 0.0067    finalize 0.0171    
all_split False
======================Cut inference begins======================
max lb tensor(0.00325716) min lb tensor(-0.01646352)
Number of Verified Splits: 172 of 304
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 4
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.025002717971801758 
BICCOS Cumulative time: 0.41251206398010254
Preprocessing time: 0.009019613265991211 Inference time: 0.013421058654785156 Add cuts time: 0.0019152164459228516 Cut analysis time: 0.0006468296051025391
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01646 (8), -0.01637 (8), -0.01622 (8), -0.01612 (8), -0.01607 (8), -0.01598 (8), -0.01583 (8), -0.01582 (8), -0.01573 (8), -0.01573 (8), -0.01557 (8), -0.01547 (8), -0.01544 (8), -0.01533 (8), -0.01520 (8), -0.01509 (8), -0.01454 (8), -0.01444 (8), -0.01422 (8), -0.01420 (8), 
Length of domains: 132
Time: pickout 0.0016    decision 0.0134    set_bounds 0.0164    solve 0.1645    add 0.0013    
Accumulated time: pickout 0.0069    decision 0.6292    set_bounds 0.1040    solve 1.0751    add 0.6078    
Current (lb-rhs): -0.016463518142700195
374 domains visited
Cumulative time: 3.081176996231079

BaB round 3
batch: 132
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1170] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1170] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1170] [/input-8, 317] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.015863537788391113
10 lb beta sum: 0.28760024905204773, worst -0.015806198120117188
Time: prepare 0.0057    bound 0.1579    transfer 0.0006    finalize 0.0019    func 0.1679    
Accumulated time: func 1.4496    prepare 0.0874    bound 1.3276    transfer 0.0073    finalize 0.0190    
all_split False
======================Cut inference begins======================
max lb tensor(0.00140548) min lb tensor(-0.01580191)
Number of Verified Splits: 8 of 264
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 4
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.01047205924987793 
BICCOS Cumulative time: 0.42298412322998047
Preprocessing time: 0.008340120315551758 Inference time: 0.0007469654083251953 Add cuts time: 0.0004227161407470703 Cut analysis time: 0.0009622573852539062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01580 (9), -0.01573 (9), -0.01555 (9), -0.01548 (9), -0.01542 (9), -0.01535 (9), -0.01517 (9), -0.01515 (9), -0.01511 (9), -0.01509 (9), -0.01508 (9), -0.01491 (9), -0.01483 (9), -0.01483 (9), -0.01477 (9), -0.01472 (9), -0.01471 (9), -0.01470 (9), -0.01453 (9), -0.01446 (9), 
Length of domains: 256
Time: pickout 0.0022    decision 0.0201    set_bounds 0.0115    solve 0.1680    add 0.0016    
Accumulated time: pickout 0.0092    decision 0.6493    set_bounds 0.1155    solve 1.2431    add 0.6094    
Current (lb-rhs): -0.01580190658569336
630 domains visited
Cumulative time: 3.2958104610443115

BaB round 4
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 317] [/input-8, 1170] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1170] 
cut re-enabled after branching node selection
0 lb beta sum: 0.3482205867767334, worst -0.015342235565185547
10 lb beta sum: 0.3489030599594116, worst -0.015325784683227539
Time: prepare 0.0219    bound 0.1539    transfer 0.0038    finalize 0.0022    func 0.1864    
Accumulated time: func 1.6361    prepare 0.1096    bound 1.4815    transfer 0.0111    finalize 0.0212    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00034873) min lb tensor(-0.01531434)
Number of Verified Splits: 0 of 512
No cut inferred: All or none verified.
Total number of valid cuts: 11.
#cuts 1-3: 4
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.015228748321533203 
BICCOS Cumulative time: 0.43821287155151367
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01531 (10), -0.01524 (10), -0.01506 (10), -0.01498 (10), -0.01493 (10), -0.01486 (10), -0.01469 (10), -0.01466 (10), -0.01461 (10), -0.01458 (10), -0.01457 (10), -0.01441 (10), -0.01432 (10), -0.01432 (10), -0.01429 (10), -0.01420 (10), -0.01420 (10), -0.01413 (10), -0.01404 (10), -0.01395 (10), 
Length of domains: 512
Time: pickout 0.0032    decision 0.0232    set_bounds 0.0221    solve 0.1866    add 0.0027    
Accumulated time: pickout 0.0124    decision 0.6725    set_bounds 0.1377    solve 1.4298    add 0.6121    
Current (lb-rhs): -0.015314340591430664
1142 domains visited
Cumulative time: 3.5503571033477783

BaB round 5
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] 
cut re-enabled after branching node selection
0 lb beta sum: 0.34830135107040405, worst -0.014791011810302734
10 lb beta sum: 0.34893959760665894, worst -0.01478588581085205
Time: prepare 0.0457    bound 0.1663    transfer 0.0016    finalize 0.0051    func 0.2256    
Accumulated time: func 1.8617    prepare 0.1555    bound 1.6478    transfer 0.0127    finalize 0.0263    
all_split False
======================Cut inference begins======================
max lb tensor(0.00159200) min lb tensor(-0.01477754)
Number of Verified Splits: 36 of 1024
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 4
#cuts 4-6: 7
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.041892051696777344 
BICCOS Cumulative time: 0.480104923248291
Preprocessing time: 0.03173255920410156 Inference time: 0.006463289260864258 Add cuts time: 0.0022580623626708984 Cut analysis time: 0.001438140869140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01478 (11), -0.01469 (11), -0.01453 (11), -0.01443 (11), -0.01440 (11), -0.01432 (11), -0.01415 (11), -0.01411 (11), -0.01406 (11), -0.01405 (11), -0.01401 (11), -0.01385 (11), -0.01380 (11), -0.01380 (11), -0.01377 (11), -0.01374 (11), -0.01367 (11), -0.01356 (11), -0.01349 (11), -0.01344 (11), 
Length of domains: 988
Time: pickout 0.0077    decision 0.0365    set_bounds 0.0425    solve 0.2259    add 0.0042    
Accumulated time: pickout 0.0201    decision 0.7090    set_bounds 0.1801    solve 1.6557    add 0.6164    
Current (lb-rhs): -0.014777541160583496
2130 domains visited
Cumulative time: 3.91046404838562

BaB round 6
batch: 988
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014496803283691406
10 lb beta sum: 0.2862033545970917, worst -0.01442110538482666
Time: prepare 0.0506    bound 0.2252    transfer 0.0027    finalize 0.0105    func 0.3027    
Accumulated time: func 2.1643    prepare 0.2064    bound 1.8730    transfer 0.0153    finalize 0.0368    
all_split False
======================Cut inference begins======================
max lb tensor(0.00168492) min lb tensor(-0.01441145)
Number of Verified Splits: 132 of 1976
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 4
#cuts 4-6: 9
#cuts 7-9: 29
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.08737325668334961 
BICCOS Cumulative time: 0.5674781799316406
Preprocessing time: 0.06192827224731445 Inference time: 0.01577925682067871 Add cuts time: 0.0070917606353759766 Cut analysis time: 0.0025739669799804688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01441 (12), -0.01432 (12), -0.01416 (12), -0.01406 (12), -0.01404 (12), -0.01395 (12), -0.01379 (12), -0.01374 (12), -0.01370 (12), -0.01367 (12), -0.01365 (12), -0.01349 (12), -0.01341 (12), -0.01339 (12), -0.01339 (12), -0.01331 (12), -0.01329 (12), -0.01318 (12), -0.01313 (12), -0.01305 (12), 
Length of domains: 1844
Time: pickout 0.0158    decision 0.0645    set_bounds 0.0600    solve 0.3031    add 0.0147    
Accumulated time: pickout 0.0359    decision 0.7735    set_bounds 0.2401    solve 1.9588    add 0.6311    
Current (lb-rhs): -0.014411449432373047
3974 domains visited
Cumulative time: 4.458929061889648

BaB round 7
batch: 1844
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014151573181152344
10 lb beta sum: 0.27877193689346313, worst -0.01409459114074707
Time: prepare 0.0968    bound 0.3587    transfer 0.0068    finalize 0.0165    func 0.5036    
Accumulated time: func 2.6679    prepare 0.3035    bound 2.2317    transfer 0.0221    finalize 0.0533    
all_split False
======================Cut inference begins======================
max lb tensor(0.00568205) min lb tensor(-0.01408505)
Number of Verified Splits: 704 of 3688
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 96.
#cuts 1-3: 4
#cuts 4-6: 36
#cuts 7-9: 56
#cuts >= 20: 0
BICCOS time: 0.23804783821105957 
BICCOS Cumulative time: 0.8055260181427002
Preprocessing time: 0.11607098579406738 Inference time: 0.08626532554626465 Add cuts time: 0.030774593353271484 Cut analysis time: 0.004936933517456055
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01409 (13), -0.01401 (13), -0.01383 (13), -0.01375 (13), -0.01371 (13), -0.01365 (13), -0.01346 (13), -0.01341 (13), -0.01339 (13), -0.01334 (13), -0.01330 (13), -0.01316 (13), -0.01308 (13), -0.01306 (13), -0.01305 (13), -0.01298 (13), -0.01294 (13), -0.01287 (13), -0.01281 (13), -0.01273 (13), 
Length of domains: 2984
Time: pickout 0.0343    decision 0.2902    set_bounds 0.1674    solve 0.5046    add 0.0279    
Accumulated time: pickout 0.0702    decision 1.0636    set_bounds 0.4075    solve 2.4634    add 0.6589    
Current (lb-rhs): -0.014085054397583008
6958 domains visited
Cumulative time: 5.729299306869507

BaB round 8
batch: 2984
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1236] [/input-8, 1438] [/input-8, 1233] [/input-8, 1438] [/input-8, 1236] [/input-8, 1236] [/input-8, 1233] [/input-8, 1236] [/input-8, 1233] [/input-8, 1236] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01381075382232666
10 lb beta sum: 0.26227760314941406, worst -0.014871492981910706
Time: prepare 0.1588    bound 0.5452    transfer 0.0298    finalize 0.0322    func 0.8065    
Accumulated time: func 3.4744    prepare 0.4627    bound 2.7769    transfer 0.0519    finalize 0.0855    
all_split False
======================Cut inference begins======================
max lb tensor(0.00891423) min lb tensor(-0.01374328)
Number of Verified Splits: 1532 of 5968
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 210.
#cuts 1-3: 5
#cuts 4-6: 90
#cuts 7-9: 110
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 0.4867384433746338 
BICCOS Cumulative time: 1.292264461517334
Preprocessing time: 0.19236350059509277 Inference time: 0.19100618362426758 Add cuts time: 0.09298443794250488 Cut analysis time: 0.010384321212768555
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01374 (14), -0.01366 (14), -0.01355 (14), -0.01347 (14), -0.01337 (14), -0.01330 (14), -0.01319 (14), -0.01311 (14), -0.01307 (14), -0.01299 (14), -0.01296 (14), -0.01287 (14), -0.01280 (14), -0.01276 (14), -0.01271 (14), -0.01263 (14), -0.01260 (14), -0.01252 (14), -0.01246 (14), -0.01245 (14), 
Length of domains: 4436
Time: pickout 0.0423    decision 0.1706    set_bounds 0.4508    solve 0.8085    add 0.0277    
Accumulated time: pickout 0.1125    decision 1.2342    set_bounds 0.8583    solve 3.2719    add 0.6866    
Current (lb-rhs): -0.013743281364440918
11394 domains visited
Cumulative time: 7.731720685958862

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1233] [/input-8, 1180] [/input-8, 1438] [/input-8, 1233] [/input-8, 1233] [/input-8, 1438] [/input-8, 1438] [/input-8, 1233] [/input-8, 1438] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01343989372253418
10 lb beta sum: 0.25447598099708557, worst -0.023569557815790176
Time: prepare 0.2198    bound 0.7678    transfer 0.0319    finalize 0.0462    func 1.1205    
Accumulated time: func 4.5949    prepare 0.6829    bound 3.5448    transfer 0.0838    finalize 0.1316    
all_split False
======================Cut inference begins======================
max lb tensor(0.00995059) min lb tensor(-0.01337039)
Number of Verified Splits: 2522 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 303.
#cuts 1-3: 5
#cuts 4-6: 151
#cuts 7-9: 144
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 1.1402885913848877 
BICCOS Cumulative time: 2.4325530529022217
Preprocessing time: 0.2684290409088135 Inference time: 0.6445624828338623 Add cuts time: 0.21201491355895996 Cut analysis time: 0.015282154083251953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01337 (15), -0.01329 (15), -0.01318 (15), -0.01309 (15), -0.01301 (15), -0.01293 (15), -0.01281 (15), -0.01273 (15), -0.01270 (15), -0.01261 (15), -0.01258 (15), -0.01251 (15), -0.01241 (15), -0.01239 (15), -0.01233 (15), -0.01227 (15), -0.01222 (15), -0.01215 (15), -0.01210 (15), -0.01207 (15), 
Length of domains: 6010
Time: pickout 0.0595    decision 0.2249    set_bounds 0.5668    solve 1.1226    add 0.0473    
Accumulated time: pickout 0.1720    decision 1.4590    set_bounds 1.4251    solve 4.3945    add 0.7339    
Current (lb-rhs): -0.013370394706726074
17064 domains visited
current_vram/total_varm: 21.2GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.934246301651001

BaB round 10
batch: 6010
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1438] [/input-8, 1180] [/input-8, 1180] [/input-8, 1438] [/input-8, 1180] [/input-8, 1180] [/input-8, 1180] [/input-8, 1236] [/input-8, 1438] [/input-8, 229] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012922048568725586
10 lb beta sum: 0.2637280523777008, worst -0.02062085270881653
Time: prepare 0.3322    bound 1.1824    transfer 0.0464    finalize 0.3143    func 1.9563    
Accumulated time: func 6.5512    prepare 1.0155    bound 4.7271    transfer 0.1302    finalize 0.4460    
all_split False
======================Cut inference begins======================
max lb tensor(0.33224905) min lb tensor(-0.01285887)
Number of Verified Splits: 4155 of 12020
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 412.
#cuts 1-3: 8
#cuts 4-6: 204
#cuts 7-9: 196
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 1.571916103363037 
BICCOS Cumulative time: 4.004469156265259
Preprocessing time: 0.3899343013763428 Inference time: 0.7878875732421875 Add cuts time: 0.3747227191925049 Cut analysis time: 0.019371509552001953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01286 (16), -0.01277 (16), -0.01269 (16), -0.01268 (16), -0.01260 (16), -0.01260 (16), -0.01249 (16), -0.01241 (16), -0.01218 (16), -0.01210 (16), -0.01205 (16), -0.01201 (16), -0.01199 (16), -0.01193 (16), -0.01188 (16), -0.01188 (16), -0.01175 (16), -0.01173 (16), -0.01169 (16), -0.01167 (16), 
Length of domains: 7865
Time: pickout 0.1379    decision 0.3400    set_bounds 0.5948    solve 1.9596    add 0.0698    
Accumulated time: pickout 0.3098    decision 1.7991    set_bounds 2.0198    solve 6.3541    add 0.8037    
Current (lb-rhs): -0.012858867645263672
24929 domains visited
Cumulative time: 15.668227910995483

BaB round 11
batch: 7865
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1233] [/input-8, 1236] [/input-8, 229] [/input-8, 1236] [/input-8, 229] [/input-8, 229] [/input-8, 229] [/input-8, 229] [/input-8, 229] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012628674507141113
10 lb beta sum: 0.2808958888053894, worst -0.08052640408277512
Time: prepare 0.4333    bound 1.6228    transfer 0.0803    finalize 0.0885    func 2.3330    
Accumulated time: func 8.8842    prepare 1.4492    bound 6.3499    transfer 0.2105    finalize 0.5345    
all_split False
======================Cut inference begins======================
max lb tensor(0.79314041) min lb tensor(-0.01255238)
Number of Verified Splits: 5282 of 15730
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 249.
#cuts 1-3: 8
#cuts 4-6: 116
#cuts 7-9: 122
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 1.9463481903076172 
BICCOS Cumulative time: 5.950817346572876
Preprocessing time: 0.5200009346008301 Inference time: 1.1132733821868896 Add cuts time: 0.3014051914215088 Cut analysis time: 0.011668682098388672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01255 (17), -0.01247 (17), -0.01238 (17), -0.01237 (17), -0.01230 (17), -0.01229 (17), -0.01219 (17), -0.01192 (17), -0.01191 (17), -0.01182 (17), -0.01173 (17), -0.01172 (17), -0.01172 (17), -0.01165 (17), -0.01157 (17), -0.01156 (17), -0.01147 (17), -0.01140 (17), -0.01140 (17), -0.01131 (17), 
Length of domains: 10448
Time: pickout 0.1758    decision 0.4383    set_bounds 1.0252    solve 2.3372    add 0.0686    
Accumulated time: pickout 0.4856    decision 2.2374    set_bounds 3.0451    solve 8.6912    add 0.8723    
Current (lb-rhs): -0.012552380561828613
35377 domains visited
Cumulative time: 21.72680902481079

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1233] [/input-8, 1099] [/input-8, 1099] [/input-8, 354] [/input-8, 354] [/input-8, 1233] [/input-8, 1233] [/input-8, 1180] [/input-8, 229] [/input-8, 1233] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.010803818702697754
10 lb beta sum: 0.36470258235931396, worst -0.0310493353754282
Time: prepare 0.4552    bound 1.5157    transfer 0.0828    finalize 0.1023    func 2.2667    
Accumulated time: func 11.1509    prepare 1.9048    bound 7.8656    transfer 0.2933    finalize 0.6368    
all_split False
======================Cut inference begins======================
max lb tensor(0.65933341) min lb tensor(-0.01072013)
Number of Verified Splits: 10363 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 2.583512306213379 
BICCOS Cumulative time: 8.534329652786255
Preprocessing time: 0.5498692989349365 Inference time: 1.7557566165924072 Add cuts time: 0.27738404273986816 Cut analysis time: 0.0005023479461669922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01255 (17), -0.01247 (17), -0.01238 (17), -0.01237 (17), -0.01230 (17), -0.01229 (17), -0.01219 (17), -0.01192 (17), -0.01191 (17), -0.01182 (17), -0.01173 (17), -0.01172 (17), -0.01172 (17), -0.01165 (17), -0.01157 (17), -0.01156 (17), -0.01147 (17), -0.01140 (17), -0.01130 (17), -0.01128 (17), 
Length of domains: 8277
Time: pickout 0.1272    decision 0.4611    set_bounds 1.0619    solve 2.2710    add 0.0340    
Accumulated time: pickout 0.6128    decision 2.6984    set_bounds 4.1070    solve 10.9623    add 0.9063    
Current (lb-rhs): -0.012552380561828613
41398 domains visited
current_vram/total_varm: 21.2GB/99.9GB, batch_size increase to 16384
Cumulative time: 28.388468027114868

BaB round 13
batch: 8277
splitting decisions: 
split level 0: [/input-8, 354] [/input-8, 229] [/input-8, 147] [/input-8, 1180] [/input-8, 1180] [/input-8, 930] [/input-8, 930] [/input-8, 147] [/input-8, 229] [/input-8, 354] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012301325798034668

all verified at 1th iter
Time: prepare 0.4471    bound 0.0628    transfer 0.0826    finalize 0.0949    func 0.7949    
Accumulated time: func 11.9459    prepare 2.3523    bound 7.9284    transfer 0.3759    finalize 0.7317    
all_split False
======================Cut inference begins======================
max lb tensor(0.05288486) min lb tensor(4.76837158e-07)
Number of Verified Splits: 16554 of 16554
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.852818489074707 
BICCOS Cumulative time: 9.387148141860962
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.1683    decision 0.4656    set_bounds 1.0800    solve 0.7992    add 0.0029    
Accumulated time: pickout 0.7811    decision 3.1640    set_bounds 5.1870    solve 11.7615    add 0.9092    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
41398 domains visited
Cumulative time: 31.899086952209473


Properties batch 5, size 1
Remaining timeout: 166.44893550872803
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 166.44878315925598
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 166.44869828224182
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 166.44864106178284
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 33.5515 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 182, vnnlib ID: 182 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.81517506, -16.44219780, -14.93947697, -17.08555794, -16.53348160,
         -17.39346313, -16.71439552, -17.35387802, -14.78421783, -16.59263992]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [413]; unstable size 413; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 111, 1, 413] with unstable size 110 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 413] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 413] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [110]; unstable size 110; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 110] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 110] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.18601298, 1.75380206, 3.75133443, 3.26349282, 4.05069065, 3.40995359,
         3.94186616, 1.68227029, 3.44086933]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0570 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 183, vnnlib ID: 183 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
         -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [769]; unstable size 769; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 283, 1, 769] with unstable size 282 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 769] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 769] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [282]; unstable size 282; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 282] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 282] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.60268450,  4.07875919,  0.22120139,  1.13343334,  1.18244100,
         -0.09481192,  1.85378695,  3.72636414,  4.09832096]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
         -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.41it/s]100%|██████████| 1/1 [00:00<00:00,  8.40it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.32266092, -9.32172298, -4.42147398, -5.43138981, -3.97195244,
          -5.48412561, -4.08728886, -6.25158787, -8.70373154, -9.29818153]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.11533642]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1220 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.092309951782227
alpha/beta optimization time: 1.2689142227172852
initial alpha-crown bounds: tensor([[ 2.64488816,  4.13461876,  0.23508102,  1.15149236,  1.20023561,
         -0.07920110,  1.87038028,  3.78053164,  4.15428305]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0792011022567749
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.52903056144714
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.52899408340454
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.52896928787231
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.52894830703735
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.52892994880676
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.52891087532043
Verifying property 5 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07920110]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
        -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07920110]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 769
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 279
Node /15 input 0: size torch.Size([100]) unstable 8
-----------------
# of unstable neurons: 1056
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010538101196289062
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0792006254196167
10 lb beta sum: 0.0, worst -0.079201340675354
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0561    transfer 0.0001    finalize 0.0002    func 0.0566    
Accumulated time: func 0.0566    prepare 0.0002    bound 0.0561    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 79] 
split level 3: [/input-12, 47] 
split level 4: [/input-8, 1828] 
split level 5: [/input-8, 190] 
split level 6: [/input-8, 1489] 
split level 7: [/input-8, 175] 
split level 8: [/input-8, 1836] 
split level 9: [/input-8, 1955] 
split level 10: [/input-8, 1969] 
split level 11: [/input-8, 1950] 
split level 12: [/input-8, 530] 
split level 13: [/input-8, 181] 
split level 14: [/input, 2474] 
split level 15: [/input-8, 1958] 
split level 16: [/input-8, 1481] 
split level 17: [/input-8, 1835] 
split level 18: [/input-8, 1948] 
split level 19: [/input-8, 1937] 
split level 20: [/input-8, 1483] 
split level 21: [/input, 2506] 
split level 22: [/input-8, 1017] 
split level 23: [/input, 2491] 
split level 24: [/input-8, 30] 
split level 25: [/input-8, 1977] 
split level 26: [/input, 2425] 
split level 27: [/input-8, 1903] 
split level 28: [/input-12, 62] 
split level 29: [/input-8, 107] 
split level 30: [/input, 966] 
split level 31: [/input-8, 1929] 
split level 32: [/input-8, 1930] 
split level 33: [/input-8, 1018] 
split level 34: [/input, 664] 
split level 35: [/input-8, 1121] 
split level 36: [/input, 2536] 
split level 37: [/input-8, 1936] 
split level 38: [/input, 2520] 
split level 39: [/input-8, 1938] 
split level 40: [/input, 2504] 
split level 41: [/input, 2426] 
split level 42: [/input, 1976] 
split level 43: [/input-8, 1933] 
split level 44: [/input-8, 1982] 
split level 45: [/input, 1959] 
split level 46: [/input, 1975] 
split level 47: [/input, 1955] 
split level 48: [/input, 2440] 
split level 49: [/input, 3717] 
split level 50: [/input-8, 1834] 
split level 51: [/input, 2024] 
split level 52: [/input-8, 1473] 
split level 53: [/input-8, 1166] 
split level 54: [/input, 2376] 
split level 55: [/input, 1956] 
split level 56: [/input, 2007] 
split level 57: [/input-8, 1502] 
split level 58: [/input, 3789] 
split level 59: [/input, 1925] 
split level 60: [/input, 1186] 
split level 61: [/input-8, 1997] 
split level 62: [/input, 3756] 
split level 63: [/input, 2004] 
split level 64: [/input, 1909] 
split level 65: [/input, 2442] 
split level 66: [/input, 377] 
split level 67: [/input, 998] 
split level 68: [/input, 1927] 
split level 69: [/input, 999] 
split level 70: [/input-8, 1308] 
split level 71: [/input, 930] 
split level 72: [/input-8, 533] 
split level 73: [/input-8, 963] 
split level 74: [/input-8, 1518] 
split level 75: [/input, 216] 
split level 76: [/input, 2460] 
split level 77: [/input, 1254] 
split level 78: [/input, 3749] 
split level 79: [/input-8, 1931] 
split level 80: [/input-8, 1010] 
split level 81: [/input-8, 373] 
split level 82: [/input, 1384] 
split level 83: [/input, 2420] 
split level 84: [/input-8, 1129] 
split level 85: [/input, 1174] 
split level 86: [/input, 940] 
split level 87: [/input-8, 1513] 
split level 88: [/input-8, 1103] 
split level 89: [/input, 1964] 
split level 90: [/input, 953] 
split level 91: [/input, 1148] 
split level 92: [/input-8, 1747] 
split level 93: [/input, 1987] 
split level 94: [/input, 1971] 
split level 95: [/input, 1190] 
split level 96: [/input, 3772] 
split level 97: [/input, 2406] 
split level 98: [/input, 961] 
split level 99: [/input, 3818] 
split level 100: [/input-8, 1175] 
split level 101: [/input-8, 964] 
split level 102: [/input, 1237] 
split level 103: [/input, 989] 
split level 104: [/input, 1948] 
split level 105: [/input-8, 962] 
split level 106: [/input, 2518] 
split level 107: [/input-8, 1934] 
split level 108: [/input-8, 361] 
split level 109: [/input, 1185] 
split level 110: [/input, 973] 
split level 111: [/input, 1011] 
split level 112: [/input, 3778] 
split level 113: [/input, 893] 
split level 114: [/input-8, 1746] 
split level 115: [/input, 1980] 
split level 116: [/input, 3813] 
split level 117: [/input, 1253] 
split level 118: [/input, 1915] 
split level 119: [/input, 362] 
split level 120: [/input, 962] 
split level 121: [/input, 1202] 
split level 122: [/input, 1932] 
split level 123: [/input, 3724] 
split level 124: [/input, 631] 
split level 125: [/input, 421] 
split level 126: [/input, 2010] 
split level 127: [/input, 342] 
split level 128: [/input-8, 979] 
split level 129: [/input, 1016] 
split level 130: [/input, 1902] 
split level 131: [/input, 909] 
split level 132: [/input, 1170] 
split level 133: [/input, 232] 
split level 134: [/input-8, 1183] 
split level 135: [/input, 388] 
split level 136: [/input, 3739] 
split level 137: [/input-8, 1738] 
split level 138: [/input, 3953] 
split level 139: [/input, 3761] 
split level 140: [/input, 436] 
split level 141: [/input, 1933] 
split level 142: [/input, 1092] 
split level 143: [/input, 996] 
split level 144: [/input, 2498] 
split level 145: [/input, 1914] 
split level 146: [/input, 1917] 
split level 147: [/input, 2018] 
split level 148: [/input, 3793] 
split level 149: [/input, 727] 
split level 150: [/input, 2402] 
split level 151: [/input, 3954] 
split level 152: [/input, 977] 
split level 153: [/input, 2378] 
split level 154: [/input, 2743] 
split level 155: [/input, 451] 
split level 156: [/input, 2387] 
split level 157: [/input, 2178] 
split level 158: [/input, 1017] 
split level 159: [/input, 3698] 
split level 160: [/input, 1164] 
split level 161: [/input, 1269] 
split level 162: [/input, 1165] 
split level 163: [/input, 3970] 
split level 164: [/input, 2037] 
split level 165: [/input, 491] 
split level 166: [/input, 1985] 
split level 167: [/input-8, 369] 
split level 168: [/input, 2040] 
split level 169: [/input, 1934] 
split level 170: [/input, 2391] 
split level 171: [/input-8, 948] 
split level 172: [/input, 993] 
split level 173: [/input, 1249] 
split level 174: [/input, 2510] 
split level 175: [/input, 3863] 
split level 176: [/input, 359] 
split level 177: [/input, 3513] 
split level 178: [/input, 2741] 
split level 179: [/input, 490] 
split level 180: [/input, 1018] 
split level 181: [/input-8, 1128] 
split level 182: [/input, 382] 
split level 183: [/input, 2645] 
split level 184: [/input, 1149] 
split level 185: [/input, 2478] 
split level 186: [/input, 3707] 
split level 187: [/input, 3864] 
split level 188: [/input-8, 1911] 
split level 189: [/input, 836] 
split level 190: [/input-8, 143] 
split level 191: [/input, 1903] 
split level 192: [/input, 1875] 
split level 193: [/input, 1091] 
split level 194: [/input, 3812] 
split level 195: [/input, 461] 
split level 196: [/input, 3745] 
split level 197: [/input, 3683] 
split level 198: [/input-8, 709] 
split level 199: [/input-8, 969] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07918167114257812
10 lb beta sum: 0.0, worst -0.07918167114257812
Time: prepare 0.0122    bound 0.1029    transfer 0.0012    finalize 0.0032    func 0.1222    
Accumulated time: func 0.1788    prepare 0.0225    bound 0.1590    transfer 0.0013    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.04314685) min lb tensor(-0.07917941)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.011384248733520508 
BICCOS Cumulative time: 0.011384248733520508
Preprocessing time: 0.010462045669555664 Inference time: 0.00017952919006347656 Add cuts time: 8.845329284667969e-05 Cut analysis time: 0.0006542205810546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07645 (1), -0.07645 (1), -0.07636 (1), -0.07629 (1), -0.07623 (1), -0.07622 (1), -0.07616 (1), -0.07611 (1), -0.07610 (1), -0.07607 (1), -0.07606 (1), -0.07605 (1), -0.07590 (1), -0.07589 (1), -0.07588 (1), -0.07581 (1), -0.07564 (1), -0.07562 (1), -0.07551 (1), -0.07537 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5216    set_bounds 0.0099    solve 0.1224    add 0.1078    
Accumulated time: pickout 0.0004    decision 0.5216    set_bounds 0.0099    solve 0.1224    add 0.1078    
Current (lb-rhs): -0.07645368576049805
50 domains visited
Cumulative time: 0.8498175144195557

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 46] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 1: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 79] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 47] [/input-12, 79] [/input-12, 79] [/input-12, 47] [/input-12, 47] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
split level 3: [/input-8, 181] [/input-8, 1836] [/input-8, 1836] [/input-8, 1489] [/input-8, 1836] [/input-12, 47] [/input-12, 47] [/input-12, 47] [/input-12, 47] [/input-12, 47] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06679463386535645
10 lb beta sum: 0.43500104546546936, worst -0.04207789897918701
Time: prepare 0.0080    bound 0.1271    transfer 0.0009    finalize 0.0028    func 0.1415    
Accumulated time: func 0.3203    prepare 0.0307    bound 0.2861    transfer 0.0021    finalize 0.0062    
all_split False
======================Cut inference begins======================
max lb tensor(0.08237457) min lb tensor(-0.04202414)
Number of Verified Splits: 139 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.020333290100097656 
BICCOS Cumulative time: 0.031717538833618164
Preprocessing time: 0.012456655502319336 Inference time: 0.005687713623046875 Add cuts time: 0.0019600391387939453 Cut analysis time: 0.0002288818359375
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0013    decision 0.0223    set_bounds 0.0131    solve 0.1417    add 0.0152    
Accumulated time: pickout 0.0017    decision 0.5439    set_bounds 0.0230    solve 0.2640    add 0.1230    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([79, 90]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.83001892e-16,  1.21254608e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([79, 90]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.83001892e-16,  3.77048105e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([79, 90]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.83002104e-16,  1.24211356e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([79, 90]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.83002104e-16,  3.65846008e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029662728309631348

all verified at 1th iter
Time: prepare 0.0004    bound 0.0111    transfer 0.0001    finalize 0.0002    func 0.0118    
Accumulated time: func 0.3322    prepare 0.0311    bound 0.2972    transfer 0.0022    finalize 0.0064    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 197.2273850440979
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.22729229927063
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.22726845741272
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.7731 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 184, vnnlib ID: 184 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
         -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [448]; unstable size 448; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 126, 1, 448] with unstable size 125 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 448] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 448] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [125]; unstable size 125; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 125] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 125] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.26391125,  0.73275733,  3.13852215,  4.64125395,  3.28221655,
          4.80756092,  5.62747574,  4.06410265, -0.90191245]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
         -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
          -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.29288840]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.14761901, -0.63968253, -0.56031746,  ...,  0.16984135,
             0.21746039,  0.23333341],
           [-1.32222211, -0.84603173, -0.43333322,  ...,  0.21746039,
             0.26507944,  0.28095245],
           [-1.40158725, -1.27460313, -0.84603173,  ...,  0.24920642,
             0.31269848,  0.34444451],
           ...,
           [-1.32222211, -1.33809519, -1.32222211,  ..., -0.03650784,
            -0.59206349, -1.03650784],
           [-0.59206349, -0.49682540, -0.29047608,  ..., -0.09999990,
            -0.81428570, -1.06825387],
           [ 0.32857150,  0.40793657,  0.47142863,  ...,  0.05873025,
            -0.21111101, -0.40158719]],

          [[-0.78904986, -0.16103047,  0.03220624,  ...,  0.66022551,
             0.66022551,  0.67632860],
           [-1.15942025, -0.54750401, -0.03220600,  ...,  0.72463775,
             0.72463775,  0.74074084],
           [-1.33655393, -1.07890499, -0.57971013,  ...,  0.75684386,
             0.77294695,  0.80515307],
           ...,
           [-1.20772946, -1.20772946, -1.19162631,  ..., -0.06441211,
            -0.51529789, -0.93397743],
           [-0.57971013, -0.48309177, -0.27375188,  ..., -0.12882435,
            -0.72463763, -0.95008045],
           [ 0.28985518,  0.37037048,  0.43478271,  ...,  0.03220624,
            -0.12882435, -0.32206106]],

          [[-0.10344811,  0.72113961,  1.23088503,  ...,  1.56072009,
             1.57571256,  1.59070504],
           [-0.85307342,  0.06146942,  0.96101969,  ...,  1.56072009,
             1.57571256,  1.60569763],
           [-0.92803597, -0.67316341, -0.07346311,  ...,  1.59070504,
             1.62069011,  1.63568258],
           ...,
           [-0.73313338, -0.83808094, -0.88305843,  ...,  0.09145443,
            -0.16341813, -0.26836565],
           [-0.29835078, -0.28335828, -0.11844061,  ...,  0.06146942,
            -0.29835078, -0.32833579],
           [ 0.37631202,  0.42128953,  0.46626705,  ...,  0.16641696,
             0.04647692, -0.04347810]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0706 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 185, vnnlib ID: 185 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.06885719, -5.39221478, -5.41002798, -5.94510174, -5.27591610,
         -6.06000948, -5.04459095, -6.26535511, -7.53897762, -5.24221373]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [444]; unstable size 444; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 444] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 444] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 444] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 172] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17368031, -0.12169071, -0.52097607,  0.06974673, -0.65863228,
          0.17358899, -0.89032555,  0.25720072,  1.71557140]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.06885719, -5.39221478, -5.41002798, -5.94510174, -5.27591610,
         -6.06000948, -5.04459095, -6.26535511, -7.53897762, -5.24221373]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.06885624, -5.39221478, -5.41002798, -5.94510174, -5.27591515,
          -6.06000900, -5.04459095, -6.26535511, -7.53897667, -5.24221325],
         [-7.06885624, -5.39221478, -5.41002798, -5.94510174, -5.27591515,
          -6.06000900, -5.04459095, -6.26535511, -7.53897667, -5.24221325]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.15000153,  0.16781473,  0.03370190, -0.19762230]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0860 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 186, vnnlib ID: 186 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.72309113, -11.37285328, -11.28134155, -12.68495083, -11.58407688,
         -12.91345787, -12.84364223, -12.81871128,  -7.10625744, -11.70213604]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [490]; unstable size 490; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 152, 1, 490] with unstable size 151 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 490] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 490] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [151]; unstable size 151; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 151] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.24744284, 3.64492726, 3.52347636, 4.82812738, 3.78522539, 5.03832436,
         5.00732327, 4.91135693, 4.00957584]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0294 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 187, vnnlib ID: 187 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.51928949, -5.15087223, -3.22848940, -3.80073190, -3.15746570,
         -3.94839764, -3.82955623, -4.85578012, -2.35027075, -4.11050558]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [721]; unstable size 721; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 721] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 721] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 721] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 190] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.20104569,  2.09830117,  0.14130938,  0.66386670,  0.04208767,
          0.79857552,  0.56520987,  1.63165128,  1.12448716]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.51928949, -5.15087223, -3.22848940, -3.80073190, -3.15746570,
         -3.94839764, -3.82955623, -4.85578012, -2.35027075, -4.11050558]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.53468847, -5.19556904, -3.22439003, -3.86211801, -3.17368507,
          -4.00655746, -3.77223229, -4.88972187, -2.58229876, -4.19417620]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04761028]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0568 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 188, vnnlib ID: 188 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
         -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [339]; unstable size 339; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 339] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 339] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 339] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 187] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.05137622,  1.62128544,  1.31240141,  0.74176526,  1.35647559,
          1.30591059,  2.72699118,  0.18010390,  1.41348743]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
         -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.44it/s]100%|██████████| 1/1 [00:00<00:00,  8.43it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.97218704, -7.05845642, -4.88922119, -6.54895496, -5.88330650,
          -6.60418797, -6.63821125, -8.03036880, -5.43032932, -6.83684731]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.08296585]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1212 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.740819931030273
alpha/beta optimization time: 1.2370116710662842
initial alpha-crown bounds: tensor([[-0.04131901,  1.64049387,  1.33070254,  0.74799562,  1.37658381,
          1.32323408,  2.73499799,  0.19743526,  1.43069601]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.04131901264190674
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.57307720184326
Verifying property 0 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04131901]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
        -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04131901]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 339
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 187
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 532
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010633468627929688
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04131817817687988
10 lb beta sum: 0.0, worst -0.04131948947906494
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0559    transfer 0.0001    finalize 0.0001    func 0.0564    
Accumulated time: func 0.0564    prepare 0.0002    bound 0.0559    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 62] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 79] 
split level 4: [/input-12, 69] 
split level 5: [/input-8, 356] 
split level 6: [/input-8, 2046] 
split level 7: [/input-8, 2026] 
split level 8: [/input-8, 355] 
split level 9: [/input-8, 364] 
split level 10: [/input-8, 353] 
split level 11: [/input-8, 357] 
split level 12: [/input-8, 354] 
split level 13: [/input-8, 557] 
split level 14: [/input-8, 174] 
split level 15: [/input-8, 345] 
split level 16: [/input-8, 1942] 
split level 17: [/input-8, 1169] 
split level 18: [/input-8, 1918] 
split level 19: [/input-8, 1964] 
split level 20: [/input, 2182] 
split level 21: [/input-8, 50] 
split level 22: [/input-8, 53] 
split level 23: [/input-8, 1965] 
split level 24: [/input-8, 1767] 
split level 25: [/input, 2709] 
split level 26: [/input-8, 1973] 
split level 27: [/input-8, 360] 
split level 28: [/input-8, 1252] 
split level 29: [/input-8, 1937] 
split level 30: [/input-8, 352] 
split level 31: [/input-8, 1875] 
split level 32: [/input-8, 730] 
split level 33: [/input-8, 932] 
split level 34: [/input-8, 2003] 
split level 35: [/input, 1721] 
split level 36: [/input, 420] 
split level 37: [/input-8, 1211] 
split level 38: [/input-8, 273] 
split level 39: [/input-8, 1227] 
split level 40: [/input, 123] 
split level 41: [/input-8, 1822] 
split level 42: [/input-8, 1778] 
split level 43: [/input-8, 1770] 
split level 44: [/input-8, 1836] 
split level 45: [/input, 157] 
split level 46: [/input, 2444] 
split level 47: [/input, 441] 
split level 48: [/input, 2730] 
split level 49: [/input-8, 537] 
split level 50: [/input-8, 1018] 
split level 51: [/input-8, 1773] 
split level 52: [/input-8, 535] 
split level 53: [/input-8, 183] 
split level 54: [/input-8, 132] 
split level 55: [/input, 425] 
split level 56: [/input-8, 1799] 
split level 57: [/input, 1925] 
split level 58: [/input, 3090] 
split level 59: [/input, 2455] 
split level 60: [/input-8, 1228] 
split level 61: [/input, 3089] 
split level 62: [/input, 746] 
split level 63: [/input, 572] 
split level 64: [/input-8, 545] 
split level 65: [/input, 1764] 
split level 66: [/input-8, 1952] 
split level 67: [/input, 983] 
split level 68: [/input-8, 37] 
split level 69: [/input-8, 527] 
split level 70: [/input, 373] 
split level 71: [/input, 2081] 
split level 72: [/input-8, 262] 
split level 73: [/input, 647] 
split level 74: [/input, 2364] 
split level 75: [/input-8, 2038] 
split level 76: [/input-8, 1993] 
split level 77: [/input-8, 717] 
split level 78: [/input-8, 909] 
split level 79: [/input-8, 538] 
split level 80: [/input, 230] 
split level 81: [/input-8, 1217] 
split level 82: [/input, 2186] 
split level 83: [/input-8, 1788] 
split level 84: [/input-8, 133] 
split level 85: [/input-8, 1253] 
split level 86: [/input, 677] 
split level 87: [/input, 1160] 
split level 88: [/input, 2202] 
split level 89: [/input, 2405] 
split level 90: [/input, 3229] 
split level 91: [/input, 643] 
split level 92: [/input, 102] 
split level 93: [/input-8, 908] 
split level 94: [/input, 1737] 
split level 95: [/input, 2097] 
split level 96: [/input-8, 1535] 
split level 97: [/input, 429] 
split level 98: [/input, 3214] 
split level 99: [/input-8, 1995] 
split level 100: [/input, 1131] 
split level 101: [/input, 2068] 
split level 102: [/input-8, 1435] 
split level 103: [/input, 188] 
split level 104: [/input, 2760] 
split level 105: [/input, 2435] 
split level 106: [/input-8, 1779] 
split level 107: [/input, 3263] 
split level 108: [/input, 354] 
split level 109: [/input, 2475] 
split level 110: [/input-8, 1254] 
split level 111: [/input, 2066] 
split level 112: [/input-8, 2037] 
split level 113: [/input-8, 720] 
split level 114: [/input-8, 2039] 
split level 115: [/input, 844] 
split level 116: [/input-8, 1803] 
split level 117: [/input, 742] 
split level 118: [/input-8, 901] 
split level 119: [/input-8, 512] 
split level 120: [/input, 728] 
split level 121: [/input, 1099] 
split level 122: [/input, 2156] 
split level 123: [/input, 2595] 
split level 124: [/input, 3479] 
split level 125: [/input, 2834] 
split level 126: [/input, 1940] 
split level 127: [/input, 841] 
split level 128: [/input, 2379] 
split level 129: [/input, 667] 
split level 130: [/input, 697] 
split level 131: [/input, 587] 
split level 132: [/input, 1614] 
split level 133: [/input-8, 1988] 
split level 134: [/input, 517] 
split level 135: [/input, 1144] 
split level 136: [/input, 315] 
split level 137: [/input, 2468] 
split level 138: [/input, 571] 
split level 139: [/input, 2380] 
split level 140: [/input-8, 1416] 
split level 141: [/input-8, 1845] 
split level 142: [/input, 104] 
split level 143: [/input-8, 1471] 
split level 144: [/input, 676] 
split level 145: [/input, 2365] 
split level 146: [/input-8, 1092] 
split level 147: [/input, 2609] 
split level 148: [/input, 1777] 
split level 149: [/input-8, 849] 
split level 150: [/input, 431] 
split level 151: [/input, 655] 
split level 152: [/input-8, 903] 
split level 153: [/input, 2460] 
split level 154: [/input, 2398] 
split level 155: [/input, 2695] 
split level 156: [/input, 2678] 
split level 157: [/input, 2594] 
split level 158: [/input, 690] 
split level 159: [/input-8, 1100] 
split level 160: [/input, 2340] 
split level 161: [/input, 3682] 
split level 162: [/input-8, 1514] 
split level 163: [/input-8, 748] 
split level 164: [/input-8, 1448] 
split level 165: [/input, 3749] 
split level 166: [/input-8, 2002] 
split level 167: [/input, 3670] 
split level 168: [/input, 2632] 
split level 169: [/input, 2524] 
split level 170: [/input, 461] 
split level 171: [/input-8, 946] 
split level 172: [/input, 1206] 
split level 173: [/input, 2547] 
split level 174: [/input, 1051] 
split level 175: [/input, 2325] 
split level 176: [/input-8, 1792] 
split level 177: [/input, 1110] 
split level 178: [/input-8, 1093] 
split level 179: [/input, 2287] 
split level 180: [/input, 766] 
split level 181: [/input-8, 955] 
split level 182: [/input-8, 1273] 
split level 183: [/input, 3639] 
split level 184: [/input, 764] 
split level 185: [/input-8, 36] 
split level 186: [/input, 3587] 
split level 187: [/input-8, 904] 
split level 188: [/input, 1408] 
split level 189: [/input, 1045] 
split level 190: [/input, 1790] 
split level 191: [/input, 1004] 
split level 192: [/input, 3769] 
split level 193: [/input, 1192] 
split level 194: [/input, 3582] 
split level 195: [/input-8, 1137] 
split level 196: [/input-8, 1517] 
split level 197: [/input, 1011] 
split level 198: [/input-8, 1694] 
split level 199: [/input-8, 1870] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0431748628616333
10 lb beta sum: 0.0, worst -0.04145216941833496
Time: prepare 0.0119    bound 0.1031    transfer 0.0019    finalize 0.0029    func 0.1224    
Accumulated time: func 0.1788    prepare 0.0220    bound 0.1590    transfer 0.0020    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.09357572) min lb tensor(-0.04131818)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.011189699172973633 
BICCOS Cumulative time: 0.011189699172973633
Preprocessing time: 0.010232210159301758 Inference time: 0.0002071857452392578 Add cuts time: 9.322166442871094e-05 Cut analysis time: 0.0006570816040039062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03799 (1), -0.03792 (1), -0.03769 (1), -0.03764 (1), -0.03751 (1), -0.03722 (1), -0.03716 (1), -0.03713 (1), -0.03682 (1), -0.03680 (1), -0.03679 (1), -0.03646 (1), -0.03635 (1), -0.03606 (1), -0.03573 (1), -0.03553 (1), -0.03546 (1), -0.03533 (1), -0.03505 (1), -0.03481 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5135    set_bounds 0.0116    solve 0.1225    add 0.0971    
Accumulated time: pickout 0.0004    decision 0.5135    set_bounds 0.0116    solve 0.1225    add 0.0971    
Current (lb-rhs): -0.037993669509887695
50 domains visited
Cumulative time: 0.8234477043151855

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 62] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 62] [/input-12, 4] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 4] [/input-12, 62] [/input-12, 62] [/input-12, 62] 
split level 2: [/input-12, 4] [/input-12, 69] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 69] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-8, 2026] [/input-8, 2026] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-8, 2026] [/input-12, 69] [/input-12, 69] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03226971626281738

all verified at 1th iter
Time: prepare 0.0079    bound 0.0123    transfer 0.0007    finalize 0.0025    func 0.0260    
Accumulated time: func 0.2048    prepare 0.0302    bound 0.1713    transfer 0.0028    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.06880057) min lb tensor(0.00019169)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.0343480110168457 
BICCOS Cumulative time: 0.045537710189819336
Preprocessing time: 0.011985540390014648 Inference time: 0.013723611831665039 Add cuts time: 0.008377552032470703 Cut analysis time: 0.0002613067626953125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0201    set_bounds 0.0115    solve 0.0261    add 0.0152    
Accumulated time: pickout 0.0015    decision 0.5336    set_bounds 0.0231    solve 0.1486    add 0.1122    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 10]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.93692930e-16, 3.54763120e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 10]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.93692930e-16, 7.18046874e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 10]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.60456067e-13, 3.78338546e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 10]), tensor([1., 1.]), tensor([0, 0]), tensor([1.60456067e-13, 6.55020922e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.004819989204406738

all verified at 0th iter
Time: prepare 0.0004    bound 0.0046    transfer 0.0001    finalize 0.0001    func 0.0053    
Accumulated time: func 0.2101    prepare 0.0306    bound 0.1759    transfer 0.0029    finalize 0.0056    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 197.42905592918396
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 197.42868781089783
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 197.42866230010986
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.42864274978638
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.42862343788147
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.42860460281372
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.4285852909088
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.42856645584106
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.5715 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 189, vnnlib ID: 189 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22406721, -5.09387970, -1.13128150, -2.34915662, -1.20606780,
         -2.44099808, -1.39945912, -3.09898949, -5.70387459, -5.12313890]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [421]; unstable size 421; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 184, 1, 421] with unstable size 183 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 421] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 421] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 183] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.44431496,  3.10675144, -0.30788937,  0.80543149,  0.89428461,
         -0.24248081,  1.52680290,  3.75318313,  3.18413162]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.22406721, -5.09387970, -1.13128150, -2.34915662, -1.20606780,
         -2.44099808, -1.39945912, -3.09898949, -5.70387459, -5.12313890]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.22406721, -5.09387970, -1.13128197, -2.34915662, -1.20606816,
          -2.44099808, -1.39945936, -3.09898996, -5.70387459, -5.12313890],
         [-4.22406721, -5.09387970, -1.13128197, -2.34915662, -1.20606816,
          -2.44099808, -1.39945936, -3.09898996, -5.70387459, -5.12313890]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07478619,  0.19339120]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.01111121, -0.05238085, -0.14761895,  ...,  0.10634929,
             0.21746039,  0.40793657],
           [-0.35396814, -0.41746020, -0.40158719,  ...,  0.01111121,
             0.29682547,  0.10634929],
           [-0.43333322, -0.32222211,  0.05873025,  ..., -0.13174593,
             0.58253974,  0.63015878],
           ...,
           [-0.67142856, -0.67142856, -0.67142856,  ..., -0.29047608,
            -0.29047608, -0.19523799],
           [-0.54444444, -0.59206349, -0.63968253,  ..., -0.86190474,
            -0.84603173, -0.40158719],
           [-0.60793650, -0.62380952, -0.59206349,  ..., -1.14761901,
            -1.03650784, -0.67142856]],

          [[ 0.61191636,  0.53140104,  0.41867965,  ...,  0.49919492,
             0.61191636,  0.69243163],
           [ 0.30595824,  0.20933989,  0.22544295,  ...,  0.06441236,
             0.35426742,  0.08051541],
           [ 0.09661847,  0.20933989,  0.59581327,  ..., -0.19323659,
             0.28985518,  0.32206130],
           ...,
           [ 0.41867965,  0.38647354,  0.33816436,  ..., -0.59581316,
            -0.59581316, -0.49919480],
           [ 0.57971025,  0.48309189,  0.40257660,  ..., -1.07890499,
            -1.09500802, -0.69243151],
           [ 0.54750413,  0.48309189,  0.48309189,  ..., -1.23993552,
            -1.19162631, -0.88566822]],

          [[-0.47826082, -0.49325335, -0.49325335,  ..., -0.28335828,
            -0.31334329, -0.29835078],
           [-0.68815589, -0.65817088, -0.59820086,  ..., -0.47826082,
            -0.35832080, -0.71814090],
           [-0.77811092, -0.62818587, -0.31334329,  ..., -0.86806595,
            -0.46326834, -0.47826082],
           ...,
           [ 0.55622208,  0.52623707,  0.49625200,  ..., -1.00299859,
            -1.04797614, -1.03298354],
           [ 0.72113961,  0.64617711,  0.58620709,  ..., -1.25787115,
            -1.33283365, -1.04797614],
           [ 0.72113961,  0.66116959,  0.67616212,  ..., -1.28785622,
            -1.28785622, -1.07796109]]],


         [[[ 0.01111121, -0.05238085, -0.14761895,  ...,  0.10634929,
             0.21746039,  0.40793657],
           [-0.35396814, -0.41746020, -0.40158719,  ...,  0.01111121,
             0.29682547,  0.10634929],
           [-0.43333322, -0.32222211,  0.05873025,  ..., -0.13174593,
             0.58253974,  0.63015878],
           ...,
           [-0.67142856, -0.67142856, -0.67142856,  ..., -0.29047608,
            -0.29047608, -0.19523799],
           [-0.54444444, -0.59206349, -0.63968253,  ..., -0.86190474,
            -0.84603173, -0.40158719],
           [-0.60793650, -0.62380952, -0.59206349,  ..., -1.14761901,
            -1.03650784, -0.67142856]],

          [[ 0.61191636,  0.53140104,  0.41867965,  ...,  0.49919492,
             0.61191636,  0.69243163],
           [ 0.30595824,  0.20933989,  0.22544295,  ...,  0.06441236,
             0.35426742,  0.08051541],
           [ 0.09661847,  0.20933989,  0.59581327,  ..., -0.19323659,
             0.28985518,  0.32206130],
           ...,
           [ 0.41867965,  0.38647354,  0.33816436,  ..., -0.59581316,
            -0.59581316, -0.49919480],
           [ 0.57971025,  0.48309189,  0.40257660,  ..., -1.07890499,
            -1.09500802, -0.69243151],
           [ 0.54750413,  0.48309189,  0.48309189,  ..., -1.23993552,
            -1.19162631, -0.88566822]],

          [[-0.47826082, -0.49325335, -0.49325335,  ..., -0.28335828,
            -0.31334329, -0.29835078],
           [-0.68815589, -0.65817088, -0.59820086,  ..., -0.47826082,
            -0.35832080, -0.71814090],
           [-0.77811092, -0.62818587, -0.31334329,  ..., -0.86806595,
            -0.46326834, -0.47826082],
           ...,
           [ 0.55622208,  0.52623707,  0.49625200,  ..., -1.00299859,
            -1.04797614, -1.03298354],
           [ 0.72113961,  0.64617711,  0.58620709,  ..., -1.25787115,
            -1.33283365, -1.04797614],
           [ 0.72113961,  0.66116959,  0.67616212,  ..., -1.28785622,
            -1.28785622, -1.07796109]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0764 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 190, vnnlib ID: 190 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.51938772,  -8.11381626,  -9.00568771, -10.62922859,  -9.08360767,
         -10.80996037, -10.68894196,  -9.68361282,  -4.49052000,  -7.37830973]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [513]; unstable size 513; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 513] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 513] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 513] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 197] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.66284275, 3.05478764, 3.87506914, 5.43707466, 3.87113762, 5.60540581,
         5.39609337, 4.38749218, 2.30119848]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0533 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 191, vnnlib ID: 191 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
          -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [548]; unstable size 548; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 548] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 548] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 548] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 214] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.22616172,  5.41774082,  0.20892322,  0.26687157, -0.04204355,
          0.62771285,  1.19141817,  3.92691135,  4.58853817]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
          -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
           -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02311993]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.06825387, -0.90952379, -0.92539680,  ..., -0.51269841,
            -0.24285704, -0.05238085],
           [-0.98888886, -0.90952379, -0.83015871,  ..., -0.56031746,
            -0.30634910, -0.38571417],
           [-0.98888886, -0.92539680, -0.78253967,  ..., -0.71904761,
            -0.56031746, -0.54444444],
           ...,
           [ 0.18571436,  0.36031753,  0.40793657,  ..., -0.48095238,
            -0.52857143, -0.76666665],
           [ 0.20158738,  0.37619054,  0.42380959,  ..., -0.38571417,
            -0.33809513, -0.59206349],
           [ 0.28095245,  0.28095245,  0.37619054,  ..., -0.65555555,
            -0.57619047, -0.38571417]],

          [[-0.77294683, -0.66022539, -0.67632848,  ..., -0.32206106,
            -0.54750401, -1.54589367],
           [-0.70853460, -0.69243151, -0.56360704,  ..., -0.40257636,
            -0.61191624, -1.61030602],
           [-0.72463763, -0.80515295, -0.61191624,  ..., -0.61191624,
            -0.82125598, -1.67471826],
           ...,
           [-0.08051517,  0.43478271,  0.64412248,  ..., -0.41867942,
            -0.56360704, -0.91787434],
           [ 0.03220624,  0.57971025,  0.82125610,  ..., -0.19323659,
            -0.22544271, -0.64412236],
           [ 0.24154601,  0.61191636,  0.90177143,  ..., -0.33816412,
            -0.28985494, -0.27375188]],

          [[-0.67316341, -0.62818587, -0.61319339,  ..., -0.34332830,
            -0.43328333, -1.00299859],
           [-0.61319339, -0.65817088, -0.55322337,  ..., -0.38830581,
            -0.49325335, -1.13793111],
           [-0.61319339, -0.76311839, -0.59820086,  ..., -0.58320838,
            -0.71814090, -1.24287868],
           ...,
           [-0.01349309,  0.46626705,  0.63118458,  ..., -0.34332830,
            -0.43328333, -0.73313338],
           [ 0.07646193,  0.58620709,  0.76611710,  ..., -0.16341813,
            -0.16341813, -0.50824583],
           [ 0.25637197,  0.60119957,  0.84107965,  ..., -0.32833579,
            -0.28335828, -0.20839565]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0726 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 192, vnnlib ID: 192 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.85122108,  -9.83976269,  -4.36141491,  -6.06150818,  -4.73432350,
          -6.12186289,  -4.43167305,  -5.76936531, -10.48191452,  -9.88933086]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [496]; unstable size 496; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 219, 1, 496] with unstable size 218 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 496] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 496] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [218]; unstable size 218; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 218] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.02029133,  4.69440079,  1.40866971,  0.14043295,  1.46608901,
         -0.25579298,  0.97369635,  5.52549458,  4.68338871]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.85122108,  -9.83976269,  -4.36141491,  -6.06150818,  -4.73432350,
          -6.12186289,  -4.43167305,  -5.76936531, -10.48191452,  -9.88933086]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.19215965, -10.07285023,  -4.68872547,  -6.33513165,  -5.02730227,
           -6.40092230,  -4.53446865,  -6.08764648, -10.82570934, -10.10628033]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15425682]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0312 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 193, vnnlib ID: 193 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
         -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 538] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 538] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 153] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.15295124, -0.39681900,  2.03169155,  1.50405121,  1.48509026,
          1.57360077,  1.36475849,  0.63238335,  1.97044230]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
         -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
          -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12399006]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.00476182e+00, -1.05238092e+00, -7.66666651e-01,  ...,
             1.88412726e+00,  1.86825418e+00,  1.86825418e+00],
           [-8.93650770e-01, -8.93650770e-01, -8.30158710e-01,  ...,
             1.88412726e+00,  1.91587329e+00,  1.94761932e+00],
           [-1.00476182e+00, -9.25396800e-01, -9.25396800e-01,  ...,
             1.82063520e+00,  2.01111126e+00,  2.04285717e+00],
           ...,
           [ 1.53968334e-01,  5.87302521e-02, -3.65078375e-02,  ...,
             2.49206424e-01,  2.65079439e-01,  2.65079439e-01],
           [ 1.22222304e-01,  1.22222304e-01,  1.06349289e-01,  ...,
             2.17460394e-01,  2.17460394e-01,  2.49206424e-01],
           [ 4.87301648e-01,  4.23809588e-01,  4.55555618e-01,  ...,
             2.01587379e-01,  1.85714364e-01,  2.01587379e-01]],

          [[-1.01449275e+00, -1.06280184e+00, -7.72946835e-01,  ...,
             2.06119204e+00,  2.06119204e+00,  2.04508877e+00],
           [-9.01771307e-01, -9.01771307e-01, -8.37359071e-01,  ...,
             2.02898574e+00,  2.06119204e+00,  2.07729483e+00],
           [-1.01449275e+00, -9.33977425e-01, -9.33977425e-01,  ...,
             1.91626441e+00,  2.09339786e+00,  2.10950065e+00],
           ...,
           [ 3.22062373e-02, -6.44121096e-02, -1.61030471e-01,  ...,
             1.61030710e-01,  1.77133769e-01,  1.77133769e-01],
           [ 1.22934580e-07,  1.22934580e-07, -1.61029361e-02,  ...,
             1.28824592e-01,  1.28824592e-01,  1.61030710e-01],
           [ 3.70370477e-01,  3.05958241e-01,  3.38164359e-01,  ...,
             1.12721533e-01,  9.66184735e-02,  1.12721533e-01]],

          [[-1.00299859e+00, -1.04797614e+00, -7.93103397e-01,  ...,
             2.05547261e+00,  2.05547261e+00,  2.09295392e+00],
           [-8.98050964e-01, -8.83058429e-01, -8.53073418e-01,  ...,
             2.02548766e+00,  2.07046509e+00,  2.10045004e+00],
           [-1.01799107e+00, -9.28035975e-01, -9.43028450e-01,  ...,
             1.92054021e+00,  2.10045004e+00,  2.10045004e+00],
           ...,
           [ 9.14544314e-02,  3.14844176e-02, -4.34781015e-02,  ...,
             2.56371975e-01,  2.71364480e-01,  2.71364480e-01],
           [ 1.06446937e-01,  1.06446937e-01,  9.14544314e-02,  ...,
             2.26386964e-01,  2.26386964e-01,  2.56371975e-01],
           [ 4.51274544e-01,  3.91304523e-01,  4.21289533e-01,  ...,
             2.11394474e-01,  1.96401969e-01,  2.11394474e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0701 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 194, vnnlib ID: 194 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
          -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [698]; unstable size 698; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 698] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 698] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 698] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 161] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.69664454,  5.13874531,  2.27037501, -0.31452271,  2.41091132,
          0.62896562,  2.07980633,  4.13404322,  5.02704430]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
          -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
           -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12302685]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.09999990, -0.13174593, -0.09999990,  ...,  0.31269848,
             0.29682547,  0.32857150],
           [-0.09999990, -0.13174593, -0.09999990,  ...,  0.37619054,
             0.34444451,  0.36031753],
           [-0.08412688, -0.09999990, -0.06825387,  ...,  0.43968260,
             0.40793657,  0.40793657],
           ...,
           [ 0.21746039,  0.80476195,  0.31269848,  ...,  0.24920642,
             0.53492069,  0.45555562],
           [ 0.43968260,  0.61428577,  0.04285724,  ..., -0.00476181,
             0.37619054,  0.26507944],
           [ 0.67777783,  0.82063496,  0.34444451,  ...,  0.07460327,
             0.51904768,  0.26507944]],

          [[ 0.14492765,  0.08051541,  0.08051541,  ...,  0.40257660,
             0.40257660,  0.45088577],
           [ 0.16103071,  0.11272153,  0.09661847,  ...,  0.43478271,
             0.41867965,  0.45088577],
           [ 0.19323683,  0.16103071,  0.16103071,  ...,  0.48309189,
             0.46698883,  0.46698883],
           ...,
           [ 0.35426742,  0.95008057,  0.46698883,  ...,  0.35426742,
             0.54750413,  0.40257660],
           [ 0.49919492,  0.64412248,  0.09661847,  ...,  0.09661847,
             0.38647354,  0.19323683],
           [ 0.64412248,  0.72463775,  0.28985518,  ...,  0.11272153,
             0.51529801,  0.16103071]],

          [[-0.56821585, -0.61319339, -0.59820086,  ..., -0.29835078,
            -0.29835078, -0.26836565],
           [-0.52323836, -0.55322337, -0.55322337,  ..., -0.28335828,
            -0.26836565, -0.23838064],
           [-0.46326834, -0.49325335, -0.47826082,  ..., -0.26836565,
            -0.25337315, -0.20839565],
           ...,
           [-0.16341813,  0.28635699, -0.11844061,  ..., -0.35832080,
            -0.19340314, -0.32833579],
           [-0.10344811, -0.01349309, -0.46326834,  ..., -0.65817088,
            -0.40329832, -0.61319339],
           [-0.05847061,  0.10644694, -0.25337315,  ..., -0.74812591,
            -0.40329832, -0.76311839]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0522 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 195, vnnlib ID: 195 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.77076054, -7.62575722, -4.14598608, -4.30755711, -4.49275303,
         -4.30263758, -4.76192760, -5.12311316, -9.43562317, -7.12698030]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [451]; unstable size 451; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 451] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 451] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 451] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.21912026,  2.78572941, -0.07663620,  0.15777636, -0.08433509,
          0.31483498,  0.74149060,  4.69014692,  2.36162901]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.77076054, -7.62575722, -4.14598608, -4.30755711, -4.49275303,
         -4.30263758, -4.76192760, -5.12311316, -9.43562317, -7.12698030]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.77750111, -7.54761982, -4.16146708, -4.15072727, -4.44591999,
          -4.14375591, -4.69891930, -5.00807619, -9.32279205, -7.01225615],
         [-7.77750111, -7.54761982, -4.16146708, -4.15072727, -4.44591999,
          -4.14375591, -4.69891930, -5.00807619, -9.32279205, -7.01225615]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01073980, -0.01771116]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0496 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 196, vnnlib ID: 196 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.99589634, -8.26478100, -4.99381447, -4.63861275, -5.23205948,
         -4.79511499, -4.13116074, -5.92502117, -6.71752071, -6.90651417]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 226, 1, 527] with unstable size 225 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 527] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [225]; unstable size 225; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 225] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.63359308,  2.80945683, -0.02099729,  0.19597054,  0.13199283,
         -0.82713407,  0.77079380,  1.11276007,  1.53818464]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.99589634, -8.26478100, -4.99381447, -4.63861275, -5.23205948,
         -4.79511499, -4.13116074, -5.92502117, -6.71752071, -6.90651417]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.99589586, -8.26478100, -4.99381447, -4.63861370, -5.23206043,
          -4.79511547, -4.13116169, -5.92502165, -6.71752071, -6.90651464],
         [-6.99589586, -8.26478100, -4.99381447, -4.63861370, -5.23206043,
          -4.79511547, -4.13116169, -5.92502165, -6.71752071, -6.90651464]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.35520077, -0.50745201]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]],


         [[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0609 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 197, vnnlib ID: 197 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.43056643, -7.67667961, -2.21826839, -5.13023186, -4.35107708,
         -5.29444695, -6.64366817, -6.71203184, -2.96457338, -7.15871954]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [420]; unstable size 420; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 420] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 420] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 420] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 139] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.68506145, 0.59332943, 3.33365774, 2.62052536, 3.49451232, 4.81873131,
         4.89159966, 1.19089472, 5.18301678]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0543 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 198, vnnlib ID: 198 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.62386703, -13.36399269, -10.09908199, -10.70369053, -11.34663582,
         -10.95080948, -11.28316879, -13.42721939, -11.15745735, -13.38610840]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [426]; unstable size 426; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 133, 1, 426] with unstable size 132 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 426] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 426] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [132]; unstable size 132; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 132] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.35772824, 0.16254246, 0.66209161, 1.36232638, 0.89922130, 1.23943400,
         3.33602262, 1.22553658, 3.36414504]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0504 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 199, vnnlib ID: 199 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.18024397, -5.98002243, -5.06597948, -4.94513512, -5.08981609,
         -5.01497555, -4.47184467, -5.60709667, -6.87614346, -5.18200159]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [543]; unstable size 543; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 543] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 543] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 543] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 203] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.73734808,  0.50935507,  0.11531389,  0.06424898,  0.13350666,
          0.12348157,  0.50896811,  1.37839448, -0.26445580]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.18024397, -5.98002243, -5.06597948, -4.94513512, -5.08981609,
         -5.01497555, -4.47184467, -5.60709667, -6.87614346, -5.18200159]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.03544331, -5.49160671, -5.23422575, -5.08459759, -5.23702908,
          -5.16129684, -4.69914150, -5.69229412, -6.59322977, -4.69896603]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00017548]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0073 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0745 seconds
############# Summary #############
Final verified acc: 47.5% (total 200 examples)
Problem instances count: 200 , total verified (safe/unsat): 95 , total falsified (unsafe/sat): 101 , timeout: 4
mean time for ALL instances (total 200):4.8398629355447715, max time: 220.51862168312073
mean time for verified SAFE instances(total 95): 1.1237009374718918, max time: 33.55145859718323
mean time for verified (SAFE + UNSAFE) instances (total 196): 0.5871540818895612, max time: [1.4313499927520752, 0.08688116073608398, 0.052617788314819336, 0.05340218544006348, 0.07795166969299316, 0.07887768745422363, 0.05419301986694336, 0.04351305961608887, 0.07393860816955566, 0.32109880447387695, 0.050253868103027344, 0.05938100814819336, 0.04744911193847656, 0.0787801742553711, 0.07399320602416992, 0.08391571044921875, 0.05773043632507324, 0.06047844886779785, 0.07181692123413086, 0.04438638687133789, 0.05597877502441406, 0.04296374320983887, 0.07117438316345215, 0.07892727851867676, 0.07127571105957031, 0.06810688972473145, 0.07601094245910645, 0.031913042068481445, 0.07473182678222656, 0.08441305160522461, 0.06209301948547363, 0.0808861255645752, 0.07667899131774902, 0.05748915672302246, 0.0483851432800293, 0.07123732566833496, 0.03155803680419922, 0.07622241973876953, 0.04900074005126953, 0.046102285385131836, 0.07249617576599121, 0.05200648307800293, 0.04329228401184082, 0.08420109748840332, 0.08015322685241699, 0.042090415954589844, 0.03156447410583496, 0.07841253280639648, 0.03461265563964844, 0.035059452056884766, 0.07643461227416992, 0.07885169982910156, 0.08022594451904297, 0.07494544982910156, 0.0743570327758789, 0.034365177154541016, 0.08064866065979004, 0.04697227478027344, 0.07544755935668945, 0.06720471382141113, 0.08563542366027832, 0.08679914474487305, 0.05732250213623047, 0.048636436462402344, 0.07533812522888184, 0.07405686378479004, 0.05440998077392578, 0.04933929443359375, 0.0614166259765625, 0.07424783706665039, 0.0704338550567627, 0.07953929901123047, 0.06739473342895508, 0.08914732933044434, 0.08037018775939941, 0.08198785781860352, 0.09850621223449707, 0.07517862319946289, 0.07784438133239746, 0.08559942245483398, 0.0806114673614502, 0.07869648933410645, 0.08676648139953613, 0.0924074649810791, 0.0776054859161377, 0.07375454902648926, 0.07356715202331543, 0.04143214225769043, 0.07198691368103027, 0.07917261123657227, 0.07060885429382324, 0.08599996566772461, 0.05682563781738281, 0.0764460563659668, 0.07256150245666504, 0.031194210052490234, 0.07005095481872559, 0.05224323272705078, 0.0496063232421875, 0.06091189384460449, 0.07445740699768066]
mean time for verified SAFE + TIMEOUT instances (total 99): 9.6933537830006, max time: [219.2810971736908, 204.81948566436768, 220.51862168312073, 208.27123093605042] 
mean time for verified UNSAFE instances (total 101): 0.08248129693588407, max time: 1.4313499927520752
unsafe-pgd (total 101), index: [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 16, 19, 21, 23, 25, 26, 29, 32, 34, 35, 36, 37, 43, 44, 45, 46, 48, 50, 53, 54, 56, 58, 61, 63, 65, 66, 72, 76, 77, 78, 80, 82, 84, 87, 88, 89, 90, 94, 95, 96, 98, 100, 101, 102, 104, 105, 106, 108, 113, 119, 120, 122, 124, 125, 126, 127, 129, 130, 132, 134, 141, 143, 145, 148, 149, 150, 151, 152, 155, 156, 158, 163, 165, 167, 170, 172, 173, 174, 176, 184, 185, 187, 189, 191, 192, 193, 194, 195, 196, 199]
safe-incomplete (total 84), index: [2, 7, 8, 14, 15, 17, 18, 20, 22, 27, 28, 30, 31, 33, 38, 39, 40, 41, 42, 47, 49, 51, 55, 59, 60, 62, 68, 69, 70, 71, 73, 74, 75, 79, 81, 83, 85, 86, 91, 92, 93, 99, 103, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 121, 131, 133, 135, 136, 138, 139, 140, 142, 144, 146, 147, 153, 154, 157, 160, 161, 162, 164, 166, 168, 171, 175, 177, 179, 180, 182, 186, 190, 197, 198]
safe (total 11), index: [24, 52, 57, 123, 128, 137, 159, 169, 181, 183, 188]
unknown (total 4), index: [64, 67, 97, 178]
