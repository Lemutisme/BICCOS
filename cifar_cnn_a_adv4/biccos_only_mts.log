Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: ablation_results/cifar_cnn_a_adv4/biccos_only_mts.out
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: cnn_4layer_adv4
  path: models/sdp/cifar_cnn_a_adv4.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 4096
  auto_enlarge_batch_size: true
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: mip
    output_cut: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 200
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: false
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: breadth_first
  cut:
    enabled: true
    cuts_path: /tmp/abcrown_cuts_12675
    implication: false
    bab_cut: true
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 0.99
    iteration: 200
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.05
    number_cuts: 500
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
    biccos:
      enabled: true
      auto_param: false
      constraint_strengthening: false
      recursively_strengthening: false
      merge_cut_enabled: false
      fast_inference_enabled: false
      drop_ratio: 0.5
      max_infer_iter: 40
      heuristic: neuron_influence_score
      save_cuts: false
      multi_tree_branching:
        enabled: true
        restore_best_tree: true
        keep_n_best_domains: 50
        target_batch_size: 200
        iterations: 5
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
      branching_point_node: ''
      branching_point_db: []
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 50
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  biccos_mip_sanity_check: false
  sanity_check: 0
  z_split_enabled: false

Experiments at Wed Oct 30 12:37:09 2024 on r23g0004.hpc.itc.rwth-aachen.de
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten(start_dim=1, end_dim=-1)
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  0.weight: shape torch.Size([16, 3, 4, 4])
  0.bias: shape torch.Size([16])
  2.weight: shape torch.Size([32, 16, 4, 4])
  2.bias: shape torch.Size([32])
  5.weight: shape torch.Size([100, 2048])
  5.bias: shape torch.Size([100])
  7.weight: shape torch.Size([10, 100])
  7.bias: shape torch.Size([10])
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to ablation_results/cifar_cnn_a_adv4/biccos_only_mts.out.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.39694118, -4.29481602, -2.76418877, -2.27564764, -2.33342099,
         -2.30766487, -2.16014171, -2.94787169, -5.16796875, -4.44396448]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [149]; unstable size 149; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 96, 1, 149] with unstable size 95 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 149] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [95]; unstable size 95; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 95] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 95] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.88380671,  1.74300218,  0.37986493, -0.05004513,  0.02511473,
         -0.22278100,  0.53882378,  2.69820690,  1.93023634]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.39694118, -4.29481602, -2.76418877, -2.27564764, -2.33342099,
         -2.30766487, -2.16014171, -2.94787169, -5.16796875, -4.44396448]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.39694166, -4.29481649, -2.76418877, -2.27564788, -2.33342123,
          -2.30766511, -2.16014194, -2.94787169, -5.16796970, -4.44396496],
         [-4.39694166, -4.29481649, -2.76418877, -2.27564788, -2.33342123,
          -2.30766511, -2.16014194, -2.94787169, -5.16796970, -4.44396496]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.05777335, -0.11550593]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 1.7792 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
         -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [560]; unstable size 560; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 560] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 560] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 560] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 164] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.78500080, -0.48810321,  8.46035385,  7.31322861,  7.79788828,
          7.43279171,  7.35444212,  7.89911604,  5.04577732]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
         -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
          -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.25655651]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.46507931, -1.30634916, -1.32222211,  ...,  0.10634929,
             0.02698422,  0.04285724],
           [-1.25873005, -1.35396814, -1.40158725,  ...,  0.31269848,
             0.28095245,  0.28095245],
           [ 0.15396833,  0.42380959,  0.29682547,  ..., -0.00476181,
            -0.17936498, -0.24285704],
           ...,
           [-0.86190474, -0.60793650, -0.38571417,  ...,  0.91587305,
             0.82063496,  0.83650798],
           [-0.43333322, -0.30634910, -0.22698402,  ...,  0.90000004,
             0.77301592,  0.75714290],
           [-0.33809513, -0.30634910, -0.27460307,  ...,  0.88412702,
             0.78888893,  0.67777783]],

          [[-1.44927526, -1.28824472, -1.30434775,  ...,  0.20933989,
             0.14492765,  0.20933989],
           [-1.35265696, -1.36875999, -1.33655393,  ...,  0.37037048,
             0.35426742,  0.40257660],
           [-1.32045078, -1.35265696, -1.41706920,  ...,  0.04830930,
            -0.14492741, -0.24154577],
           ...,
           [-0.75684375, -0.51529789, -0.30595800,  ...,  0.91787446,
             0.83735919,  0.90177143],
           [-0.32206106, -0.19323659, -0.14492741,  ...,  0.90177143,
             0.78904998,  0.82125610],
           [-0.17713353, -0.17713353, -0.16103047,  ...,  0.90177143,
             0.78904998,  0.74074084]],

          [[-1.54272878, -1.49775124, -1.49775124,  ...,  0.42128953,
             0.34632701,  0.37631202],
           [-1.51274371, -1.55772126, -1.52773619,  ...,  0.52623707,
             0.49625200,  0.49625200],
           [-1.13793111, -1.09295356, -1.12293863,  ...,  0.09145443,
            -0.08845562, -0.19340314],
           ...,
           [-0.59820086, -0.43328333, -0.28335828,  ...,  0.88605714,
             0.81109464,  0.88605714],
           [-0.23838064, -0.14842562, -0.11844061,  ...,  0.85607213,
             0.76611710,  0.81109464],
           [-0.07346311, -0.10344811, -0.08845562,  ...,  0.75112462,
             0.79610211,  0.73613209]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0577 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22966528, -2.93601108, -5.89175558, -5.29639721, -5.30219364,
         -5.44004345, -5.44263363, -6.58539677, -3.89646339, -3.77071643]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [779]; unstable size 779; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 779] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 779] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 779] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 180] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.59069538, 1.86671638, 1.25944376, 1.32242680, 1.39030695, 1.32808542,
         2.61486292, 0.20729733, 0.53434551]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0306 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
          -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [408]; unstable size 408; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 408] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 408] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 408] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 166] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.20016575,  7.28631210,  0.47117397,  0.94903350,  0.90004665,
          2.26531672, -1.32159257,  7.77309608,  6.37577629]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
          -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
           -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.00942469]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0397 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
         -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [478]; unstable size 478; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 168, 1, 478] with unstable size 167 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 478] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 478] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [167]; unstable size 167; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 167] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 167] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.56217003,  4.48248863, -0.30218947,  1.40200794,  1.50853717,
          0.35172987,  1.49864471,  3.28840876,  3.77214003]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
         -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
          -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05397820]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.45555562,  0.47142863,  0.50317466,  ...,  0.23333341,
             0.16984135, -0.06825387],
           [ 0.37619054,  0.55079371,  0.91587305,  ...,  0.39206356,
             0.59841275,  0.21746039],
           [ 0.47142863,  0.64603180,  0.70952386,  ...,  0.58253974,
             0.85238099,  0.82063496],
           ...,
           [ 0.32857150,  0.55079371,  0.18571436,  ..., -0.67142856,
            -1.22698402, -1.06825387],
           [ 0.47142863,  0.47142863,  0.21746039,  ..., -0.00476181,
            -1.14761901, -1.44920623],
           [ 0.45555562,  0.15396833, -0.11587292,  ...,  1.04285717,
             0.34444451, -0.54444444]],

          [[ 1.03059590,  1.09500813,  1.19162667,  ...,  1.12721443,
             0.96618366,  0.70853472],
           [ 1.03059590,  1.14331758,  1.28824508,  ...,  1.27214205,
             1.36876035,  0.98228669],
           [ 1.15942061,  1.22383285,  1.23993587,  ...,  1.38486338,
             1.54589403,  1.44927561],
           ...,
           [ 1.07890511,  1.28824508,  0.86956531,  ..., -0.70853460,
            -1.20772946, -0.96618354],
           [ 1.15942061,  1.22383285,  1.03059590,  ..., -0.19323659,
            -1.12721407, -1.33655393],
           [ 1.07890511,  0.93397754,  0.85346222,  ...,  0.99838978,
             0.28985518, -0.43478248]],

          [[ 0.10644694,  0.19640197,  0.42128953,  ..., -0.01349309,
             0.09145443, -0.31334329],
           [ 0.16641696,  0.45127454,  0.94602716,  ...,  0.19640197,
             0.75112462,  0.28635699],
           [ 0.16641696,  0.39130452,  0.48125952,  ...,  0.36131951,
             0.91604215,  1.03598225],
           ...,
           [ 0.06146942,  0.37631202,  0.07646193,  ..., -0.83808094,
            -1.27286363, -1.09295356],
           [ 0.19640197,  0.37631202, -0.11844061,  ..., -0.43328333,
            -1.27286363, -1.42278874],
           [ 0.25637197, -0.14842562, -0.73313338,  ...,  0.82608712,
            -0.02848560, -0.82308841]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0359 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.27786207, -6.88116646, -0.89845192, -1.13938844, -1.43722224,
         -1.21051192, -1.90963769, -2.81326365, -5.21822262, -6.45287228]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 158, 1, 544] with unstable size 157 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 544] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [157]; unstable size 157; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 157] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 157] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.32219422,  4.72163105, -0.79683381, -0.61578476, -0.54585791,
          0.10253268,  1.03042436,  3.03628159,  4.49144125]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.27786207, -6.88116646, -0.89845192, -1.13938844, -1.43722224,
         -1.21051192, -1.90963769, -2.81326365, -5.21822262, -6.45287228]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.27786303, -6.88116646, -0.89845204, -1.13938868, -1.43722200,
          -1.21051180, -1.90963745, -2.81326342, -5.21822357, -6.45287180],
         [-2.27786303, -6.88116646, -0.89845204, -1.13938868, -1.43722200,
          -1.21051180, -1.90963745, -2.81326342, -5.21822357, -6.45287180]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53876996, -0.29783332, -0.22671020]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0398 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87105656,  -9.24069786, -12.81012917, -14.19307423, -13.00804424,
         -14.29401398, -13.74548244, -12.64065266, -10.14831066, -10.41334629]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [461]; unstable size 461; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 461] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 461] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 461] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 180] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.16120410,  2.30639267,  3.48797035,  2.47389126,  3.57205248,
          3.02852058,  1.96217549, -0.08661658, -0.06133330]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87105656,  -9.24069786, -12.81012917, -14.19307423, -13.00804424,
         -14.29401398, -13.74548244, -12.64065266, -10.14831066, -10.41334629]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.87105656,  -9.24069881, -12.81012917, -14.19307613, -13.00804520,
          -14.29401493, -13.74548244, -12.64065266, -10.14831066, -10.41334724],
         [ -9.87105656,  -9.24069881, -12.81012917, -14.19307613, -13.00804520,
          -14.29401493, -13.74548244, -12.64065266, -10.14831066, -10.41334724]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.63035774,  0.27725410,  0.54229069]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]],


         [[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]],


         [[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0473 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.80696106, -12.16898727,  -8.71912003,  -9.57566929,  -8.25873089,
          -9.65113735,  -7.55729103,  -9.84239197, -12.61449814, -12.48052692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 445] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 445] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 185] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.65562129, 3.64904332, 0.87793171, 1.69124293, 0.44899166, 1.76054680,
         1.83400536, 4.22224331, 4.04899597]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0440 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.20309448, -16.77884865, -16.19422150, -18.35743332, -17.19257736,
         -18.67626762, -18.95268631, -19.17121124, -14.57676315, -17.35821724]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [435]; unstable size 435; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 109, 1, 435] with unstable size 108 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 435] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 435] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [108]; unstable size 108; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 108] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 108] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.19290400, 3.64490747, 5.67161989, 4.61943054, 5.98125458, 6.26108742,
         6.53781796, 2.12617993, 4.84152555]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0342 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.81122494, -13.31232357,  -9.44408321,  -9.38682652,  -9.45646095,
          -9.43222713,  -9.70102882, -10.80779362, -10.39734077, -12.81629562]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [536]; unstable size 536; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 536] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 536] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 536] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 186] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.80840868,  3.05787325, -0.29071212, -0.06402752, -0.28085589,
         -0.10329640,  1.11252022,  0.34938389,  2.63984060]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.81122494, -13.31232357,  -9.44408321,  -9.38682652,  -9.45646095,
          -9.43222713,  -9.70102882, -10.80779362, -10.39734077, -12.81629562]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.81122589, -13.31232452,  -9.44408417,  -9.38682556,  -9.45646000,
           -9.43222809,  -9.70102978, -10.80779362, -10.39734077, -12.81629467],
         [-10.81122589, -13.31232452,  -9.44408417,  -9.38682556,  -9.45646000,
           -9.43222809,  -9.70102978, -10.80779362, -10.39734077, -12.81629467]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.01185608, -0.04540253,  0.02423191,  0.26880169]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0503 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.81260872, -21.71220779, -15.47353172, -14.34746075, -17.37693214,
         -14.11986828, -17.64429283, -15.59352016, -20.41330528, -19.86410522]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [213]; unstable size 213; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 90, 1, 213] with unstable size 89 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 213] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 213] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [89]; unstable size 89; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 89] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 89] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.94948387,  5.68683910, -0.28762674, -1.39250028,  1.63050747,
         -1.61977458,  1.77867985,  4.45255089,  3.87534142]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.81260872, -21.71220779, -15.47353172, -14.34746075, -17.37693214,
         -14.11986828, -17.64429283, -15.59352016, -20.41330528, -19.86410522]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.81260681, -21.71220398, -15.47353172, -14.34746075, -17.37693214,
          -14.11986828, -17.64429092, -15.59352112, -20.41330528, -19.86410332],
         [-17.81260681, -21.71220398, -15.47353172, -14.34746075, -17.37693214,
          -14.11986828, -17.64429092, -15.59352112, -20.41330528, -19.86410332]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11998940, -1.24606037, -1.47365284]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0455 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.67578030, -10.93076611,  -6.99289465,  -8.49931908,  -6.64460850,
          -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557758]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 527] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 527] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 191] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17059851,  3.08206797,  1.16293216, -0.63490015,  1.28766203,
         -0.08916250,  1.48330283,  3.14107704,  2.88401604]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.67578030, -10.93076611,  -6.99289465,  -8.49931908,  -6.64460850,
          -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557758]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.67578030, -10.93076611,  -6.99289465,  -8.49932003,  -6.64460754,
           -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557854],
         [ -8.67578030, -10.93076611,  -6.99289465,  -8.49932003,  -6.64460754,
           -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557854]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.34828711,  0.25328970]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.79841268, -0.83015871, -0.84603173,  ..., -0.70317459,
            -0.76666665, -0.73492062],
           [-0.79841268, -0.83015871, -0.87777776,  ..., -0.84603173,
            -0.78253967, -0.75079364],
           [-0.81428570, -0.83015871, -0.89365077,  ..., -0.81428570,
            -0.75079364, -0.75079364],
           ...,
           [ 1.39206374,  1.23333359,  0.50317466,  ...,  0.21746039,
            -0.27460307, -0.63968253],
           [ 0.88412702,  0.43968260, -0.21111101,  ...,  1.45555580,
             1.26507962,  0.70952386],
           [ 0.36031753, -0.24285704, -0.68730158,  ...,  1.45555580,
             1.36031771,  1.67777801]],

          [[-0.16103047, -0.20933965, -0.22544271,  ..., -0.03220600,
            -0.09661824, -0.06441211],
           [-0.17713353, -0.20933965, -0.25764883,  ..., -0.17713353,
            -0.11272129, -0.09661824],
           [-0.19323659, -0.20933965, -0.27375188,  ..., -0.12882435,
            -0.08051517, -0.08051517],
           ...,
           [ 1.41706955,  1.28824508,  0.61191636,  ...,  0.51529801,
             0.14492765, -0.12882435],
           [ 0.99838978,  0.61191636,  0.03220624,  ...,  1.59420323,
             1.48148179,  1.03059590],
           [ 0.59581327,  0.08051541, -0.28985494,  ...,  1.49758482,
             1.40096653,  1.75523376]],

          [[-0.50824583, -0.55322337, -0.56821585,  ..., -0.43328333,
            -0.47826082, -0.40329832],
           [-0.52323836, -0.55322337, -0.59820086,  ..., -0.56821585,
            -0.49325335, -0.43328333],
           [-0.53823084, -0.55322337, -0.61319339,  ..., -0.53823084,
            -0.46326834, -0.41829082],
           ...,
           [ 0.99100471,  0.84107965,  0.21139447,  ...,  0.06146942,
            -0.28335828, -0.43328333],
           [ 0.61619210,  0.27136448, -0.25337315,  ...,  1.06596720,
             0.99100471,  0.63118458],
           [ 0.30134949, -0.14842562, -0.46326834,  ...,  1.03598225,
             0.97601217,  1.32084000]]],


         [[[-0.79841268, -0.83015871, -0.84603173,  ..., -0.70317459,
            -0.76666665, -0.73492062],
           [-0.79841268, -0.83015871, -0.87777776,  ..., -0.84603173,
            -0.78253967, -0.75079364],
           [-0.81428570, -0.83015871, -0.89365077,  ..., -0.81428570,
            -0.75079364, -0.75079364],
           ...,
           [ 1.39206374,  1.23333359,  0.50317466,  ...,  0.21746039,
            -0.27460307, -0.63968253],
           [ 0.88412702,  0.43968260, -0.21111101,  ...,  1.45555580,
             1.26507962,  0.70952386],
           [ 0.36031753, -0.24285704, -0.68730158,  ...,  1.45555580,
             1.36031771,  1.67777801]],

          [[-0.16103047, -0.20933965, -0.22544271,  ..., -0.03220600,
            -0.09661824, -0.06441211],
           [-0.17713353, -0.20933965, -0.25764883,  ..., -0.17713353,
            -0.11272129, -0.09661824],
           [-0.19323659, -0.20933965, -0.27375188,  ..., -0.12882435,
            -0.08051517, -0.08051517],
           ...,
           [ 1.41706955,  1.28824508,  0.61191636,  ...,  0.51529801,
             0.14492765, -0.12882435],
           [ 0.99838978,  0.61191636,  0.03220624,  ...,  1.59420323,
             1.48148179,  1.03059590],
           [ 0.59581327,  0.08051541, -0.28985494,  ...,  1.49758482,
             1.40096653,  1.75523376]],

          [[-0.50824583, -0.55322337, -0.56821585,  ..., -0.43328333,
            -0.47826082, -0.40329832],
           [-0.52323836, -0.55322337, -0.59820086,  ..., -0.56821585,
            -0.49325335, -0.43328333],
           [-0.53823084, -0.55322337, -0.61319339,  ..., -0.53823084,
            -0.46326834, -0.41829082],
           ...,
           [ 0.99100471,  0.84107965,  0.21139447,  ...,  0.06146942,
            -0.28335828, -0.43328333],
           [ 0.61619210,  0.27136448, -0.25337315,  ...,  1.06596720,
             0.99100471,  0.63118458],
           [ 0.30134949, -0.14842562, -0.46326834,  ...,  1.03598225,
             0.97601217,  1.32084000]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0343 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.44387496, -2.72885609, -0.99721217, -1.58509552, -2.43515849,
         -1.54629862, -4.83794689, -0.93704540, -3.84024239, -1.71335077]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 108, 1, 377] with unstable size 107 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 377] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [107]; unstable size 107; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 107] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 107] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.08005628,  1.21544480, -0.21125805,  0.39911640,  1.30089641,
          0.36341107,  3.49761176,  2.30609941,  0.25215483]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.44387496, -2.72885609, -0.99721217, -1.58509552, -2.43515849,
         -1.54629862, -4.83794689, -0.93704540, -3.84024239, -1.71335077]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.34201694, -2.72922182, -0.92797631, -1.60974824, -2.46359158,
          -1.57565308, -4.80144787, -1.07656217, -3.71189547, -1.76798725]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.14858586]]], device='cuda:0')
number of violation:  1
Attack finished in 0.3375 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.3678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
         -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [505]; unstable size 505; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 505] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 505] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 505] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 156] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.97732306,  1.82492733,  4.21384001,  3.08415365,  4.54206657,
          3.54140043,  4.89616013,  0.14590645,  0.62829089]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
         -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
          -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.43531609]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.45555562, 0.40793657, 0.42380959,  ..., 0.75714290,
            0.74126989, 0.70952386],
           [0.47142863, 0.42380959, 0.43968260,  ..., 0.72539687,
            0.69365084, 0.66190481],
           [0.53492069, 0.50317466, 0.55079371,  ..., 0.70952386,
            0.69365084, 0.66190481],
           ...,
           [0.63015878, 0.64603180, 0.66190481,  ..., 0.64603180,
            0.67777783, 0.66190481],
           [0.64603180, 0.61428577, 0.59841275,  ..., 0.63015878,
            0.64603180, 0.66190481],
           [0.72539687, 0.66190481, 0.63015878,  ..., 0.63015878,
            0.59841275, 0.64603180]],

          [[0.48309189, 0.43478271, 0.45088577,  ..., 0.75684386,
            0.72463775, 0.69243163],
           [0.49919492, 0.45088577, 0.46698883,  ..., 0.70853472,
            0.67632860, 0.64412248],
           [0.56360716, 0.53140104, 0.57971025,  ..., 0.69243163,
            0.67632860, 0.64412248],
           ...,
           [0.61191636, 0.62801939, 0.64412248,  ..., 0.62801939,
            0.66022551, 0.64412248],
           [0.62801939, 0.59581327, 0.57971025,  ..., 0.61191636,
            0.62801939, 0.64412248],
           [0.70853472, 0.64412248, 0.61191636,  ..., 0.61191636,
            0.57971025, 0.62801939]],

          [[0.66116959, 0.61619210, 0.63118458,  ..., 0.76611710,
            0.81109464, 0.79610211],
           [0.67616212, 0.63118458, 0.64617711,  ..., 0.76611710,
            0.78110963, 0.75112462],
           [0.73613209, 0.70614707, 0.75112462,  ..., 0.79610211,
            0.78110963, 0.75112462],
           ...,
           [0.66116959, 0.67616212, 0.72113961,  ..., 0.73613209,
            0.76611710, 0.75112462],
           [0.67616212, 0.64617711, 0.66116959,  ..., 0.72113961,
            0.73613209, 0.75112462],
           [0.75112462, 0.69115460, 0.69115460,  ..., 0.72113961,
            0.69115460, 0.73613209]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0436 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.37443638, -4.00673676, -7.36628103, -7.49868298, -7.54243469,
         -7.68763971, -6.80421257, -6.88844681, -6.20179558, -2.71405101]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [421]; unstable size 421; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 163, 1, 421] with unstable size 162 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 421] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 421] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [162]; unstable size 162; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 162] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.00862336, 0.99976742, 3.98278904, 4.17501926, 4.15570545, 4.36021328,
         3.39363956, 3.39964485, 2.97036386]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0278 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.54657602, -8.36112595, -3.46242666, -2.87187982, -3.89005208,
         -2.88797569, -4.48041725, -3.49748850, -7.86016560, -7.33907175]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 138, 1, 403] with unstable size 137 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [137]; unstable size 137; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 137] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 137] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.24231577e+00, 4.76083994e+00, 2.99191654e-01, 6.74156666e-01,
         1.52279437e-03, 1.30786681e+00, 2.09971309e-01, 4.47964859e+00,
         3.82559681e+00]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0293 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.45027256, -14.85908413,  -9.90371609, -10.28254223,  -9.57412910,
         -10.25789833,  -9.99507999, -11.03962898, -13.74928951, -14.72655964]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [731]; unstable size 731; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 228, 1, 731] with unstable size 227 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 731] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 731] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [227]; unstable size 227; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 227] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 227] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.43560433,  3.57842660, -0.70241714, -1.03279126, -0.04905008,
         -0.72893989,  0.25918627,  2.60397315,  3.52938485]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.45027256, -14.85908413,  -9.90371609, -10.28254223,  -9.57412910,
         -10.25789833,  -9.99507999, -11.03962898, -13.74928951, -14.72655964]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.45027161, -14.85908413,  -9.90371609, -10.28254223,  -9.57412815,
          -10.25789928,  -9.99507904, -11.03962803, -13.74928951, -14.72655869],
         [-12.45027161, -14.85908413,  -9.90371609, -10.28254223,  -9.57412815,
          -10.25789928,  -9.99507904, -11.03962803, -13.74928951, -14.72655869]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.37882614, -0.70841408, -0.02464294, -0.28746319]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0520 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.49743176,  -9.17833710, -13.67570496, -15.20650959, -13.95639992,
         -15.42528915, -14.06286907, -16.15926170, -11.69949532, -11.19551754]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [373]; unstable size 373; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 373] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 373] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 373] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 175] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.61845303, 3.61285639, 5.11309052, 3.87147617, 5.31955910, 4.01641273,
         5.91223764, 1.82210588, 1.76377106]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0311 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.34389973,  -9.96172714,  -4.05279398,  -5.78736115,  -3.97068667,
          -5.86786509,  -3.54266286,  -5.87278652, -10.21232128,  -9.72180271]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [483]; unstable size 483; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 483] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 483] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 483] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 208] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.06753707, 5.54263163, 0.10674822, 1.85941625, 0.03022206, 1.92791653,
         1.74811399, 5.96987057, 5.31630135]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0322 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.71088123, -13.29491711,  -7.63611126,  -7.11927986,  -7.38616085,
          -7.11191607,  -7.48660755,  -8.97584915, -11.56023979, -13.25586891]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [539]; unstable size 539; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 539] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 539] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 539] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 220] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.10444093e+00,  5.31401634e+00,  2.42111206e-01, -5.13114929e-02,
         -2.78017372e-02, -2.51579285e-03,  1.45366096e+00,  3.80054951e+00,
          5.33967876e+00]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.71088123, -13.29491711,  -7.63611126,  -7.11927986,  -7.38616085,
          -7.11191607,  -7.48660755,  -8.97584915, -11.56023979, -13.25586891]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.71088123, -13.29491806,  -7.63611174,  -7.11928177,  -7.38616180,
           -7.11191511,  -7.48660755,  -8.97585011, -11.56023979, -13.25586891],
         [-10.71088123, -13.29491806,  -7.63611174,  -7.11928177,  -7.38616180,
           -7.11191511,  -7.48660755,  -8.97585011, -11.56023979, -13.25586891]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.26688004, -0.00736666,  0.36732578]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]],


         [[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]],


         [[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0484 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.09629250, -13.56788158,  -9.81583977, -10.23123169,  -9.89592838,
         -10.26214600,  -8.58048058, -11.66953659, -13.15151978, -13.97097874]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [556]; unstable size 556; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 556] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 556] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 556] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 232] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.87823057, 4.08753538, 0.91786969, 1.31721747, 0.97389317, 1.33815885,
         2.53606868, 3.77071476, 4.53204918]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0468 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.60548306, -4.32711458, -0.42147765, -0.48017693, -0.49338007,
         -0.45899674, -1.75417352, -0.30924958, -4.08429527, -3.55203962]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [430]; unstable size 430; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 430] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 430] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 430] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 166] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.60546803,  3.26384115, -0.35429406,  0.00655460, -0.27650321,
          0.93680203, -0.40704596,  3.07671976,  2.56389141]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.60548306, -4.32711458, -0.42147765, -0.48017693, -0.49338007,
         -0.45899674, -1.75417352, -0.30924958, -4.08429527, -3.55203962]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.60548258, -4.32711411, -0.42147765, -0.48017645, -0.49337971,
          -0.45899615, -1.75417328, -0.30924922, -4.08429432, -3.55203867],
         [-3.60548258, -4.32711411, -0.42147765, -0.48017645, -0.49337971,
          -0.45899615, -1.75417328, -0.30924922, -4.08429432, -3.55203867]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.03751850,  0.03438357, -0.14974692]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]],


         [[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]],


         [[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0555 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.63814020, -7.09170341, -5.93957424, -7.54413128, -6.39586449,
         -7.70300293, -8.28325272, -8.31898880, -2.61777067, -6.41391087]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [452]; unstable size 452; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 159, 1, 452] with unstable size 158 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 452] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 452] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [158]; unstable size 158; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 158] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 158] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.56345731, 3.82402468, 2.68081284, 4.30023193, 3.12777853, 4.44676113,
         5.01942158, 4.85944176, 3.30816460]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0300 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.14455748, -5.84289455, -2.86230087, -2.12573886, -3.17329073,
         -2.12218904, -4.42577553, -2.79664421, -3.31719923, -4.93841982]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 427] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 427] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 156] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.56514990,  3.04386854,  0.44034660, -0.01067108,  0.67077875,
          1.90764415,  0.08044988,  0.57008010,  2.19504976]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.14455748, -5.84289455, -2.86230087, -2.12573886, -3.17329073,
         -2.12218904, -4.42577553, -2.79664421, -3.31719923, -4.93841982]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.16760874, -5.79149437, -2.92998362, -2.25009131, -3.25186229,
          -2.25700569, -4.37982655, -2.96575403, -3.27511168, -4.89296436]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00691438]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0397 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
         -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [710]; unstable size 710; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 710] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 710] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 710] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 223] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.10017014,  0.81654787,  2.80445457,  0.97049618,  2.92300129,
          1.57911158,  2.45411730,  1.05910659,  0.55258167]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
         -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.93it/s]100%|██████████| 1/1 [00:00<00:00,  8.92it/s]
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/cuts/infered_cuts.py:406: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(history[3]),
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.62336159,  -7.42845249,  -8.70991421, -10.74260235,  -8.88674164,
          -10.87233353,  -9.51017857, -10.43375587,  -8.81735802,  -8.17679691]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.19490910]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1146 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.26400375366211
alpha/beta optimization time: 3.6907193660736084
initial alpha-crown bounds: tensor([[-0.06241894,  0.84010887,  2.82575035,  0.99328136,  2.94463825,
          1.60075712,  2.47774243,  1.08523774,  0.55890650]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.06241893768310547
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 196.1608910560608
Verifying property 0 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06241894]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
        -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06241894]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 710
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 216
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 930
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001277923583984375
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.062418222427368164
10 lb beta sum: 0.0, worst -0.06242513656616211
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.5628    transfer 0.0001    finalize 0.0003    func 0.5634    
Accumulated time: func 0.5634    prepare 0.0002    bound 0.5628    transfer 0.0001    finalize 0.0003    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 90] 
split level 2: [/input-8, 1883] 
split level 3: [/input-8, 1765] 
split level 4: [/input-8, 1764] 
split level 5: [/input-8, 45] 
split level 6: [/input-8, 1829] 
split level 7: [/input-8, 1875] 
split level 8: [/input-8, 1881] 
split level 9: [/input-8, 1766] 
split level 10: [/input-8, 1830] 
split level 11: [/input, 999] 
split level 12: [/input-8, 1206] 
split level 13: [/input-8, 1760] 
split level 14: [/input-8, 53] 
split level 15: [/input-8, 1836] 
split level 16: [/input-8, 1823] 
split level 17: [/input, 965] 
split level 18: [/input-8, 1827] 
split level 19: [/input-8, 1130] 
split level 20: [/input-8, 1522] 
split level 21: [/input-8, 1694] 
split level 22: [/input, 1255] 
split level 23: [/input, 966] 
split level 24: [/input-8, 1769] 
split level 25: [/input-8, 1523] 
split level 26: [/input-8, 1831] 
split level 27: [/input, 1000] 
split level 28: [/input, 1254] 
split level 29: [/input-8, 44] 
split level 30: [/input-8, 274] 
split level 31: [/input, 983] 
split level 32: [/input-8, 1710] 
split level 33: [/input-8, 1884] 
split level 34: [/input, 986] 
split level 35: [/input, 1001] 
split level 36: [/input, 1002] 
split level 37: [/input, 1253] 
split level 38: [/input-8, 140] 
split level 39: [/input, 2457] 
split level 40: [/input, 2693] 
split level 41: [/input, 971] 
split level 42: [/input, 982] 
split level 43: [/input, 744] 
split level 44: [/input-8, 1880] 
split level 45: [/input, 1238] 
split level 46: [/input-8, 1524] 
split level 47: [/input, 1003] 
split level 48: [/input, 2025] 
split level 49: [/input, 2163] 
split level 50: [/input, 2026] 
split level 51: [/input-8, 1757] 
split level 52: [/input, 981] 
split level 53: [/input-8, 22] 
split level 54: [/input-8, 35] 
split level 55: [/input, 985] 
split level 56: [/input, 987] 
split level 57: [/input, 743] 
split level 58: [/input-8, 1444] 
split level 59: [/input, 887] 
split level 60: [/input, 993] 
split level 61: [/input, 2039] 
split level 62: [/input-8, 1778] 
split level 63: [/input-8, 29] 
split level 64: [/input, 1240] 
split level 65: [/input-8, 1899] 
split level 66: [/input, 1226] 
split level 67: [/input, 2022] 
split level 68: [/input-8, 1603] 
split level 69: [/input-8, 123] 
split level 70: [/input-8, 1998] 
split level 71: [/input, 2920] 
split level 72: [/input, 2021] 
split level 73: [/input, 2023] 
split level 74: [/input-8, 745] 
split level 75: [/input, 3218] 
split level 76: [/input-8, 107] 
split level 77: [/input-8, 1214] 
split level 78: [/input, 1261] 
split level 79: [/input-8, 1463] 
split level 80: [/input, 1269] 
split level 81: [/input, 2028] 
split level 82: [/input, 1268] 
split level 83: [/input, 2040] 
split level 84: [/input, 1912] 
split level 85: [/input, 1220] 
split level 86: [/input, 1419] 
split level 87: [/input-8, 766] 
split level 88: [/input-8, 1521] 
split level 89: [/input, 970] 
split level 90: [/input, 741] 
split level 91: [/input, 988] 
split level 92: [/input, 1219] 
split level 93: [/input-8, 1999] 
split level 94: [/input, 2727] 
split level 95: [/input-8, 1215] 
split level 96: [/input-8, 1291] 
split level 97: [/input, 2037] 
split level 98: [/input, 1404] 
split level 99: [/input, 2020] 
split level 100: [/input, 710] 
split level 101: [/input, 676] 
split level 102: [/input-8, 1997] 
split level 103: [/input, 2044] 
split level 104: [/input, 989] 
split level 105: [/input, 1747] 
split level 106: [/input, 4070] 
split level 107: [/input-8, 1572] 
split level 108: [/input, 1386] 
split level 109: [/input, 1204] 
split level 110: [/input, 745] 
split level 111: [/input, 1746] 
split level 112: [/input-8, 1756] 
split level 113: [/input, 1370] 
split level 114: [/input-8, 930] 
split level 115: [/input, 742] 
split level 116: [/input, 4022] 
split level 117: [/input, 2010] 
split level 118: [/input, 4072] 
split level 119: [/input, 2011] 
split level 120: [/input, 950] 
split level 121: [/input, 721] 
split level 122: [/input, 2036] 
split level 123: [/input, 3282] 
split level 124: [/input-8, 116] 
split level 125: [/input-8, 1956] 
split level 126: [/input, 1277] 
split level 127: [/input, 2029] 
split level 128: [/input, 630] 
split level 129: [/input-8, 122] 
split level 130: [/input, 760] 
split level 131: [/input, 2041] 
split level 132: [/input-8, 962] 
split level 133: [/input, 1988] 
split level 134: [/input, 1246] 
split level 135: [/input, 1749] 
split level 136: [/input, 977] 
split level 137: [/input-8, 21] 
split level 138: [/input, 3234] 
split level 139: [/input, 709] 
split level 140: [/input, 1496] 
split level 141: [/input, 2019] 
split level 142: [/input, 2043] 
split level 143: [/input, 747] 
split level 144: [/input, 2009] 
split level 145: [/input, 3132] 
split level 146: [/input, 2042] 
split level 147: [/input, 1987] 
split level 148: [/input, 1420] 
split level 149: [/input, 748] 
split level 150: [/input, 1461] 
split level 151: [/input, 1223] 
split level 152: [/input, 2045] 
split level 153: [/input, 1896] 
split level 154: [/input-8, 964] 
split level 155: [/input-8, 765] 
split level 156: [/input, 2035] 
split level 157: [/input, 1911] 
split level 158: [/input-8, 761] 
split level 159: [/input, 3233] 
split level 160: [/input, 2017] 
split level 161: [/input, 652] 
split level 162: [/input, 2013] 
split level 163: [/input, 1448] 
split level 164: [/input, 1989] 
split level 165: [/input, 1384] 
split level 166: [/input, 746] 
split level 167: [/input, 1245] 
split level 168: [/input, 633] 
split level 169: [/input-8, 1976] 
split level 170: [/input, 491] 
split level 171: [/input-8, 963] 
split level 172: [/input, 724] 
split level 173: [/input, 3281] 
split level 174: [/input, 2145] 
split level 175: [/input, 1506] 
split level 176: [/input, 3261] 
split level 177: [/input, 1349] 
split level 178: [/input, 2674] 
split level 179: [/input, 1334] 
split level 180: [/input-8, 19] 
split level 181: [/input, 1275] 
split level 182: [/input, 1149] 
split level 183: [/input, 1354] 
split level 184: [/input, 2181] 
split level 185: [/input, 2929] 
split level 186: [/input-8, 1105] 
split level 187: [/input, 1677] 
split level 188: [/input, 3693] 
split level 189: [/input-8, 118] 
split level 190: [/input, 1502] 
split level 191: [/input, 1503] 
split level 192: [/input, 1406] 
split level 193: [/input, 689] 
split level 194: [/input, 1479] 
split level 195: [/input, 490] 
split level 196: [/input, 1849] 
split level 197: [/input, 1498] 
split level 198: [/input, 2008] 
split level 199: [/input, 1501] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06234622001647949
10 lb beta sum: 0.0, worst -0.06235218048095703
Time: prepare 0.0116    bound 0.1614    transfer 0.0032    finalize 0.0030    func 0.1819    
Accumulated time: func 0.7454    prepare 0.0219    bound 0.7242    transfer 0.0033    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.19439435) min lb tensor(-0.06234622)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011820793151855469 
BICCOS Cumulative time: 0.011820793151855469
Preprocessing time: 0.010182619094848633 Inference time: 0.0013322830200195312 Add cuts time: 0.00011348724365234375 Cut analysis time: 0.00019240379333496094
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5370    set_bounds 0.0084    solve 0.1820    add 0.0095    
Accumulated time: pickout 0.0004    decision 0.5370    set_bounds 0.0084    solve 0.1820    add 0.0095    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([3.97426002e-37]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([3.97426719e-37]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0003056526184082031

all verified at 0th iter
Time: prepare 0.0003    bound 0.0058    transfer 0.0001    finalize 0.0001    func 0.0063    
Accumulated time: func 0.7517    prepare 0.0222    bound 0.7300    transfer 0.0034    finalize 0.0035    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 194.644433259964
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 194.64435601234436
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 194.64433193206787
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 194.6443111896515
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 194.64429116249084
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 194.64427161216736
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 194.64423871040344
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 194.64421701431274
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 5.3558 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.18077564, -5.20051479, -2.12253857, -2.36523008, -1.95707440,
         -2.48700714, -1.75185084, -2.55259371, -4.91013861, -3.94676566]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [653]; unstable size 653; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 653] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 653] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 653] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 204] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.29296613, -1.59309256, -1.48934960, -1.80449390, -1.37909257,
         -2.13179302, -1.44039261,  1.14391506, -0.00782728]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.18077564, -5.20051479, -2.12253857, -2.36523008, -1.95707440,
         -2.48700714, -1.75185084, -2.55259371, -4.91013861, -3.94676566]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.18077517, -5.20051384, -2.12253881, -2.36523008, -1.95707417,
          -2.48700714, -1.75185037, -2.55259418, -4.91013765, -3.94676566],
         [-3.18077517, -5.20051384, -2.12253881, -2.36523008, -1.95707417,
          -2.48700714, -1.75185037, -2.55259418, -4.91013765, -3.94676566]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.05823636, -0.81554508, -1.22370100, -0.69376802, -1.42892480,
          -0.62818098,  0.76599050]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         ...,


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0608 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.89522552, -12.50763512, -11.44470501, -10.71474552, -11.76819897,
         -10.88390923, -11.10462856, -10.95513725, -12.58380413, -11.60862064]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [382]; unstable size 382; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 122, 1, 382] with unstable size 121 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 382] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 382] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [121]; unstable size 121; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 121] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 121] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.28878093,  0.57599199, -0.86663389, -1.54129553, -0.57239199,
         -1.38458633, -1.21227455, -1.42654049,  0.52066183]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.89522552, -12.50763512, -11.44470501, -10.71474552, -11.76819897,
         -10.88390923, -11.10462856, -10.95513725, -12.58380413, -11.60862064]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.89522552, -12.50763512, -11.44470310, -10.71474457, -11.76819706,
          -10.88390827, -11.10462856, -10.95513630, -12.58380413, -11.60861969],
         [-10.89522552, -12.50763512, -11.44470310, -10.71474457, -11.76819706,
          -10.88390827, -11.10462856, -10.95513630, -12.58380413, -11.60861969]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.71339417, -0.16391659, -0.89387512,  0.15957737, -0.72471142,
          -0.50399113, -0.65348339]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         ...,


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0576 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.43655968, -7.86374569, -4.02158070, -5.24551868, -3.37242651,
         -5.30696249, -5.20856190, -1.00180030, -7.81787586, -6.36246300]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 161, 1, 515] with unstable size 160 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 515] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [160]; unstable size 160; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 160] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.54672909, 5.77573061, 2.48532724, 3.64926147, 1.99377513, 3.71493387,
         3.49136138, 5.76536751, 4.38623095]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0364 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.78016090, -14.31425953, -12.11413383, -13.61369610, -13.22554588,
         -13.89419746, -13.81897068, -15.55597496, -11.84562683, -14.04191494]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [440]; unstable size 440; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 110, 1, 440] with unstable size 109 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 440] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 440] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [109]; unstable size 109; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 109] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 109] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.06631947, 1.97255504, 3.32466221, 3.00493097, 3.59111595, 3.54375315,
         5.13309097, 1.75885546, 3.87197638]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0451 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.58011818, -16.93579865, -13.35176086, -12.33354282, -12.53640938,
         -12.27129459, -12.42931461, -13.10805130, -16.13471413, -17.27034378]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [468]; unstable size 468; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 468] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 468] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 468] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 159] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.95476007,  3.13256741, -0.12001920, -1.12539387, -0.82774353,
         -1.18586874, -1.15729165,  2.37652397,  3.54983091]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.58011818, -16.93579865, -13.35176086, -12.33354282, -12.53640938,
         -12.27129459, -12.42931461, -13.10805130, -16.13471413, -17.27034378]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.58012009, -16.93579865, -13.35176182, -12.33354473, -12.53641129,
          -12.27129650, -12.42931652, -13.10805321, -16.13471413, -17.27034378],
         [-15.58012009, -16.93579865, -13.35176182, -12.33354473, -12.53641129,
          -12.27129650, -12.42931652, -13.10805321, -16.13471413, -17.27034378]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.24370861, -0.77450848, -0.57164192, -0.83675671, -0.67873669]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0616 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.56713295, -10.98260689,  -8.09094048,  -9.93765926,  -9.26453114,
         -10.17694187,  -9.82418156, -11.28379536,  -9.40003777, -10.42401791]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [530]; unstable size 530; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 122, 1, 530] with unstable size 121 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 530] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 530] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [121]; unstable size 121; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 121] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 121] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.92235780, 1.25571513, 2.97574401, 2.32010770, 3.20374870, 2.90414071,
         4.19674826, 2.57079244, 3.44977427]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0626 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.24266052, -9.05385590, -4.63273811, -6.82860374, -4.25593948,
         -6.95034361, -6.54124737, -4.92567825, -7.73889160, -7.98849154]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [484]; unstable size 484; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 199, 1, 484] with unstable size 198 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 484] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 484] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [198]; unstable size 198; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 198] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 198] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.37995398, 3.76833653, 0.10083741, 2.16897559, 2.29998064, 1.78575873,
         0.35607696, 2.66335392, 2.83313727]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0337 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.89239407, -6.05108643, -2.55554962, -3.76616883, -2.11981702,
         -3.83909178, -3.28839850, -3.06943870, -4.45051193, -5.43191195]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [594]; unstable size 594; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 594] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 594] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 594] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 191] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.09662652,  2.10026360, -1.01723409,  0.09384108, -1.30339622,
          0.17089653, -0.43055606,  0.45394611,  1.56536603]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.89239407, -6.05108643, -2.55554962, -3.76616883, -2.11981702,
         -3.83909178, -3.28839850, -3.06943870, -4.45051193, -5.43191195]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.89239454, -6.05108738, -2.55554962, -3.76616931, -2.11981726,
          -3.83909178, -3.28839874, -3.06943822, -4.45051241, -5.43191242],
         [-3.89239454, -6.05108738, -2.55554962, -3.76616931, -2.11981726,
          -3.83909178, -3.28839874, -3.06943822, -4.45051241, -5.43191242]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.51388860, -0.94962096,  0.21896052]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0393 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.06789207, -13.08512020, -11.95641899, -14.25201702, -13.24593544,
         -14.51348209, -14.12713146, -14.87085629, -10.82266903, -12.98229504]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 125, 1, 591] with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 591] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [124]; unstable size 124; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 124] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 124] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.60616136, 2.43306828, 4.57036209, 3.65054846, 4.81807995, 4.45948219,
         5.13743353, 1.49430275, 3.58136415]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0611 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87295246,  -9.77221680,  -7.06542158,  -6.92552090,  -6.61218357,
          -6.98795938,  -6.45421982,  -7.64116573, -10.70925426,  -9.26054478]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [514]; unstable size 514; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 255, 1, 514] with unstable size 254 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 514] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 514] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [254]; unstable size 254; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 254] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 254] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.37700844,  1.93588519, -0.13754916, -0.62001419,  0.04202433,
         -0.79881167,  0.29987133,  3.01180029,  1.52556324]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87295246,  -9.77221680,  -7.06542158,  -6.92552090,  -6.61218357,
          -6.98795938,  -6.45421982,  -7.64116573, -10.70925426,  -9.26054478]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.87295151,  -9.77221584,  -7.06542110,  -6.92552185,  -6.61218452,
           -6.98795891,  -6.45422077,  -7.64116478, -10.70925331,  -9.26054478],
         [ -9.87295151,  -9.77221584,  -7.06542110,  -6.92552185,  -6.61218452,
           -6.98795891,  -6.45422077,  -7.64116478, -10.70925331,  -9.26054478]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.13989925, -0.31333733, -0.47130108]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]],


         [[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]],


         [[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0375 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.22711134, -6.61452389, -3.28024340, -3.07715249, -3.65528822,
         -3.21469426, -1.80790162, -3.44135714, -7.19001961, -5.18115664]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 427] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 427] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 192] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.43010712,  2.73373127, -0.20912015,  0.11641049,  0.11481588,
         -1.58735895, -0.18466640,  3.42027807,  1.36505175]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.22711134, -6.61452389, -3.28024340, -3.07715249, -3.65528822,
         -3.21469426, -1.80790162, -3.44135714, -7.19001961, -5.18115664]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.22711134, -6.61452293, -3.28024387, -3.07715273, -3.65528846,
          -3.21469450, -1.80790162, -3.44135761, -7.19001865, -5.18115664],
         [-6.22711134, -6.61452293, -3.28024387, -3.07715273, -3.65528846,
          -3.21469450, -1.80790162, -3.44135761, -7.19001865, -5.18115664]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.20309114, -1.26925111,  0.36420488]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]],


         [[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]],


         [[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0466 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.63098383, -5.91123009, -1.57904100, -1.50031447, -3.17599440,
         -1.57833910, -2.31312609, -2.17043972, -5.16499329, -4.05005884]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [429]; unstable size 429; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 115, 1, 429] with unstable size 114 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 429] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 429] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [114]; unstable size 114; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 114] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 114] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.02613163,  3.04000378, -0.86533904, -0.93197489,  0.78377461,
         -0.84204769, -0.27393401,  2.37316942,  1.32241929]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.63098383, -5.91123009, -1.57904100, -1.50031447, -3.17599440,
         -1.57833910, -2.31312609, -2.17043972, -5.16499329, -4.05005884]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.63098431, -5.91123009, -1.57904124, -1.50031507, -3.17599440,
          -1.57833958, -2.31312585, -2.17043996, -5.16499329, -4.05005884],
         [-2.63098431, -5.91123009, -1.57904124, -1.50031507, -3.17599440,
          -1.57833958, -2.31312585, -2.17043996, -5.16499329, -4.05005884]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.59139872, -0.67012489, -0.59210038,  0.14268589]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0479 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.53942776,  -7.02883530,  -7.54472733, -10.47971630,  -7.86964130,
         -10.67128658, -10.97943497,  -9.78617668,  -5.69757843,  -6.90828276]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [473]; unstable size 473; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 141, 1, 473] with unstable size 140 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 1, 1, 473] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 473] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [140]; unstable size 140; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 1, 1, 140] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.97586250,  1.62177134,  4.44206476,  1.95841980,  4.61180305,
          4.90358877,  3.71702051, -0.18866634,  0.87091970]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.53942776,  -7.02883530,  -7.54472733, -10.47971630,  -7.86964130,
         -10.67128658, -10.97943497,  -9.78617668,  -5.69757843,  -6.90828276]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.34467602,  -6.78079128,  -7.36285162, -10.22102642,  -7.63834572,
          -10.41161633, -10.81610203,  -9.54494476,  -5.22521114,  -6.57947111]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11946487]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0332 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.99526882, -8.88451767, -3.74724054, -4.25434780, -3.80330396,
         -4.31974983, -2.96723056, -5.10482168, -9.22820282, -7.71018076]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 442] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 442] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 188] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.31716251, 5.14074612, 0.38760489, 0.92174947, 0.43740439, 0.97805089,
         1.55073762, 5.43588734, 3.94455695]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0405 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.29222870,  -9.06495857,  -5.48218775,  -5.67955399,  -5.15304756,
          -5.78769970,  -4.06756973,  -5.97489452, -10.72794914,  -8.75968742]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [344]; unstable size 344; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 344] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 344] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 344] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 166] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.44414210, 4.29334593, 0.94329727, 1.21160614, 0.62566411, 1.30977702,
         1.30732965, 5.79046345, 4.05935955]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0467 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.00760698, -10.36704826,  -7.93206787,  -9.08809185,  -9.34877014,
          -9.23899841, -10.37455654,  -9.37908459,  -8.12404442, -10.51943302]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 159, 1, 377] with unstable size 158 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 377] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [158]; unstable size 158; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 158] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 158] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.70369053, 1.60599136, 2.61762977, 2.92221189, 2.76581216, 3.82137728,
         2.85164285, 1.76453435, 4.06818771]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0373 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.83257341, -6.46854591, -5.99145317, -5.71124935, -5.55805302,
         -5.72428894, -7.17641068, -6.33211374, -1.95075095, -5.86147213]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [468]; unstable size 468; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 468] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 468] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 468] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 180] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.54666662, 3.82981682, 3.37250376, 2.99276829, 2.92181730, 2.99155474,
         4.37545872, 3.59890223, 3.20619917]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0380 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.92135620, -9.33125305, -5.36672211, -5.52371502, -5.86994457,
         -5.72914362, -4.85611820, -7.33439922, -7.56188965, -8.56555939]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 184, 1, 544] with unstable size 183 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 544] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 183] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.39630222, 3.45109248, 0.09545016, 0.32944334, 0.53940797, 0.51911545,
         1.82263887, 1.84724045, 2.81309223]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0316 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.31921101, -8.17862988, -3.92548275, -4.37522030, -3.57966661,
         -4.41261387, -3.19976306, -4.81196594, -8.46736908, -7.38388491]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [501]; unstable size 501; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 223, 1, 501] with unstable size 222 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 501] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 501] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 222] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.06676173,  2.64715958, -0.83596218, -0.06112341, -1.19111860,
         -1.62031996, -0.01587456,  3.07019210,  2.02515411]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.31921101, -8.17862988, -3.92548275, -4.37522030, -3.57966661,
         -4.41261387, -3.19976306, -4.81196594, -8.46736908, -7.38388491]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.31921053, -8.17862988, -3.92548323, -4.37522030, -3.57966733,
          -4.41261482, -3.19976282, -4.81196690, -8.46736908, -7.38388443],
         [-7.31921053, -8.17862988, -3.92548323, -4.37522030, -3.57966733,
          -4.41261482, -3.19976282, -4.81196690, -8.46736908, -7.38388443]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.48713160, -0.03739452, -0.83294749, -1.21285200,  0.39935207]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0602 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.73774433, -9.38230991, -5.25654364, -6.28954697, -4.75454044,
         -6.38296413, -5.13899040, -6.38740015, -9.45212460, -9.40668297]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [644]; unstable size 644; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 644] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 644] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 644] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 232] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.87710130,  3.18848801,  0.69205022, -0.69066876,  0.77880287,
         -0.48637587,  0.73772764,  3.31828928,  3.26127863]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.73774433, -9.38230991, -5.25654364, -6.28954697, -4.75454044,
         -6.38296413, -5.13899040, -6.38740015, -9.45212460, -9.40668297]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.73774529, -9.38231087, -5.25654459, -6.28954792, -4.75454140,
          -6.38296461, -5.13899136, -6.38740110, -9.45212364, -9.40668201],
         [-7.73774529, -9.38231087, -5.25654459, -6.28954792, -4.75454140,
          -6.38296461, -5.13899136, -6.38740110, -9.45212364, -9.40668201]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.50200319, -0.11755323]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.84603173, -0.87777776, -0.86190474,  ..., -0.36984116,
            -0.36984116, -0.36984116],
           [-0.86190474, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           [-0.84603173, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           ...,
           [-0.52857143, -0.49682540, -0.48095238,  ..., -0.16349196,
            -0.13174593, -0.32222211],
           [-0.46507925, -0.48095238, -0.48095238,  ..., -0.30634910,
            -0.22698402, -0.27460307],
           [-0.43333322, -0.43333322, -0.48095238,  ..., -0.38571417,
            -0.27460307, -0.16349196]],

          [[-0.96618354, -0.99838966, -0.98228657,  ..., -0.45088565,
            -0.45088565, -0.45088565],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           ...,
           [-0.80515295, -0.82125598, -0.83735907,  ..., -0.51529789,
            -0.51529789, -0.74074072],
           [-0.78904986, -0.80515295, -0.82125598,  ..., -0.64412236,
            -0.57971013, -0.64412236],
           [-0.77294683, -0.78904986, -0.78904986,  ..., -0.72463763,
            -0.62801927, -0.54750401]],

          [[-1.00299859, -1.01799107, -1.01799107,  ..., -0.71814090,
            -0.73313338, -0.71814090],
           [-1.01799107, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           [-1.00299859, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           ...,
           [-0.98800600, -0.98800600, -0.97301346,  ..., -0.52323836,
            -0.47826082, -0.67316341],
           [-0.95802099, -0.97301346, -0.97301346,  ..., -0.64317840,
            -0.55322337, -0.61319339],
           [-0.95802099, -0.98800600, -1.01799107,  ..., -0.71814090,
            -0.59820086, -0.50824583]]],


         [[[-0.84603173, -0.87777776, -0.86190474,  ..., -0.36984116,
            -0.36984116, -0.36984116],
           [-0.86190474, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           [-0.84603173, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           ...,
           [-0.52857143, -0.49682540, -0.48095238,  ..., -0.16349196,
            -0.13174593, -0.32222211],
           [-0.46507925, -0.48095238, -0.48095238,  ..., -0.30634910,
            -0.22698402, -0.27460307],
           [-0.43333322, -0.43333322, -0.48095238,  ..., -0.38571417,
            -0.27460307, -0.16349196]],

          [[-0.96618354, -0.99838966, -0.98228657,  ..., -0.45088565,
            -0.45088565, -0.45088565],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           ...,
           [-0.80515295, -0.82125598, -0.83735907,  ..., -0.51529789,
            -0.51529789, -0.74074072],
           [-0.78904986, -0.80515295, -0.82125598,  ..., -0.64412236,
            -0.57971013, -0.64412236],
           [-0.77294683, -0.78904986, -0.78904986,  ..., -0.72463763,
            -0.62801927, -0.54750401]],

          [[-1.00299859, -1.01799107, -1.01799107,  ..., -0.71814090,
            -0.73313338, -0.71814090],
           [-1.01799107, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           [-1.00299859, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           ...,
           [-0.98800600, -0.98800600, -0.97301346,  ..., -0.52323836,
            -0.47826082, -0.67316341],
           [-0.95802099, -0.97301346, -0.97301346,  ..., -0.64317840,
            -0.55322337, -0.61319339],
           [-0.95802099, -0.98800600, -1.01799107,  ..., -0.71814090,
            -0.59820086, -0.50824583]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0383 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879883,  -8.99937153,
          -9.13003254,  -9.50150967, -10.35948181,  -9.91758919, -10.61350632]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 508] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 508] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 197] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.60292912, -2.29249430, -2.02272010, -2.05514479, -1.91960907,
         -1.48416185, -0.73623395, -1.02746487,  0.09661877]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879883,  -8.99937153,
          -9.13003254,  -9.50150967, -10.35948181,  -9.91758919, -10.61350632]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879978,  -8.99937153,
           -9.13003254,  -9.50150967, -10.35948181,  -9.91758823, -10.61350632],
         [ -9.38197994, -10.24376202,  -8.79766655,  -9.01879978,  -8.99937153,
           -9.13003254,  -9.50150967, -10.35948181,  -9.91758823, -10.61350632]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.86178207, -1.44609547, -1.22496223, -1.24439049, -1.11372948,
          -0.74225235,  0.11571980, -0.32617378]]], device='cuda:0')
number of violation:  7
clean attack image tensor([[[[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         ...,


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0561 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.77434063, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670811,
          -6.53051615,  -7.14518929,  -8.42440701, -10.45952797, -10.54728985]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [695]; unstable size 695; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 695] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 695] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 695] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 199] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70145535,  3.44708180, -0.32370055, -0.09620176,  0.17705202,
          0.33821189,  1.44863987,  3.27855825,  3.35601616]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.77434063, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670811,
          -6.53051615,  -7.14518929,  -8.42440701, -10.45952797, -10.54728985]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.77434158, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670906,
           -6.53051615,  -7.14519024,  -8.42440796, -10.45952892, -10.54729080],
         [ -8.77434158, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670906,
           -6.53051615,  -7.14519024,  -8.42440796, -10.45952892, -10.54729080]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01167870, -0.07961607]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0510 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.38532257, -6.06158733, -5.10214949, -7.15757179, -4.90412474,
         -7.31758070, -7.94371891, -6.91108131, -0.65056217, -5.11655426]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [488]; unstable size 488; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 488] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 488] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 488] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.34641814, 4.86730671, 3.89913726, 5.95862436, 3.74042487, 6.11034679,
         6.67927408, 5.60504532, 3.94073200]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0279 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
         -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [425]; unstable size 425; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 425] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 425] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 425] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 199] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.02166867,  3.21041322,  0.75644505, -0.07432845,  0.52634168,
          0.06094742,  0.40918589,  4.12974262,  2.57223082]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
         -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
          -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05403996]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.82063496,  0.82063496,  0.88412702,  ..., -0.89365077,
            -0.86190474, -0.83015871],
           [ 0.99523818,  1.12222254,  1.43968284,  ..., -0.89365077,
            -0.90952379, -0.90952379],
           [ 1.47142887,  1.72539711,  1.93174624,  ..., -0.84603173,
            -0.90952379, -0.94126981],
           ...,
           [ 0.96349210,  0.70952386,  0.48730165,  ...,  0.04285724,
             0.16984135,  0.15396833],
           [ 1.07460344,  0.77301592,  0.58253974,  ...,  0.72539687,
             0.20158738,  0.29682547],
           [ 1.01111114,  0.78888893,  0.45555562,  ...,  1.63015902,
             1.05873048,  0.86825401]],

          [[-0.32206106, -0.41867942, -0.40257636,  ..., -1.22383249,
            -1.14331722, -1.04669881],
           [-0.19323659, -0.03220600,  0.46698883,  ..., -1.30434775,
            -1.27214170, -1.22383249],
           [ 0.56360716,  1.01449287,  1.23993587,  ..., -1.41706920,
            -1.44927526, -1.43317223],
           ...,
           [-0.43478248, -0.66022539, -0.85346210,  ..., -0.75684375,
            -0.66022539, -0.64412236],
           [-0.24154577, -0.51529789, -0.77294683,  ..., -0.45088565,
            -0.80515295, -0.85346210],
           [-0.22544271, -0.41867942, -0.80515295,  ..., -0.03220600,
            -0.45088565, -0.74074072]],

          [[-0.64317840, -0.74812591, -0.79310340,  ..., -1.06296861,
            -0.95802099, -0.85307342],
           [-0.55322337, -0.41829082, -0.04347810,  ..., -1.15292358,
            -1.10794616, -1.06296861],
           [ 0.31634200,  0.58620709,  0.55622208,  ..., -1.30284870,
            -1.30284870, -1.30284870],
           ...,
           [-0.91304344, -1.04797614, -1.13793111,  ..., -0.98800600,
            -0.89805096, -0.86806595],
           [-0.77811092, -0.98800600, -1.09295356,  ..., -0.88305843,
            -1.03298354, -1.10794616],
           [-0.74812591, -0.91304344, -1.12293863,  ..., -0.73313338,
            -0.98800600, -1.18290865]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0349 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.14186001,  -7.07143116, -10.46663189, -11.16532612, -10.33747673,
         -11.26323891, -10.40632534, -10.15031719,  -8.55157280,  -8.28031540]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 538] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 538] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 206] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.38833737, 2.48165560, 3.18024445, 2.31973934, 3.26281786, 2.38422155,
         2.02770805, 0.85605931, 0.95938045]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0204 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.38072777, -8.34097099, -7.53324938, -7.26011181, -6.91416168,
         -7.30822277, -7.39192200, -8.73349857, -8.18290806, -9.00568867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [791]; unstable size 791; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 190, 1, 791] with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 791] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 791] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 189] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.38350585,  0.14631462, -0.09611976, -0.06322638, -0.81499457,
         -0.28940237,  0.85859978,  0.09628773,  0.96366215]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.38072777, -8.34097099, -7.53324938, -7.26011181, -6.91416168,
         -7.30822277, -7.39192200, -8.73349857, -8.18290806, -9.00568867]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.38072777, -8.34097099, -7.53324986, -7.26011276, -6.91416264,
          -7.30822325, -7.39192200, -8.73349953, -8.18290710, -9.00568962],
         [-8.38072777, -8.34097099, -7.53324986, -7.26011276, -6.91416264,
          -7.30822325, -7.39192200, -8.73349953, -8.18290710, -9.00568962]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.22502661, -0.04811049, -0.39406061,  0.08369875]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0640 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -4.23172474, -11.22384930,  -5.34106207,  -9.06499481,  -7.32086372,
          -9.25464153, -10.79966545, -10.12152672,  -6.76570702, -10.71261692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [459]; unstable size 459; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 131, 1, 459] with unstable size 130 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 459] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 459] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [130]; unstable size 130; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 130] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 130] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.35711432, 0.89513063, 4.55454111, 2.81934166, 4.73727655, 6.20089006,
         5.47830963, 2.08739519, 5.85482740]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0322 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
          -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [504]; unstable size 504; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 504] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 504] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 504] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 199] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.36880398,  5.11926937,  0.38846779,  0.01013416,  0.33952856,
         -0.05993855,  1.64709651,  4.65361834,  4.72898006]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
          -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.91it/s]100%|██████████| 1/1 [00:00<00:00,  8.90it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.49543190, -11.39906597,  -6.25923395,  -5.68034649,  -6.18490219,
           -5.65740013,  -5.70066929,  -7.64016151, -10.87086868, -11.04580212]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04326916]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1152 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.356842041015625
alpha/beta optimization time: 1.2236499786376953
initial alpha-crown bounds: tensor([[ 3.39546871,  5.14681530,  0.40474570,  0.01093243,  0.35315681,
         -0.05082333,  1.65623391,  4.68375635,  4.75655556]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.050823330879211426
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62799549102783
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6279537677765
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62792491912842
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.62790322303772
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.6278839111328
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.62786531448364
Verifying property 5 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05082333]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
         -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05082333]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 504
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 196
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 705
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.000110626220703125
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.050823092460632324
10 lb beta sum: 0.0, worst -0.05082237720489502
Time: prepare 0.0002    bound 0.0885    transfer 0.0001    finalize 0.0001    func 0.0890    
Accumulated time: func 0.0890    prepare 0.0002    bound 0.0885    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 76] 
split level 1: [/input-8, 1820] 
split level 2: [/input-8, 531] 
split level 3: [/input-8, 1890] 
split level 4: [/input-8, 1819] 
split level 5: [/input-8, 1957] 
split level 6: [/input-12, 79] 
split level 7: [/input-8, 1880] 
split level 8: [/input-8, 1876] 
split level 9: [/input-8, 1945] 
split level 10: [/input-8, 1309] 
split level 11: [/input-8, 1900] 
split level 12: [/input-8, 1889] 
split level 13: [/input-8, 797] 
split level 14: [/input, 2712] 
split level 15: [/input, 1941] 
split level 16: [/input, 2764] 
split level 17: [/input, 2020] 
split level 18: [/input-8, 1877] 
split level 19: [/input, 2486] 
split level 20: [/input, 1992] 
split level 21: [/input, 424] 
split level 22: [/input, 1977] 
split level 23: [/input, 1972] 
split level 24: [/input, 2765] 
split level 25: [/input, 1918] 
split level 26: [/input-8, 1969] 
split level 27: [/input, 421] 
split level 28: [/input-8, 1869] 
split level 29: [/input, 2019] 
split level 30: [/input, 2773] 
split level 31: [/input-8, 1893] 
split level 32: [/input-8, 802] 
split level 33: [/input, 1954] 
split level 34: [/input, 2024] 
split level 35: [/input, 2774] 
split level 36: [/input-8, 522] 
split level 37: [/input, 185] 
split level 38: [/input, 1979] 
split level 39: [/input, 1891] 
split level 40: [/input, 1875] 
split level 41: [/input, 2451] 
split level 42: [/input-8, 1908] 
split level 43: [/input, 1912] 
split level 44: [/input, 1400] 
split level 45: [/input, 2003] 
split level 46: [/input, 2028] 
split level 47: [/input, 1367] 
split level 48: [/input, 1879] 
split level 49: [/input, 1978] 
split level 50: [/input, 2441] 
split level 51: [/input-8, 1705] 
split level 52: [/input, 132] 
split level 53: [/input, 2411] 
split level 54: [/input, 2499] 
split level 55: [/input, 1015] 
split level 56: [/input-8, 811] 
split level 57: [/input, 1335] 
split level 58: [/input, 2357] 
split level 59: [/input, 2717] 
split level 60: [/input, 2459] 
split level 61: [/input, 2652] 
split level 62: [/input, 2005] 
split level 63: [/input, 1219] 
split level 64: [/input, 452] 
split level 65: [/input, 1230] 
split level 66: [/input, 2460] 
split level 67: [/input, 2465] 
split level 68: [/input, 2038] 
split level 69: [/input, 166] 
split level 70: [/input-8, 821] 
split level 71: [/input, 3928] 
split level 72: [/input, 2382] 
split level 73: [/input-8, 525] 
split level 74: [/input, 2494] 
split level 75: [/input, 733] 
split level 76: [/input, 2794] 
split level 77: [/input, 1868] 
split level 78: [/input, 2470] 
split level 79: [/input, 748] 
split level 80: [/input, 372] 
split level 81: [/input-8, 1980] 
split level 82: [/input, 2792] 
split level 83: [/input, 1399] 
split level 84: [/input, 598] 
split level 85: [/input, 2505] 
split level 86: [/input, 1014] 
split level 87: [/input, 394] 
split level 88: [/input-8, 1978] 
split level 89: [/input, 860] 
split level 90: [/input, 1414] 
split level 91: [/input, 1169] 
split level 92: [/input, 1997] 
split level 93: [/input-8, 1998] 
split level 94: [/input, 2413] 
split level 95: [/input, 2430] 
split level 96: [/input, 1966] 
split level 97: [/input, 1970] 
split level 98: [/input-8, 342] 
split level 99: [/input, 3709] 
split level 100: [/input, 1885] 
split level 101: [/input-8, 1298] 
split level 102: [/input-8, 1859] 
split level 103: [/input, 2414] 
split level 104: [/input, 1953] 
split level 105: [/input-8, 361] 
split level 106: [/input, 1259] 
split level 107: [/input, 1902] 
split level 108: [/input, 1901] 
split level 109: [/input, 461] 
split level 110: [/input, 979] 
split level 111: [/input, 1412] 
split level 112: [/input, 1830] 
split level 113: [/input, 1220] 
split level 114: [/input, 2404] 
split level 115: [/input, 451] 
split level 116: [/input, 3774] 
split level 117: [/input, 1985] 
split level 118: [/input, 2036] 
split level 119: [/input, 3661] 
split level 120: [/input, 491] 
split level 121: [/input, 1270] 
split level 122: [/input, 1869] 
split level 123: [/input, 3820] 
split level 124: [/input-8, 979] 
split level 125: [/input, 1401] 
split level 126: [/input, 1378] 
split level 127: [/input, 492] 
split level 128: [/input-8, 936] 
split level 129: [/input, 1245] 
split level 130: [/input, 702] 
split level 131: [/input, 1836] 
split level 132: [/input, 1835] 
split level 133: [/input, 1882] 
split level 134: [/input, 377] 
split level 135: [/input, 2013] 
split level 136: [/input-8, 1967] 
split level 137: [/input, 1165] 
split level 138: [/input, 348] 
split level 139: [/input, 1362] 
split level 140: [/input, 1267] 
split level 141: [/input, 3990] 
split level 142: [/input, 2037] 
split level 143: [/input, 2450] 
split level 144: [/input, 2705] 
split level 145: [/input, 399] 
split level 146: [/input, 1843] 
split level 147: [/input, 3805] 
split level 148: [/input, 1842] 
split level 149: [/input, 2374] 
split level 150: [/input, 1275] 
split level 151: [/input, 3797] 
split level 152: [/input, 435] 
split level 153: [/input, 1430] 
split level 154: [/input, 1252] 
split level 155: [/input, 1428] 
split level 156: [/input, 2481] 
split level 157: [/input-8, 1593] 
split level 158: [/input, 2813] 
split level 159: [/input, 1820] 
split level 160: [/input-8, 1203] 
split level 161: [/input, 2798] 
split level 162: [/input, 2671] 
split level 163: [/input, 2043] 
split level 164: [/input, 2633] 
split level 165: [/input, 1815] 
split level 166: [/input, 2044] 
split level 167: [/input, 2355] 
split level 168: [/input, 2812] 
split level 169: [/input, 1243] 
split level 170: [/input, 1379] 
split level 171: [/input-8, 928] 
split level 172: [/input, 433] 
split level 173: [/input-8, 1902] 
split level 174: [/input, 2515] 
split level 175: [/input, 2811] 
split level 176: [/input, 3961] 
split level 177: [/input, 1811] 
split level 178: [/input, 812] 
split level 179: [/input, 2342] 
split level 180: [/input, 1084] 
split level 181: [/input, 1429] 
split level 182: [/input, 1818] 
split level 183: [/input, 3803] 
split level 184: [/input, 2045] 
split level 185: [/input, 1413] 
split level 186: [/input, 1821] 
split level 187: [/input, 1968] 
split level 188: [/input, 1465] 
split level 189: [/input-8, 920] 
split level 190: [/input, 2620] 
split level 191: [/input, 3611] 
split level 192: [/input, 333] 
split level 193: [/input, 1150] 
split level 194: [/input, 589] 
split level 195: [/input, 4006] 
split level 196: [/input, 1838] 
split level 197: [/input, 2237] 
split level 198: [/input, 1837] 
split level 199: [/input, 3621] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05082213878631592
10 lb beta sum: 0.0, worst -0.05082380771636963
Time: prepare 0.0114    bound 0.0986    transfer 0.0036    finalize 0.0023    func 0.1185    
Accumulated time: func 0.2075    prepare 0.0217    bound 0.1871    transfer 0.0037    finalize 0.0025    
all_split False
======================Cut inference begins======================
max lb tensor(0.03922451) min lb tensor(-0.05082130)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010312318801879883 
BICCOS Cumulative time: 0.010312318801879883
Preprocessing time: 0.009979486465454102 Inference time: 7.963180541992188e-05 Add cuts time: 4.57763671875e-05 Cut analysis time: 0.00020742416381835938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04851 (1), -0.04848 (1), -0.04847 (1), -0.04844 (1), -0.04840 (1), -0.04835 (1), -0.04830 (1), -0.04828 (1), -0.04821 (1), -0.04815 (1), -0.04809 (1), -0.04808 (1), -0.04805 (1), -0.04803 (1), -0.04798 (1), -0.04798 (1), -0.04786 (1), -0.04781 (1), -0.04781 (1), -0.04777 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5222    set_bounds 0.0083    solve 0.1186    add 0.0659    
Accumulated time: pickout 0.0003    decision 0.5222    set_bounds 0.0083    solve 0.1186    add 0.0659    
Current (lb-rhs): -0.048506736755371094
50 domains visited
Cumulative time: 0.8196685314178467

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 531] [/input-8, 1820] [/input-8, 1820] 
split level 1: [/input-8, 1890] [/input-8, 531] [/input-8, 531] [/input-8, 1890] [/input-8, 531] [/input-8, 531] [/input-8, 531] [/input-8, 1890] [/input-8, 531] [/input-8, 531] 
split level 2: [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] 
split level 3: [/input-8, 1203] [/input-8, 1819] [/input-8, 1819] [/input-8, 1876] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1876] [/input-8, 1819] [/input-8, 1819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04689908027648926
10 lb beta sum: 0.19730766117572784, worst -0.04574429988861084
Time: prepare 0.0069    bound 1.2107    transfer 0.0023    finalize 0.0024    func 1.2249    
Accumulated time: func 1.4323    prepare 0.0289    bound 1.3977    transfer 0.0060    finalize 0.0048    
all_split False
======================Cut inference begins======================
max lb tensor(0.00186741) min lb tensor(-0.04544437)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.012370586395263672 
BICCOS Cumulative time: 0.022682905197143555
Preprocessing time: 0.01149892807006836 Inference time: 0.00012564659118652344 Add cuts time: 8.535385131835938e-05 Cut analysis time: 0.0006606578826904297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03087 (2), -0.03081 (2), -0.03061 (2), -0.03048 (2), -0.03047 (2), -0.03033 (2), -0.03021 (2), -0.03010 (2), -0.03004 (2), -0.02991 (2), -0.02974 (2), -0.02971 (2), -0.02958 (2), -0.02950 (2), -0.02925 (2), -0.02912 (2), -0.02901 (2), -0.02839 (2), -0.02805 (2), -0.02802 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0222    set_bounds 0.0127    solve 1.2250    add 0.0732    
Accumulated time: pickout 0.0013    decision 0.5445    set_bounds 0.0210    solve 1.3435    add 0.1391    
Current (lb-rhs): -0.030871033668518066
100 domains visited
Cumulative time: 2.166367530822754

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1820] [/input-8, 531] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 531] [/input-8, 531] 
split level 1: [/input-8, 531] [/input-8, 1819] [/input-8, 531] [/input-8, 531] [/input-8, 531] [/input-8, 531] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] 
split level 2: [/input-8, 1819] [/input-8, 1890] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] 
split level 3: [/input-8, 1203] [/input-8, 1203] [/input-8, 1203] [/input-8, 1203] [/input-8, 1203] [/input-8, 1819] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030255556106567383
10 lb beta sum: 0.20582382380962372, worst -0.02861785888671875
Time: prepare 0.0065    bound 1.3457    transfer 0.0018    finalize 0.0025    func 1.3601    
Accumulated time: func 2.7924    prepare 0.0357    bound 2.7435    transfer 0.0078    finalize 0.0073    
all_split False
======================Cut inference begins======================
max lb tensor(0.01424682) min lb tensor(-0.02858436)
Number of Verified Splits: 48 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 2
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.014847755432128906 
BICCOS Cumulative time: 0.03753066062927246
Preprocessing time: 0.0115203857421875 Inference time: 0.002107381820678711 Add cuts time: 0.0008959770202636719 Cut analysis time: 0.00032401084899902344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01397 (3), -0.01393 (3), -0.01363 (3), -0.01356 (3), -0.01347 (3), -0.01344 (3), -0.01344 (3), -0.01325 (3), -0.01286 (3), -0.01285 (3), -0.01235 (3), -0.01234 (3), -0.01234 (3), -0.01224 (3), -0.01199 (3), -0.01196 (3), -0.01162 (3), -0.01160 (3), -0.01157 (3), -0.01122 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0149    solve 1.3603    add 0.0787    
Accumulated time: pickout 0.0023    decision 0.5640    set_bounds 0.0359    solve 2.7038    add 0.2178    
Current (lb-rhs): -0.013973474502563477
150 domains visited
Cumulative time: 3.6558616161346436

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1890] [/input-8, 1890] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] [/input-8, 1820] 
split level 1: [/input-8, 1819] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] 
split level 2: [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1819] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] 
split level 3: [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23524999618530273, worst -0.02446509711444378
10 lb beta sum: 0.4128359854221344, worst -0.016155248507857323
Time: prepare 0.0150    bound 0.1317    transfer 0.0017    finalize 0.0016    func 0.1527    
Accumulated time: func 2.9452    prepare 0.0510    bound 2.8751    transfer 0.0095    finalize 0.0090    
all_split False
======================Cut inference begins======================
max lb tensor(0.00581644) min lb tensor(-0.01238096)
Number of Verified Splits: 104 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 2
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.018626928329467773 
BICCOS Cumulative time: 0.056157588958740234
Preprocessing time: 0.011264562606811523 Inference time: 0.005259275436401367 Add cuts time: 0.0012521743774414062 Cut analysis time: 0.0008509159088134766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00387 (4), -0.00382 (4), -0.00381 (4), -0.00381 (4), -0.00371 (4), -0.00371 (4), -0.00362 (4), -0.00361 (4), -0.00360 (4), -0.00359 (4), -0.00359 (4), -0.00358 (4), -0.00347 (4), -0.00339 (4), -0.00323 (4), -0.00310 (4), -0.00308 (4), -0.00306 (4), -0.00305 (4), -0.00302 (4), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0198    set_bounds 0.0151    solve 0.1528    add 0.2441    
Accumulated time: pickout 0.0032    decision 0.5838    set_bounds 0.0509    solve 2.8566    add 0.4619    
Current (lb-rhs): -0.0038739442825317383
200 domains visited
Cumulative time: 4.1074182987213135

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] [/input-12, 76] 
split level 1: [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1820] [/input-8, 1820] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] [/input-8, 1819] 
split level 2: [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1819] [/input-8, 1819] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] 
split level 3: [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1876] [/input-8, 1876] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.00529634952545166
10 lb beta sum: 0.2541353106498718, worst -0.01523486990481615
Time: prepare 0.0063    bound 0.1336    transfer 0.0027    finalize 0.0024    func 0.1475    
Accumulated time: func 3.0927    prepare 0.0576    bound 3.0087    transfer 0.0122    finalize 0.0113    
all_split False
======================Cut inference begins======================
max lb tensor(0.00746381) min lb tensor(-0.00347316)
Number of Verified Splits: 302 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.031826019287109375 
BICCOS Cumulative time: 0.08798360824584961
Preprocessing time: 0.011184453964233398 Inference time: 0.016652584075927734 Add cuts time: 0.003690958023071289 Cut analysis time: 0.0002980232238769531
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0198    set_bounds 0.0138    solve 0.1476    add 0.0259    
Accumulated time: pickout 0.0041    decision 0.6036    set_bounds 0.0648    solve 3.0042    add 0.4878    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1889], [-1.0, -1.0, -1.0, -1.0], [0, 0, 0, 0], [9.159762792004811e-14, 0.01757328398525715, 0.0060381158255040646, 0.003623056458309293], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([-1.]), tensor([0]), tensor([9.23563526e-14]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1889], [-1.0, -1.0, -1.0, -1.0], [0, 0, 0, 0], [9.159762792004811e-14, 0.01757328398525715, 0.0060381158255040646, 0.003623056458309293], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([1.]), tensor([0]), tensor([3.97426002e-37]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1889], [-1.0, -1.0, -1.0, 1.0], [0, 0, 0, 0], [9.159762792004811e-14, 0.01757328398525715, 0.0060381158255040646, 0.006008691154420376], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([-1.]), tensor([0]), tensor([5.12094811e-11]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1889], [-1.0, -1.0, -1.0, 1.0], [0, 0, 0, 0], [9.159762792004811e-14, 0.01757328398525715, 0.0060381158255040646, 0.006008691154420376], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([1.]), tensor([0]), tensor([2.74955614e-10]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1957,  531, 1890, 1820]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([9.15976279e-14, 1.75732840e-02, 4.26404318e-03, 1.01520289e-02]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1820], [-1.0, -1.0, 1.0, 1.0], [0, 0, 0, 0], [9.159762792004811e-14, 0.01757328398525715, 0.004264043178409338, 0.006539033260196447], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([-1.]), tensor([0]), tensor([3.97425284e-37]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1957, 531, 1890, 1820], [-1.0, -1.0, 1.0, 1.0], [0, 0, 0, 0], [9.159762792004811e-14, 0.01757328398525715, 0.004264043178409338, 0.006539033260196447], [0, 1, 2, 3]), '/input-12': (tensor([76]), tensor([1.]), tensor([0]), tensor([8.60761462e-11]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1957,  531, 1820]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([9.15976279e-14, 3.09662684e-03, 1.16589535e-02]), tensor([0, 1, 2])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1957,  531, 1820]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([9.15976279e-14, 3.09662684e-03, 5.23011526e-03]), tensor([0, 1, 2])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1957]), tensor([1.]), tensor([0]), tensor([9.57841662e-14]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05039548873901367
10 lb beta sum: 0.3704542815685272, worst -0.047496914863586426
Time: prepare 0.0005    bound 0.1353    transfer 0.0001    finalize 0.0002    func 0.1362    
Accumulated time: func 3.2289    prepare 0.0581    bound 3.1440    transfer 0.0123    finalize 0.0115    
After pruning, left:  6

Back to Regular BaB

BaB round 1
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1820] [/input-8, 1820] [/input-8, 1819] [/input-12, 76] [/input-12, 76] [/input-8, 1820] 
split level 1: [/input-8, 1819] [/input-8, 1819] [/input-12, 79] [/input-8, 1890] [/input-8, 1819] [/input-8, 531] 
split level 2: [/input-12, 79] [/input-12, 79] [/input-8, 1876] [/input-8, 1819] [/input-8, 1890] [/input-8, 1890] 
split level 3: [/input-8, 1876] [/input-8, 1876] [/input-8, 1945] [/input-8, 1876] [/input-8, 1876] [/input-8, 1819] 
split level 4: [/input-8, 1945] [/input-8, 1945] [/input, 1941] [/input-8, 1945] [/input-8, 1945] [/input-8, 1876] 
split level 5: [/input-8, 1900] [/input-8, 1900] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] 
cut re-enabled after branching node selection
0 lb beta sum: 0.35438162088394165, worst -0.029416441917419434
10 lb beta sum: 0.35464906692504883, worst -0.02938365936279297
Time: prepare 0.0168    bound 0.1380    transfer 0.0010    finalize 0.0022    func 0.1606    
Accumulated time: func 3.3895    prepare 0.0752    bound 3.2820    transfer 0.0133    finalize 0.0137    
all_split False
======================Cut inference begins======================
max lb tensor(0.26872492) min lb tensor(-0.02937531)
Number of Verified Splits: 306 of 384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0003495216369628906 
BICCOS Cumulative time: 0.0883331298828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02938 (6), -0.02842 (6), -0.02801 (6), -0.02590 (6), -0.02590 (6), -0.02548 (6), -0.02495 (6), -0.02457 (6), -0.02436 (6), -0.02398 (6), -0.02370 (6), -0.02284 (6), -0.02251 (6), -0.02245 (6), -0.02220 (6), -0.02174 (6), -0.02156 (6), -0.02150 (6), -0.02138 (6), -0.02118 (6), 
Length of domains: 78
Time: pickout 0.0005    decision 0.0183    set_bounds 0.0374    solve 0.1608    add 0.0010    
Accumulated time: pickout 0.0047    decision 0.6219    set_bounds 0.1022    solve 3.1649    add 0.4888    
Current (lb-rhs): -0.029375314712524414
278 domains visited
Cumulative time: 4.7252209186553955

BaB round 2
batch: 78
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 79] [/input-12, 76] [/input-12, 76] [/input-12, 79] [/input-12, 79] [/input-12, 76] [/input-12, 76] [/input-12, 79] [/input-12, 79] [/input-12, 76] 
split level 1: [/input-8, 1880] [/input-12, 79] [/input-12, 79] [/input-8, 1900] [/input-8, 1880] [/input-12, 79] [/input-12, 79] [/input-8, 1880] [/input-8, 1900] [/input-8, 1945] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46607887744903564, worst -0.028067469596862793
10 lb beta sum: 0.46605056524276733, worst -0.02803623676300049
Time: prepare 0.0138    bound 0.1361    transfer 0.0009    finalize 0.0020    func 0.1548    
Accumulated time: func 3.5443    prepare 0.0892    bound 3.4180    transfer 0.0142    finalize 0.0157    
all_split False
======================Cut inference begins======================
max lb tensor(0.47259796) min lb tensor(-0.02802467)
Number of Verified Splits: 205 of 312
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.00034809112548828125 
BICCOS Cumulative time: 0.08868122100830078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02802 (8), -0.02799 (8), -0.02705 (8), -0.02584 (8), -0.02455 (8), -0.02455 (8), -0.02412 (8), -0.02368 (8), -0.02359 (8), -0.02302 (8), -0.02260 (8), -0.02248 (8), -0.02242 (8), -0.02218 (8), -0.02158 (8), -0.02099 (8), -0.02099 (8), -0.02083 (8), -0.02070 (8), -0.02006 (8), 
Length of domains: 107
Time: pickout 0.0017    decision 0.0177    set_bounds 0.0160    solve 0.1549    add 0.0011    
Accumulated time: pickout 0.0064    decision 0.6396    set_bounds 0.1182    solve 3.3198    add 0.4899    
Current (lb-rhs): -0.028024673461914062
385 domains visited
Cumulative time: 4.918010950088501

BaB round 3
batch: 107
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-8, 1880] [/input-8, 1880] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46587684750556946, worst -0.028025031089782715
10 lb beta sum: 0.4658414125442505, worst -0.02801060676574707
Time: prepare 0.0096    bound 0.1363    transfer 0.0006    finalize 0.0013    func 0.1496    
Accumulated time: func 3.6939    prepare 0.0990    bound 3.5543    transfer 0.0148    finalize 0.0170    
all_split False
======================Cut inference begins======================
max lb tensor(0.23532848) min lb tensor(-0.02800024)
Number of Verified Splits: 94 of 214
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.00034332275390625 
BICCOS Cumulative time: 0.08902454376220703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02800 (9), -0.02754 (9), -0.02704 (9), -0.02547 (9), -0.02454 (9), -0.02412 (9), -0.02410 (9), -0.02359 (9), -0.02323 (9), -0.02302 (9), -0.02258 (9), -0.02225 (9), -0.02205 (9), -0.02171 (9), -0.02156 (9), -0.02079 (9), -0.02048 (9), -0.02047 (9), -0.02037 (9), -0.01990 (9), 
Length of domains: 120
Time: pickout 0.0019    decision 0.0176    set_bounds 0.0091    solve 0.1497    add 0.0011    
Accumulated time: pickout 0.0083    decision 0.6572    set_bounds 0.1273    solve 3.4695    add 0.4910    
Current (lb-rhs): -0.028000235557556152
505 domains visited
Cumulative time: 5.098222494125366

BaB round 4
batch: 120
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] [/input-8, 1945] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4655195474624634, worst -0.027557849884033203
10 lb beta sum: 0.4655066132545471, worst -0.027548670768737793
Time: prepare 0.0108    bound 0.1391    transfer 0.0015    finalize 0.0016    func 0.1546    
Accumulated time: func 3.8485    prepare 0.1100    bound 3.6934    transfer 0.0163    finalize 0.0185    
all_split False
======================Cut inference begins======================
max lb tensor(0.00651260) min lb tensor(-0.02754509)
Number of Verified Splits: 57 of 240
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0003428459167480469 
BICCOS Cumulative time: 0.08936738967895508
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02755 (10), -0.02670 (10), -0.02623 (10), -0.02419 (10), -0.02409 (10), -0.02364 (10), -0.02326 (10), -0.02281 (10), -0.02270 (10), -0.02213 (10), -0.02194 (10), -0.02120 (10), -0.02112 (10), -0.02079 (10), -0.02046 (10), -0.02014 (10), -0.01966 (10), -0.01934 (10), -0.01933 (10), -0.01930 (10), 
Length of domains: 183
Time: pickout 0.0018    decision 0.0174    set_bounds 0.0092    solve 0.1547    add 0.0014    
Accumulated time: pickout 0.0101    decision 0.6746    set_bounds 0.1365    solve 3.6242    add 0.4924    
Current (lb-rhs): -0.02754509449005127
688 domains visited
Cumulative time: 5.283814430236816

BaB round 5
batch: 183
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1877] [/input-8, 1900] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4649437963962555, worst -0.02682185173034668
10 lb beta sum: 0.46495771408081055, worst -0.02681577205657959
Time: prepare 0.0163    bound 0.1378    transfer 0.0009    finalize 0.0021    func 0.1596    
Accumulated time: func 4.0081    prepare 0.1265    bound 3.8312    transfer 0.0173    finalize 0.0206    
all_split False
======================Cut inference begins======================
max lb tensor(0.00587940) min lb tensor(-0.02680826)
Number of Verified Splits: 115 of 366
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0003387928009033203 
BICCOS Cumulative time: 0.0897061824798584
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02681 (11), -0.02597 (11), -0.02549 (11), -0.02343 (11), -0.02336 (11), -0.02291 (11), -0.02253 (11), -0.02208 (11), -0.02197 (11), -0.02142 (11), -0.02121 (11), -0.02050 (11), -0.02050 (11), -0.02003 (11), -0.01973 (11), -0.01929 (11), -0.01915 (11), -0.01851 (11), -0.01846 (11), -0.01844 (11), 
Length of domains: 251
Time: pickout 0.0035    decision 0.0210    set_bounds 0.0154    solve 0.1597    add 0.0014    
Accumulated time: pickout 0.0136    decision 0.6956    set_bounds 0.1519    solve 3.7839    add 0.4938    
Current (lb-rhs): -0.02680826187133789
939 domains visited
Cumulative time: 5.485873699188232

BaB round 6
batch: 251
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4646909236907959, worst -0.025449037551879883
10 lb beta sum: 0.4646909236907959, worst -0.025440335273742676
Time: prepare 0.0232    bound 0.1394    transfer 0.0032    finalize 0.0026    func 0.1718    
Accumulated time: func 4.1799    prepare 0.1500    bound 3.9706    transfer 0.0205    finalize 0.0233    
all_split False
======================Cut inference begins======================
max lb tensor(0.00796700) min lb tensor(-0.02543354)
Number of Verified Splits: 107 of 502
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0003383159637451172 
BICCOS Cumulative time: 0.09004449844360352
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02543 (12), -0.02465 (12), -0.02455 (12), -0.02344 (12), -0.02328 (12), -0.02276 (12), -0.02260 (12), -0.02198 (12), -0.02182 (12), -0.02125 (12), -0.02111 (12), -0.02088 (12), -0.02080 (12), -0.02034 (12), -0.02031 (12), -0.02000 (12), -0.01969 (12), -0.01934 (12), -0.01928 (12), -0.01924 (12), 
Length of domains: 395
Time: pickout 0.0034    decision 0.0239    set_bounds 0.0174    solve 0.1719    add 0.0029    
Accumulated time: pickout 0.0170    decision 0.7196    set_bounds 0.1693    solve 3.9558    add 0.4967    
Current (lb-rhs): -0.02543354034423828
1334 domains visited
Cumulative time: 5.707374811172485

BaB round 7
batch: 395
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1992] [/input, 1992] [/input, 1992] [/input, 1992] [/input, 1992] [/input, 1992] [/input-8, 1893] [/input, 1992] [/input-8, 1893] [/input, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46453988552093506, worst -0.024599194526672363
10 lb beta sum: 0.46453988552093506, worst -0.02459537982940674
Time: prepare 0.0372    bound 0.1411    transfer 0.0043    finalize 0.0049    func 0.1926    
Accumulated time: func 4.3725    prepare 0.1874    bound 4.1117    transfer 0.0248    finalize 0.0281    
all_split False
======================Cut inference begins======================
max lb tensor(0.00590909) min lb tensor(-0.02458930)
Number of Verified Splits: 156 of 790
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0003485679626464844 
BICCOS Cumulative time: 0.09039306640625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02459 (13), -0.02371 (13), -0.02345 (13), -0.02325 (13), -0.02257 (13), -0.02239 (13), -0.02205 (13), -0.02201 (13), -0.02192 (13), -0.02141 (13), -0.02126 (13), -0.02078 (13), -0.02061 (13), -0.02057 (13), -0.02051 (13), -0.02003 (13), -0.02003 (13), -0.01995 (13), -0.01995 (13), -0.01992 (13), 
Length of domains: 634
Time: pickout 0.0177    decision 0.0330    set_bounds 0.0295    solve 0.1928    add 0.0032    
Accumulated time: pickout 0.0346    decision 0.7525    set_bounds 0.1989    solve 4.1486    add 0.4999    
Current (lb-rhs): -0.02458930015563965
1968 domains visited
Cumulative time: 5.985071182250977

BaB round 8
batch: 634
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input, 1992] [/input-8, 1893] [/input, 1992] [/input, 1992] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4642346501350403, worst -0.02339959144592285
10 lb beta sum: 0.4642346501350403, worst -0.02339315414428711
Time: prepare 0.0607    bound 0.1473    transfer 0.0071    finalize 0.0065    func 0.2298    
Accumulated time: func 4.6023    prepare 0.2484    bound 4.2589    transfer 0.0318    finalize 0.0346    
all_split False
======================Cut inference begins======================
max lb tensor(0.00530660) min lb tensor(-0.02339208)
Number of Verified Splits: 245 of 1268
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.00036644935607910156 
BICCOS Cumulative time: 0.0907595157623291
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02339 (14), -0.02251 (14), -0.02197 (14), -0.02196 (14), -0.02195 (14), -0.02185 (14), -0.02136 (14), -0.02121 (14), -0.02115 (14), -0.02112 (14), -0.02111 (14), -0.02072 (14), -0.02061 (14), -0.02043 (14), -0.02001 (14), -0.02000 (14), -0.01994 (14), -0.01971 (14), -0.01960 (14), -0.01957 (14), 
Length of domains: 1023
Time: pickout 0.0082    decision 0.0441    set_bounds 0.0511    solve 0.2307    add 0.0047    
Accumulated time: pickout 0.0428    decision 0.7966    set_bounds 0.2499    solve 4.3793    add 0.5046    
Current (lb-rhs): -0.023392081260681152
2991 domains visited
Cumulative time: 6.326227426528931

BaB round 9
batch: 1023
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4640287458896637, worst -0.02263188362121582
10 lb beta sum: 0.4640287458896637, worst -0.02262747287750244
Time: prepare 0.0979    bound 0.1708    transfer 0.0094    finalize 0.0101    func 0.3023    
Accumulated time: func 4.9046    prepare 0.3466    bound 4.4297    transfer 0.0413    finalize 0.0448    
all_split False
======================Cut inference begins======================
max lb tensor(0.00487053) min lb tensor(-0.02262580)
Number of Verified Splits: 420 of 2046
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0003879070281982422 
BICCOS Cumulative time: 0.09114742279052734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02263 (15), -0.02175 (15), -0.02118 (15), -0.02112 (15), -0.02109 (15), -0.02107 (15), -0.02061 (15), -0.02058 (15), -0.02042 (15), -0.02030 (15), -0.02025 (15), -0.01997 (15), -0.01974 (15), -0.01973 (15), -0.01952 (15), -0.01952 (15), -0.01948 (15), -0.01944 (15), -0.01919 (15), -0.01918 (15), 
Length of domains: 1626
Time: pickout 0.0181    decision 0.0665    set_bounds 0.0815    solve 0.3027    add 0.0167    
Accumulated time: pickout 0.0610    decision 0.8631    set_bounds 0.3314    solve 4.6820    add 0.5213    
Current (lb-rhs): -0.02262580394744873
4617 domains visited
Cumulative time: 6.815928220748901

BaB round 10
batch: 1626
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1891] [/input, 1891] [/input, 1891] [/input, 1941] [/input, 1891] [/input, 1891] [/input, 1891] [/input, 1891] [/input, 1954] [/input, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4638335108757019, worst -0.022216439247131348
10 lb beta sum: 0.4638335108757019, worst -0.02221810817718506
Time: prepare 0.1566    bound 0.2376    transfer 0.0193    finalize 0.0185    func 0.4535    
Accumulated time: func 5.3581    prepare 0.5035    bound 4.6673    transfer 0.0605    finalize 0.0633    
all_split False
======================Cut inference begins======================
max lb tensor(0.00335157) min lb tensor(-0.02221584)
Number of Verified Splits: 569 of 3252
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.00040912628173828125 
BICCOS Cumulative time: 0.09155654907226562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02222 (16), -0.02134 (16), -0.02075 (16), -0.02065 (16), -0.02062 (16), -0.02036 (16), -0.02027 (16), -0.02022 (16), -0.02017 (16), -0.01984 (16), -0.01978 (16), -0.01968 (16), -0.01958 (16), -0.01958 (16), -0.01953 (16), -0.01932 (16), -0.01926 (16), -0.01921 (16), -0.01896 (16), -0.01894 (16), 
Length of domains: 2683
Time: pickout 0.0218    decision 0.2484    set_bounds 0.1344    solve 0.4540    add 0.0315    
Accumulated time: pickout 0.0827    decision 1.1115    set_bounds 0.4658    solve 5.1360    add 0.5528    
Current (lb-rhs): -0.022215843200683594
7300 domains visited
Cumulative time: 7.712831258773804

BaB round 11
batch: 2683
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1977] [/input, 1977] [/input, 1977] [/input, 1977] [/input-8, 802] [/input, 1912] [/input-8, 802] [/input, 1977] [/input-8, 1893] [/input-8, 1893] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46371862292289734, worst -0.020707368850708008
10 lb beta sum: 0.46371862292289734, worst -0.020697951316833496
Time: prepare 0.2613    bound 0.3480    transfer 0.0249    finalize 0.0318    func 0.7012    
Accumulated time: func 6.0593    prepare 0.7650    bound 5.0153    transfer 0.0855    finalize 0.0950    
all_split False
======================Cut inference begins======================
max lb tensor(0.01700580) min lb tensor(-0.02069557)
Number of Verified Splits: 1010 of 5366
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0005028247833251953 
BICCOS Cumulative time: 0.09205937385559082
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02070 (17), -0.02061 (17), -0.01983 (17), -0.01974 (17), -0.01949 (17), -0.01941 (17), -0.01924 (17), -0.01920 (17), -0.01916 (17), -0.01901 (17), -0.01899 (17), -0.01892 (17), -0.01874 (17), -0.01873 (17), -0.01864 (17), -0.01863 (17), -0.01863 (17), -0.01856 (17), -0.01853 (17), -0.01847 (17), 
Length of domains: 4356
Time: pickout 0.0372    decision 0.1533    set_bounds 0.2218    solve 0.8560    add 0.0571    
Accumulated time: pickout 0.1199    decision 1.2649    set_bounds 0.6875    solve 5.9920    add 0.6099    
Current (lb-rhs): -0.02069556713104248
11656 domains visited
Cumulative time: 9.050652503967285

BaB round 12
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1309] [/input, 1978] [/input-8, 1309] [/input, 1978] [/input, 1977] [/input, 1941] [/input, 1978] [/input-8, 802] [/input, 1912] [/input-8, 802] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46367037296295166, worst -0.019870519638061523
10 lb beta sum: 0.46367037296295166, worst -0.01986110210418701
Time: prepare 0.4020    bound 0.4930    transfer 0.0445    finalize 0.0481    func 1.0424    
Accumulated time: func 7.1017    prepare 1.1673    bound 5.5082    transfer 0.1299    finalize 0.1432    
all_split False
======================Cut inference begins======================
max lb tensor(0.01613998) min lb tensor(-0.01985574)
Number of Verified Splits: 1696 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0005750656127929688 
BICCOS Cumulative time: 0.09263443946838379
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01986 (18), -0.01978 (18), -0.01902 (18), -0.01896 (18), -0.01894 (18), -0.01886 (18), -0.01878 (18), -0.01869 (18), -0.01866 (18), -0.01842 (18), -0.01841 (18), -0.01833 (18), -0.01825 (18), -0.01816 (18), -0.01815 (18), -0.01812 (18), -0.01808 (18), -0.01807 (18), -0.01785 (18), -0.01784 (18), 
Length of domains: 6756
Time: pickout 0.0588    decision 0.2298    set_bounds 0.3442    solve 1.2046    add 0.0225    
Accumulated time: pickout 0.1787    decision 1.4946    set_bounds 1.0317    solve 7.1966    add 0.6324    
Current (lb-rhs): -0.019855737686157227
18152 domains visited
current_vram/total_varm: 9.7GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.934488773345947

BaB round 13
batch: 6756
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 802] [/input, 1891] [/input-8, 1309] [/input-8, 802] [/input-8, 802] [/input-8, 802] [/input, 1977] [/input-8, 802] [/input, 1977] [/input-8, 1893] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4636130928993225, worst -0.019318342208862305
10 lb beta sum: 0.4636130928993225, worst -0.019315719604492188
Time: prepare 0.6739    bound 0.7644    transfer 0.0752    finalize 0.0772    func 1.6792    
Accumulated time: func 8.7810    prepare 1.8414    bound 6.2726    transfer 0.2051    finalize 0.2203    
all_split False
======================Cut inference begins======================
max lb tensor(0.01623678) min lb tensor(-0.01931393)
Number of Verified Splits: 3252 of 13512
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0006363391876220703 
BICCOS Cumulative time: 0.09327077865600586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01931 (19), -0.01923 (19), -0.01848 (19), -0.01839 (19), -0.01838 (19), -0.01833 (19), -0.01820 (19), -0.01812 (19), -0.01788 (19), -0.01785 (19), -0.01782 (19), -0.01779 (19), -0.01777 (19), -0.01762 (19), -0.01757 (19), -0.01755 (19), -0.01754 (19), -0.01752 (19), -0.01739 (19), -0.01731 (19), 
Length of domains: 10260
Time: pickout 0.1269    decision 0.3765    set_bounds 0.7626    solve 1.6819    add 0.1006    
Accumulated time: pickout 0.3056    decision 1.8711    set_bounds 1.7942    solve 8.8785    add 0.7330    
Current (lb-rhs): -0.019313931465148926
28412 domains visited
Cumulative time: 14.014203310012817

BaB round 14
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1309] [/input-8, 802] [/input, 2712] [/input, 1941] [/input, 421] [/input, 421] [/input, 1977] [/input, 1979] [/input, 1912] [/input, 1912] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4635286033153534, worst -0.01898634433746338
10 lb beta sum: 0.4635286033153534, worst -0.018986105918884277
Time: prepare 0.8137    bound 0.9118    transfer 0.0895    finalize 0.2996    func 2.2236    
Accumulated time: func 11.0045    prepare 2.6555    bound 7.1844    transfer 0.2946    finalize 0.5199    
all_split False
======================Cut inference begins======================
max lb tensor(0.01667368) min lb tensor(-0.01898432)
Number of Verified Splits: 5167 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0007648468017578125 
BICCOS Cumulative time: 0.09403562545776367
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01923 (19), -0.01898 (20), -0.01839 (19), -0.01838 (19), -0.01833 (19), -0.01815 (20), -0.01788 (19), -0.01782 (19), -0.01779 (19), -0.01761 (20), -0.01757 (19), -0.01755 (19), -0.01754 (20), -0.01752 (19), -0.01731 (19), -0.01725 (19), -0.01722 (19), -0.01718 (20), -0.01717 (19), -0.01710 (20), 
Length of domains: 13285
Time: pickout 0.1256    decision 0.6572    set_bounds 0.7137    solve 2.2268    add 0.0406    
Accumulated time: pickout 0.4312    decision 2.5283    set_bounds 2.5079    solve 11.1054    add 0.7736    
Current (lb-rhs): -0.019234299659729004
39629 domains visited
current_vram/total_varm: 21.8GB/99.9GB, batch_size increase to 16384
Cumulative time: 17.825302600860596

BaB round 15
batch: 13285
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1977] [/input, 1977] [/input, 1912] [/input-8, 1309] [/input, 421] [/input, 2712] [/input, 2712] [/input, 2712] [/input, 421] [/input-8, 1309] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46352773904800415, worst -0.018909335136413574
10 lb beta sum: 0.46352773904800415, worst -0.018906831741333008
Time: prepare 1.3388    bound 1.4380    transfer 0.1455    finalize 0.1641    func 3.2583    
Accumulated time: func 14.2628    prepare 3.9947    bound 8.6224    transfer 0.4401    finalize 0.6840    
all_split False
======================Cut inference begins======================
max lb tensor(0.01683497) min lb tensor(-0.01890600)
Number of Verified Splits: 8867 of 26570
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0006926059722900391 
BICCOS Cumulative time: 0.09472823143005371
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01891 (20), -0.01807 (20), -0.01804 (21), -0.01803 (20), -0.01798 (20), -0.01758 (21), -0.01742 (21), -0.01742 (20), -0.01730 (20), -0.01726 (21), -0.01725 (20), -0.01725 (20), -0.01721 (20), -0.01720 (20), -0.01697 (20), -0.01695 (20), -0.01692 (20), -0.01689 (20), -0.01684 (20), -0.01683 (21), 
Length of domains: 17703
Time: pickout 0.2605    decision 0.9781    set_bounds 1.4427    solve 3.2634    add 0.1960    
Accumulated time: pickout 0.6917    decision 3.5063    set_bounds 3.9506    solve 14.3688    add 0.9696    
Current (lb-rhs): -0.018905997276306152
57332 domains visited
Cumulative time: 24.05333113670349

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2441] [/input, 421] [/input-8, 1309] [/input, 2712] [/input, 2712] [/input-8, 1309] [/input, 1978] [/input, 2712] [/input, 2712] [/input, 2712] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4635109305381775, worst -0.017963171005249023
10 lb beta sum: 0.4635109305381775, worst -0.017967820167541504
Time: prepare 1.6527    bound 1.7517    transfer 0.1784    finalize 0.4960    func 4.2914    
Accumulated time: func 18.5542    prepare 5.6477    bound 10.3741    transfer 0.6185    finalize 1.1800    
all_split False
======================Cut inference begins======================
max lb tensor(0.01672161) min lb tensor(-0.01796317)
Number of Verified Splits: 10401 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0009751319885253906 
BICCOS Cumulative time: 0.0957033634185791
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01796 (21), -0.01769 (21), -0.01765 (21), -0.01754 (21), -0.01749 (22), -0.01734 (21), -0.01696 (21), -0.01692 (21), -0.01685 (22), -0.01665 (22), -0.01661 (21), -0.01656 (21), -0.01648 (21), -0.01642 (21), -0.01637 (21), -0.01632 (22), -0.01628 (22), -0.01626 (21), -0.01625 (22), -0.01619 (22), 
Length of domains: 23686
Time: pickout 0.2746    decision 1.9043    set_bounds 1.7564    solve 4.2978    add 0.0782    
Accumulated time: pickout 0.9662    decision 5.4106    set_bounds 5.7070    solve 18.6665    add 1.0478    
Current (lb-rhs): -0.017963171005249023
79699 domains visited
current_vram/total_varm: 31.8GB/99.9GB, batch_size increase to 32768
Cumulative time: 32.469741106033325

BaB round 17
batch: 23686
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1309] [/input, 1979] [/input, 1891] [/input, 1941] [/input, 421] [/input, 1941] [/input, 1979] [/input, 2441] [/input, 1912] [/input-8, 1309] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4634970724582672, worst -0.017438411712646484
10 lb beta sum: 0.4634970724582672, worst -0.017441391944885254
Time: prepare 2.3952    bound 2.5150    transfer 0.2572    finalize 0.3124    func 6.1971    
Accumulated time: func 24.7513    prepare 8.0433    bound 12.8891    transfer 0.8756    finalize 1.4924    
all_split False
======================Cut inference begins======================
max lb tensor(0.01671541) min lb tensor(-0.01743841)
Number of Verified Splits: 13067 of 47372
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0008988380432128906 
BICCOS Cumulative time: 0.09660220146179199
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01744 (22), -0.01687 (22), -0.01683 (22), -0.01680 (22), -0.01671 (23), -0.01660 (22), -0.01630 (22), -0.01626 (22), -0.01620 (23), -0.01609 (22), -0.01606 (23), -0.01604 (22), -0.01603 (22), -0.01599 (22), -0.01593 (22), -0.01592 (22), -0.01587 (23), -0.01579 (22), -0.01574 (22), -0.01574 (22), 
Length of domains: 34305
Time: pickout 0.4976    decision 2.7244    set_bounds 2.5850    solve 6.2064    add 0.3781    
Accumulated time: pickout 1.4639    decision 8.1350    set_bounds 8.2920    solve 24.8729    add 1.4259    
Current (lb-rhs): -0.017438411712646484
114004 domains visited
Cumulative time: 45.00262928009033

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 421] [/input-8, 1705] [/input, 2441] [/input-8, 1309] [/input, 1912] [/input, 2712] [/input, 2712] [/input, 1912] [/input, 421] [/input, 1979] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46347862482070923, worst -0.016664505004882812
10 lb beta sum: 0.46347862482070923, worst -0.016667604446411133
Time: prepare 3.3264    bound 8.6292    transfer 0.3547    finalize 0.4400    func 13.7045    
Accumulated time: func 38.4558    prepare 11.3701    bound 21.5183    transfer 1.2304    finalize 1.9324    
all_split False
======================Cut inference begins======================
max lb tensor(0.01629364) min lb tensor(-0.01666427)
Number of Verified Splits: 16296 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.03339672088623047 
BICCOS Cumulative time: 0.12999892234802246
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01666 (23), -0.01615 (23), -0.01606 (23), -0.01602 (24), -0.01601 (23), -0.01595 (23), -0.01590 (23), -0.01582 (23), -0.01551 (24), -0.01550 (23), -0.01534 (23), -0.01533 (23), -0.01529 (23), -0.01526 (23), -0.01524 (23), -0.01522 (23), -0.01520 (23), -0.01520 (23), -0.01518 (24), -0.01516 (23), 
Length of domains: 50777
Time: pickout 0.5836    decision 3.3230    set_bounds 4.0522    solve 13.7174    add 0.1921    
Accumulated time: pickout 2.0474    decision 11.4580    set_bounds 12.3442    solve 38.5903    add 1.6180    
Current (lb-rhs): -0.01666426658630371
163244 domains visited
Cumulative time: 67.10044407844543

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1705] [/input, 1978] [/input, 2441] [/input-8, 1705] [/input-8, 1705] [/input, 1891] [/input-8, 1705] [/input, 1972] [/input, 1979] [/input, 2024] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4634675085544586, worst -0.015371441841125488
10 lb beta sum: 0.4634675085544586, worst -0.015399575233459473
Time: prepare 3.3390    bound 8.6369    transfer 0.3533    finalize 0.4679    func 13.9141    
Accumulated time: func 52.3699    prepare 14.7095    bound 30.1552    transfer 1.5837    finalize 2.4003    
all_split False
======================Cut inference begins======================
max lb tensor(0.01613832) min lb tensor(-0.01536596)
Number of Verified Splits: 16300 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0009980201721191406 
BICCOS Cumulative time: 0.1309969425201416
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01666 (23), -0.01602 (24), -0.01601 (23), -0.01551 (24), -0.01537 (24), -0.01534 (24), -0.01526 (24), -0.01518 (24), -0.01515 (23), -0.01515 (23), -0.01508 (24), -0.01502 (24), -0.01495 (23), -0.01485 (24), -0.01480 (24), -0.01470 (24), -0.01463 (23), -0.01463 (24), -0.01460 (24), -0.01458 (23), 
Length of domains: 67245
Time: pickout 0.5893    decision 3.3897    set_bounds 3.7654    solve 13.9269    add 16.3006    
Accumulated time: pickout 2.6367    decision 14.8477    set_bounds 16.1096    solve 52.5172    add 17.9186    
Current (lb-rhs): -0.01666426658630371
212480 domains visited
Cumulative time: 105.26218962669373

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1705] [/input-8, 1705] [/input, 2024] [/input-8, 1705] [/input, 2024] [/input, 1912] [/input, 1941] [/input, 2773] [/input-8, 1705] [/input, 1979] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4634493589401245, worst -0.015871882438659668
10 lb beta sum: 0.4634493589401245, worst -0.015865564346313477
Time: prepare 3.3697    bound 8.6372    transfer 0.3572    finalize 0.4616    func 14.0356    
Accumulated time: func 66.4055    prepare 18.0796    bound 38.7924    transfer 1.9409    finalize 2.8619    
all_split False
======================Cut inference begins======================
max lb tensor(0.01527214) min lb tensor(-0.01585591)
Number of Verified Splits: 16226 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0010275840759277344 
BICCOS Cumulative time: 0.13202452659606934
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01586 (24), -0.01555 (25), -0.01537 (24), -0.01534 (24), -0.01526 (24), -0.01518 (24), -0.01508 (24), -0.01504 (25), -0.01502 (24), -0.01500 (25), -0.01497 (24), -0.01470 (24), -0.01460 (24), -0.01458 (25), -0.01457 (24), -0.01455 (24), -0.01454 (24), -0.01451 (24), -0.01449 (25), -0.01447 (24), 
Length of domains: 83787
Time: pickout 0.6072    decision 3.6295    set_bounds 4.0965    solve 14.0493    add 0.1821    
Accumulated time: pickout 3.2439    decision 18.4772    set_bounds 20.2061    solve 66.5665    add 18.1007    
Current (lb-rhs): -0.015855908393859863
261790 domains visited
Cumulative time: 128.01003313064575

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1979] [/input, 1979] [/input, 1972] [/input, 1979] [/input, 1979] [/input, 1972] [/input, 1979] [/input-8, 1705] [/input, 2024] [/input, 1979] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4634545147418976, worst -0.014901995658874512
10 lb beta sum: 0.4634545147418976, worst -0.014919757843017578
Time: prepare 3.4306    bound 8.6364    transfer 0.3509    finalize 1.3172    func 14.1583    
Accumulated time: func 80.5638    prepare 21.5108    bound 47.4288    transfer 2.2917    finalize 4.1791    
all_split False
======================Cut inference begins======================
max lb tensor(0.01180184) min lb tensor(-0.01489055)
Number of Verified Splits: 16729 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0011076927185058594 
BICCOS Cumulative time: 0.1331322193145752
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01586 (24), -0.01555 (25), -0.01518 (24), -0.01504 (25), -0.01502 (24), -0.01500 (25), -0.01497 (24), -0.01489 (25), -0.01478 (25), -0.01459 (25), -0.01449 (25), -0.01445 (24), -0.01438 (25), -0.01437 (24), -0.01436 (24), -0.01434 (25), -0.01433 (25), -0.01421 (26), -0.01409 (25), -0.01408 (25), 
Length of domains: 99826
Time: pickout 0.6439    decision 4.2213    set_bounds 3.3455    solve 14.1720    add 0.1581    
Accumulated time: pickout 3.8878    decision 22.6985    set_bounds 23.5516    solve 80.7384    add 18.2588    
Current (lb-rhs): -0.015855908393859863
310597 domains visited
Cumulative time: 150.76393842697144

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2411] [/input, 1972] [/input, 1978] [/input, 1978] [/input, 1972] [/input, 1972] [/input, 1972] [/input, 1979] [/input, 1891] [/input, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4634453058242798, worst -0.01518261432647705
10 lb beta sum: 0.4634453058242798, worst -0.015184521675109863
Time: prepare 3.4292    bound 8.6443    transfer 0.3538    finalize 0.5320    func 13.3808    
Accumulated time: func 93.9446    prepare 24.9406    bound 56.0731    transfer 2.6455    finalize 4.7111    
all_split False
======================Cut inference begins======================
max lb tensor(0.01505840) min lb tensor(-0.01518202)
Number of Verified Splits: 17993 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.001046895980834961 
BICCOS Cumulative time: 0.13417911529541016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01518 (24), -0.01518 (26), -0.01510 (25), -0.01500 (25), -0.01489 (25), -0.01478 (25), -0.01459 (25), -0.01449 (25), -0.01440 (25), -0.01436 (26), -0.01436 (24), -0.01434 (25), -0.01433 (25), -0.01427 (25), -0.01425 (25), -0.01421 (26), -0.01409 (25), -0.01407 (25), -0.01406 (25), -0.01399 (25), 
Length of domains: 114601
Time: pickout 0.6373    decision 3.8517    set_bounds 4.3620    solve 14.4736    add 0.1914    
Accumulated time: pickout 4.5251    decision 26.5502    set_bounds 27.9135    solve 95.2121    add 18.4502    
Current (lb-rhs): -0.015184640884399414
358140 domains visited
Cumulative time: 174.5125916004181

BaB round 23
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1705] [/input, 2024] [/input, 2024] [/input, 2024] [/input, 1912] [/input, 1891] [/input-8, 1908] [/input, 1979] [/input-8, 1908] [/input, 2773] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4634430408477783, worst -0.014536023139953613
10 lb beta sum: 0.4634430408477783, worst -0.014673948287963867
Time: prepare 3.4646    bound 8.6356    transfer 0.3755    finalize 0.5439    func 13.4482    
Accumulated time: func 107.3928    prepare 28.4057    bound 64.7087    transfer 3.0210    finalize 5.2550    
all_split False
======================Cut inference begins======================
max lb tensor(0.00817657) min lb tensor(-0.01453567)
Number of Verified Splits: 18520 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0010623931884765625 
BICCOS Cumulative time: 0.13524150848388672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01518 (26), -0.01510 (25), -0.01459 (25), -0.01454 (26), -0.01451 (26), -0.01444 (25), -0.01440 (25), -0.01436 (26), -0.01434 (25), -0.01433 (25), -0.01427 (25), -0.01425 (25), -0.01421 (26), -0.01411 (26), -0.01411 (26), -0.01409 (25), -0.01407 (25), -0.01399 (25), -0.01397 (26), -0.01382 (25), 
Length of domains: 128849
Time: pickout 0.6379    decision 3.3822    set_bounds 4.5159    solve 14.6340    add 0.2984    
Accumulated time: pickout 5.1630    decision 29.9324    set_bounds 32.4294    solve 109.8461    add 18.7486    
Current (lb-rhs): -0.015182018280029297
405156 domains visited
Cumulative time: 198.22110414505005

BaB round 24
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1705] [/input, 1891] [/input, 1972] [/input, 1979] [/input, 2024] [/input, 2024] [/input-8, 1908] [/input, 2773] [/input, 1972] [/input, 2441] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4634461998939514, worst -0.013868093490600586
10 lb beta sum: 0.4634461998939514, worst -0.01394951343536377
Time: prepare 3.4333    bound 8.6363    transfer 0.3986    finalize 0.5335    func 13.4313    
Accumulated time: func 120.8241    prepare 31.8395    bound 73.3450    transfer 3.4196    finalize 5.7885    
all_split False
======================Cut inference begins======================
max lb tensor(0.00850844) min lb tensor(-0.01385927)
Number of Verified Splits: 19018 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0011968612670898438 
BICCOS Cumulative time: 0.13643836975097656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01518 (26), -0.01510 (25), -0.01454 (26), -0.01451 (26), -0.01444 (25), -0.01440 (25), -0.01436 (26), -0.01427 (25), -0.01425 (25), -0.01411 (26), -0.01411 (26), -0.01399 (25), -0.01386 (26), -0.01385 (26), -0.01383 (27), -0.01376 (25), -0.01376 (26), -0.01372 (26), -0.01364 (25), -0.01363 (25), 
Length of domains: 142599
Time: pickout 0.6301    decision 3.3923    set_bounds 4.7108    solve 13.4491    add 0.2400    
Accumulated time: pickout 5.7931    decision 33.3247    set_bounds 37.1402    solve 123.2952    add 18.9887    
Current (lb-rhs): -0.015182018280029297
451674 domains visited
Time out!!!!!!!!
Result: unknown in 223.4412 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.67231560, -12.31690121,  -9.13868904,  -9.91203594, -10.08119774,
         -10.03050518, -10.11687660,  -9.52802277, -13.05829144, -11.58372593]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [415]; unstable size 415; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 415] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 415] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 415] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 142] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.06250882,  1.38609838, -1.36709845, -0.49393952, -0.48505685,
         -0.38832200, -1.14975965,  2.17636347,  0.71444726]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.67231560, -12.31690121,  -9.13868904,  -9.91203594, -10.08119774,
         -10.03050518, -10.11687660,  -9.52802277, -13.05829144, -11.58372593]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.67231464, -12.31690121,  -9.13868713,  -9.91203594, -10.08119774,
          -10.03050327, -10.11687565,  -9.52802277, -13.05829048, -11.58372498],
         [ -9.67231464, -12.31690121,  -9.13868713,  -9.91203594, -10.08119774,
          -10.03050327, -10.11687565,  -9.52802277, -13.05829048, -11.58372498]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44456100, -0.97818851, -0.20483971, -0.03567791, -0.08637238,
          -0.58885288]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0729 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22662783, -5.64782429, -2.60211635, -3.16177058, -3.14393139,
         -3.25724936, -3.03231645, -2.89354324, -3.41767120, -4.93730450]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [530]; unstable size 530; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 530] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 530] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 530] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 159] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.37045440,  1.62804031, -1.37615514, -0.83468586, -0.86788678,
         -0.74519157, -0.99820900, -1.20427847,  0.93063784]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.22662783, -5.64782429, -2.60211635, -3.16177058, -3.14393139,
         -3.25724936, -3.03231645, -2.89354324, -3.41767120, -4.93730450]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.22662783, -5.64782429, -2.60211611, -3.16177034, -3.14393115,
          -3.25724936, -3.03231645, -2.89354324, -3.41767168, -4.93730497],
         [-4.22662783, -5.64782429, -2.60211611, -3.16177034, -3.14393115,
          -3.25724936, -3.03231645, -2.89354324, -3.41767168, -4.93730497]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.81555557, -0.25590134, -0.27374053, -0.16042233, -0.38535523,
          -0.52412844]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0772 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.00991821, -13.35237980,  -9.67140388, -10.73055935,  -9.20372391,
         -10.78434086,  -8.77386570, -10.62020874, -14.29128361, -13.35895061]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [545]; unstable size 545; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 545] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 545] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 545] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 249] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.56179905, 3.63847446, 0.57008612, 1.61158323, 0.13146019, 1.65996575,
         1.35068643, 4.52710819, 3.71646309]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0571 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
         -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [520]; unstable size 520; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 520] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 520] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 520] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 171] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.49318433,  3.10641050,  5.37454414,  3.09507990,  5.62251949,
          5.56271124,  4.11786795, -0.92750764,  2.68375826]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
         -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
          -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.61637211]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666e+00,  1.67777801e+00,  1.32857168e+00,  ...,
             2.80952454e-01,  1.06349289e-01, -5.23808524e-02],
           [ 9.79365110e-01,  1.39206374e+00,  1.24920666e+00,  ...,
            -1.95237994e-01, -1.79364979e-01, -1.31745934e-01],
           [ 1.28095269e+00,  1.39206374e+00,  9.15873051e-01,  ...,
            -2.06348225e-02,  1.11112073e-02,  2.17460394e-01],
           ...,
           [-4.96825397e-01, -4.80952382e-01, -4.33333218e-01,  ...,
            -4.80952382e-01, -4.96825397e-01, -4.96825397e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.80952382e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.96825397e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01]],

          [[ 1.91626441e+00,  2.06119204e+00,  1.70692456e+00,  ...,
             1.27214205e+00,  1.15942061e+00,  1.06280196e+00],
           [ 1.72302771e+00,  1.88405824e+00,  1.83574903e+00,  ...,
             1.07890511e+00,  1.06280196e+00,  1.04669893e+00],
           [ 1.94847047e+00,  1.91626441e+00,  1.69082153e+00,  ...,
             1.19162667e+00,  1.20772982e+00,  1.30434811e+00],
           ...,
           [-3.22059989e-02, -4.83090580e-02, -3.22059989e-02,  ...,
            -6.44121096e-02, -8.05151686e-02, -8.05151686e-02],
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -3.22059989e-02],
           [-6.44121096e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -1.61029361e-02]],

          [[ 2.10045004e+00,  2.08545780e+00,  1.81559265e+00,  ...,
             1.84557760e+00,  1.80060017e+00,  1.74063015e+00],
           [ 1.96551764e+00,  1.92054021e+00,  1.96551764e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.81559265e+00],
           [ 2.08545780e+00,  1.96551764e+00,  1.96551764e+00,  ...,
             1.95052516e+00,  1.95052516e+00,  1.96551764e+00],
           ...,
           [ 2.11394474e-01,  1.21439442e-01,  1.81409463e-01,  ...,
             2.11394474e-01,  2.11394474e-01,  2.11394474e-01],
           [ 2.26386964e-01,  1.51424453e-01,  1.81409463e-01,  ...,
             2.26386964e-01,  2.26386964e-01,  2.41379470e-01],
           [ 1.81409463e-01,  1.66416958e-01,  1.96401969e-01,  ...,
             1.96401969e-01,  2.11394474e-01,  2.26386964e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0498 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
         -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [542]; unstable size 542; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 542] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 542] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 542] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 201] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.90671444e+00,  3.71085119e+00,  5.54727316e-02, -9.76629555e-04,
          3.31381559e-01,  5.89845061e-01,  4.14882541e-01,  3.71298957e+00,
          2.61608958e+00]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
         -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.61it/s]100%|██████████| 1/1 [00:00<00:00,  8.60it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.24166107, -8.22013760, -4.23363972, -3.89632154, -4.55042458,
          -3.89160490, -4.79965591, -4.76971054, -8.16572952, -7.05139542]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00471663]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1191 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.4983549118042
alpha/beta optimization time: 1.2293238639831543
initial alpha-crown bounds: tensor([[ 2.93031120e+00,  3.74855661e+00,  6.38688803e-02, -3.64616513e-04,
          3.41102123e-01,  5.96957684e-01,  4.24151719e-01,  3.74316168e+00,
          2.65060997e+00]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0003646165132522583
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.60488653182983
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6048402786255
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.60481357574463
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6047921180725
Verifying property 3 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.00036462]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
        -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00036462]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 542
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 197
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 745
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010728836059570312
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.00036457180976867676
10 lb beta sum: 0.0, worst -0.00036487728357315063
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0533    transfer 0.0001    finalize 0.0001    func 0.0537    
Accumulated time: func 0.0537    prepare 0.0002    bound 0.0533    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 47] 
split level 1: [/input-12, 10] 
split level 2: [/input-12, 62] 
split level 3: [/input-8, 1192] 
split level 4: [/input-12, 33] 
split level 5: [/input-8, 174] 
split level 6: [/input-8, 1184] 
split level 7: [/input-8, 1300] 
split level 8: [/input-8, 2018] 
split level 9: [/input, 1683] 
split level 10: [/input-8, 2042] 
split level 11: [/input, 405] 
split level 12: [/input-8, 2047] 
split level 13: [/input-8, 1882] 
split level 14: [/input, 2742] 
split level 15: [/input-8, 1075] 
split level 16: [/input-8, 1592] 
split level 17: [/input-8, 2043] 
split level 18: [/input-8, 25] 
split level 19: [/input-8, 1567] 
split level 20: [/input-8, 814] 
split level 21: [/input-8, 1596] 
split level 22: [/input-8, 1884] 
split level 23: [/input-8, 2044] 
split level 24: [/input, 2858] 
split level 25: [/input-8, 1538] 
split level 26: [/input, 2873] 
split level 27: [/input, 3324] 
split level 28: [/input, 3171] 
split level 29: [/input-8, 806] 
split level 30: [/input, 2881] 
split level 31: [/input, 3088] 
split level 32: [/input, 3104] 
split level 33: [/input, 2872] 
split level 34: [/input, 2844] 
split level 35: [/input, 2848] 
split level 36: [/input-12, 61] 
split level 37: [/input-8, 1339] 
split level 38: [/input-8, 1427] 
split level 39: [/input-8, 1330] 
split level 40: [/input-8, 296] 
split level 41: [/input-8, 1329] 
split level 42: [/input-8, 1060] 
split level 43: [/input-8, 140] 
split level 44: [/input-8, 177] 
split level 45: [/input-8, 892] 
split level 46: [/input-8, 1603] 
split level 47: [/input-8, 1323] 
split level 48: [/input-8, 1313] 
split level 49: [/input-8, 162] 
split level 50: [/input-8, 1824] 
split level 51: [/input, 1741] 
split level 52: [/input-8, 1331] 
split level 53: [/input-8, 1917] 
split level 54: [/input-8, 882] 
split level 55: [/input-8, 1851] 
split level 56: [/input, 1664] 
split level 57: [/input-8, 1895] 
split level 58: [/input-8, 1302] 
split level 59: [/input-8, 1138] 
split level 60: [/input-8, 1801] 
split level 61: [/input, 2987] 
split level 62: [/input, 1258] 
split level 63: [/input-8, 298] 
split level 64: [/input-8, 1623] 
split level 65: [/input-8, 1145] 
split level 66: [/input, 2646] 
split level 67: [/input-8, 1846] 
split level 68: [/input-8, 1433] 
split level 69: [/input-8, 1438] 
split level 70: [/input-8, 169] 
split level 71: [/input-8, 1324] 
split level 72: [/input-8, 1146] 
split level 73: [/input-8, 1428] 
split level 74: [/input-8, 2012] 
split level 75: [/input, 1586] 
split level 76: [/input-8, 1613] 
split level 77: [/input-8, 1425] 
split level 78: [/input-8, 1857] 
split level 79: [/input-8, 1442] 
split level 80: [/input-8, 1420] 
split level 81: [/input-8, 117] 
split level 82: [/input-8, 1332] 
split level 83: [/input-8, 12] 
split level 84: [/input-8, 19] 
split level 85: [/input-8, 21] 
split level 86: [/input, 19] 
split level 87: [/input-8, 32] 
split level 88: [/input-8, 73] 
split level 89: [/input-12, 4] 
split level 90: [/input-8, 77] 
split level 91: [/input-8, 147] 
split level 92: [/input-8, 171] 
split level 93: [/input-8, 262] 
split level 94: [/input, 92] 
split level 95: [/input-8, 320] 
split level 96: [/input-8, 327] 
split level 97: [/input, 98] 
split level 98: [/input, 99] 
split level 99: [/input-8, 328] 
split level 100: [/input, 134] 
split level 101: [/input, 141] 
split level 102: [/input, 157] 
split level 103: [/input-8, 332] 
split level 104: [/input, 185] 
split level 105: [/input, 275] 
split level 106: [/input, 283] 
split level 107: [/input, 289] 
split level 108: [/input-8, 334] 
split level 109: [/input, 290] 
split level 110: [/input-8, 353] 
split level 111: [/input, 297] 
split level 112: [/input-8, 354] 
split level 113: [/input-8, 357] 
split level 114: [/input, 305] 
split level 115: [/input, 320] 
split level 116: [/input-8, 363] 
split level 117: [/input-8, 365] 
split level 118: [/input, 321] 
split level 119: [/input-8, 366] 
split level 120: [/input-8, 372] 
split level 121: [/input, 323] 
split level 122: [/input-8, 373] 
split level 123: [/input, 346] 
split level 124: [/input, 355] 
split level 125: [/input, 356] 
split level 126: [/input-8, 374] 
split level 127: [/input, 366] 
split level 128: [/input, 378] 
split level 129: [/input-8, 380] 
split level 130: [/input, 385] 
split level 131: [/input-8, 525] 
split level 132: [/input-8, 530] 
split level 133: [/input-8, 533] 
split level 134: [/input-8, 538] 
split level 135: [/input-8, 539] 
split level 136: [/input, 402] 
split level 137: [/input-8, 543] 
split level 138: [/input-8, 563] 
split level 139: [/input-8, 709] 
split level 140: [/input-8, 713] 
split level 141: [/input, 410] 
split level 142: [/input, 420] 
split level 143: [/input-8, 715] 
split level 144: [/input-8, 719] 
split level 145: [/input, 427] 
split level 146: [/input-8, 725] 
split level 147: [/input, 432] 
split level 148: [/input-8, 734] 
split level 149: [/input, 433] 
split level 150: [/input-8, 735] 
split level 151: [/input, 452] 
split level 152: [/input, 460] 
split level 153: [/input, 461] 
split level 154: [/input, 463] 
split level 155: [/input-8, 737] 
split level 156: [/input, 475] 
split level 157: [/input, 478] 
split level 158: [/input, 482] 
split level 159: [/input-8, 744] 
split level 160: [/input-8, 747] 
split level 161: [/input, 492] 
split level 162: [/input-8, 789] 
split level 163: [/input-8, 790] 
split level 164: [/input-8, 834] 
split level 165: [/input-8, 847] 
split level 166: [/input-8, 875] 
split level 167: [/input, 494] 
split level 168: [/input-8, 904] 
split level 169: [/input, 522] 
split level 170: [/input-8, 905] 
split level 171: [/input-8, 908] 
split level 172: [/input-8, 937] 
split level 173: [/input-8, 938] 
split level 174: [/input-8, 939] 
split level 175: [/input-8, 941] 
split level 176: [/input, 542] 
split level 177: [/input-8, 945] 
split level 178: [/input, 549] 
split level 179: [/input, 568] 
split level 180: [/input-8, 950] 
split level 181: [/input, 577] 
split level 182: [/input-8, 953] 
split level 183: [/input, 622] 
split level 184: [/input-8, 972] 
split level 185: [/input, 625] 
split level 186: [/input, 660] 
split level 187: [/input-8, 985] 
split level 188: [/input, 663] 
split level 189: [/input, 670] 
split level 190: [/input, 688] 
split level 191: [/input-8, 1005] 
split level 192: [/input-8, 1112] 
split level 193: [/input, 700] 
split level 194: [/input, 705] 
split level 195: [/input, 707] 
split level 196: [/input, 711] 
split level 197: [/input-8, 1128] 
split level 198: [/input, 719] 
split level 199: [/input-8, 1137] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0040573179721832275
10 lb beta sum: 0.0, worst -0.010704755783081055
Time: prepare 0.0113    bound 0.1079    transfer 0.0022    finalize 0.0026    func 0.1267    
Accumulated time: func 0.1804    prepare 0.0216    bound 0.1612    transfer 0.0023    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.00610411) min lb tensor(-0.00036457)
Number of Verified Splits: 41 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01219320297241211 
BICCOS Cumulative time: 0.01219320297241211
Preprocessing time: 0.009997844696044922 Inference time: 0.0015883445739746094 Add cuts time: 0.00043845176696777344 Cut analysis time: 0.0001685619354248047
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5304    set_bounds 0.0087    solve 0.1268    add 0.0101    
Accumulated time: pickout 0.0003    decision 0.5304    set_bounds 0.0087    solve 0.1268    add 0.0101    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([47]), tensor([-1.]), tensor([0]), tensor([9.42615127e-14]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([47]), tensor([1.]), tensor([0]), tensor([7.72386599e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.00087013840675354

all verified at 0th iter
Time: prepare 0.0003    bound 0.0040    transfer 0.0001    finalize 0.0001    func 0.0045    
Accumulated time: func 0.1850    prepare 0.0218    bound 0.1651    transfer 0.0024    finalize 0.0029    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.6753933429718
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.67533016204834
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.67530727386475
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.67528676986694
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.67526769638062
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.3248 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.68161011, -4.31493664, -3.29749870, -3.86696267, -4.55905437,
         -4.00861025, -3.69984698, -5.91490364, -4.24547005, -4.16366720]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 403] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 403] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 182] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.68392754, -0.33067036, -0.84067476,  0.38051927,  0.12290451,
         -0.46707964,  1.54917371, -0.29823148, -0.40686059]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.68161011, -4.31493664, -3.29749870, -3.86696267, -4.55905437,
         -4.00861025, -3.69984698, -5.91490364, -4.24547005, -4.16366720]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.68161011, -4.31493664, -3.29749966, -3.86696267, -4.55905437,
          -4.00861073, -3.69984746, -5.91490364, -4.24547005, -4.16366720],
         [-3.68161011, -4.31493664, -3.29749966, -3.86696267, -4.55905437,
          -4.00861073, -3.69984746, -5.91490364, -4.24547005, -4.16366720]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.18535256,  0.44797397, -0.56946301, -0.16711521,  0.37850738,
           0.29670453]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0523 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.26414204, -10.67618656,  -7.14083195,  -7.60558414,  -6.94402504,
          -7.67818594,  -6.53135300,  -8.68149567,  -9.88610840, -10.70594692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 538] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 538] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 195] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.35335922, 3.54954433, 0.39658886, 0.85085702, 0.24288118, 0.91747463,
         1.88348353, 2.84460497, 3.62032747]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0441 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.17061424, -20.50812531, -23.04294586, -24.22522926, -25.19203758,
         -24.61592484, -24.87892914, -26.22239113, -21.59410477, -22.00157738]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 89, 1, 511] with unstable size 88 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 511] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [88]; unstable size 88; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 88] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 88] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.22561836, 1.90276670, 3.01938915, 3.98550987, 3.39302921, 3.71364927,
         4.93401432, 0.62228298, 1.22355103]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0393 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.76015854, -4.19035864, -4.85114622, -5.85322762, -4.73305225,
         -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916135]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [653]; unstable size 653; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 223, 1, 653] with unstable size 222 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 653] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 653] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 222] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30759096,  0.50324774,  1.35600054,  0.23959851,  1.49378979,
          0.62164259,  0.94105035, -0.94007611, -0.65508509]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.76015854, -4.19035864, -4.85114622, -5.85322762, -4.73305225,
         -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916135]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.76015854, -4.19035912, -4.85114622, -5.85322952, -4.73305321,
          -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916230],
         [-3.76015854, -4.19035912, -4.85114622, -5.85322952, -4.73305321,
          -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916230]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.43020058, -0.47531414,  0.12900376]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0640 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.28970528, -10.67957401, -10.33640766, -13.22579098, -10.36513615,
         -13.49066448, -14.18056297, -12.48040295,  -5.26089621, -10.53180790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [564]; unstable size 564; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 123, 1, 564] with unstable size 122 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 564] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 564] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [122]; unstable size 122; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 122] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 122] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.76197678, 4.99777508, 4.48139000, 7.34546185, 4.49978971, 7.59466982,
         8.32230759, 6.48773861, 4.83865213]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0645 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.66796303, -10.52346611,  -3.42282248,  -5.06743813,  -4.46258068,
          -5.11582899,  -5.54765797,  -6.57940102,  -9.65262794, -10.61189556]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 133, 1, 403] with unstable size 132 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [132]; unstable size 132; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 132] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.52602530,  4.36306667, -2.47155905, -0.77068269, -1.39496136,
         -0.72536504,  0.64461339,  3.49572897,  4.39420128]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.66796303, -10.52346611,  -3.42282248,  -5.06743813,  -4.46258068,
          -5.11582899,  -5.54765797,  -6.57940102,  -9.65262794, -10.61189556]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.66796207, -10.52346516,  -3.42282248,  -5.06743717,  -4.46258068,
           -5.11582804,  -5.54765701,  -6.57940102,  -9.65262604, -10.61189556],
         [ -7.66796207, -10.52346516,  -3.42282248,  -5.06743717,  -4.46258068,
           -5.11582804,  -5.54765701,  -6.57940102,  -9.65262604, -10.61189556]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-2.12483454, -0.48021984, -1.08507633, -0.43182898]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0762 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
         -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [728]; unstable size 728; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 728] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 728] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 728] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 186] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.92469144,  6.41981840,  1.23279619, -0.06353921,  1.31932342,
          0.44406334,  2.49051285,  4.72230053,  5.96450901]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
         -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.72it/s]100%|██████████| 1/1 [00:00<00:00,  8.71it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.11066437, -8.78367043, -1.73745489, -3.23712897, -1.76644242,
          -3.33225727, -2.47211003, -4.53414059, -7.01842499, -8.31025410]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02898753]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1178 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.59933853149414
alpha/beta optimization time: 1.2276322841644287
initial alpha-crown bounds: tensor([[ 2.93429804,  6.45055342,  1.23612022, -0.05334795,  1.32260990,
          0.45382139,  2.50835967,  4.75239944,  5.99452305]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.05334794521331787
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.58751702308655
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.58747744560242
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.58745098114014
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.58742880821228
Verifying property 3 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05334795]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
        -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05334795]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 728
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 184
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 916
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010943412780761719
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.053346969187259674
10 lb beta sum: 0.0, worst -0.05334768444299698
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0532    transfer 0.0001    finalize 0.0001    func 0.0536    
Accumulated time: func 0.0536    prepare 0.0002    bound 0.0532    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] 
split level 1: [/input-8, 545] 
split level 2: [/input-8, 541] 
split level 3: [/input-8, 544] 
split level 4: [/input-8, 1452] 
split level 5: [/input-8, 941] 
split level 6: [/input-8, 1465] 
split level 7: [/input, 648] 
split level 8: [/input-8, 1470] 
split level 9: [/input-8, 559] 
split level 10: [/input-8, 530] 
split level 11: [/input-8, 534] 
split level 12: [/input-8, 1258] 
split level 13: [/input, 649] 
split level 14: [/input-8, 152] 
split level 15: [/input-8, 306] 
split level 16: [/input-8, 950] 
split level 17: [/input-8, 1945] 
split level 18: [/input-8, 1217] 
split level 19: [/input-8, 531] 
split level 20: [/input-8, 1266] 
split level 21: [/input-8, 900] 
split level 22: [/input-8, 1261] 
split level 23: [/input-8, 1265] 
split level 24: [/input-8, 310] 
split level 25: [/input-8, 540] 
split level 26: [/input-8, 931] 
split level 27: [/input-8, 924] 
split level 28: [/input-8, 160] 
split level 29: [/input-8, 2044] 
split level 30: [/input-8, 1242] 
split level 31: [/input-8, 1175] 
split level 32: [/input-8, 309] 
split level 33: [/input-8, 1199] 
split level 34: [/input-8, 1250] 
split level 35: [/input-8, 68] 
split level 36: [/input, 1208] 
split level 37: [/input, 2437] 
split level 38: [/input, 1081] 
split level 39: [/input-8, 908] 
split level 40: [/input-8, 1269] 
split level 41: [/input-8, 313] 
split level 42: [/input, 1225] 
split level 43: [/input-8, 1417] 
split level 44: [/input-8, 1227] 
split level 45: [/input, 3667] 
split level 46: [/input-8, 375] 
split level 47: [/input-8, 1952] 
split level 48: [/input, 1127] 
split level 49: [/input, 2406] 
split level 50: [/input-8, 379] 
split level 51: [/input-8, 866] 
split level 52: [/input-8, 1241] 
split level 53: [/input, 2421] 
split level 54: [/input, 1065] 
split level 55: [/input, 3160] 
split level 56: [/input-8, 1953] 
split level 57: [/input-8, 899] 
split level 58: [/input, 1924] 
split level 59: [/input, 1129] 
split level 60: [/input, 1891] 
split level 61: [/input, 906] 
split level 62: [/input, 661] 
split level 63: [/input, 1859] 
split level 64: [/input, 1043] 
split level 65: [/input-8, 69] 
split level 66: [/input, 2456] 
split level 67: [/input, 1874] 
split level 68: [/input, 968] 
split level 69: [/input, 2440] 
split level 70: [/input, 3192] 
split level 71: [/input, 586] 
split level 72: [/input, 570] 
split level 73: [/input, 900] 
split level 74: [/input, 3146] 
split level 75: [/input, 935] 
split level 76: [/input-8, 1622] 
split level 77: [/input-8, 850] 
split level 78: [/input, 1845] 
split level 79: [/input, 788] 
split level 80: [/input-8, 1614] 
split level 81: [/input, 1139] 
split level 82: [/input, 3722] 
split level 83: [/input, 1882] 
split level 84: [/input, 1155] 
split level 85: [/input, 1827] 
split level 86: [/input-8, 915] 
split level 87: [/input, 1923] 
split level 88: [/input, 1063] 
split level 89: [/input, 1875] 
split level 90: [/input-8, 1630] 
split level 91: [/input, 1931] 
split level 92: [/input, 940] 
split level 93: [/input, 1873] 
split level 94: [/input, 873] 
split level 95: [/input-8, 1602] 
split level 96: [/input, 3139] 
split level 97: [/input, 2625] 
split level 98: [/input, 1907] 
split level 99: [/input, 3720] 
split level 100: [/input-8, 749] 
split level 101: [/input, 1858] 
split level 102: [/input-8, 1625] 
split level 103: [/input-8, 1597] 
split level 104: [/input, 3203] 
split level 105: [/input, 1890] 
split level 106: [/input, 1881] 
split level 107: [/input, 1163] 
split level 108: [/input, 889] 
split level 109: [/input, 1897] 
split level 110: [/input, 1123] 
split level 111: [/input, 1058] 
split level 112: [/input, 1854] 
split level 113: [/input, 3201] 
split level 114: [/input, 3651] 
split level 115: [/input, 3996] 
split level 116: [/input, 932] 
split level 117: [/input, 3995] 
split level 118: [/input-8, 1639] 
split level 119: [/input, 1086] 
split level 120: [/input, 1866] 
split level 121: [/input, 3128] 
split level 122: [/input, 1906] 
split level 123: [/input-8, 1513] 
split level 124: [/input, 916] 
split level 125: [/input, 1822] 
split level 126: [/input, 1868] 
split level 127: [/input, 3303] 
split level 128: [/input-8, 1617] 
split level 129: [/input, 1898] 
split level 130: [/input, 1057] 
split level 131: [/input, 1869] 
split level 132: [/input, 1171] 
split level 133: [/input, 552] 
split level 134: [/input, 1844] 
split level 135: [/input, 573] 
split level 136: [/input, 3894] 
split level 137: [/input, 1818] 
split level 138: [/input, 1843] 
split level 139: [/input, 1049] 
split level 140: [/input, 1085] 
split level 141: [/input, 2609] 
split level 142: [/input, 1817] 
split level 143: [/input-8, 1608] 
split level 144: [/input, 1074] 
split level 145: [/input, 610] 
split level 146: [/input, 1825] 
split level 147: [/input, 1883] 
split level 148: [/input, 1853] 
split level 149: [/input, 1870] 
split level 150: [/input, 1842] 
split level 151: [/input, 1266] 
split level 152: [/input, 2611] 
split level 153: [/input, 1131] 
split level 154: [/input, 1899] 
split level 155: [/input, 2593] 
split level 156: [/input, 1885] 
split level 157: [/input, 1851] 
split level 158: [/input, 3300] 
split level 159: [/input, 3895] 
split level 160: [/input, 1889] 
split level 161: [/input, 2342] 
split level 162: [/input, 1837] 
split level 163: [/input, 974] 
split level 164: [/input, 1922] 
split level 165: [/input, 1811] 
split level 166: [/input, 1834] 
split level 167: [/input-8, 951] 
split level 168: [/input-8, 1942] 
split level 169: [/input, 2357] 
split level 170: [/input, 1101] 
split level 171: [/input, 1835] 
split level 172: [/input, 1095] 
split level 173: [/input, 1850] 
split level 174: [/input, 1933] 
split level 175: [/input, 2610] 
split level 176: [/input, 978] 
split level 177: [/input, 1905] 
split level 178: [/input, 1852] 
split level 179: [/input, 1836] 
split level 180: [/input, 1915] 
split level 181: [/input, 1089] 
split level 182: [/input, 1867] 
split level 183: [/input, 300] 
split level 184: [/input, 1857] 
split level 185: [/input, 3979] 
split level 186: [/input, 1955] 
split level 187: [/input, 1070] 
split level 188: [/input, 1820] 
split level 189: [/input, 1819] 
split level 190: [/input, 924] 
split level 191: [/input, 4011] 
split level 192: [/input, 594] 
split level 193: [/input, 3602] 
split level 194: [/input, 289] 
split level 195: [/input, 3988] 
split level 196: [/input, 595] 
split level 197: [/input, 1027] 
split level 198: [/input, 1921] 
split level 199: [/input, 3226] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.053311049938201904
10 lb beta sum: 0.0, worst -0.053311511874198914
Time: prepare 0.0114    bound 0.1046    transfer 0.0040    finalize 0.0026    func 0.1251    
Accumulated time: func 0.1788    prepare 0.0217    bound 0.1578    transfer 0.0041    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03076951) min lb tensor(-0.05331105)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.009974479675292969 
BICCOS Cumulative time: 0.009974479675292969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05206 (1), -0.05199 (1), -0.05199 (1), -0.05198 (1), -0.05192 (1), -0.05191 (1), -0.05188 (1), -0.05188 (1), -0.05188 (1), -0.05179 (1), -0.05177 (1), -0.05168 (1), -0.05160 (1), -0.05153 (1), -0.05140 (1), -0.05132 (1), -0.05124 (1), -0.05123 (1), -0.05115 (1), -0.05114 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5258    set_bounds 0.0088    solve 0.1252    add 0.0662    
Accumulated time: pickout 0.0003    decision 0.5258    set_bounds 0.0088    solve 0.1252    add 0.0662    
Current (lb-rhs): -0.0520646795630455
50 domains visited
Cumulative time: 0.8055171966552734

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 541] [/input-8, 545] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 1: [/input-8, 1258] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 545] [/input-8, 545] [/input-8, 541] [/input-8, 541] [/input-8, 541] 
split level 2: [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] 
split level 3: [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05146137624979019
10 lb beta sum: 0.0, worst -0.051536232233047485
Time: prepare 0.0122    bound 0.0978    transfer 0.0010    finalize 0.0023    func 0.1158    
Accumulated time: func 0.2945    prepare 0.0341    bound 0.2555    transfer 0.0052    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01685613) min lb tensor(-0.05144448)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011413335800170898 
BICCOS Cumulative time: 0.021387815475463867
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02844 (2), -0.02837 (2), -0.02835 (2), -0.02834 (2), -0.02828 (2), -0.02824 (2), -0.02812 (2), -0.02802 (2), -0.02802 (2), -0.02791 (2), -0.02791 (2), -0.02790 (2), -0.02787 (2), -0.02787 (2), -0.02786 (2), -0.02774 (2), -0.02774 (2), -0.02747 (2), -0.02738 (2), -0.02719 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0135    solve 0.1158    add 0.0754    
Accumulated time: pickout 0.0013    decision 0.5454    set_bounds 0.0223    solve 0.2410    add 0.1415    
Current (lb-rhs): -0.028439104557037354
100 domains visited
Cumulative time: 1.0424907207489014

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 545] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 1470] [/input-8, 1470] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 541] 
split level 1: [/input-8, 541] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1465] [/input-8, 1465] [/input-8, 1258] [/input-8, 1470] [/input-8, 1470] [/input-8, 1258] 
split level 2: [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] 
split level 3: [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 559] [/input-8, 559] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027737706899642944
10 lb beta sum: 0.0, worst -0.027723684906959534
Time: prepare 0.0133    bound 0.1001    transfer 0.0027    finalize 0.0024    func 0.1214    
Accumulated time: func 0.4159    prepare 0.0477    bound 0.3557    transfer 0.0078    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00471096) min lb tensor(-0.02764034)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.012877941131591797 
BICCOS Cumulative time: 0.034265756607055664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01670 (3), -0.01669 (3), -0.01669 (3), -0.01668 (3), -0.01660 (3), -0.01657 (3), -0.01655 (3), -0.01650 (3), -0.01632 (3), -0.01625 (3), -0.01614 (3), -0.01611 (3), -0.01610 (3), -0.01576 (3), -0.01570 (3), -0.01568 (3), -0.01565 (3), -0.01562 (3), -0.01557 (3), -0.01557 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0191    set_bounds 0.0150    solve 0.1215    add 0.0815    
Accumulated time: pickout 0.0023    decision 0.5645    set_bounds 0.0373    solve 0.3625    add 0.2231    
Current (lb-rhs): -0.016698479652404785
150 domains visited
Cumulative time: 1.293776512145996

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 541] [/input-8, 1470] [/input-8, 545] [/input-8, 1258] [/input-8, 1470] [/input-8, 1470] [/input-8, 541] [/input-8, 545] [/input-8, 541] [/input-8, 1470] 
split level 1: [/input-8, 1465] [/input-8, 1465] [/input-8, 1465] [/input-8, 559] [/input-8, 1465] [/input-8, 1465] [/input-8, 1470] [/input-8, 541] [/input-8, 1258] [/input-8, 1465] 
split level 2: [/input-8, 559] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 559] [/input-8, 530] 
split level 3: [/input-8, 530] [/input-8, 534] [/input-8, 534] [/input-8, 1266] [/input-8, 534] [/input-8, 534] [/input-8, 559] [/input-8, 559] [/input-8, 534] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.016517475247383118
10 lb beta sum: 0.0, worst -0.016610994935035706
Time: prepare 0.0133    bound 0.0980    transfer 0.0010    finalize 0.0020    func 0.1169    
Accumulated time: func 0.5328    prepare 0.0613    bound 0.4537    transfer 0.0089    finalize 0.0095    
all_split False
======================Cut inference begins======================
max lb tensor(0.00220998) min lb tensor(-0.01643938)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.012426376342773438 
BICCOS Cumulative time: 0.0466921329498291
Preprocessing time: 0.011406183242797852 Inference time: 0.0001780986785888672 Add cuts time: 0.00010704994201660156 Cut analysis time: 0.0007350444793701172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00758 (4), -0.00744 (4), -0.00730 (4), -0.00728 (4), -0.00707 (4), -0.00700 (4), -0.00696 (4), -0.00695 (4), -0.00695 (4), -0.00688 (4), -0.00682 (4), -0.00660 (4), -0.00654 (4), -0.00650 (4), -0.00646 (4), -0.00641 (4), -0.00598 (4), -0.00580 (4), -0.00573 (4), -0.00553 (4), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0194    set_bounds 0.0152    solve 0.1170    add 0.0865    
Accumulated time: pickout 0.0034    decision 0.5839    set_bounds 0.0525    solve 0.4795    add 0.3096    
Current (lb-rhs): -0.007581308484077454
200 domains visited
Cumulative time: 1.5456609725952148

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 541] [/input-8, 541] [/input-8, 1258] [/input-8, 1258] [/input-8, 541] [/input-8, 541] [/input-8, 1465] [/input-8, 1465] [/input-8, 545] [/input-8, 545] 
split level 1: [/input-8, 1465] [/input-8, 1465] [/input-8, 559] [/input-8, 559] [/input-8, 1465] [/input-8, 1465] [/input-8, 1470] [/input-8, 1470] [/input-8, 1258] [/input-8, 1258] 
split level 2: [/input-8, 559] [/input-8, 559] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 534] [/input-8, 1258] [/input-8, 559] [/input-8, 559] 
split level 3: [/input-8, 1258] [/input-8, 1258] [/input-8, 534] [/input-8, 534] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 534] [/input-8, 534] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0072203874588012695
10 lb beta sum: 0.00668441504240036, worst -0.007029801607131958
Time: prepare 0.0078    bound 0.1353    transfer 0.0011    finalize 0.0018    func 0.1486    
Accumulated time: func 0.6814    prepare 0.0693    bound 0.5889    transfer 0.0099    finalize 0.0112    
all_split False
======================Cut inference begins======================
max lb tensor(0.00541639) min lb tensor(-0.00657618)
Number of Verified Splits: 104 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.021027565002441406 
BICCOS Cumulative time: 0.06771969795227051
Preprocessing time: 0.011785268783569336 Inference time: 0.00476527214050293 Add cuts time: 0.003498077392578125 Cut analysis time: 0.0009789466857910156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00149 (5), -0.00149 (5), -0.00149 (5), -0.00144 (5), -0.00144 (5), -0.00142 (5), -0.00142 (5), -0.00141 (5), -0.00137 (5), -0.00133 (5), -0.00130 (5), -0.00130 (5), -0.00129 (5), -0.00122 (5), -0.00122 (5), -0.00122 (5), -0.00121 (5), -0.00118 (5), -0.00115 (5), -0.00114 (5), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0197    set_bounds 0.1687    solve 0.1486    add 0.0972    
Accumulated time: pickout 0.0045    decision 0.6036    set_bounds 0.2212    solve 0.6281    add 0.4067    
Current (lb-rhs): -0.0014943741261959076
250 domains visited
Cumulative time: 2.0022637844085693

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531]), tensor([-1.]), tensor([0]), tensor([3.97426002e-37]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 541]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([3.97426002e-37, 1.09988614e-03, 1.12687214e-03]), tensor([0, 2, 3])), '/input-12': ([50], [-1.0], [0], [2.6493118809867156e-10], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 541]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([3.97426002e-37, 1.09988614e-03, 7.59782037e-03]), tensor([0, 2, 3])), '/input-12': ([50], [-1.0], [0], [2.6493118809867156e-10], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 559, 541]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.97426002e-37, 1.21461693e-02, 2.69637420e-03, 1.34333014e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [-1.0], [0], [2.6493118809867156e-10], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 559, 541]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.97426002e-37, 1.21461693e-02, 2.69637420e-03, 5.49049815e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [-1.0], [0], [2.6493118809867156e-10], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 559, 541]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.97426002e-37, 1.21461693e-02, 1.12149282e-03, 1.29747926e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [-1.0], [0], [2.6493118809867156e-10], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([531, 545, 559, 541]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([3.97426002e-37, 1.21461693e-02, 1.12149282e-03, 5.56142023e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [-1.0], [0], [2.6493118809867156e-10], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([3.97426002e-37, 1.27779110e-03, 5.64624509e-03]), tensor([0, 2, 3])), '/input-12': ([50], [1.0], [0], [0.021501118317246437], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([3.97426002e-37, 1.27779110e-03, 5.31630358e-04]), tensor([0, 2, 3])), '/input-12': ([50], [1.0], [0], [0.021501118317246437], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470, 1258]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.97426002e-37, 9.91548784e-03, 5.97192487e-03, 1.82856782e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [1.0], [0], [0.021501118317246437], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470, 1258]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.97426002e-37, 9.91548784e-03, 5.97192487e-03, 2.84642144e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [1.0], [0], [0.021501118317246437], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470, 1258]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.97426002e-37, 9.91548784e-03, 8.75876984e-04, 2.00148090e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [1.0], [0], [0.021501118317246437], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 531,  541, 1470, 1258]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([3.97426002e-37, 9.91548784e-03, 8.75876984e-04, 3.63733037e-03]), tensor([0, 2, 3, 4])), '/input-12': ([50], [1.0], [0], [0.021501118317246437], [1])}
Shallow branching resets to n domains:  13
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05319850891828537
10 lb beta sum: 0.2694714367389679, worst -0.1008995771408081
Time: prepare 0.0006    bound 0.1349    transfer 0.0002    finalize 0.0002    func 0.1359    
Accumulated time: func 0.8173    prepare 0.0699    bound 0.7238    transfer 0.0101    finalize 0.0115    
After pruning, left:  9

Back to Regular BaB

BaB round 1
batch: 9
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] [/input-8, 1465] [/input-8, 1465] [/input-8, 1465] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] 
split level 1: [/input-8, 545] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1258] [/input-8, 1258] [/input-8, 1465] [/input-8, 1465] [/input-8, 1465] 
split level 2: [/input-8, 541] [/input-8, 559] [/input-8, 530] [/input-8, 530] [/input-8, 559] [/input-8, 559] [/input-8, 530] [/input-8, 530] [/input-8, 530] 
split level 3: [/input-8, 530] [/input-8, 530] [/input-8, 1258] [/input-8, 1258] [/input-8, 530] [/input-8, 530] [/input-8, 1266] [/input-8, 1266] [/input-8, 1266] 
split level 4: [/input-8, 534] [/input-8, 1258] [/input-8, 534] [/input-8, 306] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] [/input-8, 534] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23916853964328766, worst -0.028310589492321014
10 lb beta sum: 0.24259403347969055, worst -0.028202250599861145
Time: prepare 0.0113    bound 0.1436    transfer 0.0013    finalize 0.0017    func 0.1602    
Accumulated time: func 0.9775    prepare 0.0814    bound 0.8674    transfer 0.0114    finalize 0.0132    
all_split False
======================Cut inference begins======================
max lb tensor(0.25136769) min lb tensor(-0.02816860)
Number of Verified Splits: 181 of 288
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0003635883331298828 
BICCOS Cumulative time: 0.06808328628540039
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02817 (5), -0.02751 (5), -0.02731 (5), -0.02665 (5), -0.02567 (5), -0.02535 (5), -0.02500 (5), -0.02468 (5), -0.02105 (5), -0.02080 (5), -0.02040 (5), -0.02016 (5), -0.01775 (5), -0.01725 (5), -0.01690 (5), -0.01659 (5), -0.01658 (5), -0.01636 (5), -0.01594 (5), -0.01589 (5), 
Length of domains: 107
Time: pickout 0.0007    decision 0.0189    set_bounds 0.0189    solve 0.1603    add 0.0024    
Accumulated time: pickout 0.0052    decision 0.6225    set_bounds 0.2400    solve 0.7884    add 0.4092    
Current (lb-rhs): -0.028168603777885437
357 domains visited
Cumulative time: 2.368356227874756

BaB round 2
batch: 107
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1465] [/input-8, 941] [/input-8, 941] [/input-8, 1470] [/input-8, 941] [/input-8, 1465] [/input-8, 941] [/input-8, 941] [/input-8, 1470] [/input-8, 941] 
cut re-enabled after branching node selection
0 lb beta sum: 0.02698833867907524, worst -0.027994439005851746
10 lb beta sum: 0.02698833867907524, worst -0.027951717376708984
Time: prepare 0.0095    bound 0.1342    transfer 0.0006    finalize 0.0012    func 0.1469    
Accumulated time: func 1.1243    prepare 0.0911    bound 1.0016    transfer 0.0120    finalize 0.0143    
all_split False
======================Cut inference begins======================
max lb tensor(0.00412148) min lb tensor(-0.02794584)
Number of Verified Splits: 67 of 214
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0003173351287841797 
BICCOS Cumulative time: 0.06840062141418457
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02795 (6), -0.02729 (6), -0.02709 (6), -0.02643 (6), -0.02551 (6), -0.02519 (6), -0.02482 (6), -0.02451 (6), -0.02372 (6), -0.02308 (6), -0.02287 (6), -0.02222 (6), -0.02041 (6), -0.02035 (6), -0.02023 (6), -0.02002 (6), -0.01974 (6), -0.01965 (6), -0.01956 (6), -0.01934 (6), 
Length of domains: 147
Time: pickout 0.0019    decision 0.0153    set_bounds 0.0091    solve 0.1469    add 0.0012    
Accumulated time: pickout 0.0071    decision 0.6378    set_bounds 0.2491    solve 0.9353    add 0.4104    
Current (lb-rhs): -0.02794583886861801
504 domains visited
Cumulative time: 2.5435385704040527

BaB round 3
batch: 147
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 1452] [/input-8, 1258] [/input-8, 1452] [/input-8, 1470] [/input-8, 534] [/input-8, 1452] [/input-8, 1258] [/input-8, 1452] [/input-8, 1470] 
cut re-enabled after branching node selection
0 lb beta sum: 0.01184321753680706, worst -0.0278700590133667
10 lb beta sum: 0.011850324459373951, worst -0.027862921357154846
Time: prepare 0.0120    bound 0.1356    transfer 0.0019    finalize 0.0015    func 0.1529    
Accumulated time: func 1.2772    prepare 0.1032    bound 1.1372    transfer 0.0139    finalize 0.0158    
all_split False
======================Cut inference begins======================
max lb tensor(0.00794200) min lb tensor(-0.02785768)
Number of Verified Splits: 89 of 294
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.000324249267578125 
BICCOS Cumulative time: 0.0687248706817627
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02786 (7), -0.02720 (7), -0.02701 (7), -0.02634 (7), -0.02407 (7), -0.02374 (7), -0.02352 (7), -0.02347 (7), -0.02338 (7), -0.02304 (7), -0.02285 (7), -0.02279 (7), -0.02267 (7), -0.02261 (7), -0.02255 (7), -0.02223 (7), -0.02199 (7), -0.02193 (7), -0.02188 (7), -0.02157 (7), 
Length of domains: 205
Time: pickout 0.0023    decision 0.0187    set_bounds 0.0125    solve 0.1530    add 0.0019    
Accumulated time: pickout 0.0094    decision 0.6565    set_bounds 0.2616    solve 1.0883    add 0.4123    
Current (lb-rhs): -0.027857676148414612
709 domains visited
Cumulative time: 2.732849597930908

BaB round 4
batch: 205
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 941] [/input-8, 1465] [/input-8, 941] [/input-8, 534] [/input-8, 941] [/input-8, 1452] [/input-8, 1465] [/input-8, 941] [/input-8, 534] [/input-8, 941] 
cut re-enabled after branching node selection
0 lb beta sum: 0.013415359891951084, worst -0.027306944131851196
10 lb beta sum: 0.013449824415147305, worst -0.027300968766212463
Time: prepare 0.0169    bound 0.1386    transfer 0.0012    finalize 0.0019    func 0.1612    
Accumulated time: func 1.4385    prepare 0.1203    bound 1.2758    transfer 0.0150    finalize 0.0177    
all_split False
======================Cut inference begins======================
max lb tensor(0.00335073) min lb tensor(-0.02729668)
Number of Verified Splits: 102 of 410
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0003542900085449219 
BICCOS Cumulative time: 0.06907916069030762
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02730 (8), -0.02664 (8), -0.02645 (8), -0.02578 (8), -0.02386 (8), -0.02323 (8), -0.02320 (8), -0.02300 (8), -0.02290 (8), -0.02290 (8), -0.02282 (8), -0.02254 (8), -0.02234 (8), -0.02222 (8), -0.02221 (8), -0.02215 (8), -0.02204 (8), -0.02197 (8), -0.02164 (8), -0.02136 (8), 
Length of domains: 308
Time: pickout 0.0025    decision 0.0212    set_bounds 0.0173    solve 0.1613    add 0.0036    
Accumulated time: pickout 0.0119    decision 0.6777    set_bounds 0.2789    solve 1.2496    add 0.4160    
Current (lb-rhs): -0.027296677231788635
1017 domains visited
Cumulative time: 2.9400486946105957

BaB round 5
batch: 308
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 559] [/input-8, 1266] [/input-8, 1465] [/input-8, 559] [/input-8, 1266] [/input-8, 559] [/input-8, 306] [/input-8, 559] [/input-8, 1266] [/input-8, 1465] 
cut re-enabled after branching node selection
0 lb beta sum: 0.011499043554067612, worst -0.026660114526748657
10 lb beta sum: 0.011525415815412998, worst -0.026656746864318848
Time: prepare 0.0256    bound 0.1409    transfer 0.0030    finalize 0.0030    func 0.1766    
Accumulated time: func 1.6151    prepare 0.1461    bound 1.4167    transfer 0.0180    finalize 0.0208    
all_split False
======================Cut inference begins======================
max lb tensor(0.00266095) min lb tensor(-0.02665463)
Number of Verified Splits: 114 of 616
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.000354766845703125 
BICCOS Cumulative time: 0.06943392753601074
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02665 (9), -0.02598 (9), -0.02581 (9), -0.02512 (9), -0.02501 (9), -0.02436 (9), -0.02419 (9), -0.02352 (9), -0.02313 (9), -0.02305 (9), -0.02271 (9), -0.02248 (9), -0.02236 (9), -0.02227 (9), -0.02222 (9), -0.02212 (9), -0.02202 (9), -0.02162 (9), -0.02154 (9), -0.02152 (9), 
Length of domains: 502
Time: pickout 0.0051    decision 0.0282    set_bounds 0.0254    solve 0.1768    add 0.0047    
Accumulated time: pickout 0.0169    decision 0.7059    set_bounds 0.3043    solve 1.4264    add 0.4207    
Current (lb-rhs): -0.02665463089942932
1519 domains visited
Cumulative time: 3.1818113327026367

BaB round 6
batch: 502
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1258] [/input-8, 559] [/input-8, 1258] [/input-8, 1465] [/input-8, 540] [/input-8, 1258] [/input-8, 1261] [/input-8, 559] [/input-8, 540] [/input-8, 1258] 
cut re-enabled after branching node selection
0 lb beta sum: 0.010169973596930504, worst -0.025610528886318207
10 lb beta sum: 0.010175958275794983, worst -0.025598779320716858
Time: prepare 0.0419    bound 0.1400    transfer 0.0030    finalize 0.0055    func 0.1970    
Accumulated time: func 1.8121    prepare 0.1882    bound 1.5568    transfer 0.0210    finalize 0.0263    
all_split False
======================Cut inference begins======================
max lb tensor(0.00415945) min lb tensor(-0.02559485)
Number of Verified Splits: 183 of 1004
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.000377655029296875 
BICCOS Cumulative time: 0.06981158256530762
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02559 (10), -0.02492 (10), -0.02475 (10), -0.02458 (10), -0.02406 (10), -0.02394 (10), -0.02393 (10), -0.02373 (10), -0.02327 (10), -0.02309 (10), -0.02308 (10), -0.02291 (10), -0.02243 (10), -0.02237 (10), -0.02228 (10), -0.02227 (10), -0.02208 (10), -0.02202 (10), -0.02167 (10), -0.02145 (10), 
Length of domains: 821
Time: pickout 0.0081    decision 0.0381    set_bounds 0.0410    solve 0.1972    add 0.0035    
Accumulated time: pickout 0.0250    decision 0.7441    set_bounds 0.3452    solve 1.6237    add 0.4242    
Current (lb-rhs): -0.025594845414161682
2340 domains visited
Cumulative time: 3.471745252609253

BaB round 7
batch: 821
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] [/input-8, 544] [/input-8, 1452] [/input-8, 540] [/input-8, 1452] [/input-8, 1452] [/input-8, 1452] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00870085135102272, worst -0.02509896457195282
10 lb beta sum: 0.008707297034561634, worst -0.025094270706176758
Time: prepare 0.0721    bound 0.1578    transfer 0.0042    finalize 0.0075    func 0.2528    
Accumulated time: func 2.0649    prepare 0.2605    bound 1.7145    transfer 0.0252    finalize 0.0338    
all_split False
======================Cut inference begins======================
max lb tensor(0.00666086) min lb tensor(-0.02509150)
Number of Verified Splits: 310 of 1642
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0004696846008300781 
BICCOS Cumulative time: 0.0702812671661377
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02509 (11), -0.02442 (11), -0.02424 (11), -0.02408 (11), -0.02356 (11), -0.02343 (11), -0.02341 (11), -0.02324 (11), -0.02276 (11), -0.02258 (11), -0.02258 (11), -0.02239 (11), -0.02191 (11), -0.02175 (11), -0.02154 (11), -0.02117 (11), -0.02092 (11), -0.02078 (11), -0.02070 (11), -0.02053 (11), 
Length of domains: 1332
Time: pickout 0.0121    decision 0.0558    set_bounds 0.0658    solve 0.2531    add 0.0163    
Accumulated time: pickout 0.0371    decision 0.7998    set_bounds 0.4111    solve 1.8768    add 0.4405    
Current (lb-rhs): -0.025091499090194702
3672 domains visited
Cumulative time: 3.8814857006073

BaB round 8
batch: 1332
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 306] [/input-8, 1266] [/input-8, 306] [/input-8, 1266] [/input-8, 306] [/input-8, 1266] [/input-8, 306] [/input-8, 1266] [/input-8, 306] [/input, 1208] 
cut re-enabled after branching node selection
0 lb beta sum: 0.004590513650327921, worst -0.02459205687046051
10 lb beta sum: 0.004590513650327921, worst -0.02458217740058899
Time: prepare 0.1163    bound 0.2134    transfer 0.0115    finalize 0.0156    func 0.3746    
Accumulated time: func 2.4394    prepare 0.3770    bound 1.9279    transfer 0.0367    finalize 0.0494    
all_split False
======================Cut inference begins======================
max lb tensor(0.00891553) min lb tensor(-0.02458013)
Number of Verified Splits: 629 of 2664
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0004591941833496094 
BICCOS Cumulative time: 0.0707404613494873
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02458 (12), -0.02391 (12), -0.02373 (12), -0.02355 (12), -0.02304 (12), -0.02290 (12), -0.02289 (12), -0.02270 (12), -0.02240 (12), -0.02224 (12), -0.02206 (12), -0.02204 (12), -0.02186 (12), -0.02172 (12), -0.02155 (12), -0.02139 (12), -0.02120 (12), -0.02101 (12), -0.02097 (12), -0.02086 (12), 
Length of domains: 2035
Time: pickout 0.0199    decision 0.2397    set_bounds 0.1064    solve 0.3750    add 0.0176    
Accumulated time: pickout 0.0569    decision 1.0395    set_bounds 0.5174    solve 2.2518    add 0.4581    
Current (lb-rhs): -0.024580128490924835
5707 domains visited
Cumulative time: 4.646316766738892

BaB round 9
batch: 2035
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 544] [/input-8, 1261] [/input-8, 544] [/input-8, 1261] [/input-8, 544] [/input-8, 1261] [/input-8, 544] [/input-8, 544] [/input-8, 1261] [/input-8, 544] 
cut re-enabled after branching node selection
0 lb beta sum: 0.003529928158968687, worst -0.02432575821876526
10 lb beta sum: 0.003529928158968687, worst -0.02432301640510559
Time: prepare 0.1798    bound 0.2867    transfer 0.0153    finalize 0.1986    func 0.7069    
Accumulated time: func 3.1464    prepare 0.5570    bound 2.2146    transfer 0.0519    finalize 0.2479    
all_split False
======================Cut inference begins======================
max lb tensor(0.00590581) min lb tensor(-0.02432126)
Number of Verified Splits: 899 of 4070
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0005059242248535156 
BICCOS Cumulative time: 0.07124638557434082
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02432 (13), -0.02365 (13), -0.02347 (13), -0.02327 (13), -0.02279 (13), -0.02263 (13), -0.02263 (13), -0.02242 (13), -0.02209 (13), -0.02198 (13), -0.02179 (13), -0.02177 (13), -0.02157 (13), -0.02143 (13), -0.02124 (13), -0.02113 (13), -0.02094 (13), -0.02071 (13), -0.02062 (13), -0.02055 (13), 
Length of domains: 3171
Time: pickout 0.0342    decision 0.1222    set_bounds 0.1696    solve 0.7083    add 0.0188    
Accumulated time: pickout 0.0912    decision 1.1617    set_bounds 0.6870    solve 2.9601    add 0.4769    
Current (lb-rhs): -0.024321258068084717
8878 domains visited
Cumulative time: 5.709666013717651

BaB round 10
batch: 3171
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 310] [/input-8, 540] [/input-8, 310] [/input-8, 540] [/input-8, 310] [/input-8, 540] [/input-8, 310] [/input-8, 310] [/input-8, 540] [/input-8, 310] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0028395832050591707, worst -0.023688822984695435
10 lb beta sum: 0.0028395832050591707, worst -0.023688212037086487
Time: prepare 0.2816    bound 0.4030    transfer 0.0276    finalize 0.1999    func 0.9530    
Accumulated time: func 4.0993    prepare 0.8389    bound 2.6176    transfer 0.0795    finalize 0.4479    
all_split False
======================Cut inference begins======================
max lb tensor(0.00548241) min lb tensor(-0.02368606)
Number of Verified Splits: 1222 of 6342
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0004878044128417969 
BICCOS Cumulative time: 0.07173418998718262
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02369 (14), -0.02301 (14), -0.02284 (14), -0.02284 (14), -0.02261 (14), -0.02218 (14), -0.02215 (14), -0.02200 (14), -0.02199 (14), -0.02197 (14), -0.02178 (14), -0.02176 (14), -0.02144 (14), -0.02133 (14), -0.02131 (14), -0.02118 (14), -0.02116 (14), -0.02114 (14), -0.02112 (14), -0.02095 (14), 
Length of domains: 5120
Time: pickout 0.0404    decision 0.1818    set_bounds 0.2636    solve 0.9545    add 0.0418    
Accumulated time: pickout 0.1316    decision 1.3435    set_bounds 0.9506    solve 3.9146    add 0.5187    
Current (lb-rhs): -0.023686058819293976
13998 domains visited
Cumulative time: 7.205026865005493

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1266] [/input, 1208] [/input-8, 1266] [/input, 1208] [/input-8, 540] [/input-8, 1265] [/input-8, 540] [/input-8, 1266] [/input, 1208] [/input-8, 1266] 
cut re-enabled after branching node selection
0 lb beta sum: 0.002705543301999569, worst -0.02270786464214325
10 lb beta sum: 0.002705543301999569, worst -0.02269400656223297
Time: prepare 0.3757    bound 0.4979    transfer 0.0419    finalize 0.0491    func 1.0186    
Accumulated time: func 5.1179    prepare 1.2148    bound 3.1156    transfer 0.1215    finalize 0.4970    
all_split False
======================Cut inference begins======================
max lb tensor(0.00663902) min lb tensor(-0.02268893)
Number of Verified Splits: 1712 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0005865097045898438 
BICCOS Cumulative time: 0.07232069969177246
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02269 (15), -0.02266 (15), -0.02202 (15), -0.02198 (15), -0.02184 (15), -0.02184 (15), -0.02181 (15), -0.02181 (15), -0.02181 (15), -0.02123 (15), -0.02117 (15), -0.02117 (15), -0.02116 (15), -0.02113 (15), -0.02112 (15), -0.02100 (15), -0.02098 (15), -0.02098 (15), -0.02098 (15), -0.02097 (15), 
Length of domains: 7504
Time: pickout 0.0549    decision 0.2275    set_bounds 0.5200    solve 1.0215    add 0.0370    
Accumulated time: pickout 0.1865    decision 1.5711    set_bounds 1.4706    solve 4.9361    add 0.5557    
Current (lb-rhs): -0.02268892526626587
20478 domains visited
current_vram/total_varm: 10.7GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.088197231292725

BaB round 12
batch: 7504
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 540] [/input-8, 1266] [/input-8, 1265] [/input, 648] [/input-8, 1266] [/input-8, 540] [/input-8, 540] [/input-8, 1266] [/input-8, 540] [/input-8, 1266] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0015453406376764178, worst -0.022448480129241943
10 lb beta sum: 0.0015453406376764178, worst -0.02244620770215988
Time: prepare 0.7303    bound 0.8524    transfer 0.0832    finalize 0.2918    func 2.0559    
Accumulated time: func 7.1738    prepare 1.9454    bound 3.9680    transfer 0.2047    finalize 0.7888    
all_split False
======================Cut inference begins======================
max lb tensor(0.00617561) min lb tensor(-0.02244460)
Number of Verified Splits: 3092 of 15008
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0006074905395507812 
BICCOS Cumulative time: 0.07292819023132324
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02244 (16), -0.02242 (16), -0.02177 (16), -0.02174 (16), -0.02160 (16), -0.02158 (16), -0.02157 (16), -0.02156 (16), -0.02155 (16), -0.02098 (16), -0.02091 (16), -0.02091 (16), -0.02090 (16), -0.02088 (16), -0.02088 (16), -0.02076 (16), -0.02074 (16), -0.02072 (16), -0.02071 (16), -0.02070 (16), 
Length of domains: 11916
Time: pickout 0.1281    decision 0.4178    set_bounds 0.6887    solve 2.0586    add 0.0426    
Accumulated time: pickout 0.3146    decision 1.9889    set_bounds 2.1593    solve 6.9947    add 0.5982    
Current (lb-rhs): -0.022444598376750946
32394 domains visited
Cumulative time: 12.457435131072998

BaB round 13
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 648] [/input-8, 540] [/input-8, 540] [/input, 648] [/input, 1208] [/input, 648] [/input, 648] [/input, 648] [/input, 648] [/input, 648] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0009131026454269886, worst -0.021980956196784973
10 lb beta sum: 0.0009131026454269886, worst -0.021968409419059753
Time: prepare 0.8166    bound 0.9235    transfer 0.0885    finalize 0.3709    func 2.3065    
Accumulated time: func 9.4802    prepare 2.7623    bound 4.8915    transfer 0.2931    finalize 1.1597    
all_split False
======================Cut inference begins======================
max lb tensor(0.00510561) min lb tensor(-0.02196369)
Number of Verified Splits: 3005 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0006351470947265625 
BICCOS Cumulative time: 0.0735633373260498
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02242 (16), -0.02196 (17), -0.02174 (16), -0.02158 (16), -0.02157 (16), -0.02156 (16), -0.02128 (17), -0.02128 (17), -0.02111 (17), -0.02106 (17), -0.02098 (16), -0.02091 (16), -0.02088 (16), -0.02088 (16), -0.02074 (16), -0.02072 (16), -0.02070 (16), -0.02068 (16), -0.02049 (17), -0.02043 (17), 
Length of domains: 17103
Time: pickout 0.1233    decision 0.4593    set_bounds 0.8775    solve 2.3098    add 0.0682    
Accumulated time: pickout 0.4379    decision 2.4482    set_bounds 3.0368    solve 9.3046    add 0.6664    
Current (lb-rhs): -0.022418081760406494
45773 domains visited
current_vram/total_varm: 23.0GB/99.9GB, batch_size increase to 16384
Cumulative time: 16.331957578659058

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 309] [/input-8, 1266] [/input-8, 309] [/input-8, 544] [/input-8, 309] [/input-8, 1265] [/input-8, 309] [/input-8, 544] [/input-8, 1175] [/input-8, 544] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0005217961734160781, worst -0.02194550633430481
10 lb beta sum: 0.0005217961734160781, worst -0.02193167805671692
Time: prepare 1.6461    bound 1.7742    transfer 0.1765    finalize 0.2140    func 4.0249    
Accumulated time: func 13.5051    prepare 4.4088    bound 6.6657    transfer 0.4696    finalize 1.3737    
all_split False
======================Cut inference begins======================
max lb tensor(0.00408149) min lb tensor(-0.02192453)
Number of Verified Splits: 5945 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0007641315460205078 
BICCOS Cumulative time: 0.07432746887207031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02192 (17), -0.02169 (18), -0.02125 (17), -0.02123 (17), -0.02119 (17), -0.02108 (17), -0.02107 (17), -0.02101 (18), -0.02081 (18), -0.02077 (18), -0.02071 (17), -0.02055 (17), -0.02051 (17), -0.02042 (17), -0.02041 (17), -0.02039 (18), -0.02038 (17), -0.02038 (17), -0.02034 (17), -0.02024 (17), 
Length of domains: 27542
Time: pickout 0.2456    decision 1.6663    set_bounds 1.7447    solve 4.3653    add 0.1050    
Accumulated time: pickout 0.6835    decision 4.1144    set_bounds 4.7815    solve 13.6698    add 0.7714    
Current (lb-rhs): -0.02192453294992447
72596 domains visited
current_vram/total_varm: 28.4GB/99.9GB, batch_size increase to 32768
Cumulative time: 24.527482509613037

BaB round 15
batch: 27542
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1261] [/input-8, 1261] [/input-8, 309] [/input, 648] [/input, 648] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1266] [/input-8, 309] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00032619491685181856, worst -0.021663494408130646
10 lb beta sum: 0.00032619491685181856, worst -0.02166000008583069
Time: prepare 2.7633    bound 2.9553    transfer 0.3069    finalize 0.7749    func 7.1612    
Accumulated time: func 20.6664    prepare 7.1724    bound 9.6211    transfer 0.7765    finalize 2.1485    
all_split False
======================Cut inference begins======================
max lb tensor(0.00408411) min lb tensor(-0.02165709)
Number of Verified Splits: 10361 of 55084
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0008826255798339844 
BICCOS Cumulative time: 0.0752100944519043
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02166 (18), -0.02146 (19), -0.02098 (18), -0.02096 (18), -0.02092 (18), -0.02082 (18), -0.02077 (19), -0.02052 (19), -0.02035 (18), -0.02030 (19), -0.02028 (18), -0.02025 (18), -0.02022 (18), -0.02015 (19), -0.02015 (18), -0.02013 (18), -0.02010 (18), -0.02007 (18), -0.01998 (18), -0.01996 (19), 
Length of domains: 44723
Time: pickout 0.5262    decision 2.8074    set_bounds 2.8993    solve 7.1712    add 0.1563    
Accumulated time: pickout 1.2098    decision 6.9219    set_bounds 7.6808    solve 20.8410    add 0.9277    
Current (lb-rhs): -0.021657094359397888
117319 domains visited
Cumulative time: 38.20853662490845

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1217] [/input-8, 1217] [/input-8, 1261] [/input-8, 1269] [/input-8, 309] [/input-8, 1217] [/input-8, 1217] [/input-8, 540] [/input-8, 1217] [/input-8, 1261] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00020290593965910375, worst -0.02142591029405594
10 lb beta sum: 0.00020290593965910375, worst -0.021424323320388794
Time: prepare 3.2956    bound 8.6851    transfer 0.3525    finalize 1.0787    func 13.8381    
Accumulated time: func 34.5045    prepare 10.4684    bound 18.3061    transfer 1.1290    finalize 3.2272    
all_split False
======================Cut inference begins======================
max lb tensor(0.00436541) min lb tensor(-0.02142142)
Number of Verified Splits: 11926 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0009829998016357422 
BICCOS Cumulative time: 0.07619309425354004
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02142 (19), -0.02074 (19), -0.02068 (19), -0.02058 (19), -0.02054 (20), -0.02050 (20), -0.02045 (19), -0.02035 (18), -0.02030 (19), -0.02010 (18), -0.02003 (19), -0.02000 (19), -0.01999 (20), -0.01992 (19), -0.01989 (19), -0.01985 (20), -0.01985 (19), -0.01979 (20), -0.01974 (19), -0.01972 (19), 
Length of domains: 65565
Time: pickout 0.5330    decision 3.7478    set_bounds 3.5532    solve 13.8500    add 4.7438    
Accumulated time: pickout 1.7428    decision 10.6697    set_bounds 11.2340    solve 34.6910    add 5.6715    
Current (lb-rhs): -0.021421417593955994
170929 domains visited
Cumulative time: 64.79638862609863

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 540] [/input-8, 540] [/input-8, 1217] [/input-8, 1513] [/input-8, 1217] [/input-8, 1261] [/input-8, 1261] [/input, 648] [/input-8, 1261] [/input-8, 1217] 
cut re-enabled after branching node selection
0 lb beta sum: 7.607620500493795e-05, worst -0.02050742506980896
10 lb beta sum: 7.607620500493795e-05, worst -0.020501762628555298
Time: prepare 3.3179    bound 8.6830    transfer 0.3588    finalize 1.1956    func 13.9866    
Accumulated time: func 48.4911    prepare 13.7867    bound 26.9891    transfer 1.4878    finalize 4.4228    
all_split False
======================Cut inference begins======================
max lb tensor(0.00893131) min lb tensor(-0.02049892)
Number of Verified Splits: 11331 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0010123252868652344 
BICCOS Cumulative time: 0.07720541954040527
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02050 (20), -0.02050 (20), -0.02047 (20), -0.02045 (19), -0.02016 (20), -0.02012 (19), -0.02007 (20), -0.02005 (20), -0.02003 (21), -0.01999 (20), -0.01986 (19), -0.01982 (20), -0.01979 (20), -0.01976 (20), -0.01972 (19), -0.01959 (20), -0.01956 (19), -0.01946 (20), -0.01945 (21), -0.01944 (19), 
Length of domains: 87002
Time: pickout 0.5322    decision 3.4445    set_bounds 3.6797    solve 13.9982    add 0.1743    
Accumulated time: pickout 2.2749    decision 14.1142    set_bounds 14.9137    solve 48.6892    add 5.8458    
Current (lb-rhs): -0.020502209663391113
225134 domains visited
Cumulative time: 86.81709170341492

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1217] [/input, 974] [/input-8, 1250] [/input, 974] [/input-8, 1250] [/input-8, 1217] [/input-8, 1250] [/input-8, 1250] [/input-8, 309] [/input-8, 309] 
cut re-enabled after branching node selection
0 lb beta sum: 6.584913353435695e-05, worst -0.020217448472976685
10 lb beta sum: 6.584913353435695e-05, worst -0.020218372344970703
Time: prepare 3.2944    bound 8.6874    transfer 0.3606    finalize 0.5287    func 14.1215    
Accumulated time: func 62.6126    prepare 17.0816    bound 35.6765    transfer 1.8484    finalize 4.9516    
all_split False
======================Cut inference begins======================
max lb tensor(0.00964189) min lb tensor(-0.02019840)
Number of Verified Splits: 12542 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0011110305786132812 
BICCOS Cumulative time: 0.07831645011901855
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02050 (20), -0.02047 (20), -0.02020 (20), -0.02016 (20), -0.02012 (19), -0.02007 (20), -0.02005 (20), -0.02003 (21), -0.02000 (21), -0.01986 (19), -0.01982 (20), -0.01976 (20), -0.01959 (20), -0.01949 (20), -0.01945 (21), -0.01944 (19), -0.01942 (20), -0.01939 (19), -0.01938 (21), -0.01937 (20), 
Length of domains: 107228
Time: pickout 0.5406    decision 3.6116    set_bounds 3.8834    solve 14.1345    add 0.1713    
Accumulated time: pickout 2.8156    decision 17.7258    set_bounds 18.7971    solve 62.8237    add 6.0171    
Current (lb-rhs): -0.020498916506767273
278128 domains visited
Cumulative time: 109.30768251419067

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1513] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1513] [/input-8, 1175] [/input-8, 1250] [/input-8, 1175] [/input-8, 1250] [/input-8, 1261] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5701891243224964e-05, worst -0.020000286400318146
10 lb beta sum: 1.5701891243224964e-05, worst -0.01999765634536743
Time: prepare 3.4293    bound 8.6823    transfer 0.3704    finalize 1.4940    func 14.4045    
Accumulated time: func 77.0171    prepare 20.5114    bound 44.3588    transfer 2.2189    finalize 6.4455    
all_split False
======================Cut inference begins======================
max lb tensor(0.00928581) min lb tensor(-0.01999497)
Number of Verified Splits: 11969 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0010516643524169922 
BICCOS Cumulative time: 0.07936811447143555
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02047 (20), -0.02020 (20), -0.02016 (20), -0.02005 (20), -0.02003 (21), -0.02000 (21), -0.01999 (21), -0.01976 (20), -0.01949 (20), -0.01943 (21), -0.01942 (20), -0.01938 (21), -0.01937 (20), -0.01936 (20), -0.01935 (21), -0.01933 (20), -0.01931 (21), -0.01929 (21), -0.01924 (20), -0.01920 (20), 
Length of domains: 128027
Time: pickout 0.5373    decision 3.3711    set_bounds 3.9247    solve 14.4178    add 0.1746    
Accumulated time: pickout 3.3528    decision 21.0969    set_bounds 22.7218    solve 77.2414    add 6.1916    
Current (lb-rhs): -0.02046559751033783
331695 domains visited
Cumulative time: 131.96287393569946

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 540] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 1261] [/input-8, 1217] [/input-8, 1261] 
cut re-enabled after branching node selection
0 lb beta sum: 2.957884134957567e-05, worst -0.019970901310443878
10 lb beta sum: 2.957884134957567e-05, worst -0.019962430000305176
Time: prepare 3.3753    bound 8.6847    transfer 0.4007    finalize 1.6406    func 14.5279    
Accumulated time: func 91.5449    prepare 23.8872    bound 53.0435    transfer 2.6196    finalize 8.0861    
all_split False
======================Cut inference begins======================
max lb tensor(0.00994617) min lb tensor(-0.01995802)
Number of Verified Splits: 12986 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0009589195251464844 
BICCOS Cumulative time: 0.08032703399658203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02020 (20), -0.02000 (21), -0.01999 (21), -0.01996 (21), -0.01949 (20), -0.01943 (21), -0.01938 (21), -0.01937 (22), -0.01936 (21), -0.01936 (20), -0.01933 (20), -0.01931 (21), -0.01929 (21), -0.01925 (21), -0.01923 (21), -0.01920 (20), -0.01920 (21), -0.01917 (20), -0.01916 (22), -0.01915 (21), 
Length of domains: 147809
Time: pickout 0.5585    decision 4.3499    set_bounds 3.2247    solve 14.5417    add 0.1833    
Accumulated time: pickout 3.9113    decision 25.4468    set_bounds 25.9465    solve 91.7832    add 6.3749    
Current (lb-rhs): -0.020198404788970947
384245 domains visited
Cumulative time: 155.00096726417542

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1175] [/input-8, 1175] [/input-8, 540] [/input-8, 540] [/input-8, 1175] [/input-8, 1175] [/input-8, 540] [/input-8, 540] [/input-8, 309] [/input-8, 309] 
cut re-enabled after branching node selection
0 lb beta sum: 2.3552836864837445e-05, worst -0.019293658435344696
10 lb beta sum: 2.3552836864837445e-05, worst -0.01930643618106842
Time: prepare 3.4033    bound 8.6883    transfer 0.4609    finalize 0.5559    func 14.7640    
Accumulated time: func 106.3089    prepare 27.2910    bound 61.7318    transfer 3.0805    finalize 8.6420    
all_split False
======================Cut inference begins======================
max lb tensor(0.01005265) min lb tensor(-0.01928472)
Number of Verified Splits: 14028 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0012023448944091797 
BICCOS Cumulative time: 0.08152937889099121
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01999 (21), -0.01996 (21), -0.01943 (21), -0.01937 (22), -0.01936 (21), -0.01936 (20), -0.01931 (21), -0.01928 (22), -0.01927 (21), -0.01925 (21), -0.01923 (21), -0.01923 (21), -0.01920 (20), -0.01920 (21), -0.01917 (20), -0.01916 (22), -0.01915 (21), -0.01913 (22), -0.01913 (21), -0.01911 (21), 
Length of domains: 166549
Time: pickout 0.5675    decision 3.3643    set_bounds 4.3026    solve 14.7778    add 0.1859    
Accumulated time: pickout 4.4788    decision 28.8111    set_bounds 30.2491    solve 106.5610    add 6.5608    
Current (lb-rhs): -0.01999497413635254
435753 domains visited
Cumulative time: 178.47124981880188

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] 
cut re-enabled after branching node selection
0 lb beta sum: 1.21662787933019e-06, worst -0.01881834864616394
10 lb beta sum: 1.21662787933019e-06, worst -0.018789246678352356
Time: prepare 3.4223    bound 8.6888    transfer 0.4787    finalize 0.5611    func 13.5762    
Accumulated time: func 119.8851    prepare 30.7139    bound 70.4206    transfer 3.5592    finalize 9.2031    
all_split False
======================Cut inference begins======================
max lb tensor(0.00997877) min lb tensor(-0.01872627)
Number of Verified Splits: 13835 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 20.
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.0012218952178955078 
BICCOS Cumulative time: 0.08275127410888672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01999 (21), -0.01996 (21), -0.01937 (22), -0.01936 (21), -0.01936 (20), -0.01931 (21), -0.01928 (22), -0.01927 (21), -0.01925 (21), -0.01923 (21), -0.01923 (21), -0.01920 (21), -0.01917 (20), -0.01916 (22), -0.01913 (22), -0.01913 (21), -0.01911 (21), -0.01910 (21), -0.01888 (21), -0.01887 (20), 
Length of domains: 185482
Time: pickout 0.5812    decision 3.3724    set_bounds 4.4577    solve 13.5922    add 0.1857    
Accumulated time: pickout 5.0600    decision 32.1835    set_bounds 34.7068    solve 120.1532    add 6.7465    
Current (lb-rhs): -0.01999497413635254
487454 domains visited
Time out!!!!!!!!
Result: unknown in 203.7400 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.25397301, -11.57504463,  -9.66235542,  -8.69976139,  -9.31725407,
          -8.85229206,  -9.17159748,  -9.49390125,  -9.43022537, -10.41604328]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [395]; unstable size 395; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 134, 1, 395] with unstable size 133 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 395] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 395] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [133]; unstable size 133; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 133] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.46065462,  1.67517233,  0.13809061, -0.74742347, -0.27090001,
         -0.60667467, -0.21644306, -0.32564580,  0.60563827]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.25397301, -11.57504463,  -9.66235542,  -8.69976139,  -9.31725407,
          -8.85229206,  -9.17159748,  -9.49390125,  -9.43022537, -10.41604328]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.25397110, -11.57504368,  -9.66235447,  -8.69975948,  -9.31725216,
           -8.85229015,  -9.17159748,  -9.49389839,  -9.43022156, -10.41604137],
         [ -9.25397110, -11.57504368,  -9.66235447,  -8.69975948,  -9.31725216,
           -8.85229015,  -9.17159748,  -9.49389839,  -9.43022156, -10.41604137]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08237362, -0.47183800,  0.14565468, -0.31930733,  0.32230091,
           0.25862408]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0858 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.07646894, -7.65943909, -2.80038643, -4.19312286, -2.84907341,
         -4.31067753, -2.97104788, -5.49396992, -5.05455065, -7.49684191]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [412]; unstable size 412; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 412] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 412] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 412] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 191] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.59529161,  3.83634615, -0.28098133,  0.94465244,  1.05693650,
         -0.35508800,  2.21556520,  1.40175974,  3.70545506]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.07646894, -7.65943909, -2.80038643, -4.19312286, -2.84907341,
         -4.31067753, -2.97104788, -5.49396992, -5.05455065, -7.49684191]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.07646942, -7.65943909, -2.80038691, -4.19312382, -2.84907389,
          -4.31067753, -2.97104836, -5.49396992, -5.05455112, -7.49684286],
         [-4.07646942, -7.65943909, -2.80038691, -4.19312382, -2.84907389,
          -4.31067753, -2.97104836, -5.49396992, -5.05455112, -7.49684286]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04868698,  0.12197447]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.08412688,  0.31269848,  1.05873048,  ...,  0.59841275,
             0.75714290,  0.74126989],
           [ 0.13809532,  0.48730165,  0.80476195,  ...,  0.39206356,
             0.42380959,  0.51904768],
           [-0.16349196,  0.29682547,  0.86825401,  ...,  0.78888893,
             0.42380959,  0.83650798],
           ...,
           [-0.76666665, -0.98888886, -1.17936504,  ..., -0.90952379,
            -0.95714283, -0.81428570],
           [-0.86190474, -1.13174593, -1.14761901,  ..., -0.32222211,
            -0.67142856, -0.43333322],
           [-1.00476182, -1.13174593, -1.05238092,  ..., -0.33809513,
            -0.40158719, -0.62380952]],

          [[ 0.37037048,  0.80515307,  1.38486338,  ...,  1.35265732,
             1.69082153,  1.25603890],
           [ 0.62801939,  0.85346222,  0.99838978,  ...,  1.12721443,
             1.22383285,  0.86956531],
           [ 0.53140104,  0.61191636,  0.98228669,  ...,  1.48148179,
             1.04669893,  0.95008057],
           ...,
           [-0.16103047, -0.75684375, -0.98228657,  ..., -0.64412236,
            -0.74074072, -0.46698871],
           [-0.46698871, -0.91787434, -0.96618354,  ...,  0.25764906,
            -0.06441211,  0.20933989],
           [-0.77294683, -0.86956519, -0.88566822,  ...,  0.40257660,
             0.46698883,  0.30595824]],

          [[-0.37331331, -0.26836565,  0.21139447,  ...,  0.12143944,
             0.21139447,  0.07646193],
           [-0.14842562, -0.23838064, -0.13343313,  ...,  0.21139447,
             0.01649191, -0.28335828],
           [-0.19340314, -0.31334329,  0.06146942,  ...,  0.70614707,
             0.13643195, -0.16341813],
           ...,
           [-0.43328333, -0.62818587, -0.88305843,  ..., -0.68815589,
            -0.65817088, -0.61319339],
           [-0.52323836, -0.74812591, -0.77811092,  ..., -0.16341813,
            -0.32833579, -0.11844061],
           [-0.67316341, -0.77811092, -0.68815589,  ..., -0.13343313,
            -0.01349309, -0.05847061]]],


         [[[-0.08412688,  0.31269848,  1.05873048,  ...,  0.59841275,
             0.75714290,  0.74126989],
           [ 0.13809532,  0.48730165,  0.80476195,  ...,  0.39206356,
             0.42380959,  0.51904768],
           [-0.16349196,  0.29682547,  0.86825401,  ...,  0.78888893,
             0.42380959,  0.83650798],
           ...,
           [-0.76666665, -0.98888886, -1.17936504,  ..., -0.90952379,
            -0.95714283, -0.81428570],
           [-0.86190474, -1.13174593, -1.14761901,  ..., -0.32222211,
            -0.67142856, -0.43333322],
           [-1.00476182, -1.13174593, -1.05238092,  ..., -0.33809513,
            -0.40158719, -0.62380952]],

          [[ 0.37037048,  0.80515307,  1.38486338,  ...,  1.35265732,
             1.69082153,  1.25603890],
           [ 0.62801939,  0.85346222,  0.99838978,  ...,  1.12721443,
             1.22383285,  0.86956531],
           [ 0.53140104,  0.61191636,  0.98228669,  ...,  1.48148179,
             1.04669893,  0.95008057],
           ...,
           [-0.16103047, -0.75684375, -0.98228657,  ..., -0.64412236,
            -0.74074072, -0.46698871],
           [-0.46698871, -0.91787434, -0.96618354,  ...,  0.25764906,
            -0.06441211,  0.20933989],
           [-0.77294683, -0.86956519, -0.88566822,  ...,  0.40257660,
             0.46698883,  0.30595824]],

          [[-0.37331331, -0.26836565,  0.21139447,  ...,  0.12143944,
             0.21139447,  0.07646193],
           [-0.14842562, -0.23838064, -0.13343313,  ...,  0.21139447,
             0.01649191, -0.28335828],
           [-0.19340314, -0.31334329,  0.06146942,  ...,  0.70614707,
             0.13643195, -0.16341813],
           ...,
           [-0.43328333, -0.62818587, -0.88305843,  ..., -0.68815589,
            -0.65817088, -0.61319339],
           [-0.52323836, -0.74812591, -0.77811092,  ..., -0.16341813,
            -0.32833579, -0.11844061],
           [-0.67316341, -0.77811092, -0.68815589,  ..., -0.13343313,
            -0.01349309, -0.05847061]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0448 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
         -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [678]; unstable size 678; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 678] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 678] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 678] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 182] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.24960232,  6.38107681,  1.60664821, -0.06612652,  1.70738173,
          0.18758941,  2.45988202,  5.07852554,  5.93349123]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
         -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.70it/s]100%|██████████| 1/1 [00:00<00:00,  8.69it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.62309074, -9.13611889, -2.05009270, -3.92859149, -2.05051351,
          -4.03291273, -2.54317069, -4.72930622, -7.65253258, -8.69230938]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00042081]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1181 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.699172973632812
alpha/beta optimization time: 1.236238718032837
initial alpha-crown bounds: tensor([[ 3.27143669,  6.42873764,  1.61031699, -0.06354010,  1.71119142,
          0.19428921,  2.46747231,  5.10520935,  5.97405815]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.06354010105133057
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.59320402145386
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5931613445282
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5931339263916
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.59311294555664
Verifying property 3 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06354010]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
        -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06354010]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 678
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 180
Node /15 input 0: size torch.Size([100]) unstable 2
-----------------
# of unstable neurons: 860
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.000110626220703125
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0635407343506813
10 lb beta sum: 0.0, worst -0.06354192644357681
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    func 0.0545    
Accumulated time: func 0.0545    prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 542] 
split level 1: [/input-8, 553] 
split level 2: [/input-8, 545] 
split level 3: [/input-8, 562] 
split level 4: [/input-8, 538] 
split level 5: [/input-8, 1453] 
split level 6: [/input-8, 550] 
split level 7: [/input-8, 530] 
split level 8: [/input-8, 551] 
split level 9: [/input-8, 563] 
split level 10: [/input-8, 541] 
split level 11: [/input-8, 546] 
split level 12: [/input-8, 561] 
split level 13: [/input-8, 547] 
split level 14: [/input-8, 1191] 
split level 15: [/input-8, 554] 
split level 16: [/input-8, 1446] 
split level 17: [/input-8, 1259] 
split level 18: [/input-8, 1260] 
split level 19: [/input-8, 1183] 
split level 20: [/input-8, 1470] 
split level 21: [/input-8, 88] 
split level 22: [/input-8, 933] 
split level 23: [/input-8, 949] 
split level 24: [/input-8, 539] 
split level 25: [/input-8, 1251] 
split level 26: [/input-8, 1005] 
split level 27: [/input-8, 1252] 
split level 28: [/input-8, 340] 
split level 29: [/input-8, 2044] 
split level 30: [/input-8, 315] 
split level 31: [/input-8, 540] 
split level 32: [/input, 571] 
split level 33: [/input, 1131] 
split level 34: [/input, 569] 
split level 35: [/input, 586] 
split level 36: [/input-8, 555] 
split level 37: [/input, 810] 
split level 38: [/input-8, 378] 
split level 39: [/input-8, 560] 
split level 40: [/input, 2393] 
split level 41: [/input-8, 1244] 
split level 42: [/input, 1227] 
split level 43: [/input-8, 1437] 
split level 44: [/input-8, 1506] 
split level 45: [/input-8, 556] 
split level 46: [/input-8, 520] 
split level 47: [/input-8, 1945] 
split level 48: [/input, 2363] 
split level 49: [/input-8, 2035] 
split level 50: [/input-8, 934] 
split level 51: [/input-8, 1937] 
split level 52: [/input-8, 379] 
split level 53: [/input-8, 1622] 
split level 54: [/input-8, 317] 
split level 55: [/input-8, 946] 
split level 56: [/input, 1126] 
split level 57: [/input, 1209] 
split level 58: [/input, 3911] 
split level 59: [/input, 1243] 
split level 60: [/input, 923] 
split level 61: [/input, 1110] 
split level 62: [/input, 1846] 
split level 63: [/input, 1861] 
split level 64: [/input, 3789] 
split level 65: [/input, 1927] 
split level 66: [/input, 1874] 
split level 67: [/input, 1081] 
split level 68: [/input, 1865] 
split level 69: [/input, 939] 
split level 70: [/input, 1877] 
split level 71: [/input-8, 806] 
split level 72: [/input, 565] 
split level 73: [/input, 1902] 
split level 74: [/input-8, 908] 
split level 75: [/input, 1862] 
split level 76: [/input-8, 2045] 
split level 77: [/input, 842] 
split level 78: [/input, 1829] 
split level 79: [/input, 3653] 
split level 80: [/input-8, 2036] 
split level 81: [/input, 1050] 
split level 82: [/input, 1895] 
split level 83: [/input-8, 1515] 
split level 84: [/input-8, 814] 
split level 85: [/input, 3928] 
split level 86: [/input-8, 574] 
split level 87: [/input, 931] 
split level 88: [/input, 1845] 
split level 89: [/input, 1890] 
split level 90: [/input, 954] 
split level 91: [/input, 1912] 
split level 92: [/input, 1098] 
split level 93: [/input, 699] 
split level 94: [/input-8, 910] 
split level 95: [/input, 1878] 
split level 96: [/input, 1893] 
split level 97: [/input, 581] 
split level 98: [/input-8, 1960] 
split level 99: [/input, 1910] 
split level 100: [/input-8, 926] 
split level 101: [/input, 1816] 
split level 102: [/input, 1844] 
split level 103: [/input, 1892] 
split level 104: [/input-8, 67] 
split level 105: [/input-8, 380] 
split level 106: [/input, 972] 
split level 107: [/input, 3625] 
split level 108: [/input-8, 66] 
split level 109: [/input, 1885] 
split level 110: [/input, 646] 
split level 111: [/input, 1926] 
split level 112: [/input, 1894] 
split level 113: [/input, 901] 
split level 114: [/input, 955] 
split level 115: [/input, 1859] 
split level 116: [/input-8, 1790] 
split level 117: [/input, 795] 
split level 118: [/input, 1925] 
split level 119: [/input, 1814] 
split level 120: [/input, 3686] 
split level 121: [/input, 1145] 
split level 122: [/input-8, 763] 
split level 123: [/input-8, 104] 
split level 124: [/input, 1934] 
split level 125: [/input, 566] 
split level 126: [/input, 1911] 
split level 127: [/input, 1875] 
split level 128: [/input, 1049] 
split level 129: [/input, 3641] 
split level 130: [/input, 1997] 
split level 131: [/input, 1837] 
split level 132: [/input, 582] 
split level 133: [/input, 1162] 
split level 134: [/input, 630] 
split level 135: [/input, 1923] 
split level 136: [/input, 3669] 
split level 137: [/input, 1828] 
split level 138: [/input-8, 1167] 
split level 139: [/input, 899] 
split level 140: [/input, 549] 
split level 141: [/input, 580] 
split level 142: [/input-8, 1630] 
split level 143: [/input, 1149] 
split level 144: [/input-8, 1787] 
split level 145: [/input, 1909] 
split level 146: [/input, 3622] 
split level 147: [/input, 1853] 
split level 148: [/input-8, 1513] 
split level 149: [/input, 1826] 
split level 150: [/input-8, 1652] 
split level 151: [/input-8, 152] 
split level 152: [/input, 1922] 
split level 153: [/input, 1085] 
split level 154: [/input-8, 1623] 
split level 155: [/input-8, 1951] 
split level 156: [/input, 1869] 
split level 157: [/input, 947] 
split level 158: [/input-8, 1625] 
split level 159: [/input, 677] 
split level 160: [/input-8, 1952] 
split level 161: [/input, 714] 
split level 162: [/input, 3201] 
split level 163: [/input, 1083] 
split level 164: [/input, 798] 
split level 165: [/input, 1924] 
split level 166: [/input, 1822] 
split level 167: [/input, 1906] 
split level 168: [/input, 1930] 
split level 169: [/input, 1094] 
split level 170: [/input, 979] 
split level 171: [/input, 1090] 
split level 172: [/input, 603] 
split level 173: [/input, 583] 
split level 174: [/input, 1825] 
split level 175: [/input-8, 1651] 
split level 176: [/input, 678] 
split level 177: [/input, 550] 
split level 178: [/input, 1854] 
split level 179: [/input, 1884] 
split level 180: [/input, 1907] 
split level 181: [/input-8, 890] 
split level 182: [/input, 1129] 
split level 183: [/input, 614] 
split level 184: [/input, 724] 
split level 185: [/input, 1838] 
split level 186: [/input, 1883] 
split level 187: [/input, 1811] 
split level 188: [/input, 534] 
split level 189: [/input, 1190] 
split level 190: [/input, 1870] 
split level 191: [/input, 3662] 
split level 192: [/input, 1950] 
split level 193: [/input, 963] 
split level 194: [/input, 814] 
split level 195: [/input, 693] 
split level 196: [/input, 1905] 
split level 197: [/input, 1174] 
split level 198: [/input, 717] 
split level 199: [/input, 916] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06352948397397995
10 lb beta sum: 0.0, worst -0.06352996826171875
Time: prepare 0.0117    bound 0.0982    transfer 0.0014    finalize 0.0024    func 0.1163    
Accumulated time: func 0.1708    prepare 0.0220    bound 0.1521    transfer 0.0015    finalize 0.0026    
all_split False
======================Cut inference begins======================
max lb tensor(-0.04591019) min lb tensor(-0.06352843)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010293245315551758 
BICCOS Cumulative time: 0.010293245315551758
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06216 (1), -0.06214 (1), -0.06213 (1), -0.06211 (1), -0.06200 (1), -0.06199 (1), -0.06197 (1), -0.06195 (1), -0.06193 (1), -0.06193 (1), -0.06189 (1), -0.06188 (1), -0.06185 (1), -0.06173 (1), -0.06172 (1), -0.06170 (1), -0.06168 (1), -0.06163 (1), -0.06158 (1), -0.06142 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5244    set_bounds 0.0088    solve 0.1164    add 0.0658    
Accumulated time: pickout 0.0003    decision 0.5244    set_bounds 0.0088    solve 0.1164    add 0.0658    
Current (lb-rhs): -0.062160614877939224
50 domains visited
Cumulative time: 0.7855367660522461

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 1453] [/input-8, 545] [/input-8, 545] 
split level 1: [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] 
split level 2: [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 546] [/input-8, 541] [/input-8, 541] [/input-8, 546] [/input-8, 541] [/input-8, 541] [/input-8, 541] 
split level 3: [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 541] [/input-8, 546] [/input-8, 546] [/input-8, 541] [/input-8, 546] [/input-8, 546] [/input-8, 546] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.061744123697280884
10 lb beta sum: 0.0, worst -0.06178244948387146
Time: prepare 0.0115    bound 0.0978    transfer 0.0011    finalize 0.0021    func 0.1149    
Accumulated time: func 0.2857    prepare 0.0337    bound 0.2499    transfer 0.0026    finalize 0.0046    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03146625) min lb tensor(-0.06172941)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011514902114868164 
BICCOS Cumulative time: 0.021808147430419922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05430 (2), -0.05422 (2), -0.05411 (2), -0.05406 (2), -0.05397 (2), -0.05387 (2), -0.05383 (2), -0.05381 (2), -0.05374 (2), -0.05373 (2), -0.05370 (2), -0.05366 (2), -0.05365 (2), -0.05363 (2), -0.05359 (2), -0.05353 (2), -0.05347 (2), -0.05316 (2), -0.05314 (2), -0.05292 (2), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0245    set_bounds 0.0146    solve 0.1150    add 0.0727    
Accumulated time: pickout 0.0013    decision 0.5489    set_bounds 0.0234    solve 0.2314    add 0.1385    
Current (lb-rhs): -0.05430091172456741
100 domains visited
Cumulative time: 1.0249574184417725

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 545] [/input-8, 1453] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 1453] [/input-8, 538] [/input-8, 1453] 
split level 1: [/input-8, 538] [/input-8, 538] [/input-8, 541] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 541] [/input-8, 538] [/input-8, 546] [/input-8, 538] 
split level 2: [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 541] [/input-8, 541] [/input-8, 550] [/input-8, 550] [/input-8, 541] [/input-8, 541] [/input-8, 541] 
split level 3: [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 550] [/input-8, 550] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 550] [/input-8, 546] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.053542688488960266
10 lb beta sum: 0.0, worst -0.053661130368709564
Time: prepare 0.0108    bound 0.0971    transfer 0.0011    finalize 0.0021    func 0.1136    
Accumulated time: func 0.3993    prepare 0.0448    bound 0.3470    transfer 0.0036    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02582464) min lb tensor(-0.05347711)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011354923248291016 
BICCOS Cumulative time: 0.03316307067871094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04164 (3), -0.04163 (3), -0.04161 (3), -0.04161 (3), -0.04138 (3), -0.04113 (3), -0.04109 (3), -0.04081 (3), -0.04069 (3), -0.04064 (3), -0.04018 (3), -0.03982 (3), -0.03974 (3), -0.03973 (3), -0.03950 (3), -0.03946 (3), -0.03941 (3), -0.03940 (3), -0.03939 (3), -0.03923 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0194    set_bounds 0.0149    solve 0.1137    add 0.0760    
Accumulated time: pickout 0.0021    decision 0.5682    set_bounds 0.0383    solve 0.3450    add 0.2145    
Current (lb-rhs): -0.04164078086614609
150 domains visited
Cumulative time: 1.2614116668701172

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1453] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] [/input-8, 545] 
split level 1: [/input-8, 551] [/input-8, 551] [/input-8, 551] [/input-8, 538] [/input-8, 551] [/input-8, 551] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 551] 
split level 2: [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 551] [/input-8, 538] [/input-8, 538] [/input-8, 551] [/input-8, 551] [/input-8, 551] [/input-8, 550] 
split level 3: [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 550] [/input-8, 546] [/input-8, 550] [/input-8, 546] [/input-8, 550] [/input-8, 550] [/input-8, 546] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04207998514175415
10 lb beta sum: 0.0, worst -0.0411934070289135
Time: prepare 0.0112    bound 0.0975    transfer 0.0011    finalize 0.0020    func 0.1143    
Accumulated time: func 0.5136    prepare 0.0563    bound 0.4445    transfer 0.0047    finalize 0.0088    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00972182) min lb tensor(-0.04113114)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011374711990356445 
BICCOS Cumulative time: 0.04453778266906738
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02450 (4), -0.02440 (4), -0.02437 (4), -0.02435 (4), -0.02433 (4), -0.02432 (4), -0.02430 (4), -0.02430 (4), -0.02427 (4), -0.02426 (4), -0.02426 (4), -0.02422 (4), -0.02420 (4), -0.02414 (4), -0.02414 (4), -0.02403 (4), -0.02397 (4), -0.02393 (4), -0.02393 (4), -0.02391 (4), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0201    set_bounds 0.0151    solve 0.1144    add 0.2406    
Accumulated time: pickout 0.0030    decision 0.5883    set_bounds 0.0534    solve 0.4594    add 0.4551    
Current (lb-rhs): -0.02450384944677353
200 domains visited
Cumulative time: 1.664121389389038

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 545] [/input-8, 550] [/input-8, 545] [/input-8, 545] [/input-8, 538] [/input-8, 551] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 550] 
split level 1: [/input-8, 538] [/input-8, 538] [/input-8, 550] [/input-8, 550] [/input-8, 551] [/input-8, 538] [/input-8, 551] [/input-8, 551] [/input-8, 551] [/input-8, 545] 
split level 2: [/input-8, 546] [/input-8, 546] [/input-8, 561] [/input-8, 561] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 538] 
split level 3: [/input-8, 561] [/input-8, 561] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023952588438987732
10 lb beta sum: 0.0, worst -0.023900866508483887
Time: prepare 0.0110    bound 0.0970    transfer 0.0027    finalize 0.0017    func 0.1154    
Accumulated time: func 0.6290    prepare 0.0676    bound 0.5415    transfer 0.0074    finalize 0.0104    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00214548) min lb tensor(-0.02368802)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011478424072265625 
BICCOS Cumulative time: 0.05601620674133301
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01639 (5), -0.01639 (5), -0.01617 (5), -0.01605 (5), -0.01583 (5), -0.01570 (5), -0.01546 (5), -0.01524 (5), -0.01514 (5), -0.01503 (5), -0.01496 (5), -0.01495 (5), -0.01483 (5), -0.01481 (5), -0.01413 (5), -0.01395 (5), -0.01384 (5), -0.01382 (5), -0.01380 (5), -0.01374 (5), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0167    solve 0.1155    add 0.0820    
Accumulated time: pickout 0.0039    decision 0.6079    set_bounds 0.0701    solve 0.5749    add 0.5370    
Current (lb-rhs): -0.016389019787311554
250 domains visited
Cumulative time: 1.9105806350708008

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([9.48929520e-14, 1.13625615e-03, 4.74864384e-04]), tensor([0, 1, 2])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 542,  541,  545, 1453]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([9.48929520e-14, 1.13625615e-03, 5.27560106e-03, 5.79536846e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 542,  541,  545, 1453]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([9.48929520e-14, 1.13625615e-03, 5.27560106e-03, 8.74699792e-04]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 551, 538]), tensor([-1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([9.48929520e-14, 1.44449379e-02, 8.79281899e-04, 7.06567755e-03,
        4.72930958e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 551, 538]), tensor([-1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([9.48929520e-14, 1.44449379e-02, 8.79281899e-04, 7.06567755e-03,
        1.08731701e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 551]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([9.48929520e-14, 1.44449379e-02, 8.79281899e-04, 7.12947687e-04]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 542,  541,  545,  550, 1453]), tensor([-1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([9.48929520e-14, 1.44449379e-02, 5.64261666e-03, 2.11334391e-03,
        5.38818678e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 542,  541,  545,  550, 1453]), tensor([-1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([9.48929520e-14, 1.44449379e-02, 5.64261666e-03, 2.11334391e-03,
        1.08436658e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 550, 551]), tensor([-1.,  1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([9.48929520e-14, 1.44449379e-02, 5.64261666e-03, 2.93778046e-03,
        1.85622592e-02]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542, 541, 545, 550, 551]), tensor([-1.,  1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([9.48929520e-14, 1.44449379e-02, 5.64261666e-03, 2.93778046e-03,
        5.77421626e-04]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([542]), tensor([1.]), tensor([0]), tensor([4.34264291e-11]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  11
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06321679055690765
10 lb beta sum: 0.0, worst -0.06320852041244507
Time: prepare 0.0006    bound 0.1012    transfer 0.0001    finalize 0.0002    func 0.1023    
Accumulated time: func 0.7313    prepare 0.0682    bound 0.6427    transfer 0.0075    finalize 0.0106    
After pruning, left:  11

Back to Regular BaB

BaB round 1
batch: 11
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 538] [/input-8, 551] [/input-8, 551] [/input-8, 550] [/input-8, 550] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 1453] [/input-8, 1453] 
split level 1: [/input-8, 551] [/input-8, 538] [/input-8, 538] [/input-8, 1453] [/input-8, 1453] [/input-8, 546] [/input-8, 551] [/input-8, 551] [/input-8, 538] [/input-8, 538] 
split level 2: [/input-8, 546] [/input-8, 550] [/input-8, 550] [/input-8, 546] [/input-8, 546] [/input-8, 550] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] 
split level 3: [/input-8, 550] [/input-8, 546] [/input-8, 546] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 561] 
split level 4: [/input-8, 561] [/input-8, 561] [/input-8, 561] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05698869377374649
10 lb beta sum: 0.0, worst -0.05697021260857582
Time: prepare 0.0097    bound 0.1001    transfer 0.0017    finalize 0.0019    func 0.1155    
Accumulated time: func 0.8468    prepare 0.0782    bound 0.7428    transfer 0.0092    finalize 0.0125    
all_split False
======================Cut inference begins======================
max lb tensor(0.00876801) min lb tensor(-0.05696056)
Number of Verified Splits: 70 of 352
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.00031876564025878906 
BICCOS Cumulative time: 0.0563349723815918
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05696 (5), -0.05607 (5), -0.05475 (5), -0.05390 (5), -0.05389 (5), -0.05297 (5), -0.05285 (5), -0.05208 (5), -0.05202 (5), -0.05170 (5), -0.05112 (5), -0.05103 (5), -0.05069 (5), -0.05018 (5), -0.04993 (5), -0.04954 (5), -0.04896 (5), -0.04888 (5), -0.04883 (5), -0.04864 (5), 
Length of domains: 282
Time: pickout 0.0006    decision 0.0203    set_bounds 0.0217    solve 0.1156    add 0.0030    
Accumulated time: pickout 0.0045    decision 0.6282    set_bounds 0.0919    solve 0.6905    add 0.5400    
Current (lb-rhs): -0.056960560381412506
532 domains visited
Cumulative time: 2.1981520652770996

BaB round 2
batch: 282
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1453] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 530] [/input-8, 1453] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.056086212396621704
10 lb beta sum: 0.0, worst -0.05607664957642555
Time: prepare 0.0156    bound 0.1025    transfer 0.0027    finalize 0.0031    func 0.1275    
Accumulated time: func 0.9743    prepare 0.0940    bound 0.8453    transfer 0.0119    finalize 0.0156    
all_split False
======================Cut inference begins======================
max lb tensor(0.00325923) min lb tensor(-0.05607167)
Number of Verified Splits: 37 of 564
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.00033020973205566406 
BICCOS Cumulative time: 0.05666518211364746
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05607 (6), -0.05514 (6), -0.05384 (6), -0.05347 (6), -0.05300 (6), -0.05244 (6), -0.05201 (6), -0.05151 (6), -0.05124 (6), -0.05113 (6), -0.05107 (6), -0.05088 (6), -0.05027 (6), -0.05020 (6), -0.05013 (6), -0.04940 (6), -0.04928 (6), -0.04920 (6), -0.04864 (6), -0.04857 (6), 
Length of domains: 527
Time: pickout 0.0032    decision 0.0255    set_bounds 0.0228    solve 0.1276    add 0.0053    
Accumulated time: pickout 0.0077    decision 0.6537    set_bounds 0.1147    solve 0.8182    add 0.5453    
Current (lb-rhs): -0.05607167258858681
1059 domains visited
Cumulative time: 2.3835043907165527

BaB round 3
batch: 527
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 530] [/input-8, 547] [/input-8, 547] [/input-8, 562] [/input-8, 562] [/input-8, 1453] [/input-8, 562] [/input-8, 562] [/input-8, 547] [/input-8, 530] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05506739020347595
10 lb beta sum: 0.0, worst -0.05505414307117462
Time: prepare 0.0290    bound 0.1061    transfer 0.0030    finalize 0.0051    func 0.1497    
Accumulated time: func 1.1240    prepare 0.1232    bound 0.9514    transfer 0.0149    finalize 0.0206    
all_split False
======================Cut inference begins======================
max lb tensor(0.00500973) min lb tensor(-0.05504575)
Number of Verified Splits: 124 of 1054
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0003635883331298828 
BICCOS Cumulative time: 0.057028770446777344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05505 (7), -0.05410 (7), -0.05270 (7), -0.05256 (7), -0.05186 (7), -0.05184 (7), -0.05149 (7), -0.05100 (7), -0.05097 (7), -0.05070 (7), -0.05056 (7), -0.05033 (7), -0.05016 (7), -0.04998 (7), -0.04992 (7), -0.04972 (7), -0.04935 (7), -0.04904 (7), -0.04897 (7), -0.04864 (7), 
Length of domains: 930
Time: pickout 0.0071    decision 0.0389    set_bounds 0.0415    solve 0.1506    add 0.0070    
Accumulated time: pickout 0.0148    decision 0.6926    set_bounds 0.1561    solve 0.9688    add 0.5523    
Current (lb-rhs): -0.055045753717422485
1989 domains visited
Cumulative time: 2.6304361820220947

BaB round 4
batch: 930
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 547] [/input-8, 562] [/input-8, 562] [/input-8, 554] [/input-8, 554] [/input-8, 562] [/input-8, 1446] [/input-8, 554] [/input-8, 551] [/input-8, 547] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05391569435596466
10 lb beta sum: 0.0, worst -0.05390650033950806
Time: prepare 0.0521    bound 0.1247    transfer 0.0067    finalize 0.0098    func 0.2047    
Accumulated time: func 1.3288    prepare 0.1755    bound 1.0761    transfer 0.0216    finalize 0.0304    
all_split False
======================Cut inference begins======================
max lb tensor(0.00421654) min lb tensor(-0.05390057)
Number of Verified Splits: 195 of 1860
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.00036597251892089844 
BICCOS Cumulative time: 0.05739474296569824
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05390 (8), -0.05295 (8), -0.05220 (8), -0.05187 (8), -0.05153 (8), -0.05125 (8), -0.05103 (8), -0.05067 (8), -0.05045 (8), -0.05017 (8), -0.04976 (8), -0.04974 (8), -0.04950 (8), -0.04949 (8), -0.04933 (8), -0.04931 (8), -0.04915 (8), -0.04910 (8), -0.04897 (8), -0.04853 (8), 
Length of domains: 1665
Time: pickout 0.0096    decision 0.0604    set_bounds 0.2154    solve 0.2051    add 0.0088    
Accumulated time: pickout 0.0244    decision 0.7531    set_bounds 0.3715    solve 1.1739    add 0.5611    
Current (lb-rhs): -0.053900569677352905
3654 domains visited
Cumulative time: 3.1324760913848877

BaB round 5
batch: 1665
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 562] [/input-8, 554] [/input-8, 554] [/input-8, 1446] [/input-8, 1446] [/input-8, 554] [/input-8, 554] [/input-8, 1446] [/input-8, 530] [/input-8, 562] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05330829322338104
10 lb beta sum: 0.0, worst -0.05330272018909454
Time: prepare 0.0919    bound 0.1825    transfer 0.0180    finalize 0.0168    func 0.3315    
Accumulated time: func 1.6603    prepare 0.2676    bound 1.2586    transfer 0.0395    finalize 0.0472    
all_split False
======================Cut inference begins======================
max lb tensor(0.00768236) min lb tensor(-0.05329729)
Number of Verified Splits: 431 of 3330
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0006225109100341797 
BICCOS Cumulative time: 0.05801725387573242
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05330 (9), -0.05235 (9), -0.05160 (9), -0.05118 (9), -0.05092 (9), -0.05065 (9), -0.05036 (9), -0.04998 (9), -0.04985 (9), -0.04949 (9), -0.04914 (9), -0.04911 (9), -0.04908 (9), -0.04881 (9), -0.04869 (9), -0.04865 (9), -0.04864 (9), -0.04848 (9), -0.04828 (9), -0.04818 (9), 
Length of domains: 2899
Time: pickout 0.0179    decision 0.1005    set_bounds 0.1299    solve 0.3329    add 0.0191    
Accumulated time: pickout 0.0423    decision 0.8535    set_bounds 0.5015    solve 1.5067    add 0.5803    
Current (lb-rhs): -0.053297288715839386
6553 domains visited
Cumulative time: 3.7388391494750977

BaB round 6
batch: 2899
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 554] [/input-8, 1446] [/input-8, 1446] [/input-8, 1470] [/input-8, 1470] [/input-8, 1446] [/input-8, 1470] [/input-8, 1470] [/input-8, 561] [/input-8, 554] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05252201110124588
10 lb beta sum: 0.0, worst -0.052507102489471436
Time: prepare 0.1640    bound 0.2843    transfer 0.0272    finalize 0.0308    func 0.5432    
Accumulated time: func 2.2035    prepare 0.4319    bound 1.5429    transfer 0.0667    finalize 0.0780    
all_split False
======================Cut inference begins======================
max lb tensor(0.00875905) min lb tensor(-0.05249634)
Number of Verified Splits: 532 of 5798
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.00046443939208984375 
BICCOS Cumulative time: 0.058481693267822266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05250 (10), -0.05156 (10), -0.05080 (10), -0.05012 (10), -0.04986 (10), -0.04971 (10), -0.04969 (10), -0.04917 (10), -0.04904 (10), -0.04885 (10), -0.04878 (10), -0.04868 (10), -0.04835 (10), -0.04827 (10), -0.04802 (10), -0.04800 (10), -0.04786 (10), -0.04784 (10), -0.04747 (10), -0.04737 (10), 
Length of domains: 5266
Time: pickout 0.0309    decision 0.1660    set_bounds 0.3989    solve 0.5444    add 0.0220    
Accumulated time: pickout 0.0732    decision 1.0195    set_bounds 0.9003    solve 2.0511    add 0.6022    
Current (lb-rhs): -0.05249634385108948
11819 domains visited
Cumulative time: 4.911190509796143

BaB round 7
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1446] [/input-8, 539] [/input-8, 539] [/input-8, 539] [/input-8, 539] [/input-8, 1470] [/input-8, 539] [/input-8, 562] [/input-8, 1446] [/input-8, 539] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0522175058722496
10 lb beta sum: 0.0, worst -0.05219566822052002
Time: prepare 0.2315    bound 0.3778    transfer 0.0450    finalize 0.0446    func 0.7511    
Accumulated time: func 2.9546    prepare 0.6637    bound 1.9207    transfer 0.1117    finalize 0.1226    
all_split False
======================Cut inference begins======================
max lb tensor(0.00222909) min lb tensor(-0.05218406)
Number of Verified Splits: 656 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0004448890686035156 
BICCOS Cumulative time: 0.05892658233642578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05218 (11), -0.05125 (11), -0.05049 (11), -0.04981 (11), -0.04955 (11), -0.04934 (11), -0.04919 (11), -0.04880 (11), -0.04873 (11), -0.04851 (11), -0.04831 (11), -0.04827 (11), -0.04804 (11), -0.04791 (11), -0.04765 (11), -0.04755 (11), -0.04750 (11), -0.04747 (11), -0.04710 (11), -0.04707 (11), 
Length of domains: 8706
Time: pickout 0.0433    decision 0.3942    set_bounds 0.5080    solve 0.7533    add 0.0328    
Accumulated time: pickout 0.1165    decision 1.4138    set_bounds 1.4083    solve 2.8044    add 0.6350    
Current (lb-rhs): -0.05218406021595001
19355 domains visited
current_vram/total_varm: 28.4GB/99.9GB, batch_size increase to 8192
Cumulative time: 6.658012866973877

BaB round 8
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 562] [/input-8, 1446] [/input-8, 1470] [/input-8, 562] [/input-8, 1446] [/input-8, 1470] [/input-8, 1470] [/input-8, 562] [/input-8, 1446] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05139847844839096
10 lb beta sum: 0.0, worst -0.05138169974088669
Time: prepare 0.4777    bound 0.7114    transfer 0.0888    finalize 0.0941    func 1.4756    
Accumulated time: func 4.4301    prepare 1.1419    bound 2.6321    transfer 0.2006    finalize 0.2168    
all_split False
======================Cut inference begins======================
max lb tensor(0.00868233) min lb tensor(-0.05137577)
Number of Verified Splits: 1352 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0005443096160888672 
BICCOS Cumulative time: 0.05947089195251465
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05138 (12), -0.05044 (12), -0.04968 (12), -0.04900 (12), -0.04874 (12), -0.04853 (12), -0.04842 (12), -0.04834 (12), -0.04793 (12), -0.04787 (12), -0.04763 (12), -0.04752 (12), -0.04749 (12), -0.04748 (12), -0.04734 (12), -0.04729 (12), -0.04698 (12), -0.04684 (12), -0.04673 (12), -0.04669 (12), 
Length of domains: 15546
Time: pickout 0.0935    decision 0.4515    set_bounds 1.0951    solve 1.4788    add 0.0589    
Accumulated time: pickout 0.2100    decision 1.8653    set_bounds 2.5034    solve 4.2833    add 0.6939    
Current (lb-rhs): -0.05137576907873154
34387 domains visited
current_vram/total_varm: 28.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 9.863933086395264

BaB round 9
batch: 15546
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 949] [/input-8, 539] [/input-8, 547] [/input-8, 539] [/input-8, 949] [/input-8, 949] [/input-8, 1470] [/input-8, 554] [/input-8, 1470] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05037298798561096
10 lb beta sum: 0.0, worst -0.050366029143333435
Time: prepare 0.9110    bound 1.3064    transfer 0.1757    finalize 0.1893    func 3.1046    
Accumulated time: func 7.5347    prepare 2.0532    bound 3.9385    transfer 0.3763    finalize 0.4060    
all_split False
======================Cut inference begins======================
max lb tensor(0.00922753) min lb tensor(-0.05036227)
Number of Verified Splits: 2544 of 31092
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0006074905395507812 
BICCOS Cumulative time: 0.06007838249206543
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05036 (13), -0.04946 (13), -0.04877 (13), -0.04855 (13), -0.04791 (13), -0.04782 (13), -0.04764 (13), -0.04758 (13), -0.04745 (13), -0.04740 (13), -0.04732 (13), -0.04688 (13), -0.04686 (13), -0.04663 (13), -0.04660 (13), -0.04652 (13), -0.04649 (13), -0.04643 (13), -0.04642 (13), -0.04633 (13), 
Length of domains: 28548
Time: pickout 0.2339    decision 1.1117    set_bounds 1.8021    solve 3.1101    add 0.1056    
Accumulated time: pickout 0.4439    decision 2.9770    set_bounds 4.3055    solve 7.3934    add 0.7995    
Current (lb-rhs): -0.050362274050712585
62935 domains visited
Cumulative time: 16.273702383041382

BaB round 10
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1251] [/input-8, 554] [/input-8, 949] [/input-8, 539] [/input-8, 1470] [/input-8, 1251] [/input-8, 1251] [/input-8, 949] [/input-8, 1446] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04947630316019058
10 lb beta sum: 0.0, worst -0.049471527338027954
Time: prepare 0.9793    bound 1.3743    transfer 0.1761    finalize 0.2193    func 2.9588    
Accumulated time: func 10.4936    prepare 3.0328    bound 5.3128    transfer 0.5524    finalize 0.6253    
all_split False
======================Cut inference begins======================
max lb tensor(0.00428186) min lb tensor(-0.04946780)
Number of Verified Splits: 2465 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0008065700531005859 
BICCOS Cumulative time: 0.060884952545166016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04947 (14), -0.04897 (14), -0.04856 (14), -0.04806 (14), -0.04787 (14), -0.04765 (14), -0.04758 (13), -0.04737 (14), -0.04715 (14), -0.04701 (14), -0.04693 (14), -0.04674 (14), -0.04663 (13), -0.04651 (14), -0.04650 (14), -0.04650 (14), -0.04642 (14), -0.04642 (14), -0.04642 (13), -0.04624 (14), 
Length of domains: 42467
Time: pickout 0.1832    decision 1.6440    set_bounds 2.0087    solve 3.3943    add 0.1255    
Accumulated time: pickout 0.6272    decision 4.6210    set_bounds 6.3142    solve 10.7877    add 0.9250    
Current (lb-rhs): -0.04946780204772949
93238 domains visited
current_vram/total_varm: 39.1GB/99.9GB, batch_size increase to 32768
Cumulative time: 23.681427478790283

BaB round 11
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 949] [/input-8, 1260] [/input-8, 1260] [/input-8, 1470] [/input-8, 1251] [/input-8, 1260] [/input-8, 1260] [/input-8, 1251] [/input-8, 539] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.048633456230163574
10 lb beta sum: 0.0, worst -0.048622243106365204
Time: prepare 1.9584    bound 7.8985    transfer 0.4732    finalize 0.4775    func 11.2250    
Accumulated time: func 21.7186    prepare 4.9917    bound 13.2113    transfer 1.0256    finalize 1.1029    
all_split False
======================Cut inference begins======================
max lb tensor(0.00629322) min lb tensor(-0.04861674)
Number of Verified Splits: 5550 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0008709430694580078 
BICCOS Cumulative time: 0.06175589561462402
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04862 (15), -0.04816 (15), -0.04813 (15), -0.04771 (15), -0.04764 (15), -0.04737 (14), -0.04726 (15), -0.04723 (15), -0.04702 (15), -0.04681 (15), -0.04674 (15), -0.04668 (14), -0.04658 (15), -0.04642 (14), -0.04633 (15), -0.04633 (15), -0.04618 (15), -0.04618 (14), -0.04608 (15), -0.04599 (14), 
Length of domains: 69685
Time: pickout 0.3784    decision 3.7874    set_bounds 3.8181    solve 11.8406    add 0.2057    
Accumulated time: pickout 1.0056    decision 8.4084    set_bounds 10.1324    solve 22.6283    add 1.1307    
Current (lb-rhs): -0.048616744577884674
153224 domains visited
Cumulative time: 43.829232931137085

BaB round 12
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 933] [/input-8, 933] [/input-8, 949] [/input-8, 1260] [/input-8, 1470] [/input-8, 1260] [/input-8, 933] [/input-8, 554] [/input-8, 1260] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04770525544881821
10 lb beta sum: 0.0, worst -0.04770129173994064
Time: prepare 1.9980    bound 7.9003    transfer 0.4827    finalize 0.5145    func 11.3189    
Accumulated time: func 33.0375    prepare 6.9901    bound 21.1116    transfer 1.5083    finalize 1.6174    
all_split False
======================Cut inference begins======================
max lb tensor(0.01123867) min lb tensor(-0.04769868)
Number of Verified Splits: 6283 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0009784698486328125 
BICCOS Cumulative time: 0.06273436546325684
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04816 (15), -0.04813 (15), -0.04770 (16), -0.04764 (15), -0.04726 (15), -0.04723 (15), -0.04713 (16), -0.04702 (15), -0.04674 (15), -0.04672 (16), -0.04658 (15), -0.04653 (15), -0.04647 (16), -0.04633 (15), -0.04633 (15), -0.04618 (14), -0.04608 (15), -0.04605 (15), -0.04590 (16), -0.04585 (15), 
Length of domains: 96170
Time: pickout 0.3965    decision 3.3288    set_bounds 4.0724    solve 12.1459    add 0.1789    
Accumulated time: pickout 1.4021    decision 11.7373    set_bounds 14.2047    solve 34.7742    add 1.3095    
Current (lb-rhs): -0.04816234111785889
212477 domains visited
Cumulative time: 64.08775806427002

BaB round 13
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1251] [/input-8, 949] [/input-8, 1251] [/input-8, 933] [/input-8, 949] [/input-8, 1251] [/input-8, 933] [/input-8, 933] [/input-8, 949] [/input-8, 539] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04725150018930435
10 lb beta sum: 0.0, worst -0.047252312302589417
Time: prepare 1.9953    bound 7.8942    transfer 0.4876    finalize 1.4092    func 12.2030    
Accumulated time: func 45.2405    prepare 8.9860    bound 29.0057    transfer 1.9959    finalize 3.0266    
all_split False
======================Cut inference begins======================
max lb tensor(0.01095188) min lb tensor(-0.04723790)
Number of Verified Splits: 6252 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0009481906890869141 
BICCOS Cumulative time: 0.06368255615234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04770 (16), -0.04764 (15), -0.04724 (16), -0.04721 (16), -0.04713 (16), -0.04674 (15), -0.04672 (16), -0.04668 (16), -0.04664 (16), -0.04653 (15), -0.04647 (16), -0.04625 (16), -0.04623 (16), -0.04610 (16), -0.04605 (15), -0.04600 (16), -0.04598 (16), -0.04590 (16), -0.04585 (15), -0.04581 (15), 
Length of domains: 122686
Time: pickout 0.4024    decision 3.3346    set_bounds 3.6722    solve 12.2116    add 0.2043    
Accumulated time: pickout 1.8044    decision 15.0718    set_bounds 17.8769    solve 46.9857    add 1.5139    
Current (lb-rhs): -0.04769867658615112
271761 domains visited
Cumulative time: 84.03974294662476

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 933] [/input-8, 933] [/input-8, 539] [/input-8, 949] [/input-8, 1260] [/input-8, 539] [/input-8, 1260] [/input-8, 933] [/input-8, 1260] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04703758656978607
10 lb beta sum: 0.0, worst -0.047036200761795044
Time: prepare 2.0213    bound 7.9028    transfer 0.5010    finalize 0.5432    func 11.3941    
Accumulated time: func 56.6346    prepare 11.0078    bound 36.9085    transfer 2.4969    finalize 3.5697    
all_split False
======================Cut inference begins======================
max lb tensor(0.01131330) min lb tensor(-0.04703438)
Number of Verified Splits: 6206 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0010476112365722656 
BICCOS Cumulative time: 0.06473016738891602
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04724 (16), -0.04721 (16), -0.04713 (16), -0.04703 (17), -0.04672 (16), -0.04668 (16), -0.04664 (16), -0.04647 (16), -0.04625 (16), -0.04623 (16), -0.04616 (16), -0.04610 (16), -0.04606 (17), -0.04605 (15), -0.04600 (16), -0.04598 (16), -0.04573 (16), -0.04571 (17), -0.04565 (16), -0.04561 (16), 
Length of domains: 149248
Time: pickout 0.4072    decision 3.3825    set_bounds 5.2011    solve 11.4138    add 0.2033    
Accumulated time: pickout 2.2117    decision 18.4543    set_bounds 23.0780    solve 58.3996    add 1.7172    
Current (lb-rhs): -0.047237902879714966
331091 domains visited
Cumulative time: 104.8405373096466

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 340] [/input-8, 554] [/input-8, 554] [/input-8, 540] [/input-8, 340] [/input-8, 554] [/input-8, 340] [/input-8, 1260] [/input-8, 1251] [/input-8, 340] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.046465180814266205
10 lb beta sum: 0.0, worst -0.046628013253211975
Time: prepare 1.9655    bound 7.9009    transfer 0.5138    finalize 0.5186    func 11.3235    
Accumulated time: func 67.9581    prepare 12.9738    bound 44.8095    transfer 3.0107    finalize 4.0883    
all_split False
======================Cut inference begins======================
max lb tensor(0.01043805) min lb tensor(-0.04646518)
Number of Verified Splits: 5679 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0011763572692871094 
BICCOS Cumulative time: 0.06590652465820312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04724 (16), -0.04721 (16), -0.04703 (17), -0.04672 (16), -0.04668 (16), -0.04664 (16), -0.04647 (17), -0.04625 (16), -0.04623 (16), -0.04616 (16), -0.04610 (16), -0.04606 (17), -0.04600 (16), -0.04598 (16), -0.04580 (17), -0.04573 (16), -0.04571 (17), -0.04565 (16), -0.04561 (16), -0.04552 (16), 
Length of domains: 176337
Time: pickout 0.4465    decision 3.3236    set_bounds 5.4241    solve 11.3353    add 0.2155    
Accumulated time: pickout 2.6582    decision 21.7779    set_bounds 28.5021    solve 69.7348    add 1.9326    
Current (lb-rhs): -0.047237902879714966
390948 domains visited
Cumulative time: 125.74828886985779

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1260] [/input-8, 340] [/input-8, 340] [/input-8, 540] [/input-8, 1260] [/input-8, 949] [/input-8, 340] [/input-8, 1260] [/input-8, 340] [/input-8, 340] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.046613022685050964
10 lb beta sum: 0.0, worst -0.04661243408918381
Time: prepare 1.9851    bound 7.8947    transfer 0.5332    finalize 0.5668    func 11.3998    
Accumulated time: func 79.3578    prepare 14.9593    bound 52.7041    transfer 3.5439    finalize 4.6551    
all_split False
======================Cut inference begins======================
max lb tensor(0.01210626) min lb tensor(-0.04660967)
Number of Verified Splits: 6218 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0010716915130615234 
BICCOS Cumulative time: 0.06697821617126465
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04703 (17), -0.04672 (16), -0.04668 (16), -0.04661 (17), -0.04655 (17), -0.04647 (17), -0.04616 (16), -0.04606 (17), -0.04600 (16), -0.04598 (17), -0.04580 (17), -0.04573 (16), -0.04571 (17), -0.04563 (17), -0.04561 (16), -0.04557 (17), -0.04548 (16), -0.04545 (17), -0.04532 (17), -0.04523 (17), 
Length of domains: 202887
Time: pickout 0.4300    decision 3.3632    set_bounds 4.3317    solve 11.4189    add 0.2098    
Accumulated time: pickout 3.0881    decision 25.1411    set_bounds 32.8338    solve 81.1537    add 2.1424    
Current (lb-rhs): -0.047034382820129395
450266 domains visited
Cumulative time: 145.7042932510376

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3164] [/input-8, 1260] [/input-8, 1251] [/input-8, 949] [/input-8, 340] [/input-8, 933] [/input-8, 1260] [/input-8, 340] [/input-8, 949] [/input-8, 340] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.046092092990875244
10 lb beta sum: 0.0, worst -0.04609597474336624
Time: prepare 1.9915    bound 7.9019    transfer 0.5743    finalize 2.2224    func 13.1078    
Accumulated time: func 92.4656    prepare 16.9513    bound 60.6060    transfer 4.1182    finalize 6.8775    
all_split False
======================Cut inference begins======================
max lb tensor(0.01105291) min lb tensor(-0.04608677)
Number of Verified Splits: 5528 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0008747577667236328 
BICCOS Cumulative time: 0.06785297393798828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04703 (17), -0.04661 (17), -0.04655 (17), -0.04647 (17), -0.04616 (16), -0.04609 (17), -0.04606 (17), -0.04606 (17), -0.04598 (17), -0.04580 (17), -0.04571 (17), -0.04563 (17), -0.04561 (16), -0.04557 (17), -0.04548 (16), -0.04545 (17), -0.04538 (17), -0.04532 (17), -0.04523 (17), -0.04522 (17), 
Length of domains: 230127
Time: pickout 0.4253    decision 4.4787    set_bounds 3.0045    solve 13.1185    add 0.2088    
Accumulated time: pickout 3.5134    decision 29.6198    set_bounds 35.8383    solve 94.2722    add 2.3512    
Current (lb-rhs): -0.047034382820129395
510274 domains visited
Cumulative time: 167.08872818946838

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 540] [/input-8, 540] [/input-8, 1260] [/input-8, 539] [/input-8, 340] [/input-8, 540] [/input-8, 540] [/input-8, 1260] [/input-8, 1251] [/input-8, 340] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04619807004928589
10 lb beta sum: 0.0, worst -0.046196624636650085
Time: prepare 1.9900    bound 7.8982    transfer 0.6182    finalize 0.5505    func 11.4741    
Accumulated time: func 103.9397    prepare 18.9417    bound 68.5042    transfer 4.7364    finalize 7.4281    
all_split False
======================Cut inference begins======================
max lb tensor(0.01269335) min lb tensor(-0.04619431)
Number of Verified Splits: 5700 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0010554790496826172 
BICCOS Cumulative time: 0.0689084529876709
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04661 (17), -0.04655 (17), -0.04647 (17), -0.04619 (18), -0.04609 (17), -0.04606 (17), -0.04598 (17), -0.04580 (17), -0.04571 (17), -0.04563 (17), -0.04557 (17), -0.04552 (17), -0.04549 (18), -0.04545 (17), -0.04538 (17), -0.04532 (17), -0.04523 (18), -0.04522 (17), -0.04522 (17), -0.04513 (16), 
Length of domains: 257195
Time: pickout 0.4203    decision 3.3455    set_bounds 4.8414    solve 11.4909    add 0.2241    
Accumulated time: pickout 3.9337    decision 32.9654    set_bounds 40.6797    solve 105.7630    add 2.5753    
Current (lb-rhs): -0.04660966992378235
570110 domains visited
Cumulative time: 187.64740586280823

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1251] [/input-8, 933] [/input-8, 539] [/input-8, 539] [/input-8, 1251] [/input-8, 1251] [/input-8, 933] [/input-8, 1251] [/input-8, 1251] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04493291676044464
10 lb beta sum: 0.0, worst -0.04494524002075195
Time: prepare 1.9901    bound 7.8946    transfer 0.6737    finalize 0.5676    func 11.5487    
Accumulated time: func 115.4884    prepare 20.9322    bound 76.3988    transfer 5.4101    finalize 7.9956    
all_split False
======================Cut inference begins======================
max lb tensor(0.01149932) min lb tensor(-0.04492329)
Number of Verified Splits: 5588 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0010170936584472656 
BICCOS Cumulative time: 0.06992554664611816
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04661 (17), -0.04655 (17), -0.04647 (17), -0.04619 (18), -0.04609 (17), -0.04606 (17), -0.04598 (17), -0.04580 (17), -0.04563 (17), -0.04557 (17), -0.04552 (17), -0.04549 (18), -0.04545 (17), -0.04538 (17), -0.04532 (17), -0.04523 (18), -0.04522 (17), -0.04522 (17), -0.04513 (17), -0.04511 (17), 
Length of domains: 284375
Time: pickout 0.4298    decision 3.3559    set_bounds 5.0373    solve 11.5629    add 0.2307    
Accumulated time: pickout 4.3635    decision 36.3213    set_bounds 45.7170    solve 117.3260    add 2.8060    
Current (lb-rhs): -0.04660966992378235
630058 domains visited
Time out!!!!!!!!
Result: unknown in 211.7860 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.71828079, -12.07358360,  -7.51085901,  -7.73513126,  -5.85087204,
          -7.76494551,  -8.30688477,  -4.66740465, -11.87115002, -11.40974522]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 561] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 561] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 170] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.23245525, 6.33307838, 2.35018444, 2.53250027, 0.82198739, 2.56909752,
         2.92734623, 6.26306963, 5.81518650]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0511 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.44977188,  -9.06816578,  -8.76676846, -10.00036716,  -8.16498661,
         -10.20727444, -10.19177628,  -9.06856728,  -5.60935688,  -8.05991840]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [446]; unstable size 446; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 151, 1, 446] with unstable size 150 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 446] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 446] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 150] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.39624709, 2.77556920, 2.57724094, 3.80850029, 2.01538920, 4.00958395,
         3.97526073, 2.81353402, 1.83315969]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0405 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.04652691, -11.10261822,  -7.86249161,  -8.90385628,  -7.35591507,
          -8.96246243,  -6.67423820,  -9.53345776, -12.04738331, -11.83759594]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [415]; unstable size 415; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 415] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 415] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 415] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.83799863, 3.77172422, 0.92177498, 1.93019617, 0.40763223, 1.98125410,
         2.40290666, 4.67680788, 4.50188541]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0431 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.33996439, -6.41871643, -5.27160645, -5.78144073, -5.19606686,
         -5.95623350, -5.03869438, -5.45932245, -5.23290539, -6.04166842]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 442] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 442] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 146] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.31949663, 1.40748429, 1.74333405, 1.23676848, 1.91309977, 1.10932398,
         1.36478341, 1.55591130, 2.01130915]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0448 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.12939644, -9.72904682, -5.54302311, -6.04563618, -5.96231461,
         -6.23193979, -5.71355343, -6.85170698, -7.76404381, -8.90234089]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [423]; unstable size 423; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 423] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 423] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 423] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 201] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.53611314,  2.83136010, -0.80475760, -0.42034256,  0.15137628,
         -0.61510217,  0.28265738,  0.83452559,  1.97465444]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.12939644, -9.72904682, -5.54302311, -6.04563618, -5.96231461,
         -6.23193979, -5.71355343, -6.85170698, -7.76404381, -8.90234089]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.12939644, -9.72904778, -5.54302359, -6.04563808, -5.96231556,
          -6.23194075, -5.71355438, -6.85170746, -7.76404476, -8.90234089],
         [-6.12939644, -9.72904778, -5.54302359, -6.04563808, -5.96231556,
          -6.23194075, -5.71355438, -6.85170746, -7.76404476, -8.90234089]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08375835, -0.50261450, -0.08332253, -0.33208370]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0562 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.04236412, -15.83466625, -11.57055759, -12.04814053, -11.33596802,
         -12.07632923, -10.29791260, -13.00263977, -15.47680664, -15.46460438]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [504]; unstable size 504; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 504] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 504] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 504] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 239] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.98187876, 4.42113018, 0.88485742, 1.34177840, 0.68825984, 1.36417866,
         2.12291336, 4.03281069, 4.06385660]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0562 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.82596016, -8.01462746, -5.61366749, -5.94512081, -4.99872208,
         -6.00526476, -5.77766132, -3.03901243, -9.93118095, -6.94092846]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [450]; unstable size 450; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 450] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 450] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 450] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 141] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.08748627, 3.92925024, 2.12131429, 2.35519123, 1.63135076, 2.42033052,
         2.09290028, 5.92347908, 2.98009157]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0446 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.71775055, -8.71694279, -8.45971107, -9.68828869, -8.52095413,
         -9.86249352, -9.58036518, -8.48355675, -7.19637108, -7.55859327]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [433]; unstable size 433; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 433] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 433] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 433] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 170] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.48584545, 1.32305861, 2.39883733, 1.24146891, 2.56375098, 2.28119969,
         1.11799192, 0.07952955, 0.28410673]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0328 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.67823887, -8.79199886, -4.26914644, -4.69909000, -4.87025404,
         -4.79431295, -5.06131744, -5.80675077, -8.86075783, -8.01763248]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [469]; unstable size 469; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 469] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 469] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 469] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 153] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.32742643,  3.28234100, -0.82947564, -0.11151652, -0.27848172,
         -0.02716166,  0.58209592,  3.50851631,  2.55930853]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.67823887, -8.79199886, -4.26914644, -4.69909000, -4.87025404,
         -4.79431295, -5.06131744, -5.80675077, -8.86075783, -8.01763248]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.67823887, -8.79199982, -4.26914644, -4.69909000, -4.87025356,
          -4.79431295, -5.06131649, -5.80675030, -8.86075783, -8.01763248],
         [-6.67823887, -8.79199982, -4.26914644, -4.69909000, -4.87025356,
          -4.79431295, -5.06131649, -5.80675030, -8.86075783, -8.01763248]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.52516651, -0.09522295,  0.07594061,  0.26700354]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0426 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.94152546,  -9.43132877, -11.42302418, -12.00805473, -11.48972893,
         -12.21064949, -12.50059700, -12.93048859,  -7.66620636,  -8.89758873]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [513]; unstable size 513; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 513] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 513] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 513] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 161] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.39024830,  0.27186394,  1.95888186,  2.51927996,  2.04223776,
          2.70385861,  2.90191841,  3.45087051, -1.63618660]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.94152546,  -9.43132877, -11.42302418, -12.00805473, -11.48972893,
         -12.21064949, -12.50059700, -12.93048859,  -7.66620636,  -8.89758873]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.94152737,  -9.43132782, -11.42302322, -12.00805569, -11.48972893,
          -12.21065044, -12.50059700, -12.93048954,  -7.66620636,  -8.89758873],
         [ -8.94152737,  -9.43132782, -11.42302322, -12.00805569, -11.48972893,
          -12.21065044, -12.50059700, -12.93048954,  -7.66620636,  -8.89758873]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04393864, -1.23138237]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.32222211e+00, -1.32222211e+00, -1.29047608e+00,  ...,
            -1.33809519e+00, -1.33809519e+00, -1.33809519e+00],
           [-1.27460313e+00, -1.27460313e+00, -1.25873005e+00,  ...,
            -1.29047608e+00, -1.29047608e+00, -1.29047608e+00],
           [-1.22698402e+00, -1.24285710e+00, -1.24285710e+00,  ...,
            -1.25873005e+00, -1.25873005e+00, -1.27460313e+00],
           ...,
           [ 9.04762819e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.69841349e-01,  1.06349289e-01,  7.46032670e-02],
           [ 7.46032670e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.06349289e-01,  7.46032670e-02, -5.23808524e-02],
           [-4.76180762e-03,  1.11112073e-02,  4.28572372e-02,  ...,
            -4.76180762e-03, -3.65078375e-02, -1.47618949e-01]],

          [[-2.41545767e-01, -2.73751885e-01, -2.41545767e-01,  ...,
            -2.89854944e-01, -2.89854944e-01, -2.89854944e-01],
           [-1.93236589e-01, -2.09339648e-01, -1.93236589e-01,  ...,
            -2.25442708e-01, -2.25442708e-01, -2.25442708e-01],
           [-1.61030471e-01, -1.93236589e-01, -1.61030471e-01,  ...,
            -2.09339648e-01, -2.09339648e-01, -2.09339648e-01],
           ...,
           [ 1.44927651e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             8.05154145e-02,  3.22062373e-02,  3.22062373e-02],
           [ 1.28824592e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             1.61031820e-02,  1.22934580e-07, -3.22059989e-02],
           [ 3.22062373e-02,  4.83092964e-02,  8.05154145e-02,  ...,
            -4.83090580e-02, -6.44121096e-02, -1.12721294e-01]],

          [[ 7.21139610e-01,  6.91154599e-01,  7.06147075e-01,  ...,
             6.76162124e-01,  6.76162124e-01,  6.76162124e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.81109631e-01,  ...,
             7.36132085e-01,  7.36132085e-01,  7.36132085e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.66117096e-01,  ...,
             7.51124620e-01,  7.36132085e-01,  7.36132085e-01],
           ...,
           [ 6.14694245e-02,  3.14844176e-02,  6.14694245e-02,  ...,
             1.64919142e-02, -1.34930937e-02,  1.49940979e-03],
           [ 4.64769229e-02,  3.14844176e-02,  6.14694245e-02,  ...,
            -2.84855980e-02, -4.34781015e-02, -7.34631121e-02],
           [-2.84855980e-02, -1.34930937e-02,  1.64919142e-02,  ...,
            -8.84556174e-02, -1.18440613e-01, -1.63418129e-01]]],


         [[[-1.32222211e+00, -1.32222211e+00, -1.29047608e+00,  ...,
            -1.33809519e+00, -1.33809519e+00, -1.33809519e+00],
           [-1.27460313e+00, -1.27460313e+00, -1.25873005e+00,  ...,
            -1.29047608e+00, -1.29047608e+00, -1.29047608e+00],
           [-1.22698402e+00, -1.24285710e+00, -1.24285710e+00,  ...,
            -1.25873005e+00, -1.25873005e+00, -1.27460313e+00],
           ...,
           [ 9.04762819e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.69841349e-01,  1.06349289e-01,  7.46032670e-02],
           [ 7.46032670e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.06349289e-01,  7.46032670e-02, -5.23808524e-02],
           [-4.76180762e-03,  1.11112073e-02,  4.28572372e-02,  ...,
            -4.76180762e-03, -3.65078375e-02, -1.47618949e-01]],

          [[-2.41545767e-01, -2.73751885e-01, -2.41545767e-01,  ...,
            -2.89854944e-01, -2.89854944e-01, -2.89854944e-01],
           [-1.93236589e-01, -2.09339648e-01, -1.93236589e-01,  ...,
            -2.25442708e-01, -2.25442708e-01, -2.25442708e-01],
           [-1.61030471e-01, -1.93236589e-01, -1.61030471e-01,  ...,
            -2.09339648e-01, -2.09339648e-01, -2.09339648e-01],
           ...,
           [ 1.44927651e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             8.05154145e-02,  3.22062373e-02,  3.22062373e-02],
           [ 1.28824592e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             1.61031820e-02,  1.22934580e-07, -3.22059989e-02],
           [ 3.22062373e-02,  4.83092964e-02,  8.05154145e-02,  ...,
            -4.83090580e-02, -6.44121096e-02, -1.12721294e-01]],

          [[ 7.21139610e-01,  6.91154599e-01,  7.06147075e-01,  ...,
             6.76162124e-01,  6.76162124e-01,  6.76162124e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.81109631e-01,  ...,
             7.36132085e-01,  7.36132085e-01,  7.36132085e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.66117096e-01,  ...,
             7.51124620e-01,  7.36132085e-01,  7.36132085e-01],
           ...,
           [ 6.14694245e-02,  3.14844176e-02,  6.14694245e-02,  ...,
             1.64919142e-02, -1.34930937e-02,  1.49940979e-03],
           [ 4.64769229e-02,  3.14844176e-02,  6.14694245e-02,  ...,
            -2.84855980e-02, -4.34781015e-02, -7.34631121e-02],
           [-2.84855980e-02, -1.34930937e-02,  1.64919142e-02,  ...,
            -8.84556174e-02, -1.18440613e-01, -1.63418129e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0709 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.31059456, -9.19869709, -6.36061764, -5.86587429, -6.10512066,
         -5.87761021, -5.44350815, -7.33536816, -9.65457726, -9.34368134]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [529]; unstable size 529; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 279, 1, 529] with unstable size 278 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 529] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 529] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [278]; unstable size 278; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 278] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 278] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.59141195,  2.18968105,  0.02786517, -0.24016404, -0.01105539,
         -0.84800029,  0.91358435,  2.79599810,  2.43839073]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.31059456, -9.19869709, -6.36061764, -5.86587429, -6.10512066,
         -5.87761021, -5.44350815, -7.33536816, -9.65457726, -9.34368134]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.31059361, -9.19869709, -6.36061716, -5.86587334, -6.10511971,
          -5.87760925, -5.44350719, -7.33536768, -9.65457630, -9.34368038],
         [-8.31059361, -9.19869709, -6.36061716, -5.86587334, -6.10511971,
          -5.87760925, -5.44350719, -7.33536768, -9.65457630, -9.34368038]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.23924637,  0.01173592, -0.42236614]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0708 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.56623745, -11.41576767, -10.07493591,  -9.61873627,  -8.49861526,
          -9.59471893, -10.02411652,  -5.97250652, -15.06334496, -10.70611000]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [380]; unstable size 380; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 380] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 380] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 380] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 170] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.77624798, 4.21952963, 3.57391548, 2.98815489, 2.16194487, 2.97055149,
         3.34188175, 7.80460072, 3.62507725]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0645 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965576,
         -7.48542309, -5.95269966, -6.55542850, -6.95760822, -7.28021479]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [718]; unstable size 718; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 226, 1, 718] with unstable size 225 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 718] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 718] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [225]; unstable size 225; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 225] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.73039508, -0.79011106,  0.57272565, -1.24159408,  0.72255576,
         -0.83794022, -0.30544683,  0.50340194,  0.65051723]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965576,
         -7.48542309, -5.95269966, -6.55542850, -6.95760822, -7.28021479]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965672,
          -7.48542261, -5.95269966, -6.55542803, -6.95760727, -7.28021431],
         [-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965672,
          -7.48542261, -5.95269966, -6.55542803, -6.95760727, -7.28021431]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.17822742, -0.57796001, -0.08491707,  0.51781130]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0738 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.97952795, -8.99672222, -2.56834173, -6.00308132, -2.85744190,
         -6.12038279, -4.47296047, -6.33899212, -7.67273140, -9.32237816]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [671]; unstable size 671; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 671] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 671] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 671] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 138] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.03369808, 5.73617172, 3.16968560, 0.11967242, 3.28296471, 1.49780846,
         3.40163088, 4.61310005, 6.06763172]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0573 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.72943306, -13.36404133, -10.46452236, -10.18775558, -10.67775059,
         -10.31442547, -10.42091751, -12.09385109, -14.04162884, -12.43282795]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [519]; unstable size 519; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 208, 1, 519] with unstable size 207 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 519] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 519] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [207]; unstable size 207; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 207] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 207] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.77904415,  2.09425759, -0.17746961, -0.14749081, -0.04247403,
         -0.25705305,  1.25096059,  2.87834287,  1.30093098]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.72943306, -13.36404133, -10.46452236, -10.18775558, -10.67775059,
         -10.31442547, -10.42091751, -12.09385109, -14.04162884, -12.43282795]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.72943401, -13.36404228, -10.46452332, -10.18775558, -10.67775154,
          -10.31442547, -10.42091846, -12.09385109, -14.04162884, -12.43282604],
         [-12.72943401, -13.36404228, -10.46452332, -10.18775558, -10.67775154,
          -10.31442547, -10.42091846, -12.09385109, -14.04162884, -12.43282604]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.15009785, -0.12666988,  0.36332607,  0.10649300]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0413 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.06531239,  -7.74203110,  -9.88070679,  -9.82949257,  -9.60023689,
          -9.98339939, -10.37213230,  -9.42480564,  -7.49855232,  -6.63923311]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [475]; unstable size 475; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 475] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 475] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 475] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 175] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.84191799, 0.84316355, 2.53841209, 2.50968981, 2.26216412, 2.65042400,
         3.05267382, 2.06743336, 0.15342283]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0340 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.73141861, -11.30915737,  -4.88030291,  -7.12666321,  -4.79732800,
          -7.23894691,  -4.88668823,  -8.34137917, -11.50362206, -11.30148792]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [430]; unstable size 430; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 430] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 430] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 430] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 147] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.51234388,  5.89082623, -0.09712332,  2.02813959,  2.13893557,
         -0.29849362,  3.28444505,  6.09165335,  5.92712975]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.73141861, -11.30915737,  -4.88030291,  -7.12666321,  -4.79732800,
          -7.23894691,  -4.88668823,  -8.34137917, -11.50362206, -11.30148792]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.57346249, -11.22899342,  -4.74797535,  -7.02396488,  -4.79112053,
           -7.14028025,  -4.77940559,  -8.43676853, -11.36150742, -11.23217297],
         [ -8.57346249, -11.22899342,  -4.74797535,  -7.02396488,  -4.79112053,
           -7.14028025,  -4.77940559,  -8.43676853, -11.36150742, -11.23217297]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04314518, -0.01171494]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0138 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0458 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.23663616,  -7.30285454, -10.59052181, -11.18651009,  -9.79314327,
         -11.32224941, -10.81732941, -10.63050747,  -8.28581619,  -8.59702969]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [473]; unstable size 473; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 473] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 473] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 473] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 188] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.20088053, 2.32582474, 2.93001938, 1.51514006, 3.04989481, 2.44549131,
         2.25616550, 0.37113976, 1.01464105]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0360 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.20327091, -13.29206181, -10.09174442, -10.56737804, -10.67555809,
         -10.55320644, -10.67248249, -11.32285500, -14.20694542, -13.81692600]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 540] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 540] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 159] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.68249488, 2.60424328, 0.24534416, 0.40565336, 0.23199639, 0.28501642,
         0.98760176, 3.62160587, 3.12635517]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0656 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.88856792, -8.49503231, -5.36369038, -4.94106483, -4.84540939,
         -4.91523314, -4.41490841, -5.03733397, -9.81567383, -8.20178318]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [406]; unstable size 406; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 406] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 406] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 406] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 177] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.21111035,  2.55126309, -0.03250933, -0.36227429, -0.47769570,
         -0.38185108, -1.15160513,  3.89880347,  2.32914209]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.88856792, -8.49503231, -5.36369038, -4.94106483, -4.84540939,
         -4.91523314, -4.41490841, -5.03733397, -9.81567383, -8.20178318]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.88856697, -8.49503231, -5.36369038, -4.94106483, -4.84540987,
          -4.91523314, -4.41490841, -5.03733492, -9.81567383, -8.20178318],
         [-8.88856697, -8.49503231, -5.36369038, -4.94106483, -4.84540987,
          -4.91523314, -4.41490841, -5.03733492, -9.81567383, -8.20178318]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.32635546, -0.09627008, -0.19192505, -0.12210178, -0.62242651]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0530 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.65746784, -6.18078041, -1.80823123, -1.86352706, -2.33689523,
         -1.93374062, -3.13896918, -1.17628169, -6.39098358, -3.11623693]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [313]; unstable size 313; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 117, 1, 313] with unstable size 116 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 313] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 313] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [116]; unstable size 116; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 116] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 116] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.51907599,  3.67257762, -0.19120371,  0.28516859, -0.12094021,
          0.99198133, -0.98088288,  3.95130277,  0.65798140]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.65746784, -6.18078041, -1.80823123, -1.86352706, -2.33689523,
         -1.93374062, -3.13896918, -1.17628169, -6.39098358, -3.11623693]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.65746784, -6.18078041, -1.80823135, -1.86352754, -2.33689499,
          -1.93374085, -3.13896894, -1.17628217, -6.39098454, -3.11623693],
         [-3.65746784, -6.18078041, -1.80823135, -1.86352754, -2.33689499,
          -1.93374085, -3.13896894, -1.17628217, -6.39098454, -3.11623693]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.05529618,  0.12550950, -0.63194919]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0588 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
         -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [462]; unstable size 462; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 180, 1, 462] with unstable size 179 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 462] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 462] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [179]; unstable size 179; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 179] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 179] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.67029381,  1.91223335,  2.76860142,  2.38123465,  2.85544062,
          2.41773987,  3.34567499, -0.93968225,  0.84438074]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
         -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
          -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.33573914]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.67142856, -1.65555561,  ..., -0.27460307,
            -0.32222211, -0.24285704],
           [-1.09999990, -0.90952379, -0.89365077,  ...,  0.02698422,
            -0.22698402, -0.35396814],
           [-0.70317459, -0.57619047, -0.73492062,  ...,  0.09047628,
            -0.08412688, -0.16349196],
           ...,
           [ 0.64603180,  0.61428577,  0.63015878,  ..., -1.86190474,
            -1.81428576, -1.52857137],
           [ 0.61428577,  0.55079371,  0.56666672,  ..., -1.70317459,
            -1.36984122, -0.87777776],
           [ 0.01111121, -0.17936498, -0.24285704,  ..., -0.98888886,
            -0.78253967, -0.62380952]],

          [[-1.64251208, -1.57809973, -1.56199670,  ..., -0.70853460,
            -0.77294683, -0.67632848],
           [-0.86956519, -0.67632848, -0.66022539,  ..., -0.59581316,
            -0.78904986, -0.83735907],
           [-0.33816412, -0.20933965, -0.35426718,  ..., -0.62801927,
            -0.74074072, -0.69243151],
           ...,
           [ 0.64412248,  0.62801939,  0.64412248,  ..., -1.77133656,
            -1.72302747, -1.44927526],
           [ 0.64412248,  0.57971025,  0.59581327,  ..., -1.64251208,
            -1.32045078, -0.80515295],
           [ 0.11272153, -0.08051517, -0.16103047,  ..., -0.95008045,
            -0.74074072, -0.59581316]],

          [[-1.28785622, -1.22788620, -1.21289361,  ..., -0.56821585,
            -0.67316341, -0.59820086],
           [-0.43328333, -0.25337315, -0.23838064,  ..., -0.47826082,
            -0.70314842, -0.76311839],
           [ 0.16641696,  0.28635699,  0.13643195,  ..., -0.56821585,
            -0.68815589, -0.62818587],
           ...,
           [ 0.61619210,  0.60119957,  0.61619210,  ..., -1.46776617,
            -1.40779614, -1.15292358],
           [ 0.66116959,  0.60119957,  0.61619210,  ..., -1.36281872,
            -1.04797614, -0.58320838],
           [ 0.24137947,  0.06146942, -0.01349309,  ..., -0.73313338,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0531 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.84198666, -4.72074509, -2.69757771, -2.34419656, -2.72111034,
         -2.42904544, -2.38987303, -3.45313597, -5.43384743, -4.25232363]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [597]; unstable size 597; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 597] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 597] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 597] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 203] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.79418409,  1.27176428, -0.11254001, -0.41002393, -0.13396978,
         -0.34127319,  0.48139566,  2.23571205,  0.95288706]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.84198666, -4.72074509, -2.69757771, -2.34419656, -2.72111034,
         -2.42904544, -2.38987303, -3.45313597, -5.43384743, -4.25232363]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.84198666, -4.72074509, -2.69757748, -2.34419608, -2.72111011,
          -2.42904544, -2.38987303, -3.45313621, -5.43384695, -4.25232363],
         [-4.84198666, -4.72074509, -2.69757748, -2.34419608, -2.72111011,
          -2.42904544, -2.38987303, -3.45313621, -5.43384695, -4.25232363]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.30770445, -0.04567695,  0.33123708,  0.03917241]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0762 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.19456577,  -8.36557293, -13.55558205, -13.23456478, -12.32262707,
         -13.37201500, -13.57000160, -12.17472267, -11.16325188,  -8.78851414]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [588]; unstable size 588; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 588] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 588] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 588] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 142] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.16457844, 4.29507446, 3.98237944, 3.06007886, 4.11273384, 4.28068399,
         2.84930611, 2.22545958, 0.24410957]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0377 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.71225262, -12.01007652,  -8.29110718,  -7.58899784,  -8.32572460,
          -7.52227640,  -8.05987549,  -8.91144371, -14.67064476, -11.80937672]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 458] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 458] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.67991829, 3.77827573, 0.47558498, 0.04749578, 0.50099051, 0.13609672,
         1.01967585, 6.51380968, 3.67172766]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0374 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.25923347,  -8.93387318, -12.07442665, -12.36280155, -11.61011887,
         -12.40742683, -12.73714542, -11.05641937,  -9.61292076, -10.40355968]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 515] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 515] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 138] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.75624776, 2.35665655, 2.62816501, 1.91056108, 2.66094518, 2.94464588,
         1.34808493, 0.20877779, 1.29339409]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0452 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-0.12398815, -7.37717056, -1.18167615, -3.64735293, -2.90664721,
         -3.76087618, -4.92453289, -5.42116880, -1.31887615, -6.85669994]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 128, 1, 515] with unstable size 127 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 515] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [127]; unstable size 127; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 127] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 127] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.24615049,  5.69084597,  2.23981619,  1.54952359,  2.35145092,
          3.44639969,  3.95842123, -0.23636460,  5.13023138]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.12398815, -7.37717056, -1.18167615, -3.64735293, -2.90664721,
         -3.76087618, -4.92453289, -5.42116880, -1.31887615, -6.85669994]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.12398925, -7.37717152, -1.18167734, -3.64735389, -2.90664840,
          -3.76087666, -4.92453480, -5.42116880, -1.31887758, -6.85670042],
         [-0.12398925, -7.37717152, -1.18167734, -3.64735389, -2.90664840,
          -3.76087666, -4.92453480, -5.42116880, -1.31887758, -6.85670042]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.05768812,  0.13720024]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]],


         [[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0633 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.27392960, -10.40883446, -10.95635605, -11.48171997, -11.53870010,
         -11.52956009, -10.56092262, -12.92515469, -12.09226036, -11.58665943]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [407]; unstable size 407; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 156, 1, 407] with unstable size 155 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 407] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 407] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [155]; unstable size 155; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 155] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 155] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.79021215, -0.15416002,  0.34587622,  0.41858816,  0.38338351,
         -0.53462267,  1.75449800,  0.91765881,  0.82849878]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.27392960, -10.40883446, -10.95635605, -11.48171997, -11.53870010,
         -11.52956009, -10.56092262, -12.92515469, -12.09226036, -11.58665943]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.27393055, -10.40883350, -10.95635605, -11.48171997, -11.53870010,
          -11.52956009, -10.56092167, -12.92515469, -12.09225941, -11.58665943],
         [-10.27393055, -10.40883350, -10.95635605, -11.48171997, -11.53870010,
          -11.52956009, -10.56092167, -12.92515469, -12.09225941, -11.58665943]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13490295,  0.54752254,  0.15208817]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]],


         [[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]],


         [[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0647 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.03281784, -8.23260021, -1.84217274, -3.97030663, -2.07109594,
         -4.04030323, -2.67588925, -4.08758450, -7.76276398, -8.17520523]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [391]; unstable size 391; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 391] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 391] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 391] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 169] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.71139121,  4.86629915, -1.22754920,  0.94557452, -1.01543307,
          1.00673783,  0.82872820,  4.49218941,  4.77490425]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.03281784, -8.23260021, -1.84217274, -3.97030663, -2.07109594,
         -4.04030323, -2.67588925, -4.08758450, -7.76276398, -8.17520523]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.03281879, -8.23260021, -1.84217358, -3.97030759, -2.07109690,
          -4.04030418, -2.67589021, -4.08758593, -7.76276398, -8.17520523],
         [-5.03281879, -8.23260021, -1.84217358, -3.97030759, -2.07109690,
          -4.04030418, -2.67589021, -4.08758593, -7.76276398, -8.17520523]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.83371663, -0.60479331]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0549 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
         -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [746]; unstable size 746; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 746] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 746] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 746] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 260] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.64249682,  4.36007500,  0.44215184, -0.09383837,  0.53698564,
          0.11810192,  1.25011325,  2.22731781,  3.35412192]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
         -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.68it/s]100%|██████████| 1/1 [00:00<00:00,  8.67it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.02882814, -6.13730335, -0.72621405, -1.43307424, -0.73920232,
          -1.52886283, -1.13457453, -2.27671862, -4.01522541, -5.08771849]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.01298827]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1180 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.183823585510254
alpha/beta optimization time: 1.231663465499878
initial alpha-crown bounds: tensor([[ 1.68035698,  4.42551994,  0.46530282, -0.08068646,  0.55969697,
          0.14187542,  1.27987540,  2.29280496,  3.41907740]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08068645745515823
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.59525728225708
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5952160358429
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5951874256134
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.59516668319702
Verifying property 3 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08068646]], device='cuda:0') need to verify.
Model prediction is: tensor([-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
        -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08068646]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 746
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 254
Node /15 input 0: size torch.Size([100]) unstable 9
-----------------
# of unstable neurons: 1009
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011205673217773438
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08068548887968063
10 lb beta sum: 0.0, worst -0.08068546652793884
Time: prepare 0.0002    bound 0.1085    transfer 0.0001    finalize 0.0002    func 0.1090    
Accumulated time: func 0.1090    prepare 0.0002    bound 0.1085    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] 
split level 1: [/input-12, 69] 
split level 2: [/input-8, 549] 
split level 3: [/input-8, 545] 
split level 4: [/input-8, 546] 
split level 5: [/input-8, 537] 
split level 6: [/input-8, 1453] 
split level 7: [/input-8, 330] 
split level 8: [/input-8, 548] 
split level 9: [/input-8, 1467] 
split level 10: [/input-8, 547] 
split level 11: [/input-8, 331] 
split level 12: [/input-8, 939] 
split level 13: [/input, 807] 
split level 14: [/input, 715] 
split level 15: [/input-8, 520] 
split level 16: [/input-8, 1470] 
split level 17: [/input-8, 329] 
split level 18: [/input-8, 1259] 
split level 19: [/input-8, 1233] 
split level 20: [/input-8, 1175] 
split level 21: [/input-8, 740] 
split level 22: [/input-8, 1197] 
split level 23: [/input-8, 990] 
split level 24: [/input-8, 900] 
split level 25: [/input-8, 1251] 
split level 26: [/input-8, 1944] 
split level 27: [/input-8, 100] 
split level 28: [/input-8, 925] 
split level 29: [/input-8, 88] 
split level 30: [/input-8, 1243] 
split level 31: [/input, 1079] 
split level 32: [/input-8, 1258] 
split level 33: [/input-8, 266] 
split level 34: [/input-8, 1461] 
split level 35: [/input-8, 1252] 
split level 36: [/input-8, 932] 
split level 37: [/input-8, 949] 
split level 38: [/input-8, 941] 
split level 39: [/input, 2385] 
split level 40: [/input-8, 931] 
split level 41: [/input-8, 1227] 
split level 42: [/input-8, 1217] 
split level 43: [/input-8, 942] 
split level 44: [/input-8, 977] 
split level 45: [/input, 1878] 
split level 46: [/input-8, 1235] 
split level 47: [/input-8, 1218] 
split level 48: [/input, 734] 
split level 49: [/input, 1061] 
split level 50: [/input-8, 2003] 
split level 51: [/input, 1129] 
split level 52: [/input, 1891] 
split level 53: [/input-8, 2004] 
split level 54: [/input, 3052] 
split level 55: [/input-8, 66] 
split level 56: [/input-8, 933] 
split level 57: [/input-8, 1250] 
split level 58: [/input, 1064] 
split level 59: [/input-8, 917] 
split level 60: [/input-8, 1265] 
split level 61: [/input-8, 1514] 
split level 62: [/input, 1892] 
split level 63: [/input, 3656] 
split level 64: [/input, 1893] 
split level 65: [/input, 2243] 
split level 66: [/input, 3620] 
split level 67: [/input, 1046] 
split level 68: [/input, 1877] 
split level 69: [/input-8, 373] 
split level 70: [/input, 1864] 
split level 71: [/input-8, 1952] 
split level 72: [/input, 2276] 
split level 73: [/input-8, 924] 
split level 74: [/input-8, 1204] 
split level 75: [/input-8, 938] 
split level 76: [/input-8, 1242] 
split level 77: [/input, 536] 
split level 78: [/input-8, 1244] 
split level 79: [/input-8, 901] 
split level 80: [/input, 1861] 
split level 81: [/input-8, 1515] 
split level 82: [/input-8, 1257] 
split level 83: [/input-8, 747] 
split level 84: [/input-8, 1006] 
split level 85: [/input, 2788] 
split level 86: [/input-8, 1953] 
split level 87: [/input-8, 367] 
split level 88: [/input, 1813] 
split level 89: [/input-8, 908] 
split level 90: [/input, 613] 
split level 91: [/input-8, 997] 
split level 92: [/input, 2524] 
split level 93: [/input-8, 731] 
split level 94: [/input-8, 989] 
split level 95: [/input, 3641] 
split level 96: [/input, 2508] 
split level 97: [/input-8, 916] 
split level 98: [/input, 650] 
split level 99: [/input, 1032] 
split level 100: [/input-8, 1960] 
split level 101: [/input, 1224] 
split level 102: [/input, 1062] 
split level 103: [/input, 1847] 
split level 104: [/input, 3607] 
split level 105: [/input, 711] 
split level 106: [/input-8, 1567] 
split level 107: [/input, 936] 
split level 108: [/input, 3162] 
split level 109: [/input, 1192] 
split level 110: [/input, 1811] 
split level 111: [/input, 577] 
split level 112: [/input-8, 1211] 
split level 113: [/input, 1846] 
split level 114: [/input, 694] 
split level 115: [/input, 1875] 
split level 116: [/input, 710] 
split level 117: [/input-8, 1241] 
split level 118: [/input, 806] 
split level 119: [/input-8, 1505] 
split level 120: [/input, 1809] 
split level 121: [/input-8, 1601] 
split level 122: [/input, 2386] 
split level 123: [/input, 2756] 
split level 124: [/input, 2363] 
split level 125: [/input-8, 1956] 
split level 126: [/input-8, 1459] 
split level 127: [/input, 1874] 
split level 128: [/input-8, 981] 
split level 129: [/input-8, 730] 
split level 130: [/input, 1125] 
split level 131: [/input, 3617] 
split level 132: [/input-8, 1330] 
split level 133: [/input, 1876] 
split level 134: [/input, 1852] 
split level 135: [/input, 958] 
split level 136: [/input-8, 1955] 
split level 137: [/input-8, 909] 
split level 138: [/input, 1222] 
split level 139: [/input, 1826] 
split level 140: [/input, 2525] 
split level 141: [/input, 1894] 
split level 142: [/input-8, 93] 
split level 143: [/input-8, 359] 
split level 144: [/input, 2613] 
split level 145: [/input, 1930] 
split level 146: [/input, 1114] 
split level 147: [/input, 1914] 
split level 148: [/input, 1860] 
split level 149: [/input, 1160] 
split level 150: [/input-8, 132] 
split level 151: [/input, 1197] 
split level 152: [/input, 1929] 
split level 153: [/input-8, 1962] 
split level 154: [/input, 794] 
split level 155: [/input, 520] 
split level 156: [/input-8, 261] 
split level 157: [/input, 1193] 
split level 158: [/input-8, 1595] 
split level 159: [/input, 789] 
split level 160: [/input, 2220] 
split level 161: [/input-8, 1333] 
split level 162: [/input, 1911] 
split level 163: [/input, 1925] 
split level 164: [/input, 1928] 
split level 165: [/input, 614] 
split level 166: [/input, 537] 
split level 167: [/input, 565] 
split level 168: [/input, 1220] 
split level 169: [/input, 1985] 
split level 170: [/input, 1096] 
split level 171: [/input, 849] 
split level 172: [/input, 2146] 
split level 173: [/input, 2025] 
split level 174: [/input, 2395] 
split level 175: [/input, 1226] 
split level 176: [/input, 1812] 
split level 177: [/input, 3674] 
split level 178: [/input, 1868] 
split level 179: [/input-8, 1583] 
split level 180: [/input, 2677] 
split level 181: [/input, 1922] 
split level 182: [/input, 1912] 
split level 183: [/input, 2614] 
split level 184: [/input, 1835] 
split level 185: [/input, 2387] 
split level 186: [/input, 1836] 
split level 187: [/input, 1969] 
split level 188: [/input, 618] 
split level 189: [/input, 1838] 
split level 190: [/input, 937] 
split level 191: [/input-8, 1596] 
split level 192: [/input, 1350] 
split level 193: [/input, 2390] 
split level 194: [/input, 646] 
split level 195: [/input, 3961] 
split level 196: [/input, 551] 
split level 197: [/input, 1819] 
split level 198: [/input-8, 104] 
split level 199: [/input, 1156] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08065470308065414
10 lb beta sum: 0.0, worst -0.08065556734800339
Time: prepare 0.0115    bound 0.1051    transfer 0.0015    finalize 0.0029    func 0.1237    
Accumulated time: func 0.2327    prepare 0.0220    bound 0.2136    transfer 0.0016    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.00261262) min lb tensor(-0.08065385)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010831594467163086 
BICCOS Cumulative time: 0.010831594467163086
Preprocessing time: 0.010067224502563477 Inference time: 7.843971252441406e-05 Add cuts time: 3.838539123535156e-05 Cut analysis time: 0.0006475448608398438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07899 (1), -0.07895 (1), -0.07890 (1), -0.07887 (1), -0.07886 (1), -0.07881 (1), -0.07878 (1), -0.07872 (1), -0.07867 (1), -0.07866 (1), -0.07860 (1), -0.07859 (1), -0.07858 (1), -0.07847 (1), -0.07842 (1), -0.07840 (1), -0.07837 (1), -0.07833 (1), -0.07826 (1), -0.07821 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5370    set_bounds 0.0093    solve 0.1238    add 0.0671    
Accumulated time: pickout 0.0004    decision 0.5370    set_bounds 0.0093    solve 0.1238    add 0.0671    
Current (lb-rhs): -0.07898632436990738
50 domains visited
Cumulative time: 0.8625998497009277

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 69] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-8, 549] [/input-8, 545] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-8, 549] [/input-12, 69] [/input-12, 69] [/input-12, 69] 
split level 2: [/input-8, 546] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 545] [/input-8, 549] [/input-8, 549] [/input-8, 549] 
split level 3: [/input-8, 1467] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07714321464300156
10 lb beta sum: 0.1686980426311493, worst -0.068376824259758
Time: prepare 0.0073    bound 0.1174    transfer 0.0010    finalize 0.0025    func 0.1307    
Accumulated time: func 0.3634    prepare 0.0295    bound 0.3310    transfer 0.0027    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.02423716) min lb tensor(-0.06821027)
Number of Verified Splits: 49 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.014560461044311523 
BICCOS Cumulative time: 0.02539205551147461
Preprocessing time: 0.011595964431762695 Inference time: 0.0016415119171142578 Add cuts time: 0.0010945796966552734 Cut analysis time: 0.00022840499877929688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02293 (2), -0.02287 (2), -0.02277 (2), -0.02274 (2), -0.02271 (2), -0.02260 (2), -0.02245 (2), -0.02235 (2), -0.02231 (2), -0.02219 (2), -0.02218 (2), -0.02218 (2), -0.02211 (2), -0.02204 (2), -0.02190 (2), -0.02183 (2), -0.02167 (2), -0.02163 (2), -0.02160 (2), -0.02158 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0200    set_bounds 0.0129    solve 0.1308    add 0.0775    
Accumulated time: pickout 0.0014    decision 0.5570    set_bounds 0.0222    solve 0.2546    add 0.1446    
Current (lb-rhs): -0.02292981743812561
100 domains visited
Cumulative time: 1.1196179389953613

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-8, 546] [/input-8, 549] [/input-8, 1467] [/input-8, 549] [/input-8, 546] [/input-8, 549] [/input-8, 546] [/input-8, 549] [/input-8, 549] [/input-8, 546] 
split level 2: [/input-8, 1467] [/input-8, 1467] [/input, 901] [/input-8, 546] [/input-8, 1467] [/input-8, 546] [/input-8, 1467] [/input-8, 1467] [/input-8, 546] [/input-8, 1467] 
split level 3: [/input-8, 949] [/input-8, 949] [/input, 917] [/input-8, 1467] [/input, 852] [/input-8, 1467] [/input-8, 949] [/input-8, 949] [/input-8, 1467] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2243196815252304, worst -0.022929638624191284
10 lb beta sum: 0.2243196815252304, worst -0.023891925811767578
Time: prepare 0.0182    bound 0.1177    transfer 0.0010    finalize 0.0043    func 0.1439    
Accumulated time: func 0.5073    prepare 0.0479    bound 0.4487    transfer 0.0037    finalize 0.0098    
all_split False
======================Cut inference begins======================
max lb tensor(0.03815809) min lb tensor(-0.02235675)
Number of Verified Splits: 53 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 1
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.015451908111572266 
BICCOS Cumulative time: 0.040843963623046875
Preprocessing time: 0.011772632598876953 Inference time: 0.002029895782470703 Add cuts time: 0.0012433528900146484 Cut analysis time: 0.00040602684020996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01395 (3), -0.01383 (3), -0.01370 (3), -0.01365 (3), -0.01361 (3), -0.01347 (3), -0.01340 (3), -0.01318 (3), -0.01315 (3), -0.01311 (3), -0.01306 (3), -0.01296 (3), -0.01272 (3), -0.01268 (3), -0.01266 (3), -0.01256 (3), -0.01251 (3), -0.01251 (3), -0.01245 (3), -0.01244 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0198    set_bounds 0.0148    solve 0.1440    add 0.0851    
Accumulated time: pickout 0.0024    decision 0.5768    set_bounds 0.0371    solve 0.3986    add 0.2297    
Current (lb-rhs): -0.013946503400802612
150 domains visited
Cumulative time: 1.4001753330230713

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-8, 549] [/input-8, 549] [/input-8, 546] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 546] [/input-8, 549] 
split level 2: [/input-8, 1467] [/input-8, 546] [/input-8, 1467] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 1467] [/input-8, 1467] [/input-8, 1467] [/input-8, 546] 
split level 3: [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 1467] [/input-8, 1467] [/input-8, 949] [/input-8, 547] [/input-8, 949] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025374025106430054
10 lb beta sum: 0.13925153017044067, worst -0.015772342681884766
Time: prepare 0.0088    bound 0.1501    transfer 0.0011    finalize 0.0024    func 0.1655    
Accumulated time: func 0.6729    prepare 0.0570    bound 0.5988    transfer 0.0048    finalize 0.0122    
all_split False
======================Cut inference begins======================
max lb tensor(0.04275960) min lb tensor(-0.01338673)
Number of Verified Splits: 58 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 1
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.0158693790435791 
BICCOS Cumulative time: 0.05671334266662598
Preprocessing time: 0.011554956436157227 Inference time: 0.0023293495178222656 Add cuts time: 0.0016546249389648438 Cut analysis time: 0.0003304481506347656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00469 (4), -0.00469 (4), -0.00468 (4), -0.00466 (4), -0.00466 (4), -0.00466 (4), -0.00465 (4), -0.00464 (4), -0.00463 (4), -0.00445 (4), -0.00444 (4), -0.00444 (4), -0.00442 (4), -0.00439 (4), -0.00438 (4), -0.00436 (4), -0.00430 (4), -0.00426 (4), -0.00424 (4), -0.00419 (4), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0201    set_bounds 0.0152    solve 0.1656    add 0.2677    
Accumulated time: pickout 0.0036    decision 0.5969    set_bounds 0.0523    solve 0.5642    add 0.4973    
Current (lb-rhs): -0.004693672060966492
200 domains visited
Cumulative time: 1.8860118389129639

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-8, 547] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 546] [/input-8, 1467] [/input-8, 549] [/input-8, 549] [/input-8, 546] [/input-8, 549] 
split level 2: [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 546] [/input-8, 547] [/input-8, 1467] [/input-8, 547] 
split level 3: [/input-8, 949] [/input-8, 949] [/input-8, 547] [/input-8, 949] [/input-8, 547] [/input-8, 949] [/input-8, 1467] [/input-8, 949] [/input-8, 547] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.22102311253547668, worst -0.00469343364238739
10 lb beta sum: 0.22092732787132263, worst -0.007435023784637451
Time: prepare 0.0177    bound 0.1509    transfer 0.0014    finalize 0.0023    func 0.1755    
Accumulated time: func 0.8484    prepare 0.0750    bound 0.7497    transfer 0.0062    finalize 0.0145    
all_split False
======================Cut inference begins======================
max lb tensor(0.04656953) min lb tensor(-0.00426888)
Number of Verified Splits: 146 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.02221369743347168 
BICCOS Cumulative time: 0.07892704010009766
Preprocessing time: 0.011570453643798828 Inference time: 0.007363796234130859 Add cuts time: 0.002682924270629883 Cut analysis time: 0.0005965232849121094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00090 (5), -0.00090 (5), -0.00090 (5), -0.00090 (5), -0.00090 (5), -0.00089 (5), -0.00086 (5), -0.00086 (5), -0.00085 (5), -0.00084 (5), -0.00079 (5), -0.00077 (5), -0.00076 (5), -0.00073 (5), -0.00073 (5), -0.00068 (5), -0.00068 (5), -0.00067 (5), -0.00066 (5), -0.00064 (5), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0205    set_bounds 0.0157    solve 0.1756    add 0.0981    
Accumulated time: pickout 0.0048    decision 0.6175    set_bounds 0.0679    solve 0.7399    add 0.5954    
Current (lb-rhs): -0.0009048134088516235
250 domains visited
Cumulative time: 2.219654083251953

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1461]), tensor([-1.]), tensor([0]), tensor([3.97426719e-37]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 549], [1.0, -1.0, -1.0], [0, 0, 0], [3.999266837849178e+18, 0.003951685037463903, 0.0017004774417728186], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1., -1.]), tensor([0, 0]), tensor([8.87142790e-11, 4.28984165e-02]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 549], [1.0, -1.0, -1.0], [0, 0, 0], [3.999266837849178e+18, 0.003951685037463903, 0.0017004774417728186], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1.,  1.]), tensor([0, 0]), tensor([8.87142790e-11, 5.50584635e-04]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 549], [1.0, -1.0, 1.0], [0, 0, 0], [3.999266837849178e+18, 0.003951685037463903, 0.005884708371013403], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1., -1.]), tensor([0, 0]), tensor([8.87142790e-11, 4.32752818e-02]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 549], [1.0, -1.0, 1.0], [0, 0, 0], [3.999266837849178e+18, 0.003951685037463903, 0.005884708371013403], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1.,  1.]), tensor([0, 0]), tensor([8.87142790e-11, 7.88585981e-04]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 546], [1.0, 1.0, -1.0], [0, 0, 0], [3.999266837849178e+18, 0.0034592316951602697, 0.002149479230865836], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1., -1.]), tensor([0, 0]), tensor([8.87142790e-11, 4.27270234e-02]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 546], [1.0, 1.0, -1.0], [0, 0, 0], [3.999266837849178e+18, 0.0034592316951602697, 0.002149479230865836], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1.,  1.]), tensor([0, 0]), tensor([8.87142790e-11, 1.00092753e-03]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 546], [1.0, 1.0, 1.0], [0, 0, 0], [3.999266837849178e+18, 0.0034592316951602697, 0.003334196051582694], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1., -1.]), tensor([0, 0]), tensor([8.87142790e-11, 4.31770086e-02]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461, 1467, 546], [1.0, 1.0, 1.0], [0, 0, 0], [3.999266837849178e+18, 0.0034592316951602697, 0.003334196051582694], [0, 2, 3]), '/input-12': (tensor([69, 61]), tensor([-1.,  1.]), tensor([0, 0]), tensor([8.87142790e-11, 1.01696118e-03]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1461], [1.0], [0], [3.999266837849178e+18], [0]), '/input-12': (tensor([69]), tensor([1.]), tensor([0]), tensor([0.01726379]), tensor([1]))}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08054869621992111
10 lb beta sum: 0.06185082346200943, worst -0.06996260583400726
Time: prepare 0.0005    bound 0.1474    transfer 0.0002    finalize 0.0002    func 0.1485    
Accumulated time: func 0.9969    prepare 0.0756    bound 0.8971    transfer 0.0064    finalize 0.0147    
After pruning, left:  6

Back to Regular BaB

BaB round 1
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-8, 546] [/input-8, 546] [/input-8, 549] [/input-8, 549] [/input-12, 61] 
split level 1: [/input-12, 69] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 547] [/input-8, 549] 
split level 2: [/input-8, 549] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 545] 
split level 3: [/input-8, 545] [/input-8, 941] [/input-8, 949] [/input-8, 941] [/input-8, 941] [/input-8, 546] 
split level 4: [/input-8, 546] [/input-8, 949] [/input-8, 941] [/input-8, 949] [/input-8, 949] [/input-8, 537] 
split level 5: [/input-8, 537] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 547] 
cut re-enabled after branching node selection
0 lb beta sum: 0.11756210029125214, worst -0.056128233671188354
10 lb beta sum: 0.1176312193274498, worst -0.055995047092437744
Time: prepare 0.0165    bound 0.1461    transfer 0.0012    finalize 0.0019    func 0.1682    
Accumulated time: func 1.1651    prepare 0.0924    bound 1.0432    transfer 0.0077    finalize 0.0165    
all_split False
======================Cut inference begins======================
max lb tensor(0.02516365) min lb tensor(-0.05594307)
Number of Verified Splits: 320 of 384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0003414154052734375 
BICCOS Cumulative time: 0.0792684555053711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05594 (6), -0.05451 (6), -0.05440 (6), -0.05394 (6), -0.05366 (6), -0.05265 (6), -0.05250 (6), -0.05240 (6), -0.05193 (6), -0.05165 (6), -0.05109 (6), -0.05082 (6), -0.05064 (6), -0.04993 (6), -0.04910 (6), -0.04882 (6), -0.04750 (6), -0.04708 (6), -0.04636 (6), -0.04598 (6), 
Length of domains: 64
Time: pickout 0.0007    decision 0.0187    set_bounds 0.0336    solve 0.1685    add 0.0015    
Accumulated time: pickout 0.0055    decision 0.6362    set_bounds 0.1015    solve 0.9083    add 0.5969    
Current (lb-rhs): -0.055943071842193604
314 domains visited
Cumulative time: 2.61411452293396

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] [/input-8, 547] [/input-8, 1467] 
split level 1: [/input-8, 1467] [/input-8, 1259] [/input-8, 1467] [/input-8, 1259] [/input-8, 1467] [/input-8, 1259] [/input-8, 1467] [/input-8, 1259] [/input-8, 1467] [/input-8, 1259] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2381022572517395, worst -0.053119659423828125
10 lb beta sum: 0.23776501417160034, worst -0.05303603410720825
Time: prepare 0.0111    bound 0.1568    transfer 0.0017    finalize 0.0015    func 0.1728    
Accumulated time: func 1.3379    prepare 0.1036    bound 1.2000    transfer 0.0094    finalize 0.0180    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00705464) min lb tensor(-0.05298677)
Number of Verified Splits: 0 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0003376007080078125 
BICCOS Cumulative time: 0.0796060562133789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05299 (8), -0.05275 (8), -0.05245 (8), -0.05220 (8), -0.05188 (8), -0.05152 (8), -0.05134 (8), -0.05112 (8), -0.05108 (8), -0.05098 (8), -0.05094 (8), -0.05058 (8), -0.05054 (8), -0.05049 (8), -0.05040 (8), -0.05030 (8), -0.05012 (8), -0.04995 (8), -0.04982 (8), -0.04976 (8), 
Length of domains: 256
Time: pickout 0.0015    decision 0.0176    set_bounds 0.0118    solve 0.1728    add 0.0029    
Accumulated time: pickout 0.0069    decision 0.6538    set_bounds 0.1133    solve 1.0812    add 0.5999    
Current (lb-rhs): -0.05298677086830139
570 domains visited
Cumulative time: 2.8213634490966797

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1259] [/input, 715] [/input-8, 1259] [/input, 715] [/input-8, 1259] [/input, 715] [/input-8, 1259] [/input, 715] [/input-8, 1259] [/input, 715] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23811233043670654, worst -0.05214351415634155
10 lb beta sum: 0.2381591498851776, worst -0.05209842324256897
Time: prepare 0.0235    bound 0.1566    transfer 0.0031    finalize 0.0027    func 0.1892    
Accumulated time: func 1.5271    prepare 0.1273    bound 1.3566    transfer 0.0125    finalize 0.0207    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00438292) min lb tensor(-0.05208838)
Number of Verified Splits: 0 of 512
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.00034499168395996094 
BICCOS Cumulative time: 0.07995104789733887
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05209 (9), -0.05185 (9), -0.05155 (9), -0.05131 (9), -0.05118 (9), -0.05104 (9), -0.05085 (9), -0.05066 (9), -0.05064 (9), -0.05049 (9), -0.05033 (9), -0.05026 (9), -0.05021 (9), -0.05010 (9), -0.05006 (9), -0.04981 (9), -0.04974 (9), -0.04972 (9), -0.04967 (9), -0.04954 (9), 
Length of domains: 512
Time: pickout 0.0031    decision 0.0252    set_bounds 0.0179    solve 0.1894    add 0.0032    
Accumulated time: pickout 0.0100    decision 0.6790    set_bounds 0.1311    solve 1.2706    add 0.6030    
Current (lb-rhs): -0.052088379859924316
1082 domains visited
Cumulative time: 3.060986042022705

BaB round 4
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 949] [/input-8, 548] [/input, 715] [/input-8, 548] [/input-8, 949] [/input-8, 548] [/input, 715] [/input-8, 548] [/input-8, 949] [/input-8, 548] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23828542232513428, worst -0.051097601652145386
10 lb beta sum: 0.2381470501422882, worst -0.05107998847961426
Time: prepare 0.0477    bound 0.1601    transfer 0.0048    finalize 0.0050    func 0.2243    
Accumulated time: func 1.7514    prepare 0.1752    bound 1.5167    transfer 0.0172    finalize 0.0257    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00075381) min lb tensor(-0.05107129)
Number of Verified Splits: 0 of 1024
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0003669261932373047 
BICCOS Cumulative time: 0.08031797409057617
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05107 (10), -0.05083 (10), -0.05053 (10), -0.05051 (10), -0.05029 (10), -0.05026 (10), -0.05016 (10), -0.05006 (10), -0.04997 (10), -0.04984 (10), -0.04972 (10), -0.04966 (10), -0.04963 (10), -0.04961 (10), -0.04952 (10), -0.04947 (10), -0.04932 (10), -0.04929 (10), -0.04928 (10), -0.04920 (10), 
Length of domains: 1024
Time: pickout 0.0084    decision 0.0389    set_bounds 0.0391    solve 0.2245    add 0.0042    
Accumulated time: pickout 0.0185    decision 0.7178    set_bounds 0.1702    solve 1.4951    add 0.6072    
Current (lb-rhs): -0.05107128620147705
2106 domains visited
Cumulative time: 3.377300500869751

BaB round 5
batch: 1024
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 941] [/input-8, 1470] [/input-8, 548] [/input-8, 1470] [/input-8, 941] [/input-8, 1470] [/input-8, 548] [/input-8, 1470] [/input-8, 941] [/input-8, 932] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23834490776062012, worst -0.05034250020980835
10 lb beta sum: 0.23832938075065613, worst -0.05031460523605347
Time: prepare 0.0964    bound 0.2245    transfer 0.0072    finalize 0.0099    func 0.3513    
Accumulated time: func 2.1027    prepare 0.2718    bound 1.7412    transfer 0.0245    finalize 0.0357    
all_split False
======================Cut inference begins======================
max lb tensor(0.00103481) min lb tensor(-0.05031124)
Number of Verified Splits: 33 of 2048
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.00040531158447265625 
BICCOS Cumulative time: 0.08072328567504883
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05031 (11), -0.05001 (11), -0.04977 (11), -0.04974 (11), -0.04948 (11), -0.04944 (11), -0.04942 (11), -0.04933 (11), -0.04920 (11), -0.04904 (11), -0.04890 (11), -0.04890 (11), -0.04888 (11), -0.04888 (11), -0.04879 (11), -0.04872 (11), -0.04856 (11), -0.04853 (11), -0.04848 (11), -0.04843 (11), 
Length of domains: 2015
Time: pickout 0.0172    decision 0.0665    set_bounds 0.0822    solve 0.3517    add 0.0079    
Accumulated time: pickout 0.0357    decision 0.7843    set_bounds 0.2524    solve 1.8468    add 0.6151    
Current (lb-rhs): -0.05031123757362366
4121 domains visited
Cumulative time: 3.9052793979644775

BaB round 6
batch: 2015
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 731] [/input-8, 330] [/input-8, 1470] [/input-8, 330] [/input-8, 731] [/input-8, 330] [/input-8, 1470] [/input-8, 330] [/input-8, 731] [/input-8, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23827475309371948, worst -0.04936990141868591
10 lb beta sum: 0.23826979100704193, worst -0.04935729503631592
Time: prepare 0.1883    bound 0.3726    transfer 0.0153    finalize 0.0221    func 0.6258    
Accumulated time: func 2.7285    prepare 0.4603    bound 2.1138    transfer 0.0398    finalize 0.0578    
all_split False
======================Cut inference begins======================
max lb tensor(0.00174725) min lb tensor(-0.04935300)
Number of Verified Splits: 196 of 4030
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0004818439483642578 
BICCOS Cumulative time: 0.08120512962341309
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04935 (12), -0.04906 (12), -0.04900 (12), -0.04881 (12), -0.04877 (12), -0.04870 (12), -0.04852 (12), -0.04848 (12), -0.04846 (12), -0.04846 (12), -0.04845 (12), -0.04833 (12), -0.04824 (12), -0.04816 (12), -0.04816 (12), -0.04808 (12), -0.04804 (12), -0.04794 (12), -0.04794 (12), -0.04791 (12), 
Length of domains: 3834
Time: pickout 0.0265    decision 0.1209    set_bounds 0.3212    solve 0.6269    add 0.0292    
Accumulated time: pickout 0.0622    decision 0.9052    set_bounds 0.5735    solve 2.4737    add 0.6443    
Current (lb-rhs): -0.04935300350189209
7955 domains visited
Cumulative time: 5.03484845161438

BaB round 7
batch: 3834
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 1453] [/input-8, 330] [/input-8, 1453] [/input-8, 1470] [/input-8, 1453] [/input-8, 330] [/input-8, 1453] [/input-8, 1470] [/input-8, 1453] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23794963955879211, worst -0.048867762088775635
10 lb beta sum: 0.237956702709198, worst -0.04886171221733093
Time: prepare 0.3669    bound 0.6428    transfer 0.0343    finalize 0.0402    func 1.1328    
Accumulated time: func 3.8613    prepare 0.8274    bound 2.7566    transfer 0.0741    finalize 0.0980    
all_split False
======================Cut inference begins======================
max lb tensor(0.00472286) min lb tensor(-0.04885709)
Number of Verified Splits: 564 of 7668
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0005872249603271484 
BICCOS Cumulative time: 0.08179235458374023
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04886 (13), -0.04856 (13), -0.04851 (13), -0.04832 (13), -0.04828 (13), -0.04821 (13), -0.04802 (13), -0.04799 (13), -0.04797 (13), -0.04797 (13), -0.04795 (13), -0.04784 (13), -0.04775 (13), -0.04767 (13), -0.04766 (13), -0.04758 (13), -0.04755 (13), -0.04745 (13), -0.04745 (13), -0.04742 (13), 
Length of domains: 7104
Time: pickout 0.0545    decision 0.2152    set_bounds 0.4907    solve 1.1346    add 0.0508    
Accumulated time: pickout 0.1168    decision 1.1204    set_bounds 1.0643    solve 3.6084    add 0.6951    
Current (lb-rhs): -0.04885709285736084
15059 domains visited
Cumulative time: 6.991154909133911

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1515] [/input-8, 932] [/input-8, 1453] [/input-8, 932] [/input-8, 932] [/input-8, 1453] [/input-8, 932] [/input-8, 1470] [/input-8, 1453] [/input-8, 1470] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23761257529258728, worst -0.04837846755981445
10 lb beta sum: 0.23761487007141113, worst -0.04837268590927124
Time: prepare 0.3972    bound 0.6781    transfer 0.0461    finalize 0.0465    func 1.2216    
Accumulated time: func 5.0829    prepare 1.2249    bound 3.4347    transfer 0.1202    finalize 0.1445    
all_split False
======================Cut inference begins======================
max lb tensor(0.00569123) min lb tensor(-0.04836935)
Number of Verified Splits: 725 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0005497932434082031 
BICCOS Cumulative time: 0.08234214782714844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04837 (14), -0.04808 (14), -0.04802 (14), -0.04783 (14), -0.04780 (14), -0.04773 (14), -0.04753 (14), -0.04750 (14), -0.04748 (14), -0.04747 (14), -0.04745 (14), -0.04735 (14), -0.04726 (14), -0.04718 (14), -0.04716 (14), -0.04708 (14), -0.04705 (14), -0.04696 (14), -0.04696 (14), -0.04692 (14), 
Length of domains: 10475
Time: pickout 0.0582    decision 0.2290    set_bounds 0.5233    solve 1.2240    add 0.0443    
Accumulated time: pickout 0.1750    decision 1.3494    set_bounds 1.5876    solve 4.8323    add 0.7394    
Current (lb-rhs): -0.04836934804916382
22526 domains visited
current_vram/total_varm: 28.2GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.084401607513428

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1453] [/input-8, 330] [/input-8, 1515] [/input-8, 932] [/input-8, 1453] [/input-8, 330] [/input-8, 1515] [/input-8, 1470] [/input-8, 1453] [/input-8, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23748181760311127, worst -0.04737752676010132
10 lb beta sum: 0.23748239874839783, worst -0.047370731830596924
Time: prepare 0.8117    bound 1.2808    transfer 0.0701    finalize 0.0925    func 2.5791    
Accumulated time: func 7.6620    prepare 2.0369    bound 4.7155    transfer 0.1904    finalize 0.2370    
all_split False
======================Cut inference begins======================
max lb tensor(0.00593841) min lb tensor(-0.04736540)
Number of Verified Splits: 897 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0006349086761474609 
BICCOS Cumulative time: 0.0829770565032959
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04802 (14), -0.04773 (14), -0.04748 (14), -0.04745 (14), -0.04737 (15), -0.04718 (14), -0.04716 (14), -0.04707 (15), -0.04707 (15), -0.04705 (14), -0.04691 (14), -0.04687 (15), -0.04682 (15), -0.04680 (15), -0.04678 (14), -0.04673 (14), -0.04662 (14), -0.04661 (15), -0.04657 (14), -0.04655 (14), 
Length of domains: 17770
Time: pickout 0.1134    decision 0.4506    set_bounds 0.9032    solve 2.5816    add 0.0687    
Accumulated time: pickout 0.2884    decision 1.8000    set_bounds 2.4908    solve 7.4140    add 0.8082    
Current (lb-rhs): -0.048016637563705444
38013 domains visited
current_vram/total_varm: 33.8GB/99.9GB, batch_size increase to 16384
Cumulative time: 13.224886894226074

BaB round 10
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1470] [/input, 1226] [/input-8, 941] [/input-8, 941] [/input, 1144] [/input-8, 941] [/input-8, 941] [/input-8, 932] [/input-8, 941] [/input-8, 1470] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23737873136997223, worst -0.04702472686767578
10 lb beta sum: 0.23737889528274536, worst -0.047019362449645996
Time: prepare 1.6058    bound 2.4818    transfer 0.1983    finalize 0.1961    func 4.6947    
Accumulated time: func 12.3567    prepare 3.6431    bound 7.1973    transfer 0.3886    finalize 0.4331    
all_split False
======================Cut inference begins======================
max lb tensor(0.00586818) min lb tensor(-0.04701501)
Number of Verified Splits: 1055 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0006396770477294922 
BICCOS Cumulative time: 0.08361673355102539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04707 (15), -0.04702 (15), -0.04687 (15), -0.04680 (16), -0.04676 (15), -0.04672 (15), -0.04661 (15), -0.04653 (15), -0.04650 (15), -0.04649 (15), -0.04647 (15), -0.04646 (16), -0.04645 (15), -0.04633 (15), -0.04630 (15), -0.04626 (16), -0.04623 (16), -0.04622 (15), -0.04621 (15), -0.04621 (15), 
Length of domains: 33099
Time: pickout 0.2335    decision 1.6491    set_bounds 1.6981    solve 5.0087    add 0.1148    
Accumulated time: pickout 0.5219    decision 3.4491    set_bounds 4.1889    solve 12.4226    add 0.9230    
Current (lb-rhs): -0.04706874489784241
69726 domains visited
current_vram/total_varm: 39.5GB/99.9GB, batch_size increase to 32768
Cumulative time: 21.970561504364014

BaB round 11
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1226] [/input-8, 939] [/input-8, 932] [/input, 1226] [/input-8, 939] [/input-8, 941] [/input, 1226] [/input-8, 939] [/input-8, 941] [/input, 1226] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23733943700790405, worst -0.04648691415786743
10 lb beta sum: 0.23733946681022644, worst -0.046475768089294434
Time: prepare 3.2594    bound 10.0917    transfer 0.6138    finalize 0.4213    func 15.2471    
Accumulated time: func 27.6038    prepare 6.9028    bound 17.2890    transfer 1.0024    finalize 0.8543    
all_split False
======================Cut inference begins======================
max lb tensor(0.00695743) min lb tensor(-0.04646719)
Number of Verified Splits: 2204 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0009481906890869141 
BICCOS Cumulative time: 0.0845649242401123
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04647 (16), -0.04645 (16), -0.04626 (16), -0.04616 (16), -0.04612 (16), -0.04597 (16), -0.04593 (16), -0.04591 (16), -0.04590 (16), -0.04588 (16), -0.04586 (16), -0.04585 (17), -0.04572 (16), -0.04569 (16), -0.04563 (16), -0.04561 (16), -0.04559 (16), -0.04558 (16), -0.04556 (16), -0.04554 (17), 
Length of domains: 63663
Time: pickout 0.4636    decision 3.3226    set_bounds 3.6314    solve 15.2573    add 0.2161    
Accumulated time: pickout 0.9856    decision 6.7717    set_bounds 7.8203    solve 27.6799    add 1.1392    
Current (lb-rhs): -0.04646718502044678
133058 domains visited
Cumulative time: 44.951881647109985

BaB round 12
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1243] [/input-8, 1243] [/input-8, 1243] [/input-8, 941] [/input-8, 520] [/input-8, 1243] [/input-8, 1243] [/input-8, 1243] [/input-8, 1243] [/input-8, 941] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23732851445674896, worst -0.045553743839263916
10 lb beta sum: 0.23732851445674896, worst -0.04552936553955078
Time: prepare 3.2832    bound 10.0951    transfer 0.6232    finalize 1.0400    func 15.4730    
Accumulated time: func 43.0768    prepare 10.1864    bound 27.3842    transfer 1.6256    finalize 1.8943    
all_split False
======================Cut inference begins======================
max lb tensor(0.00901414) min lb tensor(-0.04551336)
Number of Verified Splits: 2777 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0009706020355224609 
BICCOS Cumulative time: 0.08553552627563477
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04645 (16), -0.04616 (16), -0.04612 (16), -0.04591 (16), -0.04588 (16), -0.04586 (16), -0.04585 (17), -0.04563 (16), -0.04561 (16), -0.04558 (16), -0.04556 (16), -0.04552 (16), -0.04551 (17), -0.04549 (17), -0.04534 (16), -0.04532 (16), -0.04531 (17), -0.04530 (17), -0.04529 (17), -0.04526 (16), 
Length of domains: 93654
Time: pickout 0.4791    decision 3.3416    set_bounds 3.4848    solve 15.4832    add 0.2807    
Accumulated time: pickout 1.4647    decision 10.1133    set_bounds 11.3051    solve 43.1631    add 1.4199    
Current (lb-rhs): -0.04644817113876343
195817 domains visited
Cumulative time: 68.13217449188232

BaB round 13
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1243] [/input-8, 939] [/input-8, 1243] [/input-8, 1243] [/input-8, 941] [/input-8, 1243] [/input-8, 1243] [/input-8, 939] [/input-8, 1243] [/input-8, 1243] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23732836544513702, worst -0.0455358624458313
10 lb beta sum: 0.23732836544513702, worst -0.04552224278450012
Time: prepare 3.2883    bound 10.0891    transfer 0.6285    finalize 0.5044    func 14.9410    
Accumulated time: func 58.0178    prepare 13.4752    bound 37.4733    transfer 2.2541    finalize 2.3988    
all_split False
======================Cut inference begins======================
max lb tensor(0.00862209) min lb tensor(-0.04550976)
Number of Verified Splits: 2866 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0009963512420654297 
BICCOS Cumulative time: 0.0865318775177002
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04551 (17), -0.04551 (17), -0.04542 (18), -0.04529 (17), -0.04523 (17), -0.04519 (17), -0.04517 (17), -0.04517 (17), -0.04511 (18), -0.04505 (18), -0.04502 (17), -0.04501 (17), -0.04498 (17), -0.04497 (17), -0.04496 (17), -0.04496 (17), -0.04496 (17), -0.04488 (18), -0.04488 (17), -0.04487 (18), 
Length of domains: 123556
Time: pickout 0.4853    decision 3.4412    set_bounds 3.7066    solve 14.9531    add 0.2040    
Accumulated time: pickout 1.9499    decision 13.5544    set_bounds 15.0117    solve 58.1162    add 1.6238    
Current (lb-rhs): -0.04551336169242859
258487 domains visited
Cumulative time: 91.04471492767334

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 937] [/input, 937] [/input-8, 520] [/input, 937] [/input, 937] [/input-8, 1243] [/input, 937] [/input-8, 1243] [/input-8, 1243] [/input, 937] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23732663691043854, worst -0.04480177164077759
10 lb beta sum: 0.23732663691043854, worst -0.04479596018791199
Time: prepare 3.3581    bound 10.0925    transfer 0.6319    finalize 0.5112    func 15.0366    
Accumulated time: func 73.0545    prepare 16.8337    bound 47.5658    transfer 2.8860    finalize 2.9099    
all_split False
======================Cut inference begins======================
max lb tensor(0.01063852) min lb tensor(-0.04479286)
Number of Verified Splits: 2691 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0009369850158691406 
BICCOS Cumulative time: 0.08746886253356934
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04551 (17), -0.04551 (17), -0.04542 (18), -0.04529 (17), -0.04519 (17), -0.04517 (17), -0.04517 (17), -0.04505 (18), -0.04498 (17), -0.04497 (17), -0.04496 (17), -0.04496 (17), -0.04496 (17), -0.04488 (18), -0.04488 (17), -0.04487 (18), -0.04486 (17), -0.04479 (18), -0.04476 (17), -0.04474 (17), 
Length of domains: 153633
Time: pickout 0.5172    decision 4.0744    set_bounds 3.7965    solve 15.9446    add 0.2115    
Accumulated time: pickout 2.4671    decision 17.6288    set_bounds 18.8082    solve 74.0608    add 1.8354    
Current (lb-rhs): -0.04551336169242859
321332 domains visited
Cumulative time: 115.71445107460022

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1243] [/input-8, 1243] [/input, 3243] [/input, 1193] [/input-8, 1243] [/input-8, 933] [/input-8, 939] [/input-8, 1243] [/input, 1226] [/input-8, 1243] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23732677102088928, worst -0.04508918523788452
10 lb beta sum: 0.23732677102088928, worst -0.045075923204422
Time: prepare 3.3110    bound 10.0961    transfer 0.6470    finalize 0.5213    func 15.0091    
Accumulated time: func 88.0636    prepare 20.1451    bound 57.6618    transfer 3.5330    finalize 3.4313    
all_split False
======================Cut inference begins======================
max lb tensor(0.01042381) min lb tensor(-0.04507414)
Number of Verified Splits: 2328 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0010223388671875 
BICCOS Cumulative time: 0.08849120140075684
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04551 (17), -0.04542 (18), -0.04517 (17), -0.04517 (17), -0.04507 (18), -0.04505 (18), -0.04497 (17), -0.04496 (17), -0.04496 (17), -0.04488 (18), -0.04488 (17), -0.04487 (18), -0.04487 (18), -0.04479 (18), -0.04477 (18), -0.04466 (17), -0.04463 (17), -0.04463 (17), -0.04462 (17), -0.04461 (17), 
Length of domains: 184073
Time: pickout 0.5084    decision 3.3746    set_bounds 4.0732    solve 15.0230    add 0.2175    
Accumulated time: pickout 2.9755    decision 21.0035    set_bounds 22.8814    solve 89.0838    add 2.0529    
Current (lb-rhs): -0.04550975561141968
384540 domains visited
Cumulative time: 139.038987159729

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1243] [/input-8, 933] [/input-8, 1243] [/input-8, 520] [/input-8, 939] [/input, 2201] [/input-8, 520] [/input-8, 939] [/input-8, 1243] [/input-8, 520] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23732680082321167, worst -0.045085370540618896
10 lb beta sum: 0.23732680082321167, worst -0.045078933238983154
Time: prepare 3.3174    bound 10.0923    transfer 0.6745    finalize 1.6417    func 16.1623    
Accumulated time: func 104.2259    prepare 23.4629    bound 67.7541    transfer 4.2075    finalize 5.0729    
all_split False
======================Cut inference begins======================
max lb tensor(0.00968295) min lb tensor(-0.04507619)
Number of Verified Splits: 1973 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0009112358093261719 
BICCOS Cumulative time: 0.08940243721008301
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04517 (17), -0.04508 (18), -0.04507 (18), -0.04496 (17), -0.04489 (19), -0.04487 (18), -0.04479 (18), -0.04477 (18), -0.04473 (18), -0.04463 (17), -0.04462 (17), -0.04459 (19), -0.04458 (18), -0.04457 (18), -0.04454 (18), -0.04454 (18), -0.04453 (19), -0.04452 (18), -0.04452 (18), -0.04444 (18), 
Length of domains: 214868
Time: pickout 0.5163    decision 3.8938    set_bounds 2.9846    solve 16.1734    add 0.2296    
Accumulated time: pickout 3.4918    decision 24.8972    set_bounds 25.8661    solve 105.2573    add 2.2825    
Current (lb-rhs): -0.045169949531555176
448103 domains visited
Cumulative time: 162.97363662719727

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1226] [/input, 1193] [/input-8, 939] [/input-8, 520] [/input-8, 939] [/input-8, 939] [/input, 2201] [/input-8, 939] [/input-8, 939] [/input-8, 520] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23732654750347137, worst -0.04474562406539917
10 lb beta sum: 0.23732654750347137, worst -0.044733673334121704
Time: prepare 3.3131    bound 10.0908    transfer 0.7005    finalize 0.5346    func 15.0709    
Accumulated time: func 119.2968    prepare 26.7766    bound 77.8449    transfer 4.9080    finalize 5.6075    
all_split False
======================Cut inference begins======================
max lb tensor(0.00895564) min lb tensor(-0.04473031)
Number of Verified Splits: 1613 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0010652542114257812 
BICCOS Cumulative time: 0.09046769142150879
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04508 (18), -0.04507 (18), -0.04489 (19), -0.04487 (18), -0.04479 (18), -0.04477 (18), -0.04473 (18), -0.04473 (18), -0.04459 (19), -0.04458 (18), -0.04457 (18), -0.04454 (18), -0.04454 (18), -0.04453 (19), -0.04453 (18), -0.04452 (18), -0.04452 (18), -0.04444 (18), -0.04441 (18), -0.04435 (19), 
Length of domains: 246023
Time: pickout 0.5211    decision 3.3814    set_bounds 4.2990    solve 15.0854    add 0.2253    
Accumulated time: pickout 4.0129    decision 28.2786    set_bounds 30.1650    solve 120.3427    add 2.5078    
Current (lb-rhs): -0.045076191425323486
512026 domains visited
Cumulative time: 186.6284260749817

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1243] [/input, 1189] [/input-8, 1252] [/input, 1193] [/input-8, 520] [/input-8, 1252] [/input-8, 1252] [/input-8, 520] [/input-8, 1252] [/input-8, 1252] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23732654750347137, worst -0.04432031512260437
10 lb beta sum: 0.23732654750347137, worst -0.04431775212287903
Time: prepare 3.3676    bound 10.0944    transfer 0.6971    finalize 0.5421    func 16.5851    
Accumulated time: func 135.8820    prepare 30.1446    bound 87.9393    transfer 5.6051    finalize 6.1496    
all_split False
======================Cut inference begins======================
max lb tensor(0.00902127) min lb tensor(-0.04431403)
Number of Verified Splits: 1646 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 11.
#cuts 1-3: 1
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.0008475780487060547 
BICCOS Cumulative time: 0.09131526947021484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04508 (18), -0.04507 (18), -0.04489 (19), -0.04487 (18), -0.04477 (18), -0.04473 (18), -0.04473 (18), -0.04454 (18), -0.04454 (18), -0.04453 (19), -0.04453 (18), -0.04452 (18), -0.04452 (18), -0.04444 (18), -0.04441 (18), -0.04435 (19), -0.04434 (19), -0.04434 (18), -0.04432 (18), -0.04431 (19), 
Length of domains: 277145
Time: pickout 0.5358    decision 4.1642    set_bounds 3.0943    solve 16.5957    add 0.2279    
Accumulated time: pickout 4.5486    decision 32.4428    set_bounds 33.2593    solve 136.9384    add 2.7357    
Current (lb-rhs): -0.045076191425323486
575916 domains visited
Time out!!!!!!!!
Result: unknown in 214.5154 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.37744045, -10.80906868,  -8.33961296,  -7.23910141,  -7.87373829,
          -7.23198557,  -8.77867413,  -8.54426098,  -8.87928581, -11.17584705]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [575]; unstable size 575; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 575] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 575] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 575] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 203] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.58143544,  2.85189390,  0.84675431, -0.01254817,  0.32769120,
          1.16247332,  0.93366635,  1.05069172,  3.29250598]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.37744045, -10.80906868,  -8.33961296,  -7.23910141,  -7.87373829,
          -7.23198557,  -8.77867413,  -8.54426098,  -8.87928581, -11.17584705]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.25428486, -10.69138241,  -8.43463802,  -7.42673492,  -7.95977592,
           -7.43381834,  -8.90330410,  -8.69818687,  -8.78907394, -11.06161213]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00708342]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0065 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0506 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.58199978, -10.54873943,  -7.14900303,  -7.91397190,  -7.28075123,
          -7.99828959,  -6.68323803,  -8.80146408, -10.43879700, -10.40846443]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [399]; unstable size 399; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 399] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 399] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 399] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 148] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.51980448, 3.39100170, 0.25737613, 1.03177989, 0.39332855, 1.10958409,
         1.78996491, 3.33789563, 3.28932023]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0656 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 100, vnnlib ID: 100 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.83844137, -7.17797089, -2.05605650, -2.00732827, -2.00628233,
         -2.03319240, -2.81610751, -2.43622375, -6.60829258, -6.27670431]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [528]; unstable size 528; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 528] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 528] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 528] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 219] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.83865011,  4.03018093, -0.40402746, -0.52554810,  0.00620086,
          0.34507680, -0.21024555,  3.40293217,  3.30322194]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.83844137, -7.17797089, -2.05605650, -2.00732827, -2.00628233,
         -2.03319240, -2.81610751, -2.43622375, -6.60829258, -6.27670431]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.83844137, -7.17797089, -2.05605650, -2.00732780, -2.00628185,
          -2.03319216, -2.81610799, -2.43622375, -6.60829067, -6.27670383],
         [-4.83844137, -7.17797089, -2.05605650, -2.00732780, -2.00628185,
          -2.03319216, -2.81610799, -2.43622375, -6.60829067, -6.27670383]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04872870, -0.00104594,  0.42889595]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0405 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 101, vnnlib ID: 101 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.07705116,  -8.48606205,  -8.37792206, -10.12561226,  -8.12428093,
         -10.33940601, -10.15317154,  -9.66516113,  -4.95619965,  -7.79425383]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [671]; unstable size 671; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 129, 1, 671] with unstable size 128 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 671] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 671] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [128]; unstable size 128; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 128] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 128] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.19773501,  2.97831392,  2.78014851,  4.45424080,  2.49679518,
          4.66083670,  4.47122574,  3.93926191,  2.36555004]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.07705116,  -8.48606205,  -8.37792206, -10.12561226,  -8.12428093,
         -10.33940601, -10.15317154,  -9.66516113,  -4.95619965,  -7.79425383]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.05900955,  -8.47574997,  -8.22770882,  -9.97550106,  -7.97159195,
          -10.18599319,  -9.99292660,  -9.50112343,  -5.14422226,  -7.78701639]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.08521271]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0056 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0472 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 102, vnnlib ID: 102 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.02811790, -5.76409245,  0.56327426, -0.35700279, -0.37683630,
         -0.41983262, -1.42136240, -0.92577142, -3.90326118, -3.97468066]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [607]; unstable size 607; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 607] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 607] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 607] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 193] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.11922979,  4.51169968, -1.18529081, -0.36718988, -0.30698454,
          0.61107695,  0.20735383,  2.80999279,  2.81428123]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.02811790, -5.76409245,  0.56327426, -0.35700279, -0.37683630,
         -0.41983262, -1.42136240, -0.92577142, -3.90326118, -3.97468066]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.02811766, -5.76409245,  0.56327415, -0.35700274, -0.37683612,
          -0.41983256, -1.42136264, -0.92577130, -3.90326071, -3.97468066],
         [-2.02811766, -5.76409245,  0.56327415, -0.35700274, -0.37683612,
          -0.41983256, -1.42136264, -0.92577130, -3.90326071, -3.97468066]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.94011027, -0.01983339,  0.04299644]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0436 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 103, vnnlib ID: 103 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.43231535, -10.02100658,  -4.30439758,  -6.53697205,  -3.91013026,
          -6.62372160,  -5.03309059,  -6.37713289, -10.00526237, -10.26388931]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [627]; unstable size 627; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 151, 1, 627] with unstable size 150 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 627] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 627] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 150] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.15813851, 5.56159401, 0.26368931, 2.36857629, 2.45099640, 0.80457848,
         2.22993994, 5.61817694, 5.84348679]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0496 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 104, vnnlib ID: 104 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.93001795, -6.11589432, -2.52689791, -2.70035768, -2.83776188,
         -2.69209170, -3.78257012, -3.50543237, -5.88740206, -5.34398603]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 636] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 636] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 174] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.56663656,  2.53126097, -0.52419901, -0.01101996, -0.24716020,
          0.67172003,  0.37379932,  2.27085996,  1.89936137]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.93001795, -6.11589432, -2.52689791, -2.70035768, -2.83776188,
         -2.69209170, -3.78257012, -3.50543237, -5.88740206, -5.34398603]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.93001842, -6.11589527, -2.52689838, -2.70035863, -2.83776259,
          -2.69209194, -3.78257155, -3.50543332, -5.88740253, -5.34398603],
         [-4.93001842, -6.11589527, -2.52689838, -2.70035863, -2.83776259,
          -2.69209194, -3.78257155, -3.50543332, -5.88740253, -5.34398603]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16519356,  0.00826669,  0.14567065]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]],


         [[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]],


         [[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0758 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 105, vnnlib ID: 105 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.00338268, -10.28219223,  -7.15202951,  -7.92889309,  -7.82962704,
          -8.00282669,  -8.39284706,  -8.90988731,  -9.23245716,  -9.69780827]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [521]; unstable size 521; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 521] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 521] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 521] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 238] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.72178519,  0.36531395, -2.17974448, -1.32797289, -1.40488386,
         -1.24957263, -1.02663398, -0.66461623, -0.09302038]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.00338268, -10.28219223,  -7.15202951,  -7.92889309,  -7.82962704,
          -8.00282669,  -8.39284706,  -8.90988731,  -9.23245716,  -9.69780827]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.00338173, -10.28219318,  -7.15202951,  -7.92889309,  -7.82962799,
           -8.00282669,  -8.39284611,  -8.90988731,  -9.23245621,  -9.69780731],
         [ -8.00338173, -10.28219318,  -7.15202951,  -7.92889309,  -7.82962799,
           -8.00282669,  -8.39284611,  -8.90988731,  -9.23245621,  -9.69780731]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.90650558, -1.75785780, -0.98099422, -1.08025932, -0.90706062,
          -0.51704121,  0.32256889,  0.78792000]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         ...,


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0612 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 106, vnnlib ID: 106 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.55728149, -3.29340839, -5.60895300, -5.84854221, -5.21763039,
         -5.96553278, -5.89570904, -5.05772591, -2.31981516, -3.37378526]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 503] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 503] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 171] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30047560,  1.62997246,  1.88469410,  1.13955164,  1.99374628,
          1.89228392,  0.82793808, -1.50930858, -0.16130126]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.55728149, -3.29340839, -5.60895300, -5.84854221, -5.21763039,
         -5.96553278, -5.89570904, -5.05772591, -2.31981516, -3.37378526]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.55728054, -3.29340792, -5.60895252, -5.84854126, -5.21762943,
          -5.96553278, -5.89570808, -5.05772543, -2.31981421, -3.37378430],
         [-3.55728054, -3.29340792, -5.60895252, -5.84854126, -5.21762943,
          -5.96553278, -5.89570808, -5.05772543, -2.31981421, -3.37378430]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.26387262, -0.97359371,  0.08037639]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]],


         [[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]],


         [[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0741 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 107, vnnlib ID: 107 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.40574551, -9.71419811, -7.44596434, -8.90537739, -7.12733173,
         -9.08124161, -9.19281673, -8.36250019, -6.23399162, -9.56327915]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [557]; unstable size 557; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 190, 1, 557] with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 557] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 557] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 189] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.60151052, 1.47714329, 2.81160688, 1.12638509, 2.97082520, 2.97414303,
         2.26859903, 0.29780364, 3.46658802]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0323 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 108, vnnlib ID: 108 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.84473133, -10.54042339,  -8.17759705,  -8.29182148,  -7.74204731,
          -8.36287403,  -7.75897408,  -9.04864311, -11.14440346, -10.47354794]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 585] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 585] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 216] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.04735792,  1.40457702, -0.36931968, -0.89572740,  0.04944560,
         -0.85430789,  0.22342533,  2.20092058,  1.37345648]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.84473133, -10.54042339,  -8.17759705,  -8.29182148,  -7.74204731,
          -8.36287403,  -7.75897408,  -9.04864311, -11.14440346, -10.47354794]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.84472942, -10.54042244,  -8.17759705,  -8.29182243,  -7.74204826,
           -8.36287403,  -7.75897312,  -9.04864311, -11.14440155, -10.47354794],
         [ -9.84472942, -10.54042244,  -8.17759705,  -8.29182243,  -7.74204826,
           -8.36287403,  -7.75897312,  -9.04864311, -11.14440155, -10.47354794]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11422539, -0.54977417, -0.53284931]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0571 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 109, vnnlib ID: 109 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.50140810, -11.02397823,  -8.54122639, -10.14165115,  -9.63691139,
         -10.37123966, -10.39661026, -10.64028358,  -9.73715496, -10.65245342]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [237]; unstable size 237; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 100, 1, 237] with unstable size 99 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 237] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 237] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [99]; unstable size 99; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 99] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 99] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.88083577, 1.77790594, 3.23222136, 2.73587132, 3.45677853, 3.48044491,
         3.60492182, 2.78642988, 3.66938210]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0454 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 110, vnnlib ID: 110 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.10360909, -14.90222263, -10.64630795, -10.67387867, -10.32881927,
         -10.73543262,  -8.65091515, -12.13699913, -14.77171898, -15.26986790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 377] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 377] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 241] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.91985512, 5.48559284, 1.68281007, 1.66879570, 1.33047307, 1.72007775,
         2.92767119, 5.54262400, 5.84726381]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0503 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 111, vnnlib ID: 111 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.24005079, -9.04290104, -4.47385645, -6.15989971, -3.75543547,
         -6.18814945, -5.15722942, -4.77376652, -9.54131126, -8.83624268]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [550]; unstable size 550; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 550] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 550] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 550] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 203] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.75045252, 4.26294136, 0.44944510, 1.99260759, 2.02144289, 0.96410060,
         0.68850255, 4.72861528, 4.22467470]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0411 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 112, vnnlib ID: 112 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.06766558, -6.83603859, -6.95109749, -7.23270035, -7.89028740,
         -7.38764238, -7.01568794, -7.03979397, -5.81813335, -5.25799608]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 509] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 509] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 146] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.27733994, 1.24176240, 0.94732475, 1.20107603, 1.83796215, 1.33658981,
         1.02798796, 0.93377852, 0.00646114]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0416 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 113, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
          -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [596]; unstable size 596; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 596] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 596] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 596] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 200] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.83063054,  2.85584402,  0.91094673,  1.03836179, -0.07551450,
          0.71604693,  1.38741755,  4.26548815,  2.89728928]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
          -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
           -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05672598]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.00476182, -0.75079364,  ..., -0.68730158,
            -0.90952379, -1.62380958],
           [-0.44920623, -0.95714283, -0.67142856,  ..., -0.32222211,
            -0.65555555, -1.62380958],
           [-0.09999990, -0.92539680, -0.63968253,  ..., -0.22698402,
            -0.57619047, -1.63968253],
           ...,
           [-0.27460307, -0.29047608, -0.33809513,  ..., -0.87777776,
            -0.51269841, -0.48095238],
           [-0.30634910, -0.30634910, -0.33809513,  ..., -1.09999990,
            -0.65555555, -0.49682540],
           [-0.40158719, -0.40158719, -0.41746020,  ..., -1.29047608,
            -0.87777776, -0.62380952]],

          [[-1.62640905, -1.72302747, -1.65861523,  ..., -1.49758446,
            -1.57809973, -1.75523353],
           [-1.38486302, -1.77133656, -1.61030602,  ..., -1.35265696,
            -1.49758446, -1.75523353],
           [-1.09500802, -1.80354273, -1.62640905,  ..., -1.22383249,
            -1.40096617, -1.75523353],
           ...,
           [-1.25603855, -1.25603855, -1.28824472,  ..., -0.72463763,
            -0.43478248, -0.51529789],
           [-1.28824472, -1.25603855, -1.28824472,  ..., -0.88566822,
            -0.48309177, -0.45088565],
           [-1.33655393, -1.33655393, -1.33655393,  ..., -1.12721407,
            -0.67632848, -0.46698871]],

          [[-1.48275876, -1.52773619, -1.49775124,  ..., -1.28785622,
            -1.34782624, -1.42278874],
           [-1.15292358, -1.55772126, -1.54272878,  ..., -1.12293863,
            -1.19790113, -1.42278874],
           [-0.89805096, -1.54272878, -1.51274371,  ..., -1.06296861,
            -1.13793111, -1.43778121],
           ...,
           [-0.94302845, -0.94302845, -0.95802099,  ..., -0.61319339,
            -0.38830581, -0.52323836],
           [-0.94302845, -0.94302845, -0.94302845,  ..., -0.70314842,
            -0.34332830, -0.38830581],
           [-0.98800600, -1.00299859, -1.00299859,  ..., -0.89805096,
            -0.52323836, -0.31334329]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0356 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 114, vnnlib ID: 114 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.65542030, -10.12491035,  -9.28998947, -10.89940071,  -9.46046829,
         -11.02120876, -10.39476299, -11.24895477,  -7.53916931, -10.56444263]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 197, 1, 509] with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 509] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 196] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 196] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.85671949, 2.11677980, 3.61477709, 2.21671772, 3.72679448, 3.03720045,
         3.80708671, 0.44335425, 3.26269913]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0420 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 115, vnnlib ID: 115 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.92224836, -9.30357933, -4.86471462, -5.74703979, -3.76322746,
         -5.79184532, -4.91436577, -5.34334707, -8.45374775, -9.23935318]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 509] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 509] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 239] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.55012608, 4.69829512, 0.87078327, 1.70267856, 1.74382305, 0.83639115,
         1.21680450, 3.97037983, 4.71871233]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0629 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 116, vnnlib ID: 116 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.46497631, -11.33358383,  -8.85467815,  -7.44927025,  -9.22317123,
          -7.37944174,  -9.60250664,  -8.70856094, -10.32826042, -10.40810776]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 161, 1, 540] with unstable size 160 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 540] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [160]; unstable size 160; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 160] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.58313560, 3.18968058, 1.22978044, 0.05482835, 1.50812221, 1.89584756,
         0.94890130, 2.30877209, 2.35839391]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0434 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 117, vnnlib ID: 117 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.46045923, -4.62828922, -5.05963278, -6.18664169, -5.28851128,
         -6.36921692, -6.12083912, -6.04943180, -0.93621290, -3.70123649]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [537]; unstable size 537; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 537] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 537] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 537] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 159] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.17089832, 3.15421629, 3.54188728, 4.60494947, 3.75584602, 4.77829933,
         4.57753897, 4.42675829, 2.20462656]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0476 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 118, vnnlib ID: 118 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.41606951, -3.73614860, -5.60977221, -6.62537479, -6.33034801,
         -6.65032578, -8.53272724, -6.92770529, -4.97527218, -5.08467150]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [406]; unstable size 406; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 406] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 406] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 406] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.06374454, 1.19116235, 2.15339398, 1.93856049, 2.16962624, 4.05398321,
         2.44965172, 0.61252117, 1.12175798]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0315 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 119, vnnlib ID: 119 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.60672903, -5.77713490, -1.78710592, -1.64563823, -1.64935160,
         -1.71567798, -2.18223453, -2.02389979, -4.62978458, -4.60459995]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [778]; unstable size 778; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 219, 1, 778] with unstable size 218 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 778] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 778] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [218]; unstable size 218; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 218] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.25424409,  3.26128507, -0.22337759, -0.42366934,  0.04887801,
          0.13689744, -0.16968274,  2.10664511,  2.17941141]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.60672903, -5.77713490, -1.78710592, -1.64563823, -1.64935160,
         -1.71567798, -2.18223453, -2.02389979, -4.62978458, -4.60459995]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.61329794, -5.77425766, -1.79143727, -1.65318608, -1.64977872,
          -1.72312260, -2.18866110, -2.02094007, -4.63334703, -4.60565472],
         [-3.61329794, -5.77425766, -1.79143727, -1.65318608, -1.64977872,
          -1.72312260, -2.18866110, -2.02094007, -4.63334703, -4.60565472]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.13825119, -0.00340736,  0.36775398]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0107 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0536 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 120, vnnlib ID: 120 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -4.54532385, -11.30416203,  -4.10411549,  -4.39919186,  -6.40133953,
          -4.42965555,  -6.84690285,  -5.18702269, -10.52285004, -10.39758968]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [314]; unstable size 314; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 97, 1, 314] with unstable size 96 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 314] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 314] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [96]; unstable size 96; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 96] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 96] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 6.35177279, -0.66230345, -0.42160916,  1.53926945, -0.39580536,
          1.98930931,  0.27601612,  5.74486685,  5.50957298]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -4.54532385, -11.30416203,  -4.10411549,  -4.39919186,  -6.40133953,
          -4.42965555,  -6.84690285,  -5.18702269, -10.52285004, -10.39758968]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -4.54532337, -11.30416203,  -4.10411406,  -4.39919186,  -6.40133953,
           -4.42965508,  -6.84690189,  -5.18702173, -10.52284813, -10.39758873],
         [ -4.54532337, -11.30416203,  -4.10411406,  -4.39919186,  -6.40133953,
           -4.42965508,  -6.84690189,  -5.18702173, -10.52284813, -10.39758873]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44120932, -0.14613152, -0.11566830]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0486 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 121, vnnlib ID: 121 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.59993410, -4.38716555, -7.01152945, -7.42306519, -6.37219429,
         -7.47539234, -7.27996445, -6.98678732, -7.51602745, -5.72939539]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 503] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 503] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 201] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.36778927, 1.58436394, 2.04665756, 0.99501896, 2.08592701, 1.87148952,
         1.65961504, 2.34397459, 1.09861779]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0503 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 122, vnnlib ID: 122 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.81995726, -5.13494205, -8.06528854, -7.87783623, -8.02696037,
         -7.91830969, -8.81726456, -7.94001102, -5.16691113, -6.43881178]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [420]; unstable size 420; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 420] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 420] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 420] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 174] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08343577,  2.05495024,  1.84661818,  2.02149105,  1.87067533,
          2.72653294,  1.89364648, -0.51825690,  1.03387237]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.81995726, -5.13494205, -8.06528854, -7.87783623, -8.02696037,
         -7.91830969, -8.81726456, -7.94001102, -5.16691113, -6.43881178]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.81014204, -5.15443516, -8.05149078, -7.86225891, -8.01039028,
          -7.90261698, -8.80574799, -7.92409134, -5.15398884, -6.44848347]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00044632]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0044 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0521 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 123, vnnlib ID: 123 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
          -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [384]; unstable size 384; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 384] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 384] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 384] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 187] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.17096853,  3.39843297,  1.51453519,  2.57439923,  2.68033504,
          2.71090770,  2.60011601,  4.45497847,  4.01961613]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
          -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.95it/s]100%|██████████| 1/1 [00:00<00:00,  8.94it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.24572372, -10.14930725,  -8.09828663,  -9.24239445,  -9.37958050,
           -9.39315701,  -9.30120564, -11.22938156,  -6.21674156, -10.66067028]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02898216]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1143 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 23.990148544311523
alpha/beta optimization time: 1.2159316539764404
initial alpha-crown bounds: tensor([[-0.16154653,  3.43210268,  1.52814269,  2.59575009,  2.69813728,
          2.73191309,  2.61714029,  4.47211790,  4.07639170]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.161546528339386
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.63919496536255
Verifying property 0 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16154653]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
         -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16154653]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 384
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 185
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 574
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010228157043457031
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16154909133911133
10 lb beta sum: 0.0, worst -0.1615506410598755
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    func 0.0539    
Accumulated time: func 0.0539    prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 10] 
split level 2: [/input-12, 50] 
split level 3: [/input-8, 276] 
split level 4: [/input, 2215] 
split level 5: [/input-8, 692] 
split level 6: [/input-8, 1707] 
split level 7: [/input-8, 684] 
split level 8: [/input-8, 2004] 
split level 9: [/input-8, 2028] 
split level 10: [/input-8, 948] 
split level 11: [/input-8, 357] 
split level 12: [/input-8, 693] 
split level 13: [/input-8, 949] 
split level 14: [/input-8, 1910] 
split level 15: [/input, 2231] 
split level 16: [/input-8, 1709] 
split level 17: [/input-8, 942] 
split level 18: [/input-8, 1451] 
split level 19: [/input-8, 2011] 
split level 20: [/input-8, 1250] 
split level 21: [/input-8, 691] 
split level 22: [/input-8, 685] 
split level 23: [/input, 3765] 
split level 24: [/input-8, 1460] 
split level 25: [/input, 2168] 
split level 26: [/input-8, 1268] 
split level 27: [/input-8, 2034] 
split level 28: [/input-8, 956] 
split level 29: [/input-8, 1903] 
split level 30: [/input-8, 933] 
split level 31: [/input-8, 1683] 
split level 32: [/input-8, 2039] 
split level 33: [/input-8, 1721] 
split level 34: [/input-8, 1697] 
split level 35: [/input-8, 1956] 
split level 36: [/input-8, 947] 
split level 37: [/input, 1240] 
split level 38: [/input-8, 1909] 
split level 39: [/input-8, 2031] 
split level 40: [/input-8, 1750] 
split level 41: [/input-8, 2010] 
split level 42: [/input-8, 220] 
split level 43: [/input-8, 1482] 
split level 44: [/input-8, 2005] 
split level 45: [/input-8, 729] 
split level 46: [/input-8, 267] 
split level 47: [/input-8, 1723] 
split level 48: [/input, 2250] 
split level 49: [/input-8, 2044] 
split level 50: [/input, 1958] 
split level 51: [/input-8, 1274] 
split level 52: [/input-8, 2001] 
split level 53: [/input-8, 1944] 
split level 54: [/input-8, 1584] 
split level 55: [/input-8, 1264] 
split level 56: [/input-8, 2045] 
split level 57: [/input-8, 1099] 
split level 58: [/input-8, 2047] 
split level 59: [/input-8, 649] 
split level 60: [/input, 2205] 
split level 61: [/input, 2116] 
split level 62: [/input-8, 2037] 
split level 63: [/input-8, 2009] 
split level 64: [/input, 1162] 
split level 65: [/input, 2221] 
split level 66: [/input-8, 1595] 
split level 67: [/input-8, 2021] 
split level 68: [/input-8, 2032] 
split level 69: [/input, 2206] 
split level 70: [/input, 2670] 
split level 71: [/input-8, 1433] 
split level 72: [/input-8, 1429] 
split level 73: [/input, 2663] 
split level 74: [/input, 2739] 
split level 75: [/input, 82] 
split level 76: [/input-8, 567] 
split level 77: [/input-8, 1933] 
split level 78: [/input-8, 2030] 
split level 79: [/input-8, 1701] 
split level 80: [/input-8, 1575] 
split level 81: [/input, 2147] 
split level 82: [/input, 442] 
split level 83: [/input-8, 1840] 
split level 84: [/input, 1996] 
split level 85: [/input-8, 662] 
split level 86: [/input, 2782] 
split level 87: [/input-8, 1272] 
split level 88: [/input, 2178] 
split level 89: [/input-8, 1863] 
split level 90: [/input-8, 566] 
split level 91: [/input-8, 1217] 
split level 92: [/input-8, 1499] 
split level 93: [/input-8, 158] 
split level 94: [/input, 1271] 
split level 95: [/input-8, 737] 
split level 96: [/input, 2668] 
split level 97: [/input-8, 1248] 
split level 98: [/input-8, 1056] 
split level 99: [/input, 2012] 
split level 100: [/input, 849] 
split level 101: [/input, 2292] 
split level 102: [/input, 2100] 
split level 103: [/input, 2142] 
split level 104: [/input, 2010] 
split level 105: [/input-8, 1218] 
split level 106: [/input-8, 895] 
split level 107: [/input, 93] 
split level 108: [/input-8, 1825] 
split level 109: [/input-8, 1226] 
split level 110: [/input, 1995] 
split level 111: [/input-8, 914] 
split level 112: [/input, 671] 
split level 113: [/input, 2659] 
split level 114: [/input, 2066] 
split level 115: [/input-8, 750] 
split level 116: [/input, 2007] 
split level 117: [/input, 1106] 
split level 118: [/input-8, 1596] 
split level 119: [/input, 2077] 
split level 120: [/input-8, 908] 
split level 121: [/input, 2660] 
split level 122: [/input, 785] 
split level 123: [/input-8, 721] 
split level 124: [/input, 2027] 
split level 125: [/input, 1121] 
split level 126: [/input-8, 375] 
split level 127: [/input, 910] 
split level 128: [/input, 3602] 
split level 129: [/input, 460] 
split level 130: [/input-8, 1814] 
split level 131: [/input, 3604] 
split level 132: [/input, 2061] 
split level 133: [/input-8, 1221] 
split level 134: [/input, 818] 
split level 135: [/input, 429] 
split level 136: [/input, 1040] 
split level 137: [/input-8, 1695] 
split level 138: [/input, 2155] 
split level 139: [/input, 1805] 
split level 140: [/input, 349] 
split level 141: [/input-8, 1679] 
split level 142: [/input, 1197] 
split level 143: [/input, 2293] 
split level 144: [/input, 1104] 
split level 145: [/input, 850] 
split level 146: [/input, 1047] 
split level 147: [/input, 3596] 
split level 148: [/input, 795] 
split level 149: [/input, 959] 
split level 150: [/input, 2546] 
split level 151: [/input, 445] 
split level 152: [/input, 1122] 
split level 153: [/input, 3617] 
split level 154: [/input, 2101] 
split level 155: [/input-8, 1048] 
split level 156: [/input, 971] 
split level 157: [/input, 1221] 
split level 158: [/input, 1133] 
split level 159: [/input, 895] 
split level 160: [/input, 3449] 
split level 161: [/input, 2065] 
split level 162: [/input, 1911] 
split level 163: [/input, 2087] 
split level 164: [/input-8, 1224] 
split level 165: [/input, 829] 
split level 166: [/input-8, 744] 
split level 167: [/input, 1107] 
split level 168: [/input, 3623] 
split level 169: [/input, 2644] 
split level 170: [/input-8, 520] 
split level 171: [/input-8, 2022] 
split level 172: [/input, 140] 
split level 173: [/input, 2752] 
split level 174: [/input-8, 153] 
split level 175: [/input, 2446] 
split level 176: [/input-8, 1850] 
split level 177: [/input, 2345] 
split level 178: [/input, 22] 
split level 179: [/input, 524] 
split level 180: [/input, 418] 
split level 181: [/input, 2610] 
split level 182: [/input, 1098] 
split level 183: [/input, 2566] 
split level 184: [/input, 2722] 
split level 185: [/input-12, 4] 
split level 186: [/input, 2342] 
split level 187: [/input, 2568] 
split level 188: [/input, 2677] 
split level 189: [/input, 265] 
split level 190: [/input-8, 1895] 
split level 191: [/input, 3670] 
split level 192: [/input, 3653] 
split level 193: [/input, 2373] 
split level 194: [/input-8, 535] 
split level 195: [/input, 700] 
split level 196: [/input, 2492] 
split level 197: [/input-8, 169] 
split level 198: [/input-8, 1141] 
split level 199: [/input-8, 1830] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17033344507217407
10 lb beta sum: 0.0, worst -0.16174328327178955
Time: prepare 0.0113    bound 0.0978    transfer 0.0013    finalize 0.0025    func 0.1155    
Accumulated time: func 0.1694    prepare 0.0217    bound 0.1512    transfer 0.0014    finalize 0.0026    
all_split False
======================Cut inference begins======================
max lb tensor(0.10638392) min lb tensor(-0.16154653)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.01027822494506836 
BICCOS Cumulative time: 0.01027822494506836
Preprocessing time: 0.009901046752929688 Inference time: 0.00011038780212402344 Add cuts time: 5.364418029785156e-05 Cut analysis time: 0.00021314620971679688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15651 (1), -0.15643 (1), -0.15638 (1), -0.15638 (1), -0.15617 (1), -0.15604 (1), -0.15594 (1), -0.15589 (1), -0.15586 (1), -0.15585 (1), -0.15573 (1), -0.15557 (1), -0.15554 (1), -0.15545 (1), -0.15489 (1), -0.15487 (1), -0.15454 (1), -0.15435 (1), -0.15424 (1), -0.15422 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5202    set_bounds 0.0086    solve 0.1156    add 0.0661    
Accumulated time: pickout 0.0003    decision 0.5202    set_bounds 0.0086    solve 0.1156    add 0.0661    
Current (lb-rhs): -0.15650886297225952
50 domains visited
Cumulative time: 0.7797243595123291

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 50] [/input-12, 50] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-8, 1707] [/input-8, 1707] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 3: [/input-8, 949] [/input-8, 949] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.152931809425354
10 lb beta sum: 0.3087865114212036, worst -0.1470421552658081
Time: prepare 0.0075    bound 0.1184    transfer 0.0010    finalize 0.0025    func 0.1320    
Accumulated time: func 0.3014    prepare 0.0295    bound 0.2696    transfer 0.0024    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.36702734) min lb tensor(-0.14703906)
Number of Verified Splits: 100 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.017008304595947266 
BICCOS Cumulative time: 0.027286529541015625
Preprocessing time: 0.011579275131225586 Inference time: 0.0036230087280273438 Add cuts time: 0.0015475749969482422 Cut analysis time: 0.00025844573974609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04406 (2), -0.04393 (2), -0.04384 (2), -0.04350 (2), -0.04342 (2), -0.04333 (2), -0.04308 (2), -0.04288 (2), -0.04285 (2), -0.04210 (2), -0.04192 (2), -0.04173 (2), -0.04118 (2), -0.04071 (2), -0.04071 (2), -0.04059 (2), -0.04037 (2), -0.04031 (2), -0.04021 (2), -0.03989 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0258    set_bounds 0.0118    solve 0.1321    add 0.0819    
Accumulated time: pickout 0.0013    decision 0.5459    set_bounds 0.0205    solve 0.2477    add 0.1480    
Current (lb-rhs): -0.044062286615371704
100 domains visited
Cumulative time: 1.0495929718017578

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 2: [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] [/input-8, 1707] 
split level 3: [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.059455037117004395
10 lb beta sum: 0.4094133675098419, worst -0.04377472400665283
Time: prepare 0.0081    bound 0.1350    transfer 0.0011    finalize 0.0023    func 0.1496    
Accumulated time: func 0.4510    prepare 0.0379    bound 0.4046    transfer 0.0035    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.13700777) min lb tensor(-0.04373933)
Number of Verified Splits: 104 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.018277406692504883 
BICCOS Cumulative time: 0.04556393623352051
Preprocessing time: 0.011473655700683594 Inference time: 0.0038595199584960938 Add cuts time: 0.002637147903442383 Cut analysis time: 0.0003070831298828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02035 (3), -0.02028 (3), -0.02012 (3), -0.02001 (3), -0.02001 (3), -0.01981 (3), -0.01966 (3), -0.01963 (3), -0.01919 (3), -0.01913 (3), -0.01892 (3), -0.01834 (3), -0.01788 (3), -0.01785 (3), -0.01776 (3), -0.01757 (3), -0.01757 (3), -0.01707 (3), -0.01657 (3), -0.01557 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0151    solve 0.1496    add 0.0847    
Accumulated time: pickout 0.0023    decision 0.5655    set_bounds 0.0356    solve 0.3973    add 0.2327    
Current (lb-rhs): -0.02034822106361389
150 domains visited
Cumulative time: 1.3381292819976807

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 2: [/input-8, 1707] [/input-8, 949] [/input-8, 1707] [/input-8, 949] [/input-8, 684] [/input-8, 684] [/input-8, 1707] [/input-8, 949] [/input-8, 1707] [/input-8, 1707] 
split level 3: [/input-8, 949] [/input-8, 2010] [/input-8, 2010] [/input-8, 2010] [/input-8, 949] [/input-8, 949] [/input-8, 2010] [/input-8, 2010] [/input-8, 693] [/input-8, 693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03720498085021973
10 lb beta sum: 0.5184258818626404, worst -0.02421635389328003
Time: prepare 0.0081    bound 0.1345    transfer 0.0011    finalize 0.0023    func 0.1486    
Accumulated time: func 0.5995    prepare 0.0462    bound 0.5391    transfer 0.0046    finalize 0.0097    
all_split False
======================Cut inference begins======================
max lb tensor(0.25417352) min lb tensor(-0.01967838)
Number of Verified Splits: 138 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 7
#cuts 4-6: 12
#cuts >= 20: 0
BICCOS time: 0.02254462242126465 
BICCOS Cumulative time: 0.06810855865478516
Preprocessing time: 0.011982202529907227 Inference time: 0.006509304046630859 Add cuts time: 0.0033414363861083984 Cut analysis time: 0.0007116794586181641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00635 (4), -0.00634 (4), -0.00634 (4), -0.00605 (4), -0.00605 (4), -0.00590 (4), -0.00584 (4), -0.00580 (4), -0.00580 (4), -0.00579 (4), -0.00579 (4), -0.00579 (4), -0.00579 (4), -0.00578 (4), -0.00540 (4), -0.00536 (4), -0.00533 (4), -0.00530 (4), -0.00527 (4), -0.00517 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0191    set_bounds 0.0156    solve 0.1486    add 0.2117    
Accumulated time: pickout 0.0034    decision 0.5846    set_bounds 0.0512    solve 0.5459    add 0.4444    
Current (lb-rhs): -0.006347969174385071
200 domains visited
Cumulative time: 1.757124900817871

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 2: [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 1707] [/input-8, 2010] [/input-8, 2010] [/input-8, 1707] [/input-8, 1707] [/input-8, 949] 
split level 3: [/input-8, 691] [/input-8, 691] [/input-8, 691] [/input-8, 691] [/input-8, 691] [/input-8, 693] [/input-8, 693] [/input-8, 693] [/input-8, 691] [/input-8, 691] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02368125319480896
10 lb beta sum: 0.922455906867981, worst -0.22400331497192383
Time: prepare 0.0079    bound 0.1528    transfer 0.0012    finalize 0.0021    func 0.1665    
Accumulated time: func 0.7660    prepare 0.0543    bound 0.6919    transfer 0.0057    finalize 0.0118    
all_split False
======================Cut inference begins======================
max lb tensor(0.33300853) min lb tensor(-0.00537071)
Number of Verified Splits: 227 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0301511287689209 
BICCOS Cumulative time: 0.09825968742370605
Preprocessing time: 0.011535167694091797 Inference time: 0.011093378067016602 Add cuts time: 0.006706953048706055 Cut analysis time: 0.0008156299591064453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00537 (5), -0.00537 (5), -0.00532 (5), -0.00532 (5), -0.00527 (5), -0.00526 (5), -0.00525 (5), -0.00525 (5), -0.00376 (5), -0.00357 (5), -0.00342 (5), -0.00342 (5), -0.00341 (5), -0.00340 (5), -0.00337 (5), -0.00337 (5), -0.00337 (5), -0.00336 (5), -0.00336 (5), -0.00336 (5), 
Length of domains: 48
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0158    solve 0.1666    add 0.1008    
Accumulated time: pickout 0.0044    decision 0.6042    set_bounds 0.0670    solve 0.7125    add 0.5452    
Current (lb-rhs): -0.00537070631980896
248 domains visited
Cumulative time: 2.0912582874298096

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([684]), tensor([-1.]), tensor([0]), tensor([3.97426002e-37]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [3.9742600173665805e-37, 0.007698969449847937], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.40129846e-45, 4.77169594e-03, 5.46527952e-02]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [3.9742600173665805e-37, 0.007698969449847937], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.40129846e-45, 4.77169594e-03, 2.96998187e-03]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [3.9742600173665805e-37, 0.007698969449847937], [0, 2]), '/input-12': (tensor([10, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.40129846e-45, 1.35267541e-01]), tensor([1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949, 2010], [1.0, 1.0, -1.0], [0, 0, 0], [3.9742600173665805e-37, 0.00417389115318656, 0.012444185093045235], [0, 2, 3]), '/input-12': (tensor([10, 33]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.40129846e-45, 9.99288401e-04]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949, 2010], [1.0, 1.0, -1.0], [0, 0, 0], [3.9742600173665805e-37, 0.00417389115318656, 0.012444185093045235], [0, 2, 3]), '/input-12': (tensor([10, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.40129846e-45, 1.29127964e-01]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 684,  949, 2010]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([3.97426002e-37, 4.17389115e-03, 7.22038886e-03]), tensor([0, 2, 3])), '/input-12': ([10], [-1.0], [0], [1.401298464324817e-45], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [3.9742600173665805e-37, 0.005346627440303564], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([3.97431741e-37, 5.02871117e-03, 4.38337177e-02]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [3.9742600173665805e-37, 0.005346627440303564], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([3.97431741e-37, 5.02871117e-03, 3.58741148e-03]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, -1.0], [0, 0], [3.9742600173665805e-37, 0.005346627440303564], [0, 2]), '/input-12': (tensor([10, 33]), tensor([1., 1.]), tensor([0, 0]), tensor([3.97431741e-37, 1.27938315e-01]), tensor([1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, 1.0], [0, 0], [3.9742600173665805e-37, 0.004415513481944799], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([3.97431741e-37, 4.90717730e-03, 4.42868024e-02]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, 1.0], [0, 0], [3.9742600173665805e-37, 0.004415513481944799], [0, 2]), '/input-12': (tensor([10, 33, 50]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([3.97431741e-37, 4.90717730e-03, 3.49314674e-03]), tensor([1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([684, 949], [1.0, 1.0], [0, 0], [3.9742600173665805e-37, 0.004415513481944799], [0, 2]), '/input-12': (tensor([10, 33]), tensor([1., 1.]), tensor([0, 0]), tensor([3.97431741e-37, 1.27922729e-01]), tensor([1, 3]))}
Shallow branching resets to n domains:  13
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16058200597763062
10 lb beta sum: 0.3597009479999542, worst -0.1459677815437317
Time: prepare 0.0005    bound 0.1298    transfer 0.0001    finalize 0.0002    func 0.1308    
Accumulated time: func 0.8968    prepare 0.0549    bound 0.8217    transfer 0.0059    finalize 0.0120    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-8, 276] [/input-12, 50] [/input-12, 33] 
split level 1: [/input-12, 10] [/input-8, 1451] [/input-8, 1707] [/input-12, 50] 
split level 2: [/input-12, 50] [/input-8, 2011] [/input-8, 1451] [/input-8, 1707] 
split level 3: [/input-8, 1707] [/input-8, 2010] [/input-8, 2011] [/input-8, 1451] 
split level 4: [/input-8, 693] [/input-8, 693] [/input-8, 693] [/input-8, 2011] 
split level 5: [/input-8, 949] [/input-8, 685] [/input-8, 685] [/input-8, 693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8669050931930542, worst -0.04323458671569824
10 lb beta sum: 0.8834460973739624, worst -0.04754781723022461
Time: prepare 0.0110    bound 0.1303    transfer 0.0009    finalize 0.0012    func 0.1452    
Accumulated time: func 1.0420    prepare 0.0663    bound 0.9520    transfer 0.0068    finalize 0.0132    
all_split False
======================Cut inference begins======================
max lb tensor(0.67584229) min lb tensor(-0.04197562)
Number of Verified Splits: 238 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.00031495094299316406 
BICCOS Cumulative time: 0.09857463836669922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04198 (6), -0.04053 (6), -0.04007 (6), -0.03863 (6), -0.03848 (6), -0.03710 (6), -0.03698 (6), -0.03623 (6), -0.03594 (6), -0.03591 (6), -0.03500 (6), -0.03487 (6), -0.03258 (6), -0.03112 (6), -0.03070 (6), -0.02947 (6), -0.00302 (6), -0.00082 (6), 
Length of domains: 18
Time: pickout 0.0006    decision 0.0178    set_bounds 0.0245    solve 0.1453    add 0.0008    
Accumulated time: pickout 0.0050    decision 0.6219    set_bounds 0.0915    solve 0.8578    add 0.5460    
Current (lb-rhs): -0.04197561740875244
266 domains visited
Cumulative time: 2.4392731189727783

BaB round 2
batch: 18
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] 
split level 1: [/input-8, 2011] [/input-8, 691] [/input-8, 2011] [/input-8, 685] [/input-8, 2011] [/input-8, 691] [/input-8, 685] [/input-8, 2011] [/input-8, 1909] [/input-8, 2011] 
split level 2: [/input-8, 2010] [/input-8, 685] [/input-8, 2010] [/input-8, 1909] [/input-8, 2010] [/input-8, 1909] [/input-8, 1482] [/input-8, 2010] [/input-8, 691] [/input-8, 2010] 
split level 3: [/input-8, 685] [/input-8, 1909] [/input-8, 685] [/input-8, 691] [/input-8, 685] [/input-8, 685] [/input-8, 691] [/input-8, 685] [/input-8, 685] [/input-8, 685] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9149868488311768, worst -0.03490293025970459
10 lb beta sum: 0.9150875210762024, worst -0.034504055976867676
Time: prepare 0.0123    bound 0.1307    transfer 0.0009    finalize 0.0014    func 0.1472    
Accumulated time: func 1.1892    prepare 0.0787    bound 1.0827    transfer 0.0077    finalize 0.0146    
all_split False
======================Cut inference begins======================
max lb tensor(0.02074954) min lb tensor(-0.03425276)
Number of Verified Splits: 145 of 288
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0003123283386230469 
BICCOS Cumulative time: 0.09888696670532227
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03425 (10), -0.03301 (10), -0.03279 (10), -0.03265 (10), -0.03152 (10), -0.03121 (10), -0.03107 (10), -0.03073 (10), -0.02974 (10), -0.02951 (10), -0.02923 (10), -0.02915 (10), -0.02865 (10), -0.02805 (10), -0.02796 (10), -0.02793 (10), -0.02742 (10), -0.02738 (10), -0.02729 (10), -0.02714 (10), 
Length of domains: 143
Time: pickout 0.0010    decision 0.0169    set_bounds 0.0163    solve 0.1473    add 0.0026    
Accumulated time: pickout 0.0060    decision 0.6388    set_bounds 0.1078    solve 1.0050    add 0.5486    
Current (lb-rhs): -0.03425276279449463
409 domains visited
Cumulative time: 2.624145030975342

BaB round 3
batch: 143
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1451] [/input-8, 1910] [/input-8, 1451] [/input-8, 1910] [/input-8, 948] [/input-8, 1910] [/input-8, 948] [/input-8, 1910] [/input-8, 948] [/input-8, 948] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8736811280250549, worst -0.03230714797973633
10 lb beta sum: 0.8736811280250549, worst -0.03204154968261719
Time: prepare 0.0123    bound 0.1364    transfer 0.0008    finalize 0.0013    func 0.1526    
Accumulated time: func 1.3418    prepare 0.0912    bound 1.2191    transfer 0.0085    finalize 0.0159    
all_split False
======================Cut inference begins======================
max lb tensor(0.00705671) min lb tensor(-0.03188443)
Number of Verified Splits: 21 of 286
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0003178119659423828 
BICCOS Cumulative time: 0.09920477867126465
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03188 (11), -0.03078 (11), -0.03066 (11), -0.03028 (11), -0.02956 (11), -0.02902 (11), -0.02862 (11), -0.02839 (11), -0.02752 (11), -0.02715 (11), -0.02712 (11), -0.02686 (11), -0.02663 (11), -0.02626 (11), -0.02610 (11), -0.02593 (11), -0.02580 (11), -0.02555 (11), -0.02554 (11), -0.02514 (11), 
Length of domains: 265
Time: pickout 0.0021    decision 0.0185    set_bounds 0.0115    solve 0.1527    add 0.0015    
Accumulated time: pickout 0.0081    decision 0.6573    set_bounds 0.1193    solve 1.1577    add 0.5500    
Current (lb-rhs): -0.03188443183898926
674 domains visited
Cumulative time: 2.8110084533691406

BaB round 4
batch: 265
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 948] [/input-8, 357] [/input-8, 948] [/input-8, 357] [/input-8, 1451] [/input-8, 357] [/input-8, 1451] [/input-8, 357] [/input-8, 1451] [/input-8, 357] 
cut re-enabled after branching node selection
0 lb beta sum: 0.879875659942627, worst -0.02982616424560547
10 lb beta sum: 0.879875659942627, worst -0.029659032821655273
Time: prepare 0.0227    bound 0.1387    transfer 0.0026    finalize 0.0020    func 0.1694    
Accumulated time: func 1.5112    prepare 0.1141    bound 1.3578    transfer 0.0111    finalize 0.0179    
all_split False
======================Cut inference begins======================
max lb tensor(0.00690973) min lb tensor(-0.02955770)
Number of Verified Splits: 75 of 530
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0003495216369628906 
BICCOS Cumulative time: 0.09955430030822754
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02956 (12), -0.02854 (12), -0.02829 (12), -0.02796 (12), -0.02728 (12), -0.02671 (12), -0.02646 (12), -0.02611 (12), -0.02531 (12), -0.02525 (12), -0.02498 (12), -0.02480 (12), -0.02460 (12), -0.02449 (12), -0.02439 (12), -0.02417 (12), -0.02393 (12), -0.02375 (12), -0.02366 (12), -0.02365 (12), 
Length of domains: 455
Time: pickout 0.0032    decision 0.0241    set_bounds 0.0219    solve 0.1702    add 0.0024    
Accumulated time: pickout 0.0112    decision 0.6813    set_bounds 0.1411    solve 1.3279    add 0.5525    
Current (lb-rhs): -0.02955770492553711
1129 domains visited
Cumulative time: 3.033806562423706

BaB round 5
batch: 455
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1482] [/input-8, 948] [/input-8, 1482] [/input-8, 948] [/input-8, 1482] [/input-8, 948] [/input-8, 1482] [/input-8, 948] [/input-8, 1268] [/input-8, 1910] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8881651163101196, worst -0.02728891372680664
10 lb beta sum: 0.8881651163101196, worst -0.027193546295166016
Time: prepare 0.0388    bound 0.1409    transfer 0.0043    finalize 0.0041    func 0.1940    
Accumulated time: func 1.7053    prepare 0.1531    bound 1.4987    transfer 0.0154    finalize 0.0220    
all_split False
======================Cut inference begins======================
max lb tensor(0.00467339) min lb tensor(-0.02714574)
Number of Verified Splits: 144 of 910
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0003514289855957031 
BICCOS Cumulative time: 0.09990572929382324
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02715 (13), -0.02613 (13), -0.02589 (13), -0.02567 (13), -0.02554 (13), -0.02486 (13), -0.02466 (13), -0.02442 (13), -0.02436 (13), -0.02429 (13), -0.02407 (13), -0.02406 (13), -0.02339 (13), -0.02334 (13), -0.02293 (13), -0.02283 (13), -0.02271 (13), -0.02259 (13), -0.02258 (13), -0.02239 (13), 
Length of domains: 766
Time: pickout 0.0068    decision 0.0350    set_bounds 0.0365    solve 0.1942    add 0.0030    
Accumulated time: pickout 0.0180    decision 0.7164    set_bounds 0.1776    solve 1.5221    add 0.5555    
Current (lb-rhs): -0.027145743370056152
1895 domains visited
Cumulative time: 3.310950517654419

BaB round 6
batch: 766
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 942] [/input-8, 692] [/input-8, 942] [/input-8, 692] [/input-8, 942] [/input-8, 692] [/input-8, 942] [/input-8, 692] [/input-8, 942] [/input-8, 692] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8842352628707886, worst -0.02558279037475586
10 lb beta sum: 0.8842352628707886, worst -0.025490522384643555
Time: prepare 0.0654    bound 0.1538    transfer 0.0051    finalize 0.0059    func 0.2407    
Accumulated time: func 1.9460    prepare 0.2187    bound 1.6525    transfer 0.0205    finalize 0.0280    
all_split False
======================Cut inference begins======================
max lb tensor(0.01522881) min lb tensor(-0.02544773)
Number of Verified Splits: 517 of 1532
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.00037407875061035156 
BICCOS Cumulative time: 0.1002798080444336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02545 (14), -0.02419 (14), -0.02417 (14), -0.02398 (14), -0.02396 (14), -0.02291 (14), -0.02275 (14), -0.02270 (14), -0.02269 (14), -0.02267 (14), -0.02249 (14), -0.02239 (14), -0.02237 (14), -0.02203 (14), -0.02162 (14), -0.02159 (14), -0.02142 (14), -0.02126 (14), -0.02124 (14), -0.02114 (14), 
Length of domains: 1015
Time: pickout 0.0087    decision 0.0513    set_bounds 0.0608    solve 0.2410    add 0.0042    
Accumulated time: pickout 0.0267    decision 0.7676    set_bounds 0.2384    solve 1.7631    add 0.5597    
Current (lb-rhs): -0.025447726249694824
2910 domains visited
Cumulative time: 3.6802971363067627

BaB round 7
batch: 1015
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 1268] [/input-8, 942] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8607673048973083, worst -0.023499250411987305
10 lb beta sum: 0.8607673048973083, worst -0.023474693298339844
Time: prepare 0.0861    bound 0.1705    transfer 0.0087    finalize 0.0084    func 0.2869    
Accumulated time: func 2.2329    prepare 0.3050    bound 1.8229    transfer 0.0291    finalize 0.0363    
all_split False
======================Cut inference begins======================
max lb tensor(0.00387198) min lb tensor(-0.02346492)
Number of Verified Splits: 409 of 2030
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.00040531158447265625 
BICCOS Cumulative time: 0.10068511962890625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02346 (15), -0.02237 (15), -0.02207 (15), -0.02202 (15), -0.02197 (15), -0.02165 (15), -0.02145 (15), -0.02099 (15), -0.02088 (15), -0.02086 (15), -0.02063 (15), -0.02060 (15), -0.02058 (15), -0.02053 (15), -0.02039 (15), -0.02035 (15), -0.02021 (15), -0.02017 (15), -0.02006 (15), -0.01990 (15), 
Length of domains: 1621
Time: pickout 0.0158    decision 0.0660    set_bounds 0.2119    solve 0.2879    add 0.0057    
Accumulated time: pickout 0.0425    decision 0.8336    set_bounds 0.4503    solve 2.0510    add 0.5654    
Current (lb-rhs): -0.02346491813659668
4531 domains visited
Cumulative time: 4.27184271812439

BaB round 8
batch: 1621
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8593676686286926, worst -0.02186751365661621
10 lb beta sum: 0.8593676686286926, worst -0.021867871284484863
Time: prepare 0.1421    bound 0.2385    transfer 0.0146    finalize 0.0155    func 0.4325    
Accumulated time: func 2.6654    prepare 0.4474    bound 2.0614    transfer 0.0438    finalize 0.0518    
all_split False
======================Cut inference begins======================
max lb tensor(0.00381812) min lb tensor(-0.02186561)
Number of Verified Splits: 848 of 3242
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0004363059997558594 
BICCOS Cumulative time: 0.10112142562866211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02187 (16), -0.02077 (16), -0.02048 (16), -0.02042 (16), -0.02036 (16), -0.02005 (16), -0.01964 (16), -0.01940 (16), -0.01926 (16), -0.01926 (16), -0.01906 (16), -0.01900 (16), -0.01897 (16), -0.01891 (16), -0.01868 (16), -0.01861 (16), -0.01854 (16), -0.01854 (16), -0.01844 (16), -0.01831 (16), 
Length of domains: 2394
Time: pickout 0.0208    decision 0.0970    set_bounds 0.1278    solve 0.4332    add 0.0083    
Accumulated time: pickout 0.0633    decision 0.9306    set_bounds 0.5781    solve 2.4843    add 0.5736    
Current (lb-rhs): -0.0218656063079834
6925 domains visited
Cumulative time: 4.966402769088745

BaB round 9
batch: 2394
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2011] [/input-8, 2011] [/input-8, 2011] [/input-8, 2011] [/input, 2250] [/input-8, 2011] [/input, 1240] [/input, 2250] [/input-8, 2011] [/input, 2250] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8595766425132751, worst -0.019307971000671387
10 lb beta sum: 0.8595766425132751, worst -0.019307255744934082
Time: prepare 0.2148    bound 0.3202    transfer 0.0167    finalize 0.0235    func 0.6066    
Accumulated time: func 3.2720    prepare 0.6625    bound 2.3816    transfer 0.0605    finalize 0.0754    
all_split False
======================Cut inference begins======================
max lb tensor(0.00380987) min lb tensor(-0.01930308)
Number of Verified Splits: 1317 of 4788
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.000518798828125 
BICCOS Cumulative time: 0.10164022445678711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01930 (17), -0.01913 (17), -0.01868 (17), -0.01820 (17), -0.01806 (17), -0.01794 (17), -0.01792 (17), -0.01786 (17), -0.01779 (17), -0.01767 (17), -0.01764 (17), -0.01763 (17), -0.01761 (17), -0.01748 (17), -0.01724 (17), -0.01717 (17), -0.01710 (17), -0.01706 (17), -0.01698 (17), -0.01688 (17), 
Length of domains: 3471
Time: pickout 0.0310    decision 0.1381    set_bounds 0.3460    solve 0.6082    add 0.0230    
Accumulated time: pickout 0.0943    decision 1.0687    set_bounds 0.9241    solve 3.0925    add 0.5967    
Current (lb-rhs): -0.019303083419799805
10396 domains visited
Cumulative time: 6.12474513053894

BaB round 10
batch: 3471
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2011] [/input-8, 2034] [/input-8, 2011] [/input-8, 2034] [/input-8, 2011] [/input-8, 2011] [/input-8, 2004] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8624131083488464, worst -0.01873636245727539
10 lb beta sum: 0.8624131083488464, worst -0.018732309341430664
Time: prepare 0.3168    bound 0.4302    transfer 0.0311    finalize 0.0389    func 0.8632    
Accumulated time: func 4.1352    prepare 0.9796    bound 2.8118    transfer 0.0916    finalize 0.1143    
all_split False
======================Cut inference begins======================
max lb tensor(0.00983769) min lb tensor(-0.01873136)
Number of Verified Splits: 2641 of 6942
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0004782676696777344 
BICCOS Cumulative time: 0.10211849212646484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01873 (18), -0.01811 (18), -0.01810 (18), -0.01763 (18), -0.01729 (18), -0.01722 (18), -0.01719 (18), -0.01706 (18), -0.01705 (18), -0.01703 (18), -0.01689 (18), -0.01665 (18), -0.01665 (18), -0.01661 (18), -0.01661 (18), -0.01641 (18), -0.01636 (18), -0.01618 (18), -0.01612 (18), -0.01594 (18), 
Length of domains: 4301
Time: pickout 0.0590    decision 0.1946    set_bounds 0.4504    solve 0.8645    add 0.0240    
Accumulated time: pickout 0.1533    decision 1.2633    set_bounds 1.3746    solve 3.9570    add 0.6207    
Current (lb-rhs): -0.018731355667114258
14697 domains visited
Cumulative time: 7.740225315093994

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 947] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input, 1240] [/input-8, 2034] [/input, 1240] [/input-8, 2034] [/input-8, 947] [/input-8, 2034] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8774380087852478, worst -0.017714262008666992
10 lb beta sum: 0.8774380087852478, worst -0.01770925521850586
Time: prepare 0.3784    bound 0.4955    transfer 0.0459    finalize 0.0467    func 1.0200    
Accumulated time: func 5.1552    prepare 1.3583    bound 3.3073    transfer 0.1375    finalize 0.1610    
all_split False
======================Cut inference begins======================
max lb tensor(0.00366932) min lb tensor(-0.01770389)
Number of Verified Splits: 2959 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0006031990051269531 
BICCOS Cumulative time: 0.1027216911315918
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01770 (19), -0.01707 (19), -0.01661 (19), -0.01661 (19), -0.01626 (19), -0.01620 (19), -0.01604 (19), -0.01603 (19), -0.01600 (19), -0.01563 (19), -0.01558 (19), -0.01555 (19), -0.01538 (19), -0.01530 (19), -0.01521 (19), -0.01520 (19), -0.01511 (19), -0.01510 (19), -0.01508 (19), -0.01503 (19), 
Length of domains: 5438
Time: pickout 0.0559    decision 0.2265    set_bounds 0.4952    solve 1.0217    add 0.0316    
Accumulated time: pickout 0.2092    decision 1.4898    set_bounds 1.8698    solve 4.9786    add 0.6523    
Current (lb-rhs): -0.017703890800476074
19930 domains visited
current_vram/total_varm: 26.4GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.598178625106812

BaB round 12
batch: 5438
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 729] [/input-8, 729] [/input-8, 2034] [/input-8, 729] [/input-8, 2034] [/input-8, 2034] [/input, 2250] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8782322406768799, worst -0.016213417053222656
10 lb beta sum: 0.8782322406768799, worst -0.016202926635742188
Time: prepare 0.5114    bound 0.6324    transfer 0.0493    finalize 0.0588    func 1.5419    
Accumulated time: func 6.6971    prepare 1.8700    bound 3.9397    transfer 0.1867    finalize 0.2197    
all_split False
======================Cut inference begins======================
max lb tensor(0.00939512) min lb tensor(-0.01619732)
Number of Verified Splits: 4370 of 10876
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0007948875427246094 
BICCOS Cumulative time: 0.1035165786743164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01620 (20), -0.01578 (20), -0.01545 (20), -0.01519 (20), -0.01510 (20), -0.01504 (20), -0.01501 (20), -0.01492 (20), -0.01490 (20), -0.01470 (20), -0.01469 (20), -0.01457 (20), -0.01452 (20), -0.01439 (20), -0.01429 (20), -0.01428 (20), -0.01428 (20), -0.01423 (20), -0.01413 (20), -0.01409 (20), 
Length of domains: 6506
Time: pickout 0.1041    decision 0.3070    set_bounds 0.6246    solve 1.5441    add 0.0475    
Accumulated time: pickout 0.3133    decision 1.7968    set_bounds 2.4944    solve 6.5227    add 0.6997    
Current (lb-rhs): -0.0161973237991333
26436 domains visited
Cumulative time: 12.26287055015564

BaB round 13
batch: 6506
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 947] [/input, 1996] [/input, 1996] [/input-8, 947] [/input, 1996] [/input-8, 947] [/input-8, 947] [/input-8, 1709] [/input-8, 1709] [/input-8, 947] 
cut re-enabled after branching node selection
0 lb beta sum: 0.883030891418457, worst -0.015189051628112793
10 lb beta sum: 0.883030891418457, worst -0.015194296836853027
Time: prepare 0.6141    bound 0.7419    transfer 0.0577    finalize 0.0723    func 1.5711    
Accumulated time: func 8.2681    prepare 2.4845    bound 4.6816    transfer 0.2444    finalize 0.2920    
all_split False
======================Cut inference begins======================
max lb tensor(0.01335832) min lb tensor(-0.01518869)
Number of Verified Splits: 5457 of 13012
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0006229877471923828 
BICCOS Cumulative time: 0.10413956642150879
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01519 (21), -0.01488 (21), -0.01458 (21), -0.01439 (21), -0.01431 (21), -0.01409 (21), -0.01407 (21), -0.01388 (21), -0.01376 (21), -0.01369 (21), -0.01361 (21), -0.01351 (21), -0.01347 (21), -0.01345 (21), -0.01342 (21), -0.01336 (21), -0.01335 (21), -0.01324 (21), -0.01314 (21), -0.01309 (21), 
Length of domains: 7555
Time: pickout 0.1012    decision 0.3617    set_bounds 0.7534    solve 1.5742    add 0.0389    
Accumulated time: pickout 0.4145    decision 2.1585    set_bounds 3.2478    solve 8.0969    add 0.7386    
Current (lb-rhs): -0.01518869400024414
33991 domains visited
Cumulative time: 15.137513875961304

BaB round 14
batch: 7555
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 947] [/input-8, 947] [/input, 1996] [/input-8, 947] [/input-8, 1709] [/input-8, 1709] [/input-8, 956] [/input-8, 956] [/input-8, 1709] [/input-8, 1709] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8842806220054626, worst -0.014285147190093994
10 lb beta sum: 0.8842806220054626, worst -0.014259934425354004
Time: prepare 0.7254    bound 0.8482    transfer 0.0873    finalize 0.0911    func 1.8506    
Accumulated time: func 10.1187    prepare 3.2102    bound 5.5298    transfer 0.3317    finalize 0.3831    
all_split False
======================Cut inference begins======================
max lb tensor(0.01315403) min lb tensor(-0.01425254)
Number of Verified Splits: 7265 of 15110
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0007011890411376953 
BICCOS Cumulative time: 0.10484075546264648
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01425 (22), -0.01403 (22), -0.01344 (22), -0.01329 (22), -0.01326 (22), -0.01313 (22), -0.01295 (22), -0.01293 (22), -0.01277 (22), -0.01272 (22), -0.01272 (22), -0.01253 (22), -0.01251 (22), -0.01242 (22), -0.01235 (22), -0.01232 (22), -0.01223 (22), -0.01221 (22), -0.01219 (22), -0.01218 (22), 
Length of domains: 7845
Time: pickout 0.1531    decision 0.6125    set_bounds 0.8822    solve 1.8542    add 0.0356    
Accumulated time: pickout 0.5675    decision 2.7710    set_bounds 4.1299    solve 9.9511    add 0.7742    
Current (lb-rhs): -0.014252543449401855
41836 domains visited
Cumulative time: 18.73344087600708

BaB round 15
batch: 7845
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1709] [/input-8, 1709] [/input-8, 1709] [/input-8, 1709] [/input-8, 956] [/input-8, 956] [/input-8, 1451] [/input, 1996] [/input-8, 956] [/input-8, 956] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8881796002388, worst -0.013988643884658813
10 lb beta sum: 0.8881796002388, worst -0.013804823160171509
Time: prepare 0.7556    bound 0.8783    transfer 0.0688    finalize 0.3270    func 2.1312    
Accumulated time: func 12.2499    prepare 3.9661    bound 6.4081    transfer 0.4005    finalize 0.7101    
all_split False
======================Cut inference begins======================
max lb tensor(0.01092523) min lb tensor(-0.01377082)
Number of Verified Splits: 7910 of 15690
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0007619857788085938 
BICCOS Cumulative time: 0.10560274124145508
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01377 (23), -0.01286 (23), -0.01265 (23), -0.01261 (23), -0.01259 (23), -0.01227 (23), -0.01219 (23), -0.01218 (23), -0.01203 (23), -0.01193 (23), -0.01179 (23), -0.01177 (23), -0.01170 (23), -0.01169 (23), -0.01169 (23), -0.01163 (23), -0.01150 (23), -0.01149 (23), -0.01137 (23), -0.01128 (23), 
Length of domains: 7780
Time: pickout 0.1639    decision 0.6370    set_bounds 0.6955    solve 2.1348    add 0.0298    
Accumulated time: pickout 0.7315    decision 3.4079    set_bounds 4.8255    solve 12.0859    add 0.8040    
Current (lb-rhs): -0.013770818710327148
49616 domains visited
Cumulative time: 22.46083354949951

BaB round 16
batch: 7780
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 956] [/input-8, 956] [/input-8, 2044] [/input-8, 2044] [/input-8, 1451] [/input-8, 1723] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8914101719856262, worst -0.013162612915039062
10 lb beta sum: 0.8914101719856262, worst -0.013165473937988281
Time: prepare 0.7514    bound 0.8710    transfer 0.0675    finalize 0.3008    func 2.0961    
Accumulated time: func 14.3460    prepare 4.7179    bound 7.2792    transfer 0.4680    finalize 1.0109    
all_split False
======================Cut inference begins======================
max lb tensor(0.01055861) min lb tensor(-0.01316226)
Number of Verified Splits: 7291 of 15560
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0007109642028808594 
BICCOS Cumulative time: 0.10631370544433594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01316 (24), -0.01243 (24), -0.01208 (24), -0.01201 (24), -0.01168 (24), -0.01160 (24), -0.01158 (24), -0.01150 (24), -0.01142 (24), -0.01134 (24), -0.01133 (24), -0.01112 (24), -0.01108 (24), -0.01104 (24), -0.01096 (24), -0.01093 (24), -0.01089 (24), -0.01080 (24), -0.01069 (24), -0.01066 (24), 
Length of domains: 8269
Time: pickout 0.1596    decision 0.6320    set_bounds 0.6938    solve 2.1002    add 0.0275    
Accumulated time: pickout 0.8911    decision 4.0399    set_bounds 5.5193    solve 14.1860    add 0.8315    
Current (lb-rhs): -0.01316225528717041
57885 domains visited
Cumulative time: 26.13676905632019

BaB round 17
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1451] [/input-8, 1451] [/input-8, 956] [/input-8, 956] [/input-8, 1723] [/input, 1996] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8911393880844116, worst -0.012344986200332642
10 lb beta sum: 0.8911393880844116, worst -0.012346506118774414
Time: prepare 0.7986    bound 0.9127    transfer 0.0711    finalize 0.3143    func 2.2028    
Accumulated time: func 16.5488    prepare 5.5168    bound 8.1919    transfer 0.5390    finalize 1.3252    
all_split False
======================Cut inference begins======================
max lb tensor(0.00810817) min lb tensor(-0.01234302)
Number of Verified Splits: 8942 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0006537437438964844 
BICCOS Cumulative time: 0.10696744918823242
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01234 (25), -0.01161 (25), -0.01126 (25), -0.01119 (25), -0.01087 (25), -0.01077 (25), -0.01068 (25), -0.01058 (25), -0.01057 (25), -0.01053 (25), -0.01042 (25), -0.01034 (25), -0.01030 (25), -0.01027 (25), -0.01017 (25), -0.01012 (25), -0.01003 (25), -0.00985 (25), -0.00985 (25), -0.00984 (25), 
Length of domains: 7519
Time: pickout 0.1395    decision 0.4544    set_bounds 0.9304    solve 2.2065    add 0.0432    
Accumulated time: pickout 1.0305    decision 4.4943    set_bounds 6.4497    solve 16.3925    add 0.8747    
Current (lb-rhs): -0.012343019247055054
65327 domains visited
current_vram/total_varm: 26.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 29.986233472824097

BaB round 18
batch: 7519
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1451] [/input-8, 1460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9017635583877563, worst -0.011358290910720825
10 lb beta sum: 0.9017635583877563, worst -0.011364161968231201
Time: prepare 0.7391    bound 0.8432    transfer 0.0664    finalize 0.0903    func 1.8386    
Accumulated time: func 18.3874    prepare 6.2562    bound 9.0350    transfer 0.6055    finalize 1.4156    
all_split False
======================Cut inference begins======================
max lb tensor(0.00616562) min lb tensor(-0.01135829)
Number of Verified Splits: 7927 of 15038
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0006177425384521484 
BICCOS Cumulative time: 0.10758519172668457
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01136 (26), -0.01062 (26), -0.01036 (26), -0.01021 (26), -0.00988 (26), -0.00978 (26), -0.00969 (26), -0.00968 (26), -0.00963 (26), -0.00960 (26), -0.00960 (26), -0.00960 (26), -0.00953 (26), -0.00932 (26), -0.00928 (26), -0.00925 (26), -0.00922 (26), -0.00894 (26), -0.00888 (26), -0.00887 (26), 
Length of domains: 7111
Time: pickout 0.1285    decision 0.4184    set_bounds 0.8675    solve 1.8429    add 0.0395    
Accumulated time: pickout 1.1590    decision 4.9127    set_bounds 7.3172    solve 18.2354    add 0.9142    
Current (lb-rhs): -0.011358290910720825
72438 domains visited
Cumulative time: 33.351572036743164

BaB round 19
batch: 7111
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1240] [/input, 1240] [/input, 1240] [/input-8, 956] [/input-8, 956] [/input-8, 956] [/input, 1240] [/input, 1240] [/input, 1240] [/input, 1240] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9052552580833435, worst -0.010655999183654785
10 lb beta sum: 0.9052552580833435, worst -0.010662257671356201
Time: prepare 0.6987    bound 0.8020    transfer 0.0744    finalize 0.0828    func 1.7544    
Accumulated time: func 20.1418    prepare 6.9552    bound 9.8371    transfer 0.6798    finalize 1.4984    
all_split False
======================Cut inference begins======================
max lb tensor(0.01020896) min lb tensor(-0.01065600)
Number of Verified Splits: 7629 of 14222
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0006079673767089844 
BICCOS Cumulative time: 0.10819315910339355
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01066 (27), -0.00992 (27), -0.00953 (27), -0.00951 (27), -0.00918 (27), -0.00905 (27), -0.00895 (27), -0.00890 (27), -0.00890 (27), -0.00886 (27), -0.00879 (27), -0.00868 (27), -0.00861 (27), -0.00858 (27), -0.00858 (27), -0.00842 (27), -0.00839 (27), -0.00831 (27), -0.00823 (27), -0.00816 (27), 
Length of domains: 6593
Time: pickout 0.1555    decision 0.5803    set_bounds 0.8524    solve 1.7584    add 0.0276    
Accumulated time: pickout 1.3145    decision 5.4930    set_bounds 8.1696    solve 19.9937    add 0.9418    
Current (lb-rhs): -0.010655999183654785
79031 domains visited
Cumulative time: 36.792449712753296

BaB round 20
batch: 6593
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1451] [/input-8, 1451] [/input, 1240] [/input, 1240] [/input-8, 1584] [/input, 1240] [/input, 1240] [/input, 1240] [/input, 2168] [/input-8, 2044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9123523235321045, worst -0.00982511043548584
10 lb beta sum: 0.9123523235321045, worst -0.009830832481384277
Time: prepare 0.6532    bound 0.7499    transfer 0.0573    finalize 0.3062    func 1.8535    
Accumulated time: func 21.9953    prepare 7.6087    bound 10.5870    transfer 0.7371    finalize 1.8046    
all_split False
======================Cut inference begins======================
max lb tensor(0.00681865) min lb tensor(-0.00982511)
Number of Verified Splits: 7143 of 13186
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0005953311920166016 
BICCOS Cumulative time: 0.10878849029541016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00983 (28), -0.00949 (28), -0.00909 (28), -0.00891 (28), -0.00876 (28), -0.00867 (28), -0.00837 (28), -0.00835 (28), -0.00835 (28), -0.00822 (28), -0.00820 (28), -0.00811 (28), -0.00807 (28), -0.00804 (28), -0.00801 (28), -0.00799 (28), -0.00786 (28), -0.00778 (28), -0.00775 (28), -0.00774 (28), 
Length of domains: 6043
Time: pickout 0.1200    decision 0.5562    set_bounds 0.5911    solve 1.8571    add 0.0228    
Accumulated time: pickout 1.4345    decision 6.0492    set_bounds 8.7607    solve 21.8508    add 0.9645    
Current (lb-rhs): -0.00982511043548584
85074 domains visited
Cumulative time: 40.00086808204651

BaB round 21
batch: 6043
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1723] [/input-8, 2045] [/input-8, 1099] [/input-8, 1099] [/input-8, 2045] [/input-8, 2045] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 2045] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9145891666412354, worst -0.0097866952419281
10 lb beta sum: 0.9145891666412354, worst -0.009792149066925049
Time: prepare 0.6014    bound 0.6938    transfer 0.0895    finalize 0.0776    func 1.5481    
Accumulated time: func 23.5434    prepare 8.2104    bound 11.2807    transfer 0.8267    finalize 1.8822    
all_split False
======================Cut inference begins======================
max lb tensor(0.00530839) min lb tensor(-0.00978670)
Number of Verified Splits: 6678 of 12086
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0008392333984375 
BICCOS Cumulative time: 0.10962772369384766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00979 (29), -0.00905 (29), -0.00864 (29), -0.00831 (29), -0.00825 (29), -0.00818 (29), -0.00816 (29), -0.00807 (29), -0.00803 (29), -0.00800 (29), -0.00783 (29), -0.00782 (29), -0.00774 (29), -0.00770 (29), -0.00767 (29), -0.00747 (29), -0.00744 (29), -0.00734 (29), -0.00729 (29), -0.00726 (29), 
Length of domains: 5408
Time: pickout 0.1345    decision 0.3375    set_bounds 0.7563    solve 1.5512    add 0.0258    
Accumulated time: pickout 1.5690    decision 6.3868    set_bounds 9.5170    solve 23.4020    add 0.9903    
Current (lb-rhs): -0.0097866952419281
90482 domains visited
Cumulative time: 42.86854863166809

BaB round 22
batch: 5408
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1584] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 2045] [/input-8, 1099] [/input-8, 1099] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9176449775695801, worst -0.0085182785987854
10 lb beta sum: 0.9176449775695801, worst -0.0085238516330719
Time: prepare 0.5408    bound 0.6285    transfer 0.0499    finalize 0.0638    func 1.3553    
Accumulated time: func 24.8987    prepare 8.7516    bound 11.9093    transfer 0.8765    finalize 1.9460    
all_split False
======================Cut inference begins======================
max lb tensor(0.00434554) min lb tensor(-0.00851828)
Number of Verified Splits: 6131 of 10816
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0006549358367919922 
BICCOS Cumulative time: 0.11028265953063965
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00852 (30), -0.00816 (30), -0.00775 (30), -0.00752 (30), -0.00739 (30), -0.00738 (30), -0.00712 (30), -0.00706 (30), -0.00697 (30), -0.00695 (30), -0.00693 (30), -0.00691 (30), -0.00681 (30), -0.00676 (30), -0.00674 (30), -0.00671 (30), -0.00663 (30), -0.00660 (30), -0.00657 (30), -0.00647 (30), 
Length of domains: 4685
Time: pickout 0.1072    decision 0.3047    set_bounds 0.6786    solve 1.3590    add 0.0196    
Accumulated time: pickout 1.6762    decision 6.6914    set_bounds 10.1956    solve 24.7610    add 1.0100    
Current (lb-rhs): -0.0085182785987854
95167 domains visited
Cumulative time: 45.392204999923706

BaB round 23
batch: 4685
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2045] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9170020818710327, worst -0.007809460163116455
10 lb beta sum: 0.9170020818710327, worst -0.007804155349731445
Time: prepare 0.4685    bound 0.5543    transfer 0.0421    finalize 0.0549    func 1.1811    
Accumulated time: func 26.0798    prepare 9.2204    bound 12.4636    transfer 0.9187    finalize 2.0009    
all_split False
======================Cut inference begins======================
max lb tensor(0.00359905) min lb tensor(-0.00779402)
Number of Verified Splits: 5482 of 9370
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0005550384521484375 
BICCOS Cumulative time: 0.11083769798278809
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00779 (31), -0.00744 (31), -0.00702 (31), -0.00674 (31), -0.00666 (31), -0.00666 (31), -0.00634 (31), -0.00626 (31), -0.00622 (31), -0.00619 (31), -0.00618 (31), -0.00609 (31), -0.00609 (31), -0.00604 (31), -0.00599 (31), -0.00596 (31), -0.00590 (31), -0.00588 (31), -0.00585 (31), -0.00585 (31), 
Length of domains: 3888
Time: pickout 0.0924    decision 0.4323    set_bounds 0.4249    solve 1.1843    add 0.0189    
Accumulated time: pickout 1.7686    decision 7.1238    set_bounds 10.6205    solve 25.9453    add 1.0288    
Current (lb-rhs): -0.007794022560119629
99055 domains visited
Cumulative time: 47.59055995941162

BaB round 24
batch: 3888
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1825] [/input-8, 1825] [/input, 3765] [/input-8, 1825] [/input, 1240] [/input-8, 1825] [/input, 1240] [/input, 1240] [/input-8, 1825] [/input-8, 1825] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9119012951850891, worst -0.0070757269859313965
10 lb beta sum: 0.9119012951850891, worst -0.007033824920654297
Time: prepare 0.3887    bound 0.4728    transfer 0.0493    finalize 0.0449    func 1.0072    
Accumulated time: func 27.0870    prepare 9.6093    bound 12.9364    transfer 0.9679    finalize 2.0458    
all_split False
======================Cut inference begins======================
max lb tensor(0.00443292) min lb tensor(-0.00702918)
Number of Verified Splits: 4436 of 7776
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0005395412445068359 
BICCOS Cumulative time: 0.11137723922729492
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00703 (32), -0.00641 (32), -0.00625 (32), -0.00607 (32), -0.00604 (32), -0.00589 (32), -0.00586 (32), -0.00562 (32), -0.00557 (32), -0.00557 (32), -0.00545 (32), -0.00539 (32), -0.00536 (32), -0.00532 (32), -0.00531 (32), -0.00530 (32), -0.00528 (32), -0.00528 (32), -0.00526 (32), -0.00521 (32), 
Length of domains: 3340
Time: pickout 0.0890    decision 0.3733    set_bounds 0.3491    solve 1.0102    add 0.0142    
Accumulated time: pickout 1.8577    decision 7.4971    set_bounds 10.9696    solve 26.9556    add 1.0430    
Current (lb-rhs): -0.007029175758361816
102395 domains visited
Cumulative time: 49.463945150375366

BaB round 25
batch: 3340
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1240] [/input-8, 1825] [/input-8, 1825] [/input, 3765] [/input-8, 2045] [/input, 3765] [/input, 3765] [/input-8, 1825] [/input, 3765] [/input, 3765] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9066945314407349, worst -0.00680425763130188
10 lb beta sum: 0.9066945314407349, worst -0.006806492805480957
Time: prepare 0.3360    bound 0.4176    transfer 0.0160    finalize 0.0368    func 0.8506    
Accumulated time: func 27.9376    prepare 9.9456    bound 13.3540    transfer 0.9840    finalize 2.0826    
all_split False
======================Cut inference begins======================
max lb tensor(0.00444424) min lb tensor(-0.00680158)
Number of Verified Splits: 3982 of 6680
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0005900859832763672 
BICCOS Cumulative time: 0.11196732521057129
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00680 (33), -0.00618 (33), -0.00603 (33), -0.00583 (33), -0.00566 (33), -0.00564 (33), -0.00544 (33), -0.00540 (33), -0.00534 (33), -0.00534 (33), -0.00522 (33), -0.00506 (33), -0.00504 (33), -0.00498 (33), -0.00491 (33), -0.00489 (33), -0.00475 (33), -0.00472 (33), -0.00470 (33), -0.00465 (33), 
Length of domains: 2698
Time: pickout 0.0654    decision 0.3443    set_bounds 0.2993    solve 0.8529    add 0.0479    
Accumulated time: pickout 1.9230    decision 7.8413    set_bounds 11.2689    solve 27.8084    add 1.0908    
Current (lb-rhs): -0.006801575422286987
105093 domains visited
Cumulative time: 51.11108946800232

BaB round 26
batch: 2698
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1750] [/input-8, 1825] [/input-8, 1825] [/input-8, 567] [/input-8, 567] [/input-8, 567] [/input-8, 567] [/input, 1240] [/input, 1240] [/input-8, 1750] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9034562706947327, worst -0.006098687648773193
10 lb beta sum: 0.9034562706947327, worst -0.006100475788116455
Time: prepare 0.2760    bound 0.3516    transfer 0.0125    finalize 0.0309    func 0.7063    
Accumulated time: func 28.6439    prepare 10.2218    bound 13.7056    transfer 0.9965    finalize 2.1135    
all_split False
======================Cut inference begins======================
max lb tensor(0.00411031) min lb tensor(-0.00609642)
Number of Verified Splits: 3361 of 5396
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0004975795745849609 
BICCOS Cumulative time: 0.11246490478515625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00610 (34), -0.00542 (34), -0.00531 (34), -0.00512 (34), -0.00496 (34), -0.00488 (34), -0.00487 (34), -0.00485 (34), -0.00464 (34), -0.00464 (34), -0.00464 (34), -0.00462 (34), -0.00452 (34), -0.00446 (34), -0.00441 (34), -0.00434 (34), -0.00429 (34), -0.00427 (34), -0.00418 (34), -0.00415 (34), 
Length of domains: 2035
Time: pickout 0.0640    decision 0.1571    set_bounds 0.3886    solve 0.7082    add 0.0066    
Accumulated time: pickout 1.9871    decision 7.9984    set_bounds 11.6575    solve 28.5166    add 1.0974    
Current (lb-rhs): -0.0060964226722717285
107128 domains visited
Cumulative time: 52.46192002296448

BaB round 27
batch: 2035
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1825] [/input, 2663] [/input-8, 1750] [/input, 2250] [/input, 2250] [/input-8, 1750] [/input-8, 1750] [/input-8, 1750] [/input-8, 1750] [/input-8, 567] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8936370611190796, worst -0.00553467869758606
10 lb beta sum: 0.8936370611190796, worst -0.005540609359741211
Time: prepare 0.2014    bound 0.2784    transfer 0.0091    finalize 0.0236    func 0.5396    
Accumulated time: func 29.1835    prepare 10.4234    bound 13.9840    transfer 1.0056    finalize 2.1371    
all_split False
======================Cut inference begins======================
max lb tensor(0.00438988) min lb tensor(-0.00553417)
Number of Verified Splits: 2737 of 4070
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0004489421844482422 
BICCOS Cumulative time: 0.11291384696960449
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00553 (35), -0.00485 (35), -0.00475 (35), -0.00455 (35), -0.00440 (35), -0.00431 (35), -0.00428 (35), -0.00426 (35), -0.00408 (35), -0.00407 (35), -0.00407 (35), -0.00406 (35), -0.00395 (35), -0.00390 (35), -0.00382 (35), -0.00378 (35), -0.00375 (35), -0.00371 (35), -0.00362 (35), -0.00355 (35), 
Length of domains: 1333
Time: pickout 0.0418    decision 0.1176    set_bounds 0.1792    solve 0.5412    add 0.0115    
Accumulated time: pickout 2.0289    decision 8.1160    set_bounds 11.8368    solve 29.0578    add 1.1089    
Current (lb-rhs): -0.005534172058105469
108461 domains visited
Cumulative time: 53.373048067092896

BaB round 28
batch: 1333
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1958] [/input, 1958] [/input-8, 1825] [/input, 1958] [/input, 1958] [/input, 1958] [/input, 1240] [/input, 3765] [/input-8, 1750] [/input, 2663] 
cut re-enabled after branching node selection
0 lb beta sum: 0.886528730392456, worst -0.004928410053253174
10 lb beta sum: 0.886528730392456, worst -0.004930585622787476
Time: prepare 0.1298    bound 0.2104    transfer 0.0137    finalize 0.0152    func 0.3864    
Accumulated time: func 29.5699    prepare 10.5535    bound 14.1944    transfer 1.0193    finalize 2.1523    
all_split False
======================Cut inference begins======================
max lb tensor(0.00799632) min lb tensor(-0.00492734)
Number of Verified Splits: 1833 of 2666
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.00045108795166015625 
BICCOS Cumulative time: 0.11336493492126465
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00493 (36), -0.00424 (36), -0.00414 (36), -0.00395 (36), -0.00379 (36), -0.00371 (36), -0.00369 (36), -0.00367 (36), -0.00347 (36), -0.00347 (36), -0.00347 (36), -0.00347 (36), -0.00335 (36), -0.00329 (36), -0.00321 (36), -0.00318 (36), -0.00314 (36), -0.00310 (36), -0.00308 (36), -0.00301 (36), 
Length of domains: 833
Time: pickout 0.0281    decision 0.2151    set_bounds 0.1167    solve 0.3876    add 0.0100    
Accumulated time: pickout 2.0570    decision 8.3311    set_bounds 11.9535    solve 29.4454    add 1.1189    
Current (lb-rhs): -0.004927337169647217
109294 domains visited
Cumulative time: 54.14535999298096

BaB round 29
batch: 833
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3765] [/input, 1162] [/input, 1162] [/input, 1162] [/input, 1162] [/input, 3765] [/input, 3765] [/input, 3765] [/input, 1162] [/input, 1162] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8802894353866577, worst -0.004342079162597656
10 lb beta sum: 0.8802894353866577, worst -0.004342436790466309
Time: prepare 0.0826    bound 0.1603    transfer 0.0098    finalize 0.0096    func 0.2730    
Accumulated time: func 29.8429    prepare 10.6363    bound 14.3547    transfer 1.0291    finalize 2.1619    
all_split False
======================Cut inference begins======================
max lb tensor(0.00943935) min lb tensor(-0.00433832)
Number of Verified Splits: 1111 of 1666
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.00045490264892578125 
BICCOS Cumulative time: 0.11381983757019043
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00434 (37), -0.00366 (37), -0.00357 (37), -0.00356 (37), -0.00343 (37), -0.00332 (37), -0.00332 (37), -0.00312 (37), -0.00311 (37), -0.00311 (37), -0.00293 (37), -0.00289 (37), -0.00288 (37), -0.00285 (37), -0.00281 (37), -0.00276 (37), -0.00265 (37), -0.00261 (37), -0.00261 (37), -0.00255 (37), 
Length of domains: 555
Time: pickout 0.0195    decision 0.0558    set_bounds 0.0715    solve 0.2740    add 0.0084    
Accumulated time: pickout 2.0765    decision 8.3869    set_bounds 12.0250    solve 29.7195    add 1.1274    
Current (lb-rhs): -0.004338324069976807
109849 domains visited
Cumulative time: 54.58239197731018

BaB round 30
batch: 555
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1958] [/input, 1958] [/input, 1958] [/input, 1958] [/input, 1958] [/input, 2663] [/input-8, 2045] [/input, 1958] [/input, 1958] [/input-8, 2045] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8780076503753662, worst -0.003976345062255859
10 lb beta sum: 0.8780076503753662, worst -0.0039784908294677734
Time: prepare 0.0539    bound 0.1452    transfer 0.0027    finalize 0.0054    func 0.2152    
Accumulated time: func 30.0581    prepare 10.6905    bound 14.4999    transfer 1.0318    finalize 2.1672    
all_split False
======================Cut inference begins======================
max lb tensor(0.00743175) min lb tensor(-0.00397497)
Number of Verified Splits: 789 of 1110
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0004868507385253906 
BICCOS Cumulative time: 0.11430668830871582
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00397 (38), -0.00329 (38), -0.00319 (38), -0.00298 (38), -0.00284 (38), -0.00277 (38), -0.00276 (38), -0.00273 (38), -0.00252 (38), -0.00252 (38), -0.00252 (38), -0.00252 (38), -0.00240 (38), -0.00234 (38), -0.00226 (38), -0.00223 (38), -0.00219 (38), -0.00215 (38), -0.00213 (38), -0.00209 (38), 
Length of domains: 321
Time: pickout 0.0140    decision 0.0417    set_bounds 0.0476    solve 0.2154    add 0.0021    
Accumulated time: pickout 2.0906    decision 8.4286    set_bounds 12.0726    solve 29.9349    add 1.1294    
Current (lb-rhs): -0.003974974155426025
110170 domains visited
Cumulative time: 54.9082887172699

BaB round 31
batch: 321
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input, 1958] [/input, 1958] [/input, 1958] [/input, 1958] [/input-8, 2045] [/input, 3765] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8672000169754028, worst -0.0034175217151641846
10 lb beta sum: 0.8672000169754028, worst -0.003423720598220825
Time: prepare 0.0315    bound 0.1412    transfer 0.0034    finalize 0.0035    func 0.1838    
Accumulated time: func 30.2418    prepare 10.7222    bound 14.6411    transfer 1.0351    finalize 2.1708    
all_split False
======================Cut inference begins======================
max lb tensor(0.00260618) min lb tensor(-0.00341752)
Number of Verified Splits: 453 of 642
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0003762245178222656 
BICCOS Cumulative time: 0.11468291282653809
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00342 (39), -0.00273 (39), -0.00264 (39), -0.00261 (39), -0.00242 (39), -0.00228 (39), -0.00221 (39), -0.00217 (39), -0.00196 (39), -0.00196 (39), -0.00196 (39), -0.00196 (39), -0.00190 (39), -0.00184 (39), -0.00177 (39), -0.00170 (39), -0.00170 (39), -0.00167 (39), -0.00164 (39), -0.00160 (39), 
Length of domains: 189
Time: pickout 0.0082    decision 0.0279    set_bounds 0.0273    solve 0.1839    add 0.0024    
Accumulated time: pickout 2.0988    decision 8.4565    set_bounds 12.1000    solve 30.1188    add 1.1318    
Current (lb-rhs): -0.0034175217151641846
110359 domains visited
Cumulative time: 55.16093897819519

BaB round 32
batch: 189
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 662] [/input-8, 2045] [/input-8, 2045] [/input-8, 2045] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input, 2663] [/input, 2663] [/input, 2663] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8566726446151733, worst -0.0022559165954589844
10 lb beta sum: 0.8566726446151733, worst -0.002256035804748535
Time: prepare 0.0185    bound 0.1390    transfer 0.0012    finalize 0.0023    func 0.1635    
Accumulated time: func 30.4054    prepare 10.7409    bound 14.7801    transfer 1.0364    finalize 2.1730    
all_split False
======================Cut inference begins======================
max lb tensor(0.00193578) min lb tensor(-0.00225025)
Number of Verified Splits: 297 of 378
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.00037217140197753906 
BICCOS Cumulative time: 0.11505508422851562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00225 (40), -0.00216 (40), -0.00203 (40), -0.00150 (40), -0.00147 (40), -0.00147 (40), -0.00145 (40), -0.00137 (40), -0.00135 (40), -0.00126 (40), -0.00126 (40), -0.00126 (40), -0.00125 (40), -0.00120 (40), -0.00116 (40), -0.00112 (40), -0.00106 (40), -0.00098 (40), -0.00089 (40), -0.00078 (40), 
Length of domains: 81
Time: pickout 0.0054    decision 0.0208    set_bounds 0.0161    solve 0.1636    add 0.0011    
Accumulated time: pickout 2.1042    decision 8.4773    set_bounds 12.1161    solve 30.2824    add 1.1329    
Current (lb-rhs): -0.0022502541542053223
110440 domains visited
Cumulative time: 55.369959354400635

BaB round 33
batch: 81
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] 
split level 1: [/input-8, 2030] [/input, 2007] [/input, 2007] [/input-8, 2030] [/input-8, 2030] [/input-8, 2030] [/input, 2007] [/input, 2007] [/input-8, 2030] [/input-8, 2030] 
cut re-enabled after branching node selection
0 lb beta sum: 0.847802996635437, worst -0.0006354153156280518
10 lb beta sum: 0.847802996635437, worst -0.0006092190742492676
Time: prepare 0.0159    bound 0.1360    transfer 0.0009    finalize 0.0017    func 0.1566    
Accumulated time: func 30.5620    prepare 10.7570    bound 14.9161    transfer 1.0372    finalize 2.1747    
all_split False
======================Cut inference begins======================
max lb tensor(0.00221252) min lb tensor(-0.00060278)
Number of Verified Splits: 318 of 324
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0003578662872314453 
BICCOS Cumulative time: 0.11541295051574707
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00060 (42), -0.00052 (42), -0.00036 (42), -0.00034 (42), -0.00026 (42), -0.00010 (42), 
Length of domains: 6
Time: pickout 0.0028    decision 0.0179    set_bounds 0.0184    solve 0.1567    add 0.0006    
Accumulated time: pickout 2.1071    decision 8.4952    set_bounds 12.1345    solve 30.4391    add 1.1335    
Current (lb-rhs): -0.0006027817726135254
110446 domains visited
Cumulative time: 55.56816530227661

BaB round 34
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] 
split level 1: [/input-8, 2047] [/input-8, 2047] [/input-8, 2047] [/input-8, 2047] [/input-8, 2047] [/input-8, 2047] 
split level 2: [/input-8, 267] [/input-8, 267] [/input-8, 267] [/input-8, 267] [/input-8, 267] [/input-8, 267] 
split level 3: [/input, 2007] [/input, 2007] [/input, 2007] [/input, 2007] [/input-8, 2030] [/input-8, 2030] 
split level 4: [/input-8, 1814] [/input-8, 1814] [/input-8, 1814] [/input-8, 1814] [/input-8, 1814] [/input-8, 1814] 
split level 5: [/input-8, 1056] [/input-8, 1056] [/input-8, 1056] [/input-8, 1056] [/input-8, 1056] [/input-8, 1056] 
cut re-enabled after branching node selection
0 lb beta sum: 0.847802996635437, worst 0.0025523900985717773

all verified at 0th iter
Time: prepare 0.0184    bound 0.0050    transfer 0.0019    finalize 0.0018    func 0.0295    
Accumulated time: func 30.5915    prepare 10.7757    bound 14.9212    transfer 1.0391    finalize 2.1765    
all_split False
======================Cut inference begins======================
max lb tensor(0.01031756) min lb tensor(0.00255239)
Number of Verified Splits: 384 of 384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.00033664703369140625 
BICCOS Cumulative time: 0.11574959754943848
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0008    decision 0.0183    set_bounds 0.0352    solve 0.0295    add 0.0001    
Accumulated time: pickout 2.1079    decision 8.5135    set_bounds 12.1697    solve 30.4687    add 1.1336    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
110446 domains visited
Cumulative time: 55.65384268760681


Properties batch 1, size 1
Remaining timeout: 142.78962993621826
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 142.7895348072052
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 142.78951025009155
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 142.7894892692566
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 142.7894685268402
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 142.78944849967957
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 142.78908586502075
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 142.78902435302734
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 57.2110 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 124, vnnlib ID: 124 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.69559193, -7.96780491, -6.96483183, -7.45871067, -6.68889904,
         -7.58828831, -6.67497444, -6.98177767, -8.06610775, -8.63962460]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [547]; unstable size 547; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 228, 1, 547] with unstable size 227 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 547] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 547] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [227]; unstable size 227; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 227] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 227] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.58523273, -0.92486894, -2.40603924, -1.88837290, -2.64663792,
         -1.76642704, -2.72795200, -2.38057566, -1.24313211]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.69559193, -7.96780491, -6.96483183, -7.45871067, -6.68889904,
         -7.58828831, -6.67497444, -6.98177767, -8.06610775, -8.63962460]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.69559193, -7.96780586, -6.96483278, -7.45871067, -6.68889999,
          -7.58828878, -6.67497540, -6.98177910, -8.06610775, -8.63962555],
         [-7.69559193, -7.96780586, -6.96483278, -7.45871067, -6.68889999,
          -7.58828878, -6.67497540, -6.98177910, -8.06610775, -8.63962555]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.94403362, -0.67181969, -1.67479277, -1.18091488, -1.95072556,
          -1.05133677, -1.96465015, -1.65784645, -0.57351780]]],
       device='cuda:0')
number of violation:  9
clean attack image tensor([[[[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         ...,


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0806 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 125, vnnlib ID: 125 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.45314455,  -7.18863773,  -8.37823200,  -9.04793167,  -9.03023815,
          -9.23170471, -10.10972786, -10.12581825,  -6.64005661,  -7.36846209]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [564]; unstable size 564; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 564] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 564] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 564] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 148] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.44336748, -0.41944861,  0.41273689,  1.05374622,  1.06570005,
          1.21813297,  2.11687469,  2.11616468, -1.28266549]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.45314455,  -7.18863773,  -8.37823200,  -9.04793167,  -9.03023815,
          -9.23170471, -10.10972786, -10.12581825,  -6.64005661,  -7.36846209]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.45314312,  -7.18863678,  -8.37823296,  -9.04792976,  -9.03023720,
           -9.23170471, -10.10972786, -10.12581825,  -6.64005566,  -7.36846113],
         [ -7.45314312,  -7.18863678,  -8.37823296,  -9.04792976,  -9.03023720,
           -9.23170471, -10.10972786, -10.12581825,  -6.64005566,  -7.36846113]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08468199, -0.17982435, -0.72840548]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0511 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 126, vnnlib ID: 126 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.54385185, -7.41220284, -2.34506559, -2.95553207, -2.41963601,
         -3.01310992, -2.81382346, -2.59146428, -7.24296570, -5.83741570]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [396]; unstable size 396; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 396] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 396] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 396] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 177] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.65073204,  4.21796799, -0.26915109,  0.22882628,  0.28623378,
         -0.01064357, -0.09029412,  4.20063734,  2.69216037]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.54385185, -7.41220284, -2.34506559, -2.95553207, -2.41963601,
         -3.01310992, -2.81382346, -2.59146428, -7.24296570, -5.83741570]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.54385185, -7.41220379, -2.34506559, -2.95553231, -2.41963625,
          -3.01311040, -2.81382322, -2.59146428, -7.24296570, -5.83741570],
         [-5.54385185, -7.41220379, -2.34506559, -2.95553231, -2.41963625,
          -3.01311040, -2.81382322, -2.59146428, -7.24296570, -5.83741570]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07457066,  0.39418697,  0.17182803]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0588 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 127, vnnlib ID: 127 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.39800262, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
         -5.32085514, -5.70522690, -5.39239740, -4.68354988, -5.44279432]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [602]; unstable size 602; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 602] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 602] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 602] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.73008394,  1.05035067, -0.48766112, -0.22834885, -0.77157784,
         -0.10954207,  0.24981642, -0.21459591,  0.21009302]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.39800262, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
         -5.32085514, -5.70522690, -5.39239740, -4.68354988, -5.44279432]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.39800215, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
          -5.32085562, -5.70522690, -5.39239693, -4.68354988, -5.44279432],
         [-4.39800215, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
          -5.32085562, -5.70522690, -5.39239693, -4.68354988, -5.44279432]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.28554773,  0.22653723,  0.50871849, -0.00213194,  0.63730574,
           0.70884705]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0477 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 128, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
          -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [471]; unstable size 471; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 210, 1, 471] with unstable size 209 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 471] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 471] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [209]; unstable size 209; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 209] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 209] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17617536,  2.53004360,  0.03650141,  0.78286874, -0.09084702,
          0.84507632,  0.92964882,  2.50925684,  1.68634748]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
          -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.90it/s]100%|██████████| 1/1 [00:00<00:00,  8.89it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.12287617, -9.92002869, -6.60754442, -7.37705517, -6.42930222,
          -7.44449568, -6.38382149, -7.65928459, -9.62154961, -8.92986012]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04548073]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1152 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.553854942321777
alpha/beta optimization time: 1.2140257358551025
initial alpha-crown bounds: tensor([[ 1.19834447,  2.55369520,  0.05347466,  0.79098052, -0.08158457,
          0.85336977,  0.94275808,  2.53685737,  1.70595956]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08158457279205322
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.614595413208
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61455655097961
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61453104019165
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6145098209381
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.61449098587036
Verifying property 4 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08158457]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
         -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08158457]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 471
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 206
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 681
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010156631469726562
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08158397674560547
10 lb beta sum: 0.0, worst -0.08158421516418457
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0533    transfer 0.0001    finalize 0.0001    func 0.0537    
Accumulated time: func 0.0537    prepare 0.0002    bound 0.0533    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] 
split level 1: [/input-12, 5] 
split level 2: [/input-8, 1443] 
split level 3: [/input-8, 555] 
split level 4: [/input-8, 20] 
split level 5: [/input-8, 1457] 
split level 6: [/input-8, 1207] 
split level 7: [/input-8, 28] 
split level 8: [/input-8, 1451] 
split level 9: [/input-8, 1437] 
split level 10: [/input-8, 750] 
split level 11: [/input-8, 1462] 
split level 12: [/input-8, 19] 
split level 13: [/input-8, 313] 
split level 14: [/input-8, 1425] 
split level 15: [/input-8, 339] 
split level 16: [/input-8, 1225] 
split level 17: [/input-8, 916] 
split level 18: [/input-8, 233] 
split level 19: [/input-8, 1628] 
split level 20: [/input-8, 796] 
split level 21: [/input-8, 1458] 
split level 22: [/input-8, 805] 
split level 23: [/input-8, 1195] 
split level 24: [/input-8, 1274] 
split level 25: [/input-8, 1637] 
split level 26: [/input-8, 908] 
split level 27: [/input-8, 1674] 
split level 28: [/input-8, 757] 
split level 29: [/input-8, 797] 
split level 30: [/input-8, 1035] 
split level 31: [/input-8, 803] 
split level 32: [/input-8, 148] 
split level 33: [/input-8, 737] 
split level 34: [/input-8, 915] 
split level 35: [/input-8, 1321] 
split level 36: [/input-8, 1292] 
split level 37: [/input-8, 1134] 
split level 38: [/input-8, 1466] 
split level 39: [/input-8, 567] 
split level 40: [/input-8, 923] 
split level 41: [/input-8, 1250] 
split level 42: [/input-8, 718] 
split level 43: [/input-8, 927] 
split level 44: [/input-8, 1186] 
split level 45: [/input-8, 1171] 
split level 46: [/input-8, 1226] 
split level 47: [/input-8, 938] 
split level 48: [/input-8, 934] 
split level 49: [/input-8, 1291] 
split level 50: [/input-8, 1236] 
split level 51: [/input, 1721] 
split level 52: [/input-8, 1645] 
split level 53: [/input-8, 1214] 
split level 54: [/input-8, 946] 
split level 55: [/input-8, 1775] 
split level 56: [/input-8, 1330] 
split level 57: [/input-8, 2014] 
split level 58: [/input-8, 1766] 
split level 59: [/input, 1253] 
split level 60: [/input-8, 1270] 
split level 61: [/input-8, 726] 
split level 62: [/input-8, 570] 
split level 63: [/input, 2890] 
split level 64: [/input, 1099] 
split level 65: [/input-8, 1228] 
split level 66: [/input-8, 375] 
split level 67: [/input-8, 1581] 
split level 68: [/input-8, 52] 
split level 69: [/input-8, 1626] 
split level 70: [/input, 1115] 
split level 71: [/input-8, 1325] 
split level 72: [/input-8, 1098] 
split level 73: [/input-8, 1254] 
split level 74: [/input-8, 907] 
split level 75: [/input-8, 1267] 
split level 76: [/input-8, 1582] 
split level 77: [/input, 629] 
split level 78: [/input-8, 951] 
split level 79: [/input-8, 1767] 
split level 80: [/input-8, 1322] 
split level 81: [/input, 3668] 
split level 82: [/input, 3652] 
split level 83: [/input, 839] 
split level 84: [/input-8, 1036] 
split level 85: [/input-8, 1324] 
split level 86: [/input, 680] 
split level 87: [/input, 1773] 
split level 88: [/input, 4010] 
split level 89: [/input-8, 1246] 
split level 90: [/input-8, 1745] 
split level 91: [/input, 2113] 
split level 92: [/input, 1251] 
split level 93: [/input-8, 929] 
split level 94: [/input-8, 1218] 
split level 95: [/input, 3975] 
split level 96: [/input-8, 937] 
split level 97: [/input-8, 1289] 
split level 98: [/input, 1094] 
split level 99: [/input-8, 1294] 
split level 100: [/input, 1720] 
split level 101: [/input, 4007] 
split level 102: [/input, 1479] 
split level 103: [/input, 4025] 
split level 104: [/input-8, 535] 
split level 105: [/input, 3828] 
split level 106: [/input-8, 1612] 
split level 107: [/input-8, 374] 
split level 108: [/input-8, 1153] 
split level 109: [/input, 745] 
split level 110: [/input-8, 64] 
split level 111: [/input-8, 920] 
split level 112: [/input-8, 811] 
split level 113: [/input, 3642] 
split level 114: [/input, 4009] 
split level 115: [/input, 3249] 
split level 116: [/input-8, 6] 
split level 117: [/input-8, 1220] 
split level 118: [/input-8, 936] 
split level 119: [/input, 988] 
split level 120: [/input, 822] 
split level 121: [/input-8, 1609] 
split level 122: [/input-8, 1230] 
split level 123: [/input-8, 324] 
split level 124: [/input, 2117] 
split level 125: [/input-8, 1639] 
split level 126: [/input, 1378] 
split level 127: [/input, 3213] 
split level 128: [/input, 3230] 
split level 129: [/input, 1377] 
split level 130: [/input, 194] 
split level 131: [/input-8, 1840] 
split level 132: [/input, 1493] 
split level 133: [/input-8, 2023] 
split level 134: [/input-8, 351] 
split level 135: [/input, 2625] 
split level 136: [/input, 1864] 
split level 137: [/input-8, 899] 
split level 138: [/input, 1393] 
split level 139: [/input-8, 953] 
split level 140: [/input, 1410] 
split level 141: [/input-8, 1224] 
split level 142: [/input, 1475] 
split level 143: [/input-8, 1575] 
split level 144: [/input, 1473] 
split level 145: [/input, 1390] 
split level 146: [/input, 1760] 
split level 147: [/input, 1169] 
split level 148: [/input, 280] 
split level 149: [/input, 3155] 
split level 150: [/input-8, 2024] 
split level 151: [/input, 4028] 
split level 152: [/input, 2362] 
split level 153: [/input, 3736] 
split level 154: [/input, 1160] 
split level 155: [/input, 2679] 
split level 156: [/input, 52] 
split level 157: [/input, 1143] 
split level 158: [/input, 294] 
split level 159: [/input-8, 1640] 
split level 160: [/input, 323] 
split level 161: [/input, 2526] 
split level 162: [/input, 4001] 
split level 163: [/input, 1159] 
split level 164: [/input, 3294] 
split level 165: [/input-8, 1601] 
split level 166: [/input, 1779] 
split level 167: [/input, 1153] 
split level 168: [/input, 873] 
split level 169: [/input, 1144] 
split level 170: [/input, 962] 
split level 171: [/input, 1130] 
split level 172: [/input, 3931] 
split level 173: [/input, 3560] 
split level 174: [/input, 3428] 
split level 175: [/input, 2412] 
split level 176: [/input, 4058] 
split level 177: [/input, 276] 
split level 178: [/input, 1122] 
split level 179: [/input, 2406] 
split level 180: [/input, 909] 
split level 181: [/input, 2088] 
split level 182: [/input, 408] 
split level 183: [/input-8, 369] 
split level 184: [/input, 346] 
split level 185: [/input, 895] 
split level 186: [/input-8, 1687] 
split level 187: [/input, 153] 
split level 188: [/input, 2524] 
split level 189: [/input-8, 72] 
split level 190: [/input-8, 1316] 
split level 191: [/input, 2400] 
split level 192: [/input, 2396] 
split level 193: [/input, 2275] 
split level 194: [/input-8, 1695] 
split level 195: [/input-8, 1891] 
split level 196: [/input-8, 1902] 
split level 197: [/input, 452] 
split level 198: [/input, 379] 
split level 199: [/input, 2597] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08284425735473633
10 lb beta sum: 0.0, worst -0.08185458183288574
Time: prepare 0.0116    bound 0.1002    transfer 0.0016    finalize 0.0028    func 0.1188    
Accumulated time: func 0.1725    prepare 0.0219    bound 0.1535    transfer 0.0017    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03181827) min lb tensor(-0.08158398)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0100555419921875 
BICCOS Cumulative time: 0.0100555419921875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07882 (1), -0.07873 (1), -0.07841 (1), -0.07841 (1), -0.07838 (1), -0.07830 (1), -0.07823 (1), -0.07811 (1), -0.07806 (1), -0.07805 (1), -0.07804 (1), -0.07793 (1), -0.07792 (1), -0.07768 (1), -0.07767 (1), -0.07753 (1), -0.07730 (1), -0.07730 (1), -0.07716 (1), -0.07709 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5243    set_bounds 0.0091    solve 0.1189    add 0.0668    
Accumulated time: pickout 0.0003    decision 0.5243    set_bounds 0.0091    solve 0.1189    add 0.0668    
Current (lb-rhs): -0.07881522178649902
50 domains visited
Cumulative time: 0.7882826328277588

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 5] [/input-12, 5] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 1: [/input-8, 555] [/input-8, 555] [/input-12, 5] [/input-8, 555] [/input-12, 5] [/input-8, 555] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] 
split level 2: [/input-8, 28] [/input-8, 1457] [/input-8, 555] [/input-8, 28] [/input-8, 555] [/input-8, 1457] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 28] 
split level 3: [/input-8, 1437] [/input-8, 28] [/input-8, 28] [/input-8, 1437] [/input-8, 28] [/input-8, 28] [/input-8, 28] [/input-8, 28] [/input-8, 28] [/input-8, 1437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07716655731201172
10 lb beta sum: 0.0, worst -0.07708048820495605
Time: prepare 0.0125    bound 0.0978    transfer 0.0010    finalize 0.0024    func 0.1163    
Accumulated time: func 0.2888    prepare 0.0346    bound 0.2513    transfer 0.0027    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01292813) min lb tensor(-0.07707393)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011688947677612305 
BICCOS Cumulative time: 0.021744489669799805
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02669 (2), -0.02640 (2), -0.02639 (2), -0.02635 (2), -0.02615 (2), -0.02611 (2), -0.02571 (2), -0.02548 (2), -0.02526 (2), -0.02521 (2), -0.02500 (2), -0.02473 (2), -0.02465 (2), -0.02460 (2), -0.02450 (2), -0.02439 (2), -0.02432 (2), -0.02426 (2), -0.02422 (2), -0.02418 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0200    set_bounds 0.0129    solve 0.1164    add 0.0756    
Accumulated time: pickout 0.0014    decision 0.5443    set_bounds 0.0220    solve 0.2352    add 0.1424    
Current (lb-rhs): -0.026688575744628906
100 domains visited
Cumulative time: 1.0260686874389648

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 5] [/input-12, 5] [/input-8, 555] [/input-8, 555] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-8, 555] [/input-8, 555] [/input-8, 555] 
split level 1: [/input-8, 555] [/input-8, 555] [/input-8, 28] [/input-8, 28] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 28] [/input-8, 28] [/input-8, 1457] 
split level 2: [/input-8, 28] [/input-8, 1457] [/input-8, 1451] [/input-8, 1451] [/input-8, 28] [/input-8, 28] [/input-8, 1457] [/input-8, 1437] [/input-8, 1437] [/input-8, 28] 
split level 3: [/input-8, 1437] [/input-8, 28] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 28] [/input-8, 313] [/input-8, 313] [/input-8, 1437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0254591703414917
10 lb beta sum: 0.0, worst -0.025279641151428223
Time: prepare 0.0134    bound 0.0981    transfer 0.0010    finalize 0.0024    func 0.1175    
Accumulated time: func 0.4063    prepare 0.0483    bound 0.3494    transfer 0.0038    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.00376755) min lb tensor(-0.02517915)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 1
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.012867212295532227 
BICCOS Cumulative time: 0.03461170196533203
Preprocessing time: 0.011616945266723633 Inference time: 0.00024318695068359375 Add cuts time: 0.00019288063049316406 Cut analysis time: 0.0008141994476318359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00869 (3), -0.00850 (3), -0.00833 (3), -0.00805 (3), -0.00797 (3), -0.00780 (3), -0.00780 (3), -0.00773 (3), -0.00747 (3), -0.00746 (3), -0.00731 (3), -0.00729 (3), -0.00726 (3), -0.00724 (3), -0.00724 (3), -0.00721 (3), -0.00721 (3), -0.00720 (3), -0.00715 (3), -0.00714 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0145    solve 0.1176    add 0.0824    
Accumulated time: pickout 0.0024    decision 0.5639    set_bounds 0.0365    solve 0.3528    add 0.2248    
Current (lb-rhs): -0.008692026138305664
150 domains visited
Cumulative time: 1.2743165493011475

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 28] 
split level 1: [/input-8, 28] [/input-8, 28] [/input-8, 28] [/input-8, 1457] [/input-8, 28] [/input-8, 1457] [/input-8, 28] [/input-8, 28] [/input-8, 1457] [/input-8, 1437] 
split level 2: [/input-8, 1451] [/input-8, 1437] [/input-8, 1437] [/input-8, 28] [/input-8, 1451] [/input-8, 28] [/input-8, 1451] [/input-8, 1451] [/input-8, 28] [/input-8, 1451] 
split level 3: [/input-8, 1437] [/input-8, 313] [/input-8, 313] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1134] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.007505655288696289
10 lb beta sum: 0.20601928234100342, worst -0.006451249122619629
Time: prepare 0.0079    bound 0.1343    transfer 0.0010    finalize 0.0022    func 0.1486    
Accumulated time: func 0.5550    prepare 0.0565    bound 0.4838    transfer 0.0048    finalize 0.0099    
all_split False
======================Cut inference begins======================
max lb tensor(0.00984454) min lb tensor(-0.00632739)
Number of Verified Splits: 91 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 6
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.020705223083496094 
BICCOS Cumulative time: 0.055316925048828125
Preprocessing time: 0.011548042297363281 Inference time: 0.0039501190185546875 Add cuts time: 0.004122495651245117 Cut analysis time: 0.0010845661163330078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00169 (4), -0.00169 (4), -0.00168 (4), -0.00167 (4), -0.00165 (4), -0.00163 (4), -0.00159 (4), -0.00149 (4), -0.00147 (4), -0.00145 (4), -0.00145 (4), -0.00142 (4), -0.00142 (4), -0.00140 (4), -0.00134 (4), -0.00130 (4), -0.00126 (4), -0.00124 (4), -0.00122 (4), -0.00118 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0153    solve 0.1487    add 0.2148    
Accumulated time: pickout 0.0034    decision 0.5835    set_bounds 0.0518    solve 0.5015    add 0.4397    
Current (lb-rhs): -0.0016893893480300903
200 domains visited
Cumulative time: 1.6947779655456543

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 555] [/input-8, 28] [/input-8, 28] [/input-8, 555] [/input-8, 28] [/input-8, 28] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 555] 
split level 1: [/input-8, 28] [/input-8, 1437] [/input-8, 1437] [/input-8, 1451] [/input-8, 1437] [/input-8, 1437] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1457] 
split level 2: [/input-8, 1451] [/input-8, 313] [/input-8, 313] [/input-8, 1437] [/input-8, 313] [/input-8, 313] [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 1451] 
split level 3: [/input-8, 1134] [/input-8, 19] [/input-8, 19] [/input-8, 1134] [/input-8, 19] [/input-8, 19] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 1437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0014772415161132812
10 lb beta sum: 0.15761518478393555, worst -0.0010149180889129639
Time: prepare 0.0080    bound 0.1508    transfer 0.0011    finalize 0.0028    func 0.1653    
Accumulated time: func 0.7203    prepare 0.0647    bound 0.6345    transfer 0.0059    finalize 0.0127    
all_split False
======================Cut inference begins======================
max lb tensor(0.00667119) min lb tensor(1.78813934e-06)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 6
#cuts 4-6: 37
#cuts >= 20: 0
BICCOS time: 0.04534196853637695 
BICCOS Cumulative time: 0.10065889358520508
Preprocessing time: 0.011554241180419922 Inference time: 0.018825292587280273 Add cuts time: 0.013451814651489258 Cut analysis time: 0.0015106201171875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0197    set_bounds 0.0156    solve 0.1654    add 0.0301    
Accumulated time: pickout 0.0046    decision 0.6032    set_bounds 0.0674    solve 0.6670    add 0.4697    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.97425284e-37, 2.04061135e-03]), tensor([2, 3])), '/input-12': ([50, 5], [-1.0, -1.0], [0, 0], [2.1231927206403918e-19, 0.01388399489223957], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457,   28]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([3.97425284e-37, 6.74753031e-03, 1.30014285e-03]), tensor([2, 3, 4])), '/input-12': ([50, 5], [-1.0, -1.0], [0, 0], [2.1231927206403918e-19, 0.01388399489223957], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457,   28]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([3.97425284e-37, 6.74753031e-03, 2.39651068e-03]), tensor([2, 3, 4])), '/input-12': ([50, 5], [-1.0, -1.0], [0, 0], [2.1231927206403918e-19, 0.01388399489223957], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([555]), tensor([1.]), tensor([0]), tensor([0.00137954]), tensor([2])), '/input-12': ([50, 5], [-1.0, -1.0], [0, 0], [2.1231927206403918e-19, 0.01388399489223957], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555,   28, 1437]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.45282905e-10, 3.70530947e-03, 2.05575093e-03]), tensor([2, 3, 4])), '/input-12': ([50, 5], [-1.0, 1.0], [0, 0], [2.1231927206403918e-19, 0.0166806448251009], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555,   28, 1437]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.45282905e-10, 3.70530947e-03, 1.75111159e-03]), tensor([2, 3, 4])), '/input-12': ([50, 5], [-1.0, 1.0], [0, 0], [2.1231927206403918e-19, 0.0166806448251009], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555,   28, 1437]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.45282905e-10, 4.78081545e-03, 1.04575022e-03]), tensor([2, 3, 4])), '/input-12': ([50, 5], [-1.0, 1.0], [0, 0], [2.1231927206403918e-19, 0.0166806448251009], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555,   28, 1437]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.45282905e-10, 4.78081545e-03, 1.84284314e-03]), tensor([2, 3, 4])), '/input-12': ([50, 5], [-1.0, 1.0], [0, 0], [2.1231927206403918e-19, 0.0166806448251009], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([555]), tensor([1.]), tensor([0]), tensor([3.97427437e-37]), tensor([2])), '/input-12': ([50, 5], [-1.0, 1.0], [0, 0], [2.1231927206403918e-19, 0.0166806448251009], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.97425284e-37, 2.43406161e-03]), tensor([2, 3])), '/input-12': ([50, 5], [1.0, -1.0], [0, 0], [2.6941071595842914e-10, 0.014724837616086006], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.97425284e-37, 8.12195428e-03]), tensor([2, 3])), '/input-12': ([50, 5], [1.0, -1.0], [0, 0], [2.6941071595842914e-10, 0.014724837616086006], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([555]), tensor([1.]), tensor([0]), tensor([3.97427437e-37]), tensor([2])), '/input-12': ([50, 5], [1.0, -1.0], [0, 0], [2.6941071595842914e-10, 0.014724837616086006], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.50221083e-10, 2.36259564e-03]), tensor([2, 3])), '/input-12': ([50, 5], [1.0, 1.0], [0, 0], [2.6941071595842914e-10, 0.014455186203122139], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 555, 1457]), tensor([-1.,  1.]), tensor([0, 0]), tensor([4.50221083e-10, 7.96680339e-03]), tensor([2, 3])), '/input-12': ([50, 5], [1.0, 1.0], [0, 0], [2.6941071595842914e-10, 0.014455186203122139], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([555]), tensor([1.]), tensor([0]), tensor([0.00237529]), tensor([2])), '/input-12': ([50, 5], [1.0, 1.0], [0, 0], [2.6941071595842914e-10, 0.014455186203122139], [0, 1])}
Shallow branching resets to n domains:  15
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018159985542297363
10 lb beta sum: 0.45464619994163513, worst -0.016601502895355225
Time: prepare 0.0005    bound 0.1495    transfer 0.0002    finalize 0.0002    func 0.1506    
Accumulated time: func 0.8709    prepare 0.0652    bound 0.7840    transfer 0.0061    finalize 0.0130    
After pruning, left:  7

Back to Regular BaB

BaB round 1
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 28] [/input-8, 1457] [/input-8, 28] [/input-8, 28] [/input-8, 1457] [/input-8, 28] [/input-8, 1457] 
split level 1: [/input-8, 1437] [/input-8, 28] [/input-8, 1451] [/input-8, 1458] [/input-8, 28] [/input-8, 1458] [/input-8, 28] 
split level 2: [/input-8, 1451] [/input-8, 1437] [/input-8, 1437] [/input-8, 19] [/input-8, 1458] [/input-8, 19] [/input-8, 1451] 
split level 3: [/input-8, 313] [/input-8, 313] [/input-8, 19] [/input-8, 1437] [/input-8, 1437] [/input-8, 1451] [/input-8, 1458] 
split level 4: [/input-8, 19] [/input-8, 19] [/input-8, 1134] [/input-8, 313] [/input-8, 313] [/input-8, 1437] [/input-8, 1437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.49345070123672485, worst -0.008091777563095093
10 lb beta sum: 0.5585483312606812, worst -0.15088704228401184
Time: prepare 0.0087    bound 0.1530    transfer 0.0011    finalize 0.0013    func 0.1656    
Accumulated time: func 1.0365    prepare 0.0742    bound 0.9370    transfer 0.0072    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.01096532) min lb tensor(-0.00762627)
Number of Verified Splits: 150 of 224
Stop inferencing: Max iteration reached.
Total number of valid cuts: 43.
#cuts 1-3: 6
#cuts 4-6: 37
#cuts >= 20: 0
BICCOS time: 0.0003688335418701172 
BICCOS Cumulative time: 0.1010277271270752
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00763 (5), -0.00677 (5), -0.00639 (5), -0.00636 (5), -0.00595 (5), -0.00590 (5), -0.00581 (5), -0.00577 (5), -0.00571 (5), -0.00559 (5), -0.00558 (5), -0.00518 (5), -0.00518 (5), -0.00514 (5), -0.00503 (5), -0.00503 (5), -0.00499 (5), -0.00484 (5), -0.00468 (5), -0.00442 (5), 
Length of domains: 74
Time: pickout 0.0006    decision 0.0185    set_bounds 0.0142    solve 0.1656    add 0.0011    
Accumulated time: pickout 0.0052    decision 0.6217    set_bounds 0.0816    solve 0.8326    add 0.4709    
Current (lb-rhs): -0.007626265287399292
274 domains visited
Cumulative time: 2.3563053607940674

BaB round 2
batch: 74
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1451] [/input-8, 1457] [/input-8, 1451] [/input-8, 796] [/input-8, 1451] [/input-8, 1451] [/input-8, 796] [/input-8, 1451] [/input-8, 1451] [/input-8, 796] 
split level 1: [/input-8, 1628] [/input-8, 313] [/input-8, 19] [/input-8, 19] [/input-8, 1628] [/input-8, 19] [/input-8, 19] [/input-8, 1628] [/input-8, 19] [/input-8, 19] 
cut re-enabled after branching node selection
0 lb beta sum: 0.623877227306366, worst -0.005023449659347534
10 lb beta sum: 0.623877227306366, worst -0.004883497953414917
Time: prepare 0.0114    bound 0.1491    transfer 0.0016    finalize 0.0015    func 0.1655    
Accumulated time: func 1.2020    prepare 0.0858    bound 1.0861    transfer 0.0088    finalize 0.0157    
all_split False
======================Cut inference begins======================
max lb tensor(0.00572002) min lb tensor(-0.00481054)
Number of Verified Splits: 245 of 296
Stop inferencing: Max iteration reached.
Total number of valid cuts: 43.
#cuts 1-3: 6
#cuts 4-6: 37
#cuts >= 20: 0
BICCOS time: 0.000347137451171875 
BICCOS Cumulative time: 0.10137486457824707
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00481 (7), -0.00397 (7), -0.00361 (7), -0.00358 (7), -0.00348 (7), -0.00309 (7), -0.00300 (7), -0.00283 (7), -0.00278 (7), -0.00277 (7), -0.00269 (7), -0.00244 (7), -0.00243 (7), -0.00235 (7), -0.00227 (7), -0.00227 (7), -0.00225 (7), -0.00193 (7), -0.00180 (7), -0.00164 (7), 
Length of domains: 51
Time: pickout 0.0014    decision 0.0172    set_bounds 0.0141    solve 0.1656    add 0.0036    
Accumulated time: pickout 0.0066    decision 0.6389    set_bounds 0.0956    solve 0.9982    add 0.4745    
Current (lb-rhs): -0.004810541868209839
325 domains visited
Cumulative time: 2.559530258178711

BaB round 3
batch: 51
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 148] [/input-8, 1134] [/input-8, 1134] [/input-8, 1134] [/input-8, 148] 
split level 1: [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 1195] [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 1195] 
split level 2: [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1628] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1628] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5340083241462708, worst -0.0003689229488372803
10 lb beta sum: 0.5340083241462708, worst -0.00026103854179382324
Time: prepare 0.0156    bound 0.1545    transfer 0.0025    finalize 0.0018    func 0.1770    
Accumulated time: func 1.3790    prepare 0.1016    bound 1.2406    transfer 0.0113    finalize 0.0175    
all_split False
======================Cut inference begins======================
max lb tensor(0.00755192) min lb tensor(-0.00019905)
Number of Verified Splits: 406 of 408
Stop inferencing: Max iteration reached.
Total number of valid cuts: 43.
#cuts 1-3: 6
#cuts 4-6: 37
#cuts >= 20: 0
BICCOS time: 0.0004284381866455078 
BICCOS Cumulative time: 0.10180330276489258
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00020 (10), -0.00013 (10), 
Length of domains: 2
Time: pickout 0.0014    decision 0.0175    set_bounds 0.0214    solve 0.1772    add 0.0006    
Accumulated time: pickout 0.0079    decision 0.6564    set_bounds 0.1170    solve 1.1754    add 0.4751    
Current (lb-rhs): -0.000199049711227417
327 domains visited
Cumulative time: 2.7792744636535645

BaB round 4
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1443] [/input-8, 1443] 
split level 1: [/input-8, 1637] [/input-8, 1637] 
split level 2: [/input-8, 1195] [/input-8, 1195] 
split level 3: [/input-8, 1458] [/input-8, 1458] 
split level 4: [/input-8, 148] [/input-8, 148] 
split level 5: [/input-8, 1236] [/input-8, 1236] 
split level 6: [/input-8, 923] [/input-8, 923] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4976094961166382, worst 0.007431298494338989

all verified at 0th iter
Time: prepare 0.0099    bound 0.0055    transfer 0.0012    finalize 0.0011    func 0.0193    
Accumulated time: func 1.3983    prepare 0.1119    bound 1.2460    transfer 0.0126    finalize 0.0186    
all_split False
======================Cut inference begins======================
max lb tensor(0.25420716) min lb tensor(0.00743130)
Number of Verified Splits: 256 of 256
Stop inferencing: Max iteration reached.
Total number of valid cuts: 43.
#cuts 1-3: 6
#cuts 4-6: 37
#cuts >= 20: 0
BICCOS time: 0.00032782554626464844 
BICCOS Cumulative time: 0.10213112831115723
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0221    set_bounds 0.0202    solve 0.0194    add 0.0001    
Accumulated time: pickout 0.0088    decision 0.6785    set_bounds 0.1371    solve 1.1948    add 0.4752    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
327 domains visited
Cumulative time: 2.84281849861145


Properties batch 5, size 1
Remaining timeout: 195.57784581184387
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 195.57775926589966
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 195.57773351669312
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 195.57771253585815
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 4.4223 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 129, vnnlib ID: 129 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.83963740, -5.78964806, -1.83691561, -1.95573735, -1.63162184,
         -2.07016230, -3.15051937, -3.26623225, -1.61969507, -4.62280273]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [452]; unstable size 452; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 452] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 452] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 452] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 203] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.03636241,  2.65717602, -0.59098864, -0.13531050, -0.81601834,
          0.63781679,  0.66199261, -1.23648858,  1.56749010]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.83963740, -5.78964806, -1.83691561, -1.95573735, -1.63162184,
         -2.07016230, -3.15051937, -3.26623225, -1.61969507, -4.62280273]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.83963752, -5.78964806, -1.83691537, -1.95573735, -1.63162184,
          -2.07016230, -3.15051913, -3.26623249, -1.61969483, -4.62280178],
         [-1.83963752, -5.78964806, -1.83691537, -1.95573735, -1.63162184,
          -2.07016230, -3.15051913, -3.26623249, -1.61969483, -4.62280178]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.23052478, -0.23324692, -0.11442494, -0.43854046, -0.45046747]]],
       device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0461 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 130, vnnlib ID: 130 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.94819498, -10.50515652,  -5.49739599,  -6.42426491,  -5.53212261,
          -6.49647903,  -6.45488739,  -5.53136778, -11.77412796,  -9.99837017]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [381]; unstable size 381; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 381] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 381] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 381] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.93346745,  3.23019981, -1.30597436, -0.08756115, -1.34070396,
         -0.31846684, -1.51010048,  4.62571049,  2.77353907]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.94819498, -10.50515652,  -5.49739599,  -6.42426491,  -5.53212261,
          -6.49647903,  -6.45488739,  -5.53136778, -11.77412796,  -9.99837017]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.94819546, -10.50515652,  -5.49739647,  -6.42426586,  -5.53212261,
           -6.49647903,  -6.45488739,  -5.53136826, -11.77412796,  -9.99836922],
         [ -7.94819546, -10.50515652,  -5.49739647,  -6.42426586,  -5.53212261,
           -6.49647903,  -6.45488739,  -5.53136826, -11.77412796,  -9.99836922]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.99908257, -0.07221317, -0.96435642, -0.04159164, -0.96511078]]],
       device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0563 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 131, vnnlib ID: 131 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.40095615,  -9.83375263,  -7.76689386,  -9.66946220,  -8.91213799,
          -9.84124184, -11.04437828, -10.26787376,  -3.98419762,  -9.49902916]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [464]; unstable size 464; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 155, 1, 464] with unstable size 154 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 464] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 464] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [154]; unstable size 154; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 154] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 154] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.04108179, 5.15906715, 3.08301520, 4.88842583, 4.12479210, 5.03533173,
         6.29986477, 5.32776594, 4.85973024]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0343 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 132, vnnlib ID: 132 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.95324135, -15.74180508, -20.80966187, -22.22572708, -21.19065666,
         -22.59031105, -22.29429626, -21.67894745, -16.55251884, -15.91638851]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [432]; unstable size 432; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 132, 1, 432] with unstable size 131 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 432] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 432] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [131]; unstable size 131; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 131] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 131] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.68451214,  4.31257534,  5.69330406,  4.56155586,  6.04201603,
          5.73533583,  5.05597782,  0.24247551, -0.06809068]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.95324135, -15.74180508, -20.80966187, -22.22572708, -21.19065666,
         -22.59031105, -22.29429626, -21.67894745, -16.55251884, -15.91638851]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.31996536, -15.27309704, -20.08948708, -21.46234131, -20.40325928,
          -21.81718063, -21.57792282, -20.87321854, -15.90462685, -15.27287483]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00022221]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0428 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 133, vnnlib ID: 133 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -3.23170614, -10.46739864,  -2.10017300,  -3.30273414,  -5.96899986,
          -3.33501148,  -5.76224136,  -4.57778931,  -9.25406361,  -8.82499790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [286]; unstable size 286; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 61, 1, 286] with unstable size 60 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 286] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [60]; unstable size 60; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 60] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 60] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93707120, 8.02992725, 1.03405452, 3.70453048, 1.06637478, 3.43099546,
         2.30599809, 6.81840992, 6.35690308]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0438 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 134, vnnlib ID: 134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
         -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 164, 1, 608] with unstable size 163 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 608] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [163]; unstable size 163; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 163] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 163] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.48984313,  1.58062875,  3.18308473,  1.96417892,  3.38943863,
          2.37361073,  3.29370761, -0.33310562,  2.16880155]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
         -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
          -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00309324]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.15396857,  1.01111114,  1.01111114,  ...,  1.02698421,
             1.04285717,  1.10634947],
           [ 1.02698421,  0.94761908,  0.94761908,  ...,  1.12222254,
             1.12222254,  1.16984153],
           [ 0.99523818,  0.91587305,  0.86825401,  ...,  1.12222254,
             1.13809550,  1.16984153],
           ...,
           [-0.14761895, -0.41746020, -0.43333322,  ..., -0.36984116,
            -0.33809513, -0.41746020],
           [-0.30634910, -0.56031746, -0.57619047,  ..., -0.68730158,
            -0.54444444, -0.36984116],
           [-0.22698402, -0.33809513, -0.40158719,  ..., -0.59206349,
            -0.32222211, -0.14761895]],

          [[ 1.20772982,  1.06280196,  1.06280196,  ...,  1.07890511,
             1.09500813,  1.15942061],
           [ 1.07890511,  0.99838978,  0.99838978,  ...,  1.17552364,
             1.17552364,  1.22383285],
           [ 1.04669893,  0.96618366,  0.91787446,  ...,  1.17552364,
             1.19162667,  1.22383285],
           ...,
           [-0.11272129, -0.38647330, -0.40257636,  ..., -0.33816412,
            -0.30595800, -0.38647330],
           [-0.27375188, -0.53140092, -0.54750401,  ..., -0.66022539,
            -0.51529789, -0.33816412],
           [-0.19323659, -0.30595800, -0.37037024,  ..., -0.56360704,
            -0.28985494, -0.11272129]],

          [[ 1.26086998,  1.12593722,  1.12593722,  ...,  1.14092970,
             1.15592217,  1.21589243],
           [ 1.14092970,  1.06596720,  1.06596720,  ...,  1.23088503,
             1.23088503,  1.27586246],
           [ 1.11094475,  1.03598225,  0.99100471,  ...,  1.23088503,
             1.24587750,  1.27586246],
           ...,
           [ 0.03148442, -0.22338814, -0.23838064,  ..., -0.17841063,
            -0.14842562, -0.22338814],
           [-0.11844061, -0.35832080, -0.37331331,  ..., -0.47826082,
            -0.34332830, -0.17841063],
           [-0.04347810, -0.14842562, -0.20839565,  ..., -0.38830581,
            -0.13343313,  0.03148442]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0536 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 135, vnnlib ID: 135 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.85584545,  -6.89210796, -11.20330238, -10.48305511, -10.31528664,
         -10.58248711, -11.25512695, -10.38301277,  -8.54595566,  -7.81960535]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [417]; unstable size 417; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 417] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 417] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 417] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 171] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.35080290, 3.51902580, 2.76685762, 2.67035389, 2.85706806, 3.53440428,
         2.64734840, 1.17310023, 0.69272715]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0474 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 136, vnnlib ID: 136 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.31404114, -11.99935341,  -8.52472019,  -9.11652184,  -8.93289280,
          -9.32760048, -10.07054329, -10.77766991,  -8.21101475, -11.86982346]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [351]; unstable size 351; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 351] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 351] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 351] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.09101152, 0.87874770, 1.34494686, 1.28547037, 1.54521227, 2.33845377,
         2.98431873, 0.63081133, 3.98045540]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0457 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 137, vnnlib ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
          -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [390]; unstable size 390; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 390] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 390] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 390] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 239] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.07701063,  3.63565016, -0.04559052,  0.64380252, -0.00980759,
          0.65270019,  1.48101163,  3.16953421,  3.15534258]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
          -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.82it/s]100%|██████████| 1/1 [00:00<00:00,  8.81it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.36132240, -11.14967251,  -6.83248758,  -7.53480721,  -6.91983700,
           -7.54735374,  -6.71112919,  -8.56491947, -10.71888256, -10.59876251],
         [ -9.36132240, -11.14967251,  -6.83248758,  -7.53480721,  -6.91983700,
           -7.54735374,  -6.71112919,  -8.56491947, -10.71888256, -10.59876251]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.12135839, 0.20870781]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1162 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.945513725280762
alpha/beta optimization time: 1.2161688804626465
initial alpha-crown bounds: tensor([[ 2.10259366,  3.66781759, -0.03308135,  0.65345061,  0.00669527,
          0.66249597,  1.49558318,  3.20632219,  3.18363762]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.03308135271072388
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6373805999756
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6373393535614
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.63731265068054
Verifying property 2 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03308135]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
         -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03308135]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 390
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 237
Node /15 input 0: size torch.Size([100]) unstable 9
-----------------
# of unstable neurons: 636
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010895729064941406
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.033080101013183594
10 lb beta sum: 0.0, worst -0.03308260440826416
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    func 0.0544    
Accumulated time: func 0.0544    prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 62] 
split level 2: [/input-12, 5] 
split level 3: [/input-12, 61] 
split level 4: [/input-8, 20] 
split level 5: [/input-12, 27] 
split level 6: [/input-8, 29] 
split level 7: [/input-8, 1826] 
split level 8: [/input-8, 1131] 
split level 9: [/input-8, 1114] 
split level 10: [/input-8, 310] 
split level 11: [/input-8, 154] 
split level 12: [/input-8, 1910] 
split level 13: [/input-8, 1172] 
split level 14: [/input-8, 45] 
split level 15: [/input-8, 1827] 
split level 16: [/input-8, 1892] 
split level 17: [/input-8, 1706] 
split level 18: [/input-8, 1169] 
split level 19: [/input-8, 22] 
split level 20: [/input-8, 53] 
split level 21: [/input-8, 1433] 
split level 22: [/input-8, 1850] 
split level 23: [/input-8, 1195] 
split level 24: [/input-8, 347] 
split level 25: [/input-8, 313] 
split level 26: [/input-8, 1097] 
split level 27: [/input-8, 1121] 
split level 28: [/input-8, 346] 
split level 29: [/input-8, 1205] 
split level 30: [/input-8, 1772] 
split level 31: [/input-8, 171] 
split level 32: [/input-8, 139] 
split level 33: [/input-8, 924] 
split level 34: [/input-8, 90] 
split level 35: [/input-8, 1249] 
split level 36: [/input-8, 739] 
split level 37: [/input-8, 1620] 
split level 38: [/input-8, 2026] 
split level 39: [/input, 740] 
split level 40: [/input-8, 754] 
split level 41: [/input-8, 1745] 
split level 42: [/input-8, 1451] 
split level 43: [/input-8, 2018] 
split level 44: [/input-8, 916] 
split level 45: [/input-8, 917] 
split level 46: [/input-8, 54] 
split level 47: [/input-8, 1276] 
split level 48: [/input-8, 1529] 
split level 49: [/input-8, 932] 
split level 50: [/input-8, 95] 
split level 51: [/input-8, 1677] 
split level 52: [/input-8, 1161] 
split level 53: [/input-8, 918] 
split level 54: [/input-8, 1110] 
split level 55: [/input-8, 1750] 
split level 56: [/input-8, 61] 
split level 57: [/input-8, 957] 
split level 58: [/input-8, 1819] 
split level 59: [/input, 3027] 
split level 60: [/input-8, 1197] 
split level 61: [/input-8, 1595] 
split level 62: [/input-8, 1619] 
split level 63: [/input-8, 923] 
split level 64: [/input-8, 927] 
split level 65: [/input-8, 1629] 
split level 66: [/input-8, 94] 
split level 67: [/input-8, 2009] 
split level 68: [/input-8, 1862] 
split level 69: [/input-8, 737] 
split level 70: [/input-8, 1500] 
split level 71: [/input-8, 955] 
split level 72: [/input-8, 1305] 
split level 73: [/input-8, 1232] 
split level 74: [/input-8, 1227] 
split level 75: [/input-8, 1916] 
split level 76: [/input-8, 338] 
split level 77: [/input-8, 1688] 
split level 78: [/input-8, 1446] 
split level 79: [/input, 3143] 
split level 80: [/input-8, 725] 
split level 81: [/input, 2152] 
split level 82: [/input-8, 1127] 
split level 83: [/input-8, 1311] 
split level 84: [/input, 824] 
split level 85: [/input-8, 349] 
split level 86: [/input-8, 1762] 
split level 87: [/input, 1080] 
split level 88: [/input-8, 929] 
split level 89: [/input, 2780] 
split level 90: [/input-8, 1225] 
split level 91: [/input, 3209] 
split level 92: [/input-8, 104] 
split level 93: [/input-8, 1263] 
split level 94: [/input-8, 1290] 
split level 95: [/input-8, 1254] 
split level 96: [/input, 4010] 
split level 97: [/input-8, 1763] 
split level 98: [/input, 2221] 
split level 99: [/input, 1112] 
split level 100: [/input-8, 1230] 
split level 101: [/input-8, 1686] 
split level 102: [/input-8, 1270] 
split level 103: [/input-8, 1463] 
split level 104: [/input-8, 2039] 
split level 105: [/input-8, 1448] 
split level 106: [/input-8, 1851] 
split level 107: [/input, 2930] 
split level 108: [/input-8, 2047] 
split level 109: [/input-8, 1269] 
split level 110: [/input, 721] 
split level 111: [/input-8, 1135] 
split level 112: [/input-8, 1994] 
split level 113: [/input-8, 1337] 
split level 114: [/input-8, 383] 
split level 115: [/input, 1633] 
split level 116: [/input-8, 1932] 
split level 117: [/input, 3925] 
split level 118: [/input-8, 1992] 
split level 119: [/input, 707] 
split level 120: [/input, 3261] 
split level 121: [/input, 2778] 
split level 122: [/input, 2899] 
split level 123: [/input-8, 1481] 
split level 124: [/input-8, 942] 
split level 125: [/input, 2926] 
split level 126: [/input, 1754] 
split level 127: [/input, 2837] 
split level 128: [/input-8, 1261] 
split level 129: [/input-8, 1573] 
split level 130: [/input-8, 937] 
split level 131: [/input, 3211] 
split level 132: [/input, 2069] 
split level 133: [/input, 2220] 
split level 134: [/input, 1586] 
split level 135: [/input, 3702] 
split level 136: [/input-8, 1668] 
split level 137: [/input, 1681] 
split level 138: [/input, 793] 
split level 139: [/input, 1744] 
split level 140: [/input, 2727] 
split level 141: [/input-8, 1312] 
split level 142: [/input, 693] 
split level 143: [/input, 2311] 
split level 144: [/input, 2973] 
split level 145: [/input, 616] 
split level 146: [/input-8, 1861] 
split level 147: [/input, 2946] 
split level 148: [/input, 1759] 
split level 149: [/input-8, 1662] 
split level 150: [/input-8, 1314] 
split level 151: [/input, 3747] 
split level 152: [/input, 2421] 
split level 153: [/input, 4087] 
split level 154: [/input-8, 259] 
split level 155: [/input, 2388] 
split level 156: [/input, 882] 
split level 157: [/input, 904] 
split level 158: [/input, 60] 
split level 159: [/input, 2513] 
split level 160: [/input-8, 370] 
split level 161: [/input, 2957] 
split level 162: [/input, 1122] 
split level 163: [/input-8, 1659] 
split level 164: [/input, 323] 
split level 165: [/input-8, 350] 
split level 166: [/input-8, 345] 
split level 167: [/input, 109] 
split level 168: [/input-8, 352] 
split level 169: [/input, 2376] 
split level 170: [/input, 2333] 
split level 171: [/input-8, 362] 
split level 172: [/input-8, 977] 
split level 173: [/input, 954] 
split level 174: [/input, 2770] 
split level 175: [/input-8, 336] 
split level 176: [/input, 750] 
split level 177: [/input-8, 364] 
split level 178: [/input, 2452] 
split level 179: [/input-8, 1876] 
split level 180: [/input, 681] 
split level 181: [/input-8, 332] 
split level 182: [/input, 2444] 
split level 183: [/input-8, 2008] 
split level 184: [/input, 970] 
split level 185: [/input, 1714] 
split level 186: [/input, 3992] 
split level 187: [/input, 588] 
split level 188: [/input-8, 1489] 
split level 189: [/input, 2786] 
split level 190: [/input-12, 4] 
split level 191: [/input, 2258] 
split level 192: [/input, 919] 
split level 193: [/input, 881] 
split level 194: [/input, 821] 
split level 195: [/input, 2475] 
split level 196: [/input, 1176] 
split level 197: [/input, 397] 
split level 198: [/input, 934] 
split level 199: [/input, 1189] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06409335136413574
10 lb beta sum: 0.0, worst -0.0332949161529541
Time: prepare 0.0115    bound 0.0991    transfer 0.0016    finalize 0.0027    func 0.1175    
Accumulated time: func 0.1719    prepare 0.0218    bound 0.1531    transfer 0.0017    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.02744281) min lb tensor(-0.03308010)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010335683822631836 
BICCOS Cumulative time: 0.010335683822631836
Preprocessing time: 0.00996255874633789 Inference time: 0.00011372566223144531 Add cuts time: 4.649162292480469e-05 Cut analysis time: 0.0002129077911376953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02625 (1), -0.02576 (1), -0.02554 (1), -0.02505 (1), -0.02489 (1), -0.02444 (1), -0.02429 (1), -0.02423 (1), -0.02423 (1), -0.02412 (1), -0.02407 (1), -0.02402 (1), -0.02391 (1), -0.02326 (1), -0.02295 (1), -0.02271 (1), -0.02264 (1), -0.02226 (1), -0.02220 (1), -0.02162 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5230    set_bounds 0.0087    solve 0.1175    add 0.0689    
Accumulated time: pickout 0.0003    decision 0.5230    set_bounds 0.0087    solve 0.1175    add 0.0689    
Current (lb-rhs): -0.026251673698425293
50 domains visited
Cumulative time: 0.7883801460266113

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 62] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 5] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] 
split level 2: [/input-12, 61] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 61] [/input-12, 5] 
split level 3: [/input-12, 27] [/input-12, 27] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 27] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01614069938659668

all verified at 1th iter
Time: prepare 0.0072    bound 0.0117    transfer 0.0010    finalize 0.0021    func 0.0246    
Accumulated time: func 0.1965    prepare 0.0292    bound 0.1648    transfer 0.0027    finalize 0.0049    
all_split False
======================Cut inference begins======================
max lb tensor(0.06513011) min lb tensor(0.00011402)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03407573699951172 
BICCOS Cumulative time: 0.044411420822143555
Preprocessing time: 0.011555194854736328 Inference time: 0.014089107513427734 Add cuts time: 0.008240699768066406 Cut analysis time: 0.00019073486328125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0199    set_bounds 0.0115    solve 0.0247    add 0.0149    
Accumulated time: pickout 0.0013    decision 0.5430    set_bounds 0.0202    solve 0.1422    add 0.0838    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 5, 33]), tensor([-1., -1.]), tensor([0, 0]), tensor([8.91312579e-11, 5.91543168e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 5, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([8.91312579e-11, 3.21392268e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 5, 33]), tensor([ 1., -1.]), tensor([0, 0]), tensor([3.97426002e-37, 6.12175316e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 5, 33]), tensor([1., 1.]), tensor([0, 0]), tensor([3.97426002e-37, 3.15342396e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.01963818073272705

all verified at 0th iter
Time: prepare 0.0003    bound 0.0042    transfer 0.0001    finalize 0.0001    func 0.0048    
Accumulated time: func 0.2013    prepare 0.0295    bound 0.1690    transfer 0.0028    finalize 0.0051    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.5608093738556
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.56073474884033
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.5607099533081
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.56068992614746
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.56053185462952
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.56051206588745
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4395 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 138, vnnlib ID: 138 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.78461742, -7.78471851, -6.68574715, -7.54008961, -6.71664238,
         -7.68185663, -7.60335922, -7.74536133, -7.44903946, -7.66552782]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [390]; unstable size 390; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 390] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 390] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 390] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 164] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.46082914, 0.41245532, 1.06713581, 0.36195052, 1.19837439, 1.11187375,
         1.25493610, 1.29937804, 1.30356193]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0625 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 139, vnnlib ID: 139 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.36590004, -7.92974758, -3.18712282, -4.35600662, -3.02723885,
         -4.45325327, -2.34703112, -4.90892315, -8.33985519, -7.64006281]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [432]; unstable size 432; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 432] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 432] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 432] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 188] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.30574799, 4.53140736, 0.46472597, 1.64646149, 0.30628800, 1.73555934,
         2.01324773, 5.01047897, 4.32014751]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0503 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 140, vnnlib ID: 140 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.67068291,  -8.63208675, -12.35949326, -11.84118938, -12.90088081,
         -12.06089878, -11.65532017, -11.34745598, -11.09524727,  -7.12381601]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [439]; unstable size 439; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 439] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 1, 1, 439] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 439] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 1, 1, 166] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.93782830, 1.22470033, 4.46517467, 4.00368023, 4.95243645, 4.21050739,
         3.68815422, 3.40154791, 3.39086008]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0619 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 141, vnnlib ID: 141 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.23027992, -5.59671307, -8.10045242, -8.03788757, -7.89279747,
         -8.14015102, -7.49874401, -7.77289391, -6.25006390, -5.63300037]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [449]; unstable size 449; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 164, 1, 449] with unstable size 163 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 449] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 449] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [163]; unstable size 163; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 163] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 163] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.13565874,  1.81420469,  1.73954368,  1.59858179,  1.83115482,
          1.20980716,  1.41280031,  0.24144989, -0.16323659]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.23027992, -5.59671307, -8.10045242, -8.03788757, -7.89279747,
         -8.14015102, -7.49874401, -7.77289391, -6.25006390, -5.63300037]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.93233824, -5.38019562, -7.65612125, -7.53466606, -7.42454910,
          -7.63522720, -7.07436752, -7.25748777, -5.98633766, -5.26369810]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11649752]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0377 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 142, vnnlib ID: 142 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.83678341, -8.62305260, -5.57152319, -6.19232559, -5.90445709,
         -6.32129097, -3.83951640, -7.52650928, -9.32637024, -8.57943630]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [435]; unstable size 435; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 435] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 435] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 435] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 216] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.17719889, 3.78496766, 1.30179667, 1.96983409, 1.59501207, 2.08713460,
         2.99926043, 4.44833326, 3.73394632]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0622 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 143, vnnlib ID: 143 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
          -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 145, 1, 527] with unstable size 144 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 527] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [144]; unstable size 144; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 144] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 144] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.59060526,  6.26868534, -0.24463533,  1.11096752,  1.21317482,
          0.31436089,  1.29949212,  6.03089809,  5.42754221]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
          -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
           -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04849601]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.31269872e+00,  1.32857168e+00,  5.98412752e-01,  ...,
             5.03174663e-01,  8.68254006e-01,  1.13809550e+00],
           [ 1.40793681e+00,  1.28095269e+00,  1.13809550e+00,  ...,
             1.26507962e+00,  1.42380977e+00,  1.23333359e+00],
           [ 1.10634947e+00,  1.47142887e+00,  1.47142887e+00,  ...,
             1.39206374e+00,  1.40793681e+00,  1.37619078e+00],
           ...,
           [ 1.42380977e+00,  1.09047651e+00,  9.79365110e-01,  ...,
             1.26507962e+00,  1.28095269e+00,  1.21746063e+00],
           [ 1.29682565e+00,  1.04285717e+00,  1.20158756e+00,  ...,
             9.63492095e-01,  8.68254006e-01,  8.20634961e-01],
           [ 1.10634947e+00,  1.36031771e+00,  1.32857168e+00,  ...,
             9.15873051e-01,  6.14285767e-01,  6.46031797e-01]],

          [[ 9.33977544e-01,  1.17552364e+00,  5.79710245e-01,  ...,
             4.34782714e-01,  7.89049983e-01,  9.66183662e-01],
           [ 1.40096653e+00,  1.27214205e+00,  1.06280196e+00,  ...,
             1.14331758e+00,  1.28824508e+00,  1.09500813e+00],
           [ 1.28824508e+00,  1.56199706e+00,  1.44927561e+00,  ...,
             1.09500813e+00,  1.17552364e+00,  1.28824508e+00],
           ...,
           [ 1.17552364e+00,  9.82286692e-01,  8.85668337e-01,  ...,
             1.30434811e+00,  1.33655429e+00,  1.28824508e+00],
           [ 1.06280196e+00,  8.21256101e-01,  9.01771426e-01,  ...,
             1.12721443e+00,  1.04669893e+00,  1.03059590e+00],
           [ 8.69565308e-01,  1.12721443e+00,  9.98389781e-01,  ...,
             1.09500813e+00,  8.21256101e-01,  9.01771426e-01]],

          [[ 3.14844176e-02,  3.01349491e-01,  1.06446937e-01,  ...,
             9.14544314e-02,  1.21439442e-01,  1.51424453e-01],
           [ 1.36431947e-01,  1.64919142e-02,  1.81409463e-01,  ...,
             5.11244535e-01,  4.51274544e-01,  1.21439442e-01],
           [-1.48425624e-01,  1.51424453e-01,  2.26386964e-01,  ...,
             2.56371975e-01,  1.51424453e-01,  6.14694245e-02],
           ...,
           [ 3.16341996e-01,  1.49940979e-03, -1.33433133e-01,  ...,
            -2.84855980e-02,  1.64919142e-02, -2.84855980e-02],
           [ 1.36431947e-01, -1.18440613e-01,  1.49940979e-03,  ...,
            -2.83358276e-01, -3.28335792e-01, -3.58320802e-01],
           [ 1.64919142e-02,  2.26386964e-01,  1.51424453e-01,  ...,
            -2.38380641e-01, -5.23238361e-01, -5.23238361e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0346 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 144, vnnlib ID: 144 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.79352665, -12.23771381,  -9.42079353,  -8.18088913,  -9.67141724,
          -8.12612629,  -9.56548309,  -9.96920204, -11.10543823, -11.25221634]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 427] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 427] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 169] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.20623183, 3.44203925, 1.05065632, 0.04120036, 1.25533807, 1.08397412,
         1.56545269, 2.38391042, 2.54189825]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0440 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 145, vnnlib ID: 145 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.00209332, -8.59088707, -2.82365561, -3.22743535, -3.59733486,
         -3.29684186, -4.70374870, -4.82936382, -7.53730106, -8.04424858]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [667]; unstable size 667; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 667] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 667] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 667] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 174] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.19111562,  4.58325720, -0.76220047, -0.08250546, -0.05808830,
          1.11135769,  1.00770712,  3.64658070,  4.12331247]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.00209332, -8.59088707, -2.82365561, -3.22743535, -3.59733486,
         -3.29684186, -4.70374870, -4.82936382, -7.53730106, -8.04424858]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.00209332, -8.59088707, -2.82365608, -3.22743607, -3.59733486,
          -3.29684305, -4.70374966, -4.82936430, -7.53730202, -8.04424763],
         [-5.00209332, -8.59088707, -2.82365608, -3.22743607, -3.59733486,
          -3.29684305, -4.70374966, -4.82936430, -7.53730202, -8.04424763]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.47318697, -0.06940699,  0.30049181]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]],


         [[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]],


         [[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0600 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 146, vnnlib ID: 146 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.50118589,  -9.62631321, -11.06040764, -11.60052204, -11.25030899,
         -11.77759075, -11.48435974, -10.44144726,  -6.63968658,  -9.16156864]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [439]; unstable size 439; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 439] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 439] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 439] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 153] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.49919498, 2.48104453, 3.67119694, 4.11645269, 3.79514456, 4.28060246,
         4.02054405, 2.84020472, 1.95948529]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0638 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 147, vnnlib ID: 147 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.61050510, -18.19259834, -14.86876678, -16.21520042, -15.81747723,
         -16.15572166, -15.55497742, -15.71164322, -17.60300827, -19.53060722]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 540] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 540] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 185] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.21178174, 2.48818970, 0.96625054, 0.66403449, 0.90339810, 0.26163766,
         0.41980004, 1.96595526, 3.83946848]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0336 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 148, vnnlib ID: 148 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.16096544, -5.40149117, -3.63111496, -3.02717566, -3.77620387,
         -3.01623964, -4.59425926, -2.84824109, -5.91380119, -4.83607054]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [455]; unstable size 455; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 145, 1, 455] with unstable size 144 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 455] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 455] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [144]; unstable size 144; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 144] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 144] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.78772736,  1.81875658,  0.45767832, -0.11035323,  0.65982580,
         -0.12342548,  1.28189731,  2.28518867,  1.34910369]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.16096544, -5.40149117, -3.63111496, -3.02717566, -3.77620387,
         -3.01623964, -4.59425926, -2.84824109, -5.91380119, -4.83607054]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.40923071, -5.67548466, -3.81281948, -3.15027142, -4.00697517,
          -3.13820839, -4.74294853, -3.15190148, -6.05144215, -5.10408592],
         [-6.40923071, -5.67548466, -3.81281948, -3.15027142, -4.00697517,
          -3.13820839, -4.74294853, -3.15190148, -6.05144215, -5.10408592]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00163007, -0.01369309]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0405 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 149, vnnlib ID: 149 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.46979618, -12.58957005,  -7.37592888,  -8.55527401,  -7.20859337,
          -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046116]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 527] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 527] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 256] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.46516299,  4.14436531,  0.83085936, -0.49284074,  0.88343513,
         -0.76752138,  1.28632259,  3.93838739,  3.79598069]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.46979618, -12.58957005,  -7.37592888,  -8.55527401,  -7.20859337,
          -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046116]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.46979618, -12.58956909,  -7.37592793,  -8.55527496,  -7.20859337,
           -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046211],
         [-10.46979618, -12.58956909,  -7.37592793,  -8.55527496,  -7.20859337,
           -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046211]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16733456, -0.39017296]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.32222211, -1.13174593, -1.17936504,  ..., -0.68730158,
            -0.81428570, -0.54444444],
           [-1.24285710, -1.09999990, -1.38571417,  ..., -0.68730158,
            -0.78253967, -0.79841268],
           [-1.08412695, -0.90952379, -1.13174593,  ..., -0.49682540,
            -0.84603173, -0.87777776],
           ...,
           [-0.19523799,  1.31269872,  0.43968260,  ..., -0.95714283,
            -0.84603173, -0.68730158],
           [ 0.07460327,  1.37619078,  0.90000004,  ..., -0.95714283,
            -0.75079364, -0.84603173],
           [ 0.26507944,  0.78888893,  0.43968260,  ..., -0.97301590,
            -0.92539680, -0.97301590]],

          [[-1.30434775, -1.01449275, -0.98228657,  ..., -0.51529789,
            -0.45088565, -0.25764883],
           [-1.06280184, -0.83735907, -1.19162631,  ..., -0.43478248,
            -0.41867942, -0.30595800],
           [-0.93397743, -0.67632848, -0.93397743,  ..., -0.35426718,
            -0.38647330, -0.41867942],
           ...,
           [-0.24154577,  0.62801939,  0.12882459,  ..., -0.98228657,
            -0.85346210, -0.70853460],
           [-0.09661824,  0.70853472,  0.43478271,  ..., -0.99838966,
            -0.78904986, -0.91787434],
           [ 0.04830930,  0.51529801,  0.28985518,  ..., -0.95008045,
            -0.90177131, -0.98228657]],

          [[-1.16791618, -0.98800600, -1.03298354,  ..., -0.70314842,
            -0.65817088, -0.28335828],
           [-1.00299859, -0.92803597, -1.16791618,  ..., -0.58320838,
            -0.53823084, -0.49325335],
           [-0.92803597, -0.86806595, -1.06296861,  ..., -0.26836565,
            -0.53823084, -0.55322337],
           ...,
           [-0.35832080,  0.45127454, -0.05847061,  ..., -0.85307342,
            -0.74812591, -0.56821585],
           [-0.26836565,  0.48125952,  0.33133450,  ..., -0.85307342,
            -0.70314842, -0.76311839],
           [ 0.03148442,  0.51124454,  0.42128953,  ..., -0.83808094,
            -0.79310340, -0.82308841]]],


         [[[-1.32222211, -1.13174593, -1.17936504,  ..., -0.68730158,
            -0.81428570, -0.54444444],
           [-1.24285710, -1.09999990, -1.38571417,  ..., -0.68730158,
            -0.78253967, -0.79841268],
           [-1.08412695, -0.90952379, -1.13174593,  ..., -0.49682540,
            -0.84603173, -0.87777776],
           ...,
           [-0.19523799,  1.31269872,  0.43968260,  ..., -0.95714283,
            -0.84603173, -0.68730158],
           [ 0.07460327,  1.37619078,  0.90000004,  ..., -0.95714283,
            -0.75079364, -0.84603173],
           [ 0.26507944,  0.78888893,  0.43968260,  ..., -0.97301590,
            -0.92539680, -0.97301590]],

          [[-1.30434775, -1.01449275, -0.98228657,  ..., -0.51529789,
            -0.45088565, -0.25764883],
           [-1.06280184, -0.83735907, -1.19162631,  ..., -0.43478248,
            -0.41867942, -0.30595800],
           [-0.93397743, -0.67632848, -0.93397743,  ..., -0.35426718,
            -0.38647330, -0.41867942],
           ...,
           [-0.24154577,  0.62801939,  0.12882459,  ..., -0.98228657,
            -0.85346210, -0.70853460],
           [-0.09661824,  0.70853472,  0.43478271,  ..., -0.99838966,
            -0.78904986, -0.91787434],
           [ 0.04830930,  0.51529801,  0.28985518,  ..., -0.95008045,
            -0.90177131, -0.98228657]],

          [[-1.16791618, -0.98800600, -1.03298354,  ..., -0.70314842,
            -0.65817088, -0.28335828],
           [-1.00299859, -0.92803597, -1.16791618,  ..., -0.58320838,
            -0.53823084, -0.49325335],
           [-0.92803597, -0.86806595, -1.06296861,  ..., -0.26836565,
            -0.53823084, -0.55322337],
           ...,
           [-0.35832080,  0.45127454, -0.05847061,  ..., -0.85307342,
            -0.74812591, -0.56821585],
           [-0.26836565,  0.48125952,  0.33133450,  ..., -0.85307342,
            -0.70314842, -0.76311839],
           [ 0.03148442,  0.51124454,  0.42128953,  ..., -0.83808094,
            -0.79310340, -0.82308841]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0407 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 150, vnnlib ID: 150 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.71911144, -10.78857327, -13.80652714, -15.57193089, -13.78481674,
         -15.82200527, -15.45771599, -13.88326550,  -9.93582153, -10.41513634]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [582]; unstable size 582; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 582] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 582] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 582] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 186] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.74895859,  1.97158432,  3.71107578,  1.79468775,  3.93884945,
          3.53552580,  1.82552457, -1.48514724, -0.67360955]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.71911144, -10.78857327, -13.80652714, -15.57193089, -13.78481674,
         -15.82200527, -15.45771599, -13.88326550,  -9.93582153, -10.41513634]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.71911335, -10.78857327, -13.80652618, -15.57193279, -13.78481674,
          -15.82200718, -15.45771790, -13.88326550,  -9.93582153, -10.41513634],
         [ -9.71911335, -10.78857327, -13.80652618, -15.57193279, -13.78481674,
          -15.82200718, -15.45771790, -13.88326550,  -9.93582153, -10.41513634]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.06945992, -0.85275173, -0.37343693]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0391 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 151, vnnlib ID: 151 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
          -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [436]; unstable size 436; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 436] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 436] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 436] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 170] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.49995542,  4.81325483,  0.79489255, -0.03725127,  0.90810943,
          1.23507953,  0.64367205,  4.26866484,  4.34728479]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
          -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
           -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01991272]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0439 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 152, vnnlib ID: 152 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.10573387, -12.44030190,  -8.55103970,  -9.26790047,  -7.95741177,
          -9.40282917,  -8.36335182, -10.19440269, -12.55924797, -12.84323978]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [434]; unstable size 434; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 434] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 434] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 434] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 156] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.99604273,  3.13732719,  0.34504730, -0.83755273,  0.47180045,
         -0.58407056,  1.10311329,  3.33464861,  3.55361891]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.10573387, -12.44030190,  -8.55103970,  -9.26790047,  -7.95741177,
          -9.40282917,  -8.36335182, -10.19440269, -12.55924797, -12.84323978]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.10573483, -12.44030285,  -8.55103970,  -9.26790047,  -7.95741272,
           -9.40283012,  -8.36335182, -10.19440365, -12.55924892, -12.84324265],
         [-10.10573483, -12.44030285,  -8.55103970,  -9.26790047,  -7.95741272,
           -9.40283012,  -8.36335182, -10.19440365, -12.55924892, -12.84324265]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.59362698, -0.18768787]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-9.41269815e-01, -9.09523785e-01, -1.33809519e+00,  ...,
            -6.39682531e-01,  7.46032670e-02,  1.85714364e-01],
           [-5.28571427e-01, -7.98412681e-01, -1.25873005e+00,  ...,
            -5.76190472e-01, -2.42857039e-01,  1.06349289e-01],
           [-4.65079248e-01, -4.01587188e-01, -7.66666651e-01,  ...,
            -3.85714173e-01, -3.53968143e-01, -1.63491964e-01],
           ...,
           [ 1.97936535e+00,  1.10634947e+00,  1.42380977e+00,  ...,
             1.94761932e+00,  1.94761932e+00,  1.97936535e+00],
           [ 1.94761932e+00,  1.47142887e+00,  1.37619078e+00,  ...,
             1.96349227e+00,  1.82063520e+00,  1.80476213e+00],
           [ 1.99523830e+00,  1.78888917e+00,  1.85238123e+00,  ...,
             1.99523830e+00,  1.99523830e+00,  1.94761932e+00]],

          [[-1.12721294e-01, -1.44927412e-01, -6.28019273e-01,  ...,
            -2.25442708e-01,  3.54267418e-01,  6.28019392e-01],
           [ 2.09339887e-01, -1.12721294e-01, -5.47504008e-01,  ...,
            -2.89854944e-01,  1.22934580e-07,  5.47504127e-01],
           [ 1.93236828e-01,  2.25442946e-01, -1.61029361e-02,  ...,
            -8.05151686e-02, -8.05151686e-02,  2.89855182e-01],
           ...,
           [ 1.70692456e+00,  8.37359190e-01,  1.14331758e+00,  ...,
             1.75523376e+00,  1.73913074e+00,  1.78743994e+00],
           [ 1.73913074e+00,  1.20772982e+00,  1.04669893e+00,  ...,
             1.72302771e+00,  1.57810009e+00,  1.61030626e+00],
           [ 1.85185218e+00,  1.57810009e+00,  1.56199706e+00,  ...,
             1.75523376e+00,  1.75523376e+00,  1.73913074e+00]],

          [[-1.39280367e+00, -1.30284870e+00, -1.61769128e+00,  ...,
            -1.27286363e+00, -7.48125911e-01, -3.73313308e-01],
           [-1.19790113e+00, -1.39280367e+00, -1.60269880e+00,  ...,
            -1.25787115e+00, -1.03298354e+00, -4.33283329e-01],
           [-1.13793111e+00, -1.21289361e+00, -1.45277369e+00,  ...,
            -1.18290865e+00, -1.03298354e+00, -7.18140900e-01],
           ...,
           [ 1.84557760e+00,  9.76012170e-01,  1.24587750e+00,  ...,
             1.87556267e+00,  1.84557760e+00,  1.87556267e+00],
           [ 1.87556267e+00,  1.33583248e+00,  1.15592217e+00,  ...,
             1.83058512e+00,  1.69565260e+00,  1.69565260e+00],
           [ 1.96551764e+00,  1.69565260e+00,  1.68066013e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.84557760e+00]]],


         [[[-9.41269815e-01, -9.09523785e-01, -1.33809519e+00,  ...,
            -6.39682531e-01,  7.46032670e-02,  1.85714364e-01],
           [-5.28571427e-01, -7.98412681e-01, -1.25873005e+00,  ...,
            -5.76190472e-01, -2.42857039e-01,  1.06349289e-01],
           [-4.65079248e-01, -4.01587188e-01, -7.66666651e-01,  ...,
            -3.85714173e-01, -3.53968143e-01, -1.63491964e-01],
           ...,
           [ 1.97936535e+00,  1.10634947e+00,  1.42380977e+00,  ...,
             1.94761932e+00,  1.94761932e+00,  1.97936535e+00],
           [ 1.94761932e+00,  1.47142887e+00,  1.37619078e+00,  ...,
             1.96349227e+00,  1.82063520e+00,  1.80476213e+00],
           [ 1.99523830e+00,  1.78888917e+00,  1.85238123e+00,  ...,
             1.99523830e+00,  1.99523830e+00,  1.94761932e+00]],

          [[-1.12721294e-01, -1.44927412e-01, -6.28019273e-01,  ...,
            -2.25442708e-01,  3.54267418e-01,  6.28019392e-01],
           [ 2.09339887e-01, -1.12721294e-01, -5.47504008e-01,  ...,
            -2.89854944e-01,  1.22934580e-07,  5.47504127e-01],
           [ 1.93236828e-01,  2.25442946e-01, -1.61029361e-02,  ...,
            -8.05151686e-02, -8.05151686e-02,  2.89855182e-01],
           ...,
           [ 1.70692456e+00,  8.37359190e-01,  1.14331758e+00,  ...,
             1.75523376e+00,  1.73913074e+00,  1.78743994e+00],
           [ 1.73913074e+00,  1.20772982e+00,  1.04669893e+00,  ...,
             1.72302771e+00,  1.57810009e+00,  1.61030626e+00],
           [ 1.85185218e+00,  1.57810009e+00,  1.56199706e+00,  ...,
             1.75523376e+00,  1.75523376e+00,  1.73913074e+00]],

          [[-1.39280367e+00, -1.30284870e+00, -1.61769128e+00,  ...,
            -1.27286363e+00, -7.48125911e-01, -3.73313308e-01],
           [-1.19790113e+00, -1.39280367e+00, -1.60269880e+00,  ...,
            -1.25787115e+00, -1.03298354e+00, -4.33283329e-01],
           [-1.13793111e+00, -1.21289361e+00, -1.45277369e+00,  ...,
            -1.18290865e+00, -1.03298354e+00, -7.18140900e-01],
           ...,
           [ 1.84557760e+00,  9.76012170e-01,  1.24587750e+00,  ...,
             1.87556267e+00,  1.84557760e+00,  1.87556267e+00],
           [ 1.87556267e+00,  1.33583248e+00,  1.15592217e+00,  ...,
             1.83058512e+00,  1.69565260e+00,  1.69565260e+00],
           [ 1.96551764e+00,  1.69565260e+00,  1.68066013e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.84557760e+00]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0323 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 153, vnnlib ID: 153 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.04411221,  -6.56294537, -10.49686623, -10.71459293, -10.65121841,
         -10.91873455, -10.75874615, -10.58030510,  -7.05852127,  -5.32773304]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [560]; unstable size 560; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 560] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 560] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 560] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 159] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.93047810, 0.90146828, 4.35855198, 4.67746592, 4.44866705, 4.86577225,
         4.63572979, 4.36071730, 1.07372642]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0489 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 154, vnnlib ID: 154 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.33148384, -10.59604359,  -6.13104391,  -5.15102005,  -5.68771362,
          -5.06781912,  -6.22119141,  -6.70600891,  -8.64515400, -10.90875530]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [554]; unstable size 554; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 554] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 554] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 554] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 149] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.75479221, 4.87106228, 0.82534444, 0.06818698, 0.31933546, 0.85642600,
         1.17236519, 2.96178937, 5.26937962]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0363 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 155, vnnlib ID: 155 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.94084406, -4.36918736, -2.39931107, -2.66348886, -2.53788948,
         -2.76773334, -2.43246198, -3.65804195, -1.78550899, -3.21363306]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 225, 1, 458] with unstable size 224 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 458] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [224]; unstable size 224; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 224] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 224] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.23604918,  1.11150885, -0.46573162, -0.15052673, -0.32735407,
         -0.05409920,  0.68027079, -1.50479579, -0.02969646]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.94084406, -4.36918736, -2.39931107, -2.66348886, -2.53788948,
         -2.76773334, -2.43246198, -3.65804195, -1.78550899, -3.21363306]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.94084358, -4.36918688, -2.39931107, -2.66348863, -2.53788924,
          -2.76773310, -2.43246150, -3.65804195, -1.78550875, -3.21363282],
         [-2.94084358, -4.36918688, -2.39931107, -2.66348863, -2.53788924,
          -2.76773310, -2.43246150, -3.65804195, -1.78550875, -3.21363282]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.50838208, -0.03315043,  0.23102713,  0.10542774,  0.33527160,
          -0.64695275,  0.78117132]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         ...,


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0517 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 156, vnnlib ID: 156 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-9.18817234, -8.52420235, -6.17824697, -5.90761089, -6.00881290,
         -5.93657160, -5.09397602, -7.20189238, -9.47287750, -8.95226574]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [492]; unstable size 492; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 492] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 492] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 492] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 177] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.78877187e+00,  1.95449376e+00,  8.93950462e-04, -4.40961234e-02,
         -1.61327600e-01, -1.15325046e+00,  1.05116034e+00,  3.01431775e+00,
          2.46340561e+00]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-9.18817234, -8.52420235, -6.17824697, -5.90761089, -6.00881290,
         -5.93657160, -5.09397602, -7.20189238, -9.47287750, -8.95226574]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-9.18817234, -8.52420330, -6.17824793, -5.90761185, -6.00881290,
          -5.93657255, -5.09397602, -7.20189381, -9.47287750, -8.95226765],
         [-9.18817234, -8.52420330, -6.17824793, -5.90761185, -6.00881290,
          -5.93657255, -5.09397602, -7.20189381, -9.47287750, -8.95226765]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02896070,  0.07224035, -0.84259653]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0536 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 157, vnnlib ID: 157 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.42523384, -13.67537022, -17.12404442, -17.76034546, -18.02211761,
         -18.14136124, -17.20537567, -17.92313957, -14.93622971, -12.06187916]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 118, 1, 403] with unstable size 117 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [117]; unstable size 117; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 117] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.82648921, 1.30361032, 4.42907429, 5.04763699, 5.31513500, 5.40978765,
         4.49749708, 5.15742779, 2.39878798]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0487 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 158, vnnlib ID: 158 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.89985514, -8.20181656, -7.95871973, -6.18419170, -7.78199673,
         -6.14752007, -7.65328979, -6.98220968, -6.28924084, -8.29117870]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 445] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 445] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 170] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.18119693,  1.26755655,  0.96031809, -0.95989799,  0.70830917,
         -1.01292610,  0.53413868, -0.22250175,  1.41924679]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.89985514, -8.20181656, -7.95871973, -6.18419170, -7.78199673,
         -6.14752007, -7.65328979, -6.98220968, -6.28924084, -8.29117870]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.89985371, -8.20181370, -7.95871830, -6.18419075, -7.78199673,
          -6.14751959, -7.65328884, -6.98220921, -6.28923941, -8.29117870],
         [-7.89985371, -8.20181370, -7.95871830, -6.18419075, -7.78199673,
          -6.14751959, -7.65328884, -6.98220921, -6.28923941, -8.29117870]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.10504866, -0.14171982,  0.69296980]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]],


         [[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]],


         [[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0591 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 159, vnnlib ID: 159 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
         -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [381]; unstable size 381; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 146, 1, 381] with unstable size 145 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 381] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 381] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [145]; unstable size 145; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 145] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 145] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.04605168,  1.32969522,  1.10167623,  0.96962857,  2.23392868,
          1.26165533,  3.33647394,  1.48339975,  1.25178480]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
         -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.77it/s]100%|██████████| 1/1 [00:00<00:00,  8.76it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.66336918, -16.24439430, -15.76870918, -15.69548130, -16.94470787,
          -16.00302887, -14.51145744, -18.16604233, -16.27715111, -16.16013527]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.15191174]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1168 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.085122108459473
alpha/beta optimization time: 1.230733871459961
initial alpha-crown bounds: tensor([[-0.02563971,  1.36089849,  1.10909164,  0.97797829,  2.24304676,
          1.27068949,  3.34929562,  1.51245940,  1.28730202]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.025639712810516357
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6189796924591
Verifying property 0 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02563971]], device='cuda:0') need to verify.
Model prediction is: tensor([-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
        -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02563971]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 381
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 144
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 531
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010180473327636719
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025637567043304443
10 lb beta sum: 0.0, worst -0.025639712810516357
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    func 0.0534    
Accumulated time: func 0.0534    prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 27] 
split level 1: [/input-12, 33] 
split level 2: [/input-12, 61] 
split level 3: [/input-12, 57] 
split level 4: [/input-8, 995] 
split level 5: [/input-8, 988] 
split level 6: [/input-8, 2018] 
split level 7: [/input-8, 741] 
split level 8: [/input-12, 47] 
split level 9: [/input-8, 989] 
split level 10: [/input-8, 987] 
split level 11: [/input-8, 1628] 
split level 12: [/input-8, 1770] 
split level 13: [/input-8, 1765] 
split level 14: [/input-8, 997] 
split level 15: [/input-8, 739] 
split level 16: [/input-8, 1762] 
split level 17: [/input-8, 346] 
split level 18: [/input-8, 1771] 
split level 19: [/input-8, 738] 
split level 20: [/input-8, 1331] 
split level 21: [/input-8, 731] 
split level 22: [/input, 3175] 
split level 23: [/input-8, 1750] 
split level 24: [/input, 165] 
split level 25: [/input-8, 1425] 
split level 26: [/input-8, 2029] 
split level 27: [/input-8, 729] 
split level 28: [/input-8, 1782] 
split level 29: [/input, 3176] 
split level 30: [/input-8, 91] 
split level 31: [/input, 2712] 
split level 32: [/input, 3225] 
split level 33: [/input-8, 356] 
split level 34: [/input, 2131] 
split level 35: [/input-8, 924] 
split level 36: [/input-8, 782] 
split level 37: [/input-8, 819] 
split level 38: [/input-8, 29] 
split level 39: [/input, 2713] 
split level 40: [/input-8, 1882] 
split level 41: [/input-8, 357] 
split level 42: [/input-8, 164] 
split level 43: [/input-8, 1333] 
split level 44: [/input-8, 1430] 
split level 45: [/input-8, 1874] 
split level 46: [/input-8, 781] 
split level 47: [/input, 3211] 
split level 48: [/input, 3173] 
split level 49: [/input, 3243] 
split level 50: [/input-8, 1759] 
split level 51: [/input, 2711] 
split level 52: [/input-8, 1778] 
split level 53: [/input-8, 1314] 
split level 54: [/input, 2705] 
split level 55: [/input-8, 818] 
split level 56: [/input-8, 737] 
split level 57: [/input, 2694] 
split level 58: [/input-8, 1203] 
split level 59: [/input-8, 918] 
split level 60: [/input-8, 1187] 
split level 61: [/input, 606] 
split level 62: [/input-8, 1324] 
split level 63: [/input-8, 1763] 
split level 64: [/input-8, 1883] 
split level 65: [/input, 2397] 
split level 66: [/input, 122] 
split level 67: [/input, 374] 
split level 68: [/input, 2411] 
split level 69: [/input, 3161] 
split level 70: [/input-8, 1330] 
split level 71: [/input-8, 1325] 
split level 72: [/input, 155] 
split level 73: [/input-8, 1323] 
split level 74: [/input-8, 926] 
split level 75: [/input, 3189] 
split level 76: [/input, 3227] 
split level 77: [/input, 2900] 
split level 78: [/input, 371] 
split level 79: [/input-8, 1334] 
split level 80: [/input, 3212] 
split level 81: [/input-8, 1321] 
split level 82: [/input-8, 790] 
split level 83: [/input, 3242] 
split level 84: [/input, 1672] 
split level 85: [/input, 156] 
split level 86: [/input-8, 1322] 
split level 87: [/input-8, 930] 
split level 88: [/input-8, 817] 
split level 89: [/input, 2431] 
split level 90: [/input-8, 828] 
split level 91: [/input, 106] 
split level 92: [/input-8, 827] 
split level 93: [/input, 3177] 
split level 94: [/input, 3171] 
split level 95: [/input, 3260] 
split level 96: [/input, 691] 
split level 97: [/input, 3156] 
split level 98: [/input, 2204] 
split level 99: [/input-8, 1241] 
split level 100: [/input-8, 826] 
split level 101: [/input, 1673] 
split level 102: [/input-8, 829] 
split level 103: [/input, 3962] 
split level 104: [/input-8, 830] 
split level 105: [/input-8, 1309] 
split level 106: [/input, 94] 
split level 107: [/input-8, 1326] 
split level 108: [/input, 3213] 
split level 109: [/input, 434] 
split level 110: [/input, 572] 
split level 111: [/input, 2455] 
split level 112: [/input-8, 825] 
split level 113: [/input-8, 720] 
split level 114: [/input, 2940] 
split level 115: [/input, 2380] 
split level 116: [/input-8, 1664] 
split level 117: [/input-8, 849] 
split level 118: [/input, 305] 
split level 119: [/input, 3174] 
split level 120: [/input-8, 1755] 
split level 121: [/input-8, 1237] 
split level 122: [/input, 458] 
split level 123: [/input, 2899] 
split level 124: [/input-8, 778] 
split level 125: [/input, 3963] 
split level 126: [/input, 1675] 
split level 127: [/input, 3979] 
split level 128: [/input-8, 1316] 
split level 129: [/input, 306] 
split level 130: [/input, 683] 
split level 131: [/input, 2203] 
split level 132: [/input, 2205] 
split level 133: [/input, 3196] 
split level 134: [/input, 2169] 
split level 135: [/input, 446] 
split level 136: [/input-8, 1253] 
split level 137: [/input, 2202] 
split level 138: [/input, 681] 
split level 139: [/input, 2444] 
split level 140: [/input, 635] 
split level 141: [/input, 3154] 
split level 142: [/input, 2443] 
split level 143: [/input, 630] 
split level 144: [/input-8, 1756] 
split level 145: [/input, 1707] 
split level 146: [/input, 3219] 
split level 147: [/input, 100] 
split level 148: [/input, 1228] 
split level 149: [/input, 1674] 
split level 150: [/input, 2422] 
split level 151: [/input, 2440] 
split level 152: [/input, 2758] 
split level 153: [/input-8, 1981] 
split level 154: [/input, 2684] 
split level 155: [/input-8, 1248] 
split level 156: [/input, 2154] 
split level 157: [/input, 950] 
split level 158: [/input-8, 662] 
split level 159: [/input, 3958] 
split level 160: [/input, 3956] 
split level 161: [/input, 966] 
split level 162: [/input, 3990] 
split level 163: [/input, 748] 
split level 164: [/input, 967] 
split level 165: [/input, 3972] 
split level 166: [/input, 2139] 
split level 167: [/input-8, 1054] 
split level 168: [/input-8, 878] 
split level 169: [/input, 968] 
split level 170: [/input, 2404] 
split level 171: [/input, 1185] 
split level 172: [/input, 749] 
split level 173: [/input-8, 1575] 
split level 174: [/input-8, 1112] 
split level 175: [/input, 3929] 
split level 176: [/input, 732] 
split level 177: [/input, 825] 
split level 178: [/input, 1218] 
split level 179: [/input, 2502] 
split level 180: [/input, 718] 
split level 181: [/input, 1240] 
split level 182: [/input, 923] 
split level 183: [/input, 726] 
split level 184: [/input, 873] 
split level 185: [/input, 1206] 
split level 186: [/input, 2369] 
split level 187: [/input, 1201] 
split level 188: [/input, 1404] 
split level 189: [/input, 733] 
split level 190: [/input, 3941] 
split level 191: [/input, 3643] 
split level 192: [/input, 717] 
split level 193: [/input, 739] 
split level 194: [/input, 1412] 
split level 195: [/input, 1242] 
split level 196: [/input, 674] 
split level 197: [/input, 3992] 
split level 198: [/input, 3930] 
split level 199: [/input, 946] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028519392013549805
10 lb beta sum: 0.0, worst -0.025876939296722412
Time: prepare 0.0116    bound 0.0982    transfer 0.0015    finalize 0.0025    func 0.1164    
Accumulated time: func 0.1697    prepare 0.0218    bound 0.1511    transfer 0.0016    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.21094537) min lb tensor(-0.02563757)
Number of Verified Splits: 18 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011265754699707031 
BICCOS Cumulative time: 0.011265754699707031
Preprocessing time: 0.00994110107421875 Inference time: 0.0009591579437255859 Add cuts time: 0.00020647048950195312 Cut analysis time: 0.0001590251922607422
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5192    set_bounds 0.0091    solve 0.1165    add 0.0097    
Accumulated time: pickout 0.0003    decision 0.5192    set_bounds 0.0091    solve 0.1165    add 0.0097    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([27]), tensor([-1.]), tensor([0]), tensor([9.56035381e-14]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([27]), tensor([1.]), tensor([0]), tensor([3.97425284e-37]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0152243971824646

all verified at 0th iter
Time: prepare 0.0003    bound 0.0040    transfer 0.0001    finalize 0.0001    func 0.0046    
Accumulated time: func 0.1743    prepare 0.0221    bound 0.1551    transfer 0.0017    finalize 0.0028    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 197.71241688728333
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 197.7123568058014
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 197.71233487129211
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.7123146057129
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.71229481697083
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.7122757434845
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.71225690841675
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.71223759651184
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.2878 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 160, vnnlib ID: 160 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.49879074, -9.55830097, -5.11135626, -6.59453297, -4.63026714,
         -6.67742062, -5.16739082, -6.71435833, -9.42285538, -9.37638187]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [669]; unstable size 669; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 669] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 669] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 669] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 192] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.34096289, 4.10190248, 0.30777764, 1.68400633, 1.76496494, 0.30022144,
         1.81714153, 4.01539278, 3.94053698]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0424 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 161, vnnlib ID: 161 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.87970066, -14.66562939,  -9.85256958,  -8.82474613, -10.40148449,
          -8.68280125,  -9.99558353, -10.62414360, -13.25842571, -14.81057453]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [425]; unstable size 425; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 169, 1, 425] with unstable size 168 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 425] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 425] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [168]; unstable size 168; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 168] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 168] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.58588123, 5.25564861, 0.84904134, 0.12145445, 1.39071870, 0.90202546,
         1.64734638, 3.90297651, 5.47198534]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0450 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 162, vnnlib ID: 162 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87640285, -12.87582302,  -8.50058079, -10.47419071,  -8.70230770,
         -10.56670856,  -8.81984520, -11.36477280, -11.69618988, -13.20551491]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [477]; unstable size 477; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 477] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 477] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 477] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 161] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86706138,  3.64629722,  1.61399460, -0.01080489,  1.69744253,
          0.02841228,  2.42314339,  2.43144655,  3.97708583]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87640285, -12.87582302,  -8.50058079, -10.47419071,  -8.70230770,
         -10.56670856,  -8.81984520, -11.36477280, -11.69618988, -13.20551491]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.73it/s]100%|██████████| 1/1 [00:00<00:00,  8.73it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.73246670, -12.68345451,  -8.39245701, -10.23877811,  -8.46293736,
          -10.33113194,  -8.62541771, -11.11933708, -11.50778389, -12.95249939]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07048035]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1173 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 12th iter
best_l after optimization: 16.799537658691406
alpha/beta optimization time: 0.15830516815185547
initial alpha-crown bounds: tensor([[8.82856965e-01, 3.66166139e+00, 1.62423408e+00, 2.99811363e-05,
         1.70782232e+00, 3.46807241e-02, 2.44014621e+00, 2.45263147e+00,
         3.99547529e+00]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 2.9981136322021484e-05
verified with init bound!
Result: safe-incomplete in 0.3194 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 163, vnnlib ID: 163 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.01543331,  -8.50793934,  -8.28173351,  -8.84521961,  -8.12535572,
          -8.88524437,  -8.74754906,  -8.41619205, -10.82264996,  -8.60353184]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [616]; unstable size 616; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 616] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 616] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 616] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 159] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-8.43452811e-02, -8.76670837e-01, -5.83441019e-01, -4.16053534e-02,
         -5.99727631e-01,  1.43587589e-03, -2.22274303e-01,  1.54696417e+00,
         -7.14367151e-01]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.01543331,  -8.50793934,  -8.28173351,  -8.84521961,  -8.12535572,
          -8.88524437,  -8.74754906,  -8.41619205, -10.82264996,  -8.60353184]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.01543331,  -8.50793839,  -8.28173351,  -8.84521961,  -8.12535477,
           -8.88524532,  -8.74754715,  -8.41619205, -10.82264996,  -8.60353088],
         [ -9.01543331,  -8.50793839,  -8.28173351,  -8.84521961,  -8.12535477,
           -8.88524532,  -8.74754715,  -8.41619205, -10.82264996,  -8.60353088]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.59924126,  0.09174633, -0.13445854,  0.42902756, -0.29083729,
           0.33135509,  0.18733883]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         ...,


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0510 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 164, vnnlib ID: 164 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.65704536, -8.06795883, -5.25074387, -4.81809998, -5.40738297,
         -4.78305626, -5.53884125, -6.33654642, -8.16578388, -7.93662977]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 177, 1, 599] with unstable size 176 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 599] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [176]; unstable size 176; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 176] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 176] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.34938383, 2.50165486, 0.22862637, 0.01722103, 0.35063851, 0.36827111,
         1.27956557, 2.61070585, 2.51747799]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0479 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 165, vnnlib ID: 165 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.43569374, -7.82689762, -6.75649071, -7.24614143, -7.06519032,
         -7.31342793, -8.26335907, -8.11638641, -7.34807396, -7.95840502]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [552]; unstable size 552; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 552] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 552] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 552] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 203] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.37668705, -1.05399323, -1.66841125, -1.10696757, -1.28876460,
         -1.03613186, -0.23888946, -1.47692084, -0.85666394]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.43569374, -7.82689762, -6.75649071, -7.24614143, -7.06519032,
         -7.31342793, -8.26335907, -8.11638641, -7.34807396, -7.95840502]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.43569374, -7.82689667, -6.75648975, -7.24613953, -7.06518936,
          -7.31342697, -8.26335716, -8.11638546, -7.34807396, -7.95840406],
         [-7.43569374, -7.82689667, -6.75648975, -7.24613953, -7.06518936,
          -7.31342697, -8.26335716, -8.11638546, -7.34807396, -7.95840406]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.68069172, -0.28948879, -1.35989571, -0.87024593, -1.05119610,
          -0.80295849,  0.14697170, -0.76831150, -0.15798140]]],
       device='cuda:0')
number of violation:  8
clean attack image tensor([[[[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         ...,


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0590 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 166, vnnlib ID: 166 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.11932993, -4.82532978, -2.47477031, -2.84284973, -2.40484571,
         -3.00597310, -1.59280419, -3.88199234, -4.35127544, -4.01034117]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 458] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 458] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 243] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.65978765, 2.30001354, 0.46589649, 0.87081158, 0.39240396, 1.02510440,
         1.69761920, 1.67752409, 1.51655388]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0430 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 167, vnnlib ID: 167 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
         -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [510]; unstable size 510; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 213, 1, 510] with unstable size 212 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 510] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 510] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [212]; unstable size 212; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 212] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 212] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.16538978,  0.02639788,  1.23263621,  1.06774688,  1.37462723,
          1.93852615,  2.49895382, -0.35096419,  2.43112779]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
         -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
          -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04281914]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[1.90000021, 1.80476213, 1.74127007,  ..., 1.40793681,
            1.55079389, 1.55079389],
           [1.96349227, 1.85238123, 1.85238123,  ..., 1.09047651,
            1.39206374, 1.45555580],
           [1.88412726, 1.80476213, 1.80476213,  ..., 0.64603180,
            1.07460344, 1.18571460],
           ...,
           [1.64603198, 1.47142887, 1.34444475,  ..., 0.42380959,
            0.55079371, 0.64603180],
           [1.67777801, 1.53492093, 1.26507962,  ..., 0.47142863,
            0.59841275, 0.72539687],
           [1.59841299, 1.26507962, 0.88412702,  ..., 0.63015878,
            0.77301592, 0.86825401]],

          [[1.99677968, 1.85185218, 1.73913074,  ..., 1.20772982,
            1.23993587, 1.22383285],
           [2.04508877, 1.88405824, 1.81964600,  ..., 0.93397754,
            1.14331758, 1.17552364],
           [1.94847047, 1.83574903, 1.75523376,  ..., 0.51529801,
            0.88566834, 0.96618366],
           ...,
           [1.65861547, 1.41706955, 1.28824508,  ..., 0.28985518,
            0.30595824, 0.35426742],
           [1.67471850, 1.44927561, 1.25603890,  ..., 0.28985518,
            0.35426742, 0.43478271],
           [1.65861547, 1.30434811, 0.98228669,  ..., 0.38647354,
            0.48309189, 0.53140104]],

          [[2.02548766, 1.89055514, 1.81559265,  ..., 1.29085493,
            1.38081002, 1.42578757],
           [2.07046509, 1.93553269, 1.87556267,  ..., 1.12593722,
            1.35082495, 1.42578757],
           [1.98051023, 1.87556267, 1.80060017,  ..., 0.84107965,
            1.18590748, 1.27586246],
           ...,
           [1.60569763, 1.41079497, 1.35082495,  ..., 0.58620709,
            0.63118458, 0.67616212],
           [1.65067506, 1.48575759, 1.23088503,  ..., 0.57121456,
            0.63118458, 0.70614707],
           [1.68066013, 1.39580250, 0.94602716,  ..., 0.64617711,
            0.72113961, 0.76611710]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0385 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 168, vnnlib ID: 168 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.77010298, -9.56792831, -3.51737452, -7.98014259, -4.43413353,
         -8.13228130, -7.63488007, -7.35559034, -9.32965469, -9.84434509]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 93, 1, 608] with unstable size 92 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 608] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [92]; unstable size 92; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 92] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 92] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.91945100, 5.40677500, 4.21947527, 0.74099821, 4.36890173, 3.83588839,
         3.49529505, 5.35575104, 5.79974079]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0641 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 169, vnnlib ID: 169 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
          -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 152, 1, 442] with unstable size 151 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 442] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [151]; unstable size 151; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 151] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.31049490,  1.82715654, -0.04293871,  1.07361519,  1.18260849,
          0.86679065,  0.03638697,  1.20158577,  1.79956222]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
          -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.93it/s]100%|██████████| 1/1 [00:00<00:00,  8.93it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.67833710, -10.47902393,  -8.10711384,  -9.37081242,  -8.07628441,
           -9.48413372,  -9.13742447,  -8.56529427,  -9.67664242, -10.46873760]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.03082943]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1147 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 8.407693862915039
alpha/beta optimization time: 1.2205536365509033
initial alpha-crown bounds: tensor([[ 0.32534003,  1.84551048, -0.02267280,  1.09125686,  1.19872844,
          0.89233637,  0.04136062,  1.21694863,  1.81888556]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.022672802209854126
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.59668159484863
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.59664249420166
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.59661602973938
Verifying property 2 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02267280]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
         -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02267280]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 442
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 149
Node /15 input 0: size torch.Size([100]) unstable 2
-----------------
# of unstable neurons: 593
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012946128845214844
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.022672414779663086
10 lb beta sum: 0.0, worst -0.022672981023788452
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0531    transfer 0.0001    finalize 0.0001    func 0.0536    
Accumulated time: func 0.0536    prepare 0.0002    bound 0.0531    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 57] 
split level 1: [/input-8, 1835] 
split level 2: [/input-8, 1877] 
split level 3: [/input-8, 1886] 
split level 4: [/input-8, 20] 
split level 5: [/input-8, 1898] 
split level 6: [/input-8, 1843] 
split level 7: [/input-8, 1491] 
split level 8: [/input-8, 1842] 
split level 9: [/input-8, 1773] 
split level 10: [/input-8, 1772] 
split level 11: [/input-8, 1769] 
split level 12: [/input-8, 1490] 
split level 13: [/input-8, 1315] 
split level 14: [/input-8, 217] 
split level 15: [/input, 2488] 
split level 16: [/input-8, 1508] 
split level 17: [/input-8, 193] 
split level 18: [/input, 2212] 
split level 19: [/input-8, 139] 
split level 20: [/input, 2442] 
split level 21: [/input, 2455] 
split level 22: [/input, 1955] 
split level 23: [/input-8, 1164] 
split level 24: [/input-8, 1148] 
split level 25: [/input-8, 36] 
split level 26: [/input-8, 1800] 
split level 27: [/input-8, 185] 
split level 28: [/input-8, 1762] 
split level 29: [/input, 2502] 
split level 30: [/input-8, 1779] 
split level 31: [/input-8, 188] 
split level 32: [/input-8, 1774] 
split level 33: [/input-8, 716] 
split level 34: [/input, 394] 
split level 35: [/input-8, 1713] 
split level 36: [/input, 1939] 
split level 37: [/input-8, 1765] 
split level 38: [/input-8, 1712] 
split level 39: [/input-8, 846] 
split level 40: [/input, 2758] 
split level 41: [/input-8, 2033] 
split level 42: [/input-8, 1816] 
split level 43: [/input, 149] 
split level 44: [/input-8, 158] 
split level 45: [/input-8, 725] 
split level 46: [/input, 1914] 
split level 47: [/input-8, 1981] 
split level 48: [/input, 1884] 
split level 49: [/input, 2962] 
split level 50: [/input, 422] 
split level 51: [/input, 1928] 
split level 52: [/input-8, 1867] 
split level 53: [/input-8, 1599] 
split level 54: [/input-8, 1739] 
split level 55: [/input-8, 1679] 
split level 56: [/input-8, 1634] 
split level 57: [/input, 2106] 
split level 58: [/input-8, 1758] 
split level 59: [/input, 2461] 
split level 60: [/input-8, 726] 
split level 61: [/input, 3876] 
split level 62: [/input-8, 845] 
split level 63: [/input-8, 844] 
split level 64: [/input, 2437] 
split level 65: [/input, 2953] 
split level 66: [/input-8, 944] 
split level 67: [/input, 2583] 
split level 68: [/input-8, 150] 
split level 69: [/input-8, 1303] 
split level 70: [/input, 457] 
split level 71: [/input-8, 1929] 
split level 72: [/input, 2534] 
split level 73: [/input, 3275] 
split level 74: [/input, 2697] 
split level 75: [/input, 3703] 
split level 76: [/input-8, 1112] 
split level 77: [/input, 1922] 
split level 78: [/input, 452] 
split level 79: [/input, 3273] 
split level 80: [/input, 1403] 
split level 81: [/input, 3946] 
split level 82: [/input, 1018] 
split level 83: [/input, 1923] 
split level 84: [/input-8, 1741] 
split level 85: [/input-8, 112] 
split level 86: [/input, 1419] 
split level 87: [/input, 3525] 
split level 88: [/input-8, 953] 
split level 89: [/input, 887] 
split level 90: [/input, 2844] 
split level 91: [/input, 147] 
split level 92: [/input-8, 1215] 
split level 93: [/input, 2585] 
split level 94: [/input-8, 1961] 
split level 95: [/input, 2157] 
split level 96: [/input, 3890] 
split level 97: [/input, 264] 
split level 98: [/input, 3559] 
split level 99: [/input, 720] 
split level 100: [/input, 2230] 
split level 101: [/input-8, 1813] 
split level 102: [/input-8, 869] 
split level 103: [/input, 2392] 
split level 104: [/input-8, 1336] 
split level 105: [/input-8, 799] 
split level 106: [/input-8, 1663] 
split level 107: [/input, 2436] 
split level 108: [/input-8, 882] 
split level 109: [/input-8, 1662] 
split level 110: [/input-8, 1661] 
split level 111: [/input, 3642] 
split level 112: [/input, 2811] 
split level 113: [/input, 1195] 
split level 114: [/input, 2687] 
split level 115: [/input-8, 901] 
split level 116: [/input-8, 375] 
split level 117: [/input-8, 949] 
split level 118: [/input, 3802] 
split level 119: [/input, 2969] 
split level 120: [/input, 2361] 
split level 121: [/input, 460] 
split level 122: [/input, 3619] 
split level 123: [/input, 3603] 
split level 124: [/input-8, 1022] 
split level 125: [/input, 2450] 
split level 126: [/input-8, 1334] 
split level 127: [/input, 3911] 
split level 128: [/input, 3788] 
split level 129: [/input-8, 367] 
split level 130: [/input, 399] 
split level 131: [/input, 1227] 
split level 132: [/input, 2401] 
split level 133: [/input, 3963] 
split level 134: [/input-12, 61] 
split level 135: [/input-8, 1605] 
split level 136: [/input, 2215] 
split level 137: [/input-8, 1420] 
split level 138: [/input-8, 219] 
split level 139: [/input-8, 885] 
split level 140: [/input, 933] 
split level 141: [/input, 2186] 
split level 142: [/input-8, 2003] 
split level 143: [/input, 1162] 
split level 144: [/input, 1236] 
split level 145: [/input-8, 1571] 
split level 146: [/input, 984] 
split level 147: [/input-8, 884] 
split level 148: [/input-8, 801] 
split level 149: [/input, 2261] 
split level 150: [/input, 3750] 
split level 151: [/input-8, 1299] 
split level 152: [/input, 941] 
split level 153: [/input, 1210] 
split level 154: [/input, 957] 
split level 155: [/input, 974] 
split level 156: [/input-8, 1079] 
split level 157: [/input, 2272] 
split level 158: [/input, 1239] 
split level 159: [/input, 589] 
split level 160: [/input-8, 1021] 
split level 161: [/input, 1101] 
split level 162: [/input, 2810] 
split level 163: [/input, 3715] 
split level 164: [/input-8, 1450] 
split level 165: [/input-8, 1565] 
split level 166: [/input-8, 1659] 
split level 167: [/input-8, 1660] 
split level 168: [/input, 936] 
split level 169: [/input-8, 859] 
split level 170: [/input, 971] 
split level 171: [/input, 4008] 
split level 172: [/input, 3657] 
split level 173: [/input, 674] 
split level 174: [/input, 3620] 
split level 175: [/input, 2435] 
split level 176: [/input, 2362] 
split level 177: [/input, 1253] 
split level 178: [/input, 3916] 
split level 179: [/input, 3944] 
split level 180: [/input-8, 1323] 
split level 181: [/input, 3117] 
split level 182: [/input-8, 1020] 
split level 183: [/input, 3762] 
split level 184: [/input, 686] 
split level 185: [/input, 846] 
split level 186: [/input, 4007] 
split level 187: [/input, 2639] 
split level 188: [/input, 599] 
split level 189: [/input, 3621] 
split level 190: [/input, 642] 
split level 191: [/input, 2160] 
split level 192: [/input, 2671] 
split level 193: [/input-8, 360] 
split level 194: [/input, 1223] 
split level 195: [/input, 2433] 
split level 196: [/input, 791] 
split level 197: [/input, 2627] 
split level 198: [/input, 1252] 
split level 199: [/input, 2220] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0369795560836792
10 lb beta sum: 0.0, worst -0.023344695568084717
Time: prepare 0.0115    bound 0.0984    transfer 0.0015    finalize 0.0026    func 0.1166    
Accumulated time: func 0.1702    prepare 0.0217    bound 0.1515    transfer 0.0016    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.00372572) min lb tensor(-0.02267241)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010779380798339844 
BICCOS Cumulative time: 0.010779380798339844
Preprocessing time: 0.010026931762695312 Inference time: 0.00014662742614746094 Add cuts time: 5.364418029785156e-05 Cut analysis time: 0.0005521774291992188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02005 (1), -0.02002 (1), -0.01957 (1), -0.01950 (1), -0.01928 (1), -0.01924 (1), -0.01906 (1), -0.01904 (1), -0.01895 (1), -0.01859 (1), -0.01835 (1), -0.01829 (1), -0.01828 (1), -0.01820 (1), -0.01818 (1), -0.01808 (1), -0.01793 (1), -0.01779 (1), -0.01779 (1), -0.01754 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5198    set_bounds 0.0090    solve 0.1167    add 0.0673    
Accumulated time: pickout 0.0003    decision 0.5198    set_bounds 0.0090    solve 0.1167    add 0.0673    
Current (lb-rhs): -0.020049959421157837
50 domains visited
Cumulative time: 0.7824769020080566

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-8, 1835] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-8, 1835] 
split level 1: [/input-8, 1877] [/input-8, 1835] [/input-8, 1835] [/input-8, 1877] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1877] 
split level 2: [/input-8, 1842] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] 
split level 3: [/input-8, 1843] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01875212788581848
10 lb beta sum: 0.33838263154029846, worst -0.01818174123764038
Time: prepare 0.0070    bound 0.1201    transfer 0.0010    finalize 0.0023    func 0.1329    
Accumulated time: func 0.3031    prepare 0.0289    bound 0.2716    transfer 0.0026    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.01591435) min lb tensor(-0.01808938)
Number of Verified Splits: 117 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 39.
#cuts 1-3: 39
#cuts >= 20: 0
BICCOS time: 0.019471406936645508 
BICCOS Cumulative time: 0.03025078773498535
Preprocessing time: 0.011556863784790039 Inference time: 0.0047512054443359375 Add cuts time: 0.0023691654205322266 Cut analysis time: 0.0007941722869873047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00635 (2), -0.00622 (2), -0.00571 (2), -0.00565 (2), -0.00563 (2), -0.00551 (2), -0.00533 (2), -0.00511 (2), -0.00496 (2), -0.00473 (2), -0.00461 (2), -0.00451 (2), -0.00440 (2), -0.00440 (2), -0.00438 (2), -0.00432 (2), -0.00415 (2), -0.00404 (2), -0.00398 (2), -0.00385 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0130    solve 0.1330    add 0.0863    
Accumulated time: pickout 0.0013    decision 0.5393    set_bounds 0.0221    solve 0.2497    add 0.1536    
Current (lb-rhs): -0.006345003843307495
100 domains visited
Cumulative time: 1.0550644397735596

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] [/input-8, 1835] 
split level 1: [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] [/input-8, 1877] 
split level 2: [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] [/input-8, 1843] 
split level 3: [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] [/input-8, 1842] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006535440683364868
10 lb beta sum: 1.6869803667068481, worst -0.001940011978149414
Time: prepare 0.0087    bound 0.1498    transfer 0.0011    finalize 0.0024    func 0.1646    
Accumulated time: func 0.4677    prepare 0.0378    bound 0.4214    transfer 0.0037    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.01147330) min lb tensor(-0.00175643)
Number of Verified Splits: 380 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 52.
#cuts 1-3: 52
#cuts >= 20: 0
BICCOS time: 0.03852272033691406 
BICCOS Cumulative time: 0.06877350807189941
Preprocessing time: 0.011461257934570312 Inference time: 0.012767791748046875 Add cuts time: 0.013520956039428711 Cut analysis time: 0.0007727146148681641
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0134    solve 0.1646    add 0.0223    
Accumulated time: pickout 0.0023    decision 0.5589    set_bounds 0.0355    solve 0.4143    add 0.1759    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1835]), tensor([-1.]), tensor([0]), tensor([8.57868221e-11]), tensor([1])), '/input-12': ([57], [-1.0], [0], [4.570033240725024e-09], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1835, 1877]), tensor([ 1., -1.]), tensor([0, 0]), tensor([3.97428872e-37, 9.20950063e-03]), tensor([1, 2])), '/input-12': ([57], [-1.0], [0], [4.570033240725024e-09], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1835, 1877]), tensor([1., 1.]), tensor([0, 0]), tensor([3.97428872e-37, 2.82477005e-03]), tensor([1, 2])), '/input-12': ([57], [-1.0], [0], [4.570033240725024e-09], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1843, 1835]), tensor([-1., -1.]), tensor([0, 0]), tensor([0.00506692, 0.00947969]), tensor([1, 2])), '/input-12': ([57], [1.0], [0], [3.9742600173665805e-37], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1843, 1835]), tensor([-1.,  1.]), tensor([0, 0]), tensor([0.00506692, 0.00460534]), tensor([1, 2])), '/input-12': ([57], [1.0], [0], [3.9742600173665805e-37], [0])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1843]), tensor([1.]), tensor([0]), tensor([0.00287382]), tensor([1])), '/input-12': ([57], [1.0], [0], [3.9742600173665805e-37], [0])}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.007317781448364258

all verified at 1th iter
Time: prepare 0.0004    bound 0.0138    transfer 0.0001    finalize 0.0002    func 0.0146    
Accumulated time: func 0.4822    prepare 0.0382    bound 0.4352    transfer 0.0038    finalize 0.0076    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.06915998458862
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.06870102882385
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.06866002082825
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.0686378479004
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.068617105484
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.0685977935791
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.9314 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 170, vnnlib ID: 170 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
          -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [631]; unstable size 631; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 631] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 631] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 631] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 138] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.05669761,  7.12348557, -0.81237477,  2.57512522,  2.65363836,
          2.42923665,  1.37826777,  5.74696732,  6.64974642]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
          -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
           -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.58955538]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.84603173, -0.94126981, -0.86190474,  ..., -0.33809513,
            -0.48095238, -0.51269841],
           [-0.25873005, -0.30634910, -0.27460307,  ..., -0.29047608,
            -0.33809513, -0.43333322],
           [ 0.42380959,  0.36031753,  0.39206356,  ..., -0.08412688,
            -0.14761895, -0.32222211],
           ...,
           [ 0.47142863,  0.48730165,  0.55079371,  ...,  0.05873025,
             0.01111121,  0.12222230],
           [ 0.12222230,  0.10634929,  0.23333341,  ..., -0.02063482,
            -0.02063482,  0.16984135],
           [-0.19523799, -0.41746020, -0.29047608,  ...,  0.16984135,
             0.31269848,  0.58253974]],

          [[-0.67632848, -0.78904986, -0.72463763,  ..., -0.03220600,
            -0.17713353, -0.20933965],
           [ 0.04830930, -0.01610294,  0.01610318,  ...,  0.03220624,
            -0.01610294, -0.11272129],
           [ 0.88566834,  0.82125610,  0.85346222,  ...,  0.24154601,
             0.19323683, -0.01610294],
           ...,
           [ 0.95008057,  0.98228669,  1.03059590,  ...,  0.62801939,
             0.56360716,  0.61191636],
           [ 0.70853472,  0.72463775,  0.85346222,  ...,  0.66022551,
             0.62801939,  0.77294695],
           [ 0.46698883,  0.22544295,  0.40257660,  ...,  0.77294695,
             0.85346222,  1.14331758]],

          [[-0.01349309, -0.07346311,  0.03148442,  ...,  0.76611710,
             0.66116959,  0.64617711],
           [-0.02848560, -0.04347810,  0.00149941,  ...,  0.78110963,
             0.78110963,  0.78110963],
           [-0.14842562, -0.19340314, -0.14842562,  ...,  0.81109464,
             0.81109464,  0.76611710],
           ...,
           [-0.53823084, -0.56821585, -0.50824583,  ..., -0.68815589,
            -0.65817088, -0.49325335],
           [-0.58320838, -0.73313338, -0.61319339,  ..., -0.83808094,
            -0.83808094, -0.65817088],
           [-0.80809593, -1.04797614, -0.85307342,  ..., -0.74812591,
            -0.67316341, -0.43328333]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0494 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 171, vnnlib ID: 171 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.63988018, -11.70766258, -10.72140884, -10.78502178, -10.30626678,
         -10.96242046,  -9.89720917, -10.94630241, -13.04552364, -11.00957012]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [493]; unstable size 493; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 493] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 493] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 493] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 177] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.11123240, 1.11106300, 0.48803008, 0.63042784, 0.00368500, 0.79707956,
         0.55721861, 2.39154410, 0.42870808]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0391 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 172, vnnlib ID: 172 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.49745131, -8.20798206, -6.12458706, -8.36979198, -6.27434921,
         -8.58381653, -8.11138153, -7.94669247, -4.75123119, -7.89815950]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 561] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 561] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 147] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.08015418,  1.10043144,  3.16933250,  1.15053511,  3.37255049,
          2.91000938,  2.77714443, -0.19217896,  2.78871417]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.49745131, -8.20798206, -6.12458706, -8.36979198, -6.27434921,
         -8.58381653, -8.11138153, -7.94669247, -4.75123119, -7.89815950]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.70938110, -8.28709698, -6.37382412, -8.52355671, -6.53355598,
          -8.73983860, -8.32157516, -8.20209694, -4.68664932, -7.95726824]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02273178]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0509 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 173, vnnlib ID: 173 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.48213387, -8.01494122, -6.49922419, -6.44987583, -6.58213425,
         -6.60465574, -5.89261341, -7.75944138, -8.76826668, -7.64277458]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 608] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 608] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 216] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.16914701,  0.51496053, -0.35071170, -0.32186127,  0.12535100,
         -1.02238882,  0.66660726,  1.28926647,  0.21741557]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.48213387, -8.01494122, -6.49922419, -6.44987583, -6.58213425,
         -6.60465574, -5.89261341, -7.75944138, -8.76826668, -7.64277458]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.48213339, -8.01494217, -6.49922466, -6.44987679, -6.58213520,
          -6.60465670, -5.89261341, -7.75944233, -8.76826763, -7.64277506],
         [-7.48213339, -8.01494217, -6.49922466, -6.44987679, -6.58213520,
          -6.60465670, -5.89261341, -7.75944233, -8.76826763, -7.64277506]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04934788,  0.13225842, -0.55726337]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0669 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 174, vnnlib ID: 174 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
         -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [588]; unstable size 588; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 199, 1, 588] with unstable size 198 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 588] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 588] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [198]; unstable size 198; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 198] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 198] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.61178422,  4.32749939, -0.36567205,  0.41240403,  0.48770019,
          0.50044847,  0.68070030,  2.37939572,  3.58202076]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
         -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
          -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07760429]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.32222211, -0.29047608, -0.17936498,  ...,  0.67777783,
             0.83650798,  1.15396857],
           [-0.33809513, -0.08412688,  0.16984135,  ...,  0.70952386,
             0.94761908,  1.29682565],
           [-0.13174593,  0.16984135,  0.39206356,  ...,  0.70952386,
             0.94761908,  1.45555580],
           ...,
           [-0.06825387, -0.08412688, -0.08412688,  ..., -0.14761895,
            -0.09999990, -0.02063482],
           [-0.05238085, -0.09999990, -0.06825387,  ..., -0.13174593,
            -0.02063482,  0.10634929],
           [-0.13174593, -0.17936498, -0.09999990,  ...,  0.07460327,
             0.16984135,  0.23333341]],

          [[-0.45088565, -0.43478248, -0.38647330,  ...,  0.48309189,
             0.62801939,  0.93397754],
           [-0.48309177, -0.25764883, -0.06441211,  ...,  0.49919492,
             0.70853472,  1.01449287],
           [-0.28985494, -0.03220600,  0.16103071,  ...,  0.48309189,
             0.67632860,  1.12721443],
           ...,
           [-0.22544271, -0.24154577, -0.24154577,  ..., -0.30595800,
            -0.27375188, -0.17713353],
           [-0.20933965, -0.24154577, -0.22544271,  ..., -0.32206106,
            -0.19323659, -0.03220600],
           [-0.28985494, -0.33816412, -0.25764883,  ..., -0.12882435,
            -0.03220600,  0.08051541]],

          [[-0.55322337, -0.52323836, -0.46326834,  ...,  0.25637197,
             0.45127454,  0.79610211],
           [-0.59820086, -0.37331331, -0.17841063,  ...,  0.19640197,
             0.43628204,  0.76611710],
           [-0.43328333, -0.17841063,  0.00149941,  ...,  0.13643195,
             0.34632701,  0.79610211],
           ...,
           [-0.29835078, -0.31334329, -0.31334329,  ..., -0.32833579,
            -0.29835078, -0.20839565],
           [-0.26836565, -0.31334329, -0.28335828,  ..., -0.32833579,
            -0.22338814, -0.08845562],
           [-0.32833579, -0.35832080, -0.29835078,  ..., -0.14842562,
            -0.05847061,  0.04647692]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0502 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 175, vnnlib ID: 175 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.66825104, -7.97197151, -6.85186052, -7.69482708, -6.41166210,
         -7.79411554, -7.01330566, -7.14677095, -7.18919182, -7.63720417]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [604]; unstable size 604; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 604] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 604] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 604] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 186] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.53241515, 0.56145525, 1.23012352, 0.07895291, 1.31490362, 0.48338473,
         0.64640123, 1.02218056, 1.28158712]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0300 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 176, vnnlib ID: 176 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.87314558, -8.19042587, -4.13985491, -4.64103413, -4.94530869,
         -4.76780462, -4.91272449, -6.20926189, -6.63870811, -7.66739511]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [597]; unstable size 597; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 597] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 597] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 597] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 153] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.23613924,  2.79050112, -0.77878702, -0.04329717,  0.11112864,
          0.04540640,  1.03802991,  1.36925042,  2.36230206]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.87314558, -8.19042587, -4.13985491, -4.64103413, -4.94530869,
         -4.76780462, -4.91272449, -6.20926189, -6.63870811, -7.66739511]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.87314510, -8.19042587, -4.13985491, -4.64103413, -4.94530916,
          -4.76780462, -4.91272354, -6.20926237, -6.63870811, -7.66739511],
         [-4.87314510, -8.19042587, -4.13985491, -4.64103413, -4.94530916,
          -4.76780462, -4.91272354, -6.20926237, -6.63870811, -7.66739511]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.23211098, -0.50117922,  0.30427504]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0592 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 177, vnnlib ID: 177 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.53732777, -16.52824783, -10.35078621, -13.07399178, -13.29616356,
         -13.26419640, -14.66434383, -13.61211491, -15.27535629, -16.57476234]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [276]; unstable size 276; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 76, 1, 276] with unstable size 75 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 276] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 276] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [75]; unstable size 75; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 75] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 75] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01606524, 5.64310741, 2.54551053, 2.74233055, 2.73602724, 4.06365871,
         3.03769207, 4.63138247, 5.85097408]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0363 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 178, vnnlib ID: 178 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
         -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [453]; unstable size 453; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 141, 1, 453] with unstable size 140 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 453] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 453] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [140]; unstable size 140; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 140] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 5.29551125, -0.05402613,  1.48138261,  0.06260347,  1.59185386,
          1.62150836,  0.04656303,  4.47954369,  4.37859154]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
         -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.76it/s]100%|██████████| 1/1 [00:00<00:00,  8.74it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -4.25827217, -10.05697727,  -4.28648949,  -5.97811222,  -4.47851419,
           -6.09019661,  -6.11976624,  -4.58179903,  -9.12149048,  -9.06482506]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02821732]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1171 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.004981994628906
alpha/beta optimization time: 1.2272539138793945
initial alpha-crown bounds: tensor([[ 5.31581020, -0.04664278,  1.49123108,  0.07164526,  1.60213983,
          1.62858033,  0.05958939,  4.48958206,  4.39304686]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.04664278030395508
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61925959587097
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61922025680542
Verifying property 1 with 1 instances.
##### Instance 178 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04664278]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
        -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04664278]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 453
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 138
Node /15 input 0: size torch.Size([100]) unstable 3
-----------------
# of unstable neurons: 594
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010752677917480469
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04664278030395508
10 lb beta sum: 0.0, worst -0.04664301872253418
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0532    transfer 0.0001    finalize 0.0001    func 0.0536    
Accumulated time: func 0.0536    prepare 0.0002    bound 0.0532    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 60] 
split level 1: [/input-8, 1316] 
split level 2: [/input-8, 1099] 
split level 3: [/input-8, 653] 
split level 4: [/input-8, 1326] 
split level 5: [/input-8, 1] 
split level 6: [/input, 547] 
split level 7: [/input-8, 1102] 
split level 8: [/input-8, 61] 
split level 9: [/input-8, 1313] 
split level 10: [/input-8, 1308] 
split level 11: [/input-8, 956] 
split level 12: [/input-8, 226] 
split level 13: [/input-8, 648] 
split level 14: [/input-8, 1525] 
split level 15: [/input-8, 54] 
split level 16: [/input-8, 1325] 
split level 17: [/input-8, 1139] 
split level 18: [/input, 2341] 
split level 19: [/input-8, 1116] 
split level 20: [/input-8, 46] 
split level 21: [/input-8, 1670] 
split level 22: [/input, 1401] 
split level 23: [/input-8, 9] 
split level 24: [/input-8, 213] 
split level 25: [/input-8, 62] 
split level 26: [/input, 998] 
split level 27: [/input-8, 698] 
split level 28: [/input, 987] 
split level 29: [/input-8, 1829] 
split level 30: [/input, 908] 
split level 31: [/input-8, 884] 
split level 32: [/input-8, 838] 
split level 33: [/input, 924] 
split level 34: [/input, 3815] 
split level 35: [/input, 2603] 
split level 36: [/input-8, 155] 
split level 37: [/input-8, 1863] 
split level 38: [/input-8, 1921] 
split level 39: [/input-8, 870] 
split level 40: [/input-8, 94] 
split level 41: [/input-8, 86] 
split level 42: [/input, 1898] 
split level 43: [/input, 1148] 
split level 44: [/input-8, 1741] 
split level 45: [/input, 1378] 
split level 46: [/input-8, 1666] 
split level 47: [/input, 1179] 
split level 48: [/input-8, 1329] 
split level 49: [/input-8, 883] 
split level 50: [/input, 989] 
split level 51: [/input, 1431] 
split level 52: [/input, 534] 
split level 53: [/input, 2588] 
split level 54: [/input, 581] 
split level 55: [/input, 2110] 
split level 56: [/input, 2602] 
split level 57: [/input, 1211] 
split level 58: [/input, 874] 
split level 59: [/input, 1433] 
split level 60: [/input, 566] 
split level 61: [/input, 2025] 
split level 62: [/input, 988] 
split level 63: [/input-8, 41] 
split level 64: [/input, 2502] 
split level 65: [/input-8, 2] 
split level 66: [/input, 2028] 
split level 67: [/input, 2012] 
split level 68: [/input, 2140] 
split level 69: [/input-8, 217] 
split level 70: [/input, 817] 
split level 71: [/input, 1400] 
split level 72: [/input, 2534] 
split level 73: [/input, 37] 
split level 74: [/input, 939] 
split level 75: [/input, 2092] 
split level 76: [/input, 932] 
split level 77: [/input, 1017] 
split level 78: [/input, 1001] 
split level 79: [/input, 1195] 
split level 80: [/input, 909] 
split level 81: [/input-8, 1977] 
split level 82: [/input, 486] 
split level 83: [/input-8, 211] 
split level 84: [/input, 1146] 
split level 85: [/input, 488] 
split level 86: [/input-8, 893] 
split level 87: [/input, 2326] 
split level 88: [/input, 2536] 
split level 89: [/input-8, 1513] 
split level 90: [/input, 1220] 
split level 91: [/input, 1003] 
split level 92: [/input-8, 1303] 
split level 93: [/input, 931] 
split level 94: [/input, 2790] 
split level 95: [/input-8, 914] 
split level 96: [/input-8, 1321] 
split level 97: [/input, 1134] 
split level 98: [/input, 964] 
split level 99: [/input-8, 1982] 
split level 100: [/input, 1915] 
split level 101: [/input, 1447] 
split level 102: [/input, 1019] 
split level 103: [/input, 1002] 
split level 104: [/input, 3992] 
split level 105: [/input, 781] 
split level 106: [/input, 925] 
split level 107: [/input, 1154] 
split level 108: [/input, 489] 
split level 109: [/input, 972] 
split level 110: [/input, 1417] 
split level 111: [/input, 1897] 
split level 112: [/input, 483] 
split level 113: [/input, 725] 
split level 114: [/input, 1108] 
split level 115: [/input, 897] 
split level 116: [/input, 889] 
split level 117: [/input, 468] 
split level 118: [/input, 947] 
split level 119: [/input, 1260] 
split level 120: [/input, 2307] 
split level 121: [/input, 969] 
split level 122: [/input, 3781] 
split level 123: [/input, 980] 
split level 124: [/input-8, 13] 
split level 125: [/input, 910] 
split level 126: [/input, 1095] 
split level 127: [/input, 1004] 
split level 128: [/input, 1463] 
split level 129: [/input, 1188] 
split level 130: [/input, 926] 
split level 131: [/input, 2322] 
split level 132: [/input, 1273] 
split level 133: [/input, 798] 
split level 134: [/input, 1258] 
split level 135: [/input, 986] 
split level 136: [/input, 2590] 
split level 137: [/input, 2042] 
split level 138: [/input, 2029] 
split level 139: [/input, 974] 
split level 140: [/input, 484] 
split level 141: [/input, 1005] 
split level 142: [/input, 854] 
split level 143: [/input, 856] 
split level 144: [/input, 792] 
split level 145: [/input, 1058] 
split level 146: [/input-8, 85] 
split level 147: [/input, 2353] 
split level 148: [/input, 1233] 
split level 149: [/input, 2280] 
split level 150: [/input, 1133] 
split level 151: [/input, 1416] 
split level 152: [/input, 786] 
split level 153: [/input, 963] 
split level 154: [/input, 857] 
split level 155: [/input, 1806] 
split level 156: [/input, 1165] 
split level 157: [/input-8, 862] 
split level 158: [/input, 796] 
split level 159: [/input, 2504] 
split level 160: [/input, 1080] 
split level 161: [/input, 958] 
split level 162: [/input, 481] 
split level 163: [/input-8, 346] 
split level 164: [/input, 979] 
split level 165: [/input-8, 1711] 
split level 166: [/input, 1880] 
split level 167: [/input, 1348] 
split level 168: [/input, 741] 
split level 169: [/input, 601] 
split level 170: [/input, 797] 
split level 171: [/input-8, 1981] 
split level 172: [/input, 630] 
split level 173: [/input, 2173] 
split level 174: [/input, 1810] 
split level 175: [/input, 1114] 
split level 176: [/input, 1020] 
split level 177: [/input, 2234] 
split level 178: [/input, 1057] 
split level 179: [/input, 870] 
split level 180: [/input, 4008] 
split level 181: [/input, 2417] 
split level 182: [/input, 1359] 
split level 183: [/input, 1850] 
split level 184: [/input, 286] 
split level 185: [/input, 1994] 
split level 186: [/input, 894] 
split level 187: [/input, 1205] 
split level 188: [/input, 1073] 
split level 189: [/input, 3769] 
split level 190: [/input, 296] 
split level 191: [/input, 1021] 
split level 192: [/input, 1242] 
split level 193: [/input, 1317] 
split level 194: [/input, 1202] 
split level 195: [/input, 1354] 
split level 196: [/input, 3639] 
split level 197: [/input-8, 1257] 
split level 198: [/input, 3643] 
split level 199: [/input, 1047] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.046608924865722656
10 lb beta sum: 0.0, worst -0.04660916328430176
Time: prepare 0.0111    bound 0.0977    transfer 0.0015    finalize 0.0023    func 0.1152    
Accumulated time: func 0.1688    prepare 0.0212    bound 0.1509    transfer 0.0016    finalize 0.0024    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01850510) min lb tensor(-0.04660773)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.009998083114624023 
BICCOS Cumulative time: 0.009998083114624023
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04421 (1), -0.04421 (1), -0.04406 (1), -0.04405 (1), -0.04394 (1), -0.04386 (1), -0.04382 (1), -0.04364 (1), -0.04358 (1), -0.04336 (1), -0.04331 (1), -0.04320 (1), -0.04320 (1), -0.04307 (1), -0.04302 (1), -0.04283 (1), -0.04282 (1), -0.04276 (1), -0.04271 (1), -0.04255 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5200    set_bounds 0.0090    solve 0.1152    add 0.0669    
Accumulated time: pickout 0.0003    decision 0.5200    set_bounds 0.0090    solve 0.1152    add 0.0669    
Current (lb-rhs): -0.04420733451843262
50 domains visited
Cumulative time: 0.7802426815032959

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] 
split level 1: [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] 
split level 2: [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] 
split level 3: [/input-8, 1116] [/input-8, 1116] [/input-8, 1139] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 217] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04303121566772461
10 lb beta sum: 0.0, worst -0.04320335388183594
Time: prepare 0.0117    bound 0.0989    transfer 0.0010    finalize 0.0020    func 0.1162    
Accumulated time: func 0.2850    prepare 0.0332    bound 0.2498    transfer 0.0026    finalize 0.0044    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01406980) min lb tensor(-0.04301286)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011544227600097656 
BICCOS Cumulative time: 0.02154231071472168
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02643 (2), -0.02629 (2), -0.02621 (2), -0.02618 (2), -0.02596 (2), -0.02584 (2), -0.02581 (2), -0.02576 (2), -0.02566 (2), -0.02566 (2), -0.02560 (2), -0.02557 (2), -0.02553 (2), -0.02519 (2), -0.02486 (2), -0.02482 (2), -0.02482 (2), -0.02479 (2), -0.02470 (2), -0.02463 (2), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0197    set_bounds 0.0139    solve 0.1162    add 0.0746    
Accumulated time: pickout 0.0013    decision 0.5397    set_bounds 0.0230    solve 0.2315    add 0.1415    
Current (lb-rhs): -0.02642536163330078
100 domains visited
Cumulative time: 1.017411708831787

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 61] [/input-8, 653] [/input-8, 61] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 653] [/input-8, 61] [/input-8, 653] 
split level 1: [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 61] [/input-8, 61] [/input-8, 61] [/input-8, 61] [/input-8, 1139] [/input-8, 1139] 
split level 2: [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1116] [/input-8, 1116] 
split level 3: [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1139] [/input-8, 1116] [/input, 2025] [/input, 2025] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025249958038330078
10 lb beta sum: 0.0, worst -0.02519059181213379
Time: prepare 0.0112    bound 0.0974    transfer 0.0011    finalize 0.0024    func 0.1146    
Accumulated time: func 0.3996    prepare 0.0447    bound 0.3472    transfer 0.0037    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00966358) min lb tensor(-0.02515697)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011471748352050781 
BICCOS Cumulative time: 0.03301405906677246
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01277 (3), -0.01272 (3), -0.01271 (3), -0.01268 (3), -0.01265 (3), -0.01264 (3), -0.01259 (3), -0.01249 (3), -0.01245 (3), -0.01240 (3), -0.01239 (3), -0.01236 (3), -0.01232 (3), -0.01231 (3), -0.01229 (3), -0.01228 (3), -0.01228 (3), -0.01228 (3), -0.01225 (3), -0.01222 (3), 
Length of domains: 50
Time: pickout 0.0008    decision 0.0197    set_bounds 0.0149    solve 0.1147    add 0.0773    
Accumulated time: pickout 0.0021    decision 0.5593    set_bounds 0.0378    solve 0.3462    add 0.2188    
Current (lb-rhs): -0.012769460678100586
150 domains visited
Cumulative time: 1.25651216506958

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1102] [/input-8, 61] [/input-8, 653] [/input-8, 1102] [/input-8, 61] [/input-8, 1102] [/input-8, 1102] [/input-8, 653] [/input-8, 653] [/input-8, 1102] 
split level 1: [/input-8, 1525] [/input-8, 1525] [/input-8, 1116] [/input-8, 1525] [/input-8, 1525] [/input-8, 61] [/input-8, 61] [/input-8, 1102] [/input-8, 61] [/input-8, 61] 
split level 2: [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1116] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] 
split level 3: [/input-8, 1116] [/input-8, 1116] [/input, 2406] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.011640071868896484
10 lb beta sum: 0.0, worst -0.011480331420898438
Time: prepare 0.0112    bound 0.0970    transfer 0.0011    finalize 0.0019    func 0.1138    
Accumulated time: func 0.5133    prepare 0.0562    bound 0.4441    transfer 0.0048    finalize 0.0088    
all_split False
======================Cut inference begins======================
max lb tensor(0.00109673) min lb tensor(-0.01126170)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.013416767120361328 
BICCOS Cumulative time: 0.04643082618713379
Preprocessing time: 0.012393712997436523 Inference time: 0.0001316070556640625 Add cuts time: 8.487701416015625e-05 Cut analysis time: 0.0008065700531005859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00715 (4), -0.00715 (4), -0.00713 (4), -0.00710 (4), -0.00706 (4), -0.00705 (4), -0.00705 (4), -0.00702 (4), -0.00701 (4), -0.00699 (4), -0.00698 (4), -0.00695 (4), -0.00695 (4), -0.00694 (4), -0.00694 (4), -0.00689 (4), -0.00688 (4), -0.00683 (4), -0.00681 (4), -0.00679 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0199    set_bounds 0.0152    solve 0.1138    add 0.2395    
Accumulated time: pickout 0.0031    decision 0.5793    set_bounds 0.0530    solve 0.4600    add 0.4583    
Current (lb-rhs): -0.007153987884521484
200 domains visited
Cumulative time: 1.6596052646636963

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 956] [/input-8, 653] [/input-8, 653] [/input-8, 956] [/input-8, 61] [/input-8, 1102] [/input-8, 653] [/input-8, 61] [/input-8, 61] [/input-8, 653] 
split level 1: [/input-8, 1525] [/input-8, 1525] [/input-8, 956] [/input-8, 1525] [/input-8, 1116] [/input-8, 1525] [/input-8, 956] [/input-8, 956] [/input-8, 956] [/input-8, 956] 
split level 2: [/input-8, 1116] [/input-8, 1139] [/input-8, 1525] [/input-8, 1139] [/input-8, 1139] [/input-8, 1116] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] 
split level 3: [/input-8, 1139] [/input, 2406] [/input-8, 1139] [/input-8, 1116] [/input, 2406] [/input-8, 1139] [/input-8, 1116] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006270885467529297
10 lb beta sum: 0.0, worst -0.006020307540893555
Time: prepare 0.0060    bound 0.1333    transfer 0.0011    finalize 0.0019    func 0.1449    
Accumulated time: func 0.6582    prepare 0.0625    bound 0.5774    transfer 0.0058    finalize 0.0107    
all_split False
======================Cut inference begins======================
max lb tensor(0.00267458) min lb tensor(-0.00584149)
Number of Verified Splits: 10 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.013262748718261719 
BICCOS Cumulative time: 0.05969357490539551
Preprocessing time: 0.01136469841003418 Inference time: 0.0005600452423095703 Add cuts time: 0.0003838539123535156 Cut analysis time: 0.0009541511535644531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00148 (5), -0.00146 (5), -0.00145 (5), -0.00144 (5), -0.00143 (5), -0.00142 (5), -0.00142 (5), -0.00141 (5), -0.00141 (5), -0.00139 (5), -0.00138 (5), -0.00137 (5), -0.00135 (5), -0.00135 (5), -0.00133 (5), -0.00129 (5), -0.00128 (5), -0.00128 (5), -0.00127 (5), -0.00127 (5), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0198    set_bounds 0.0154    solve 0.1450    add 0.0855    
Accumulated time: pickout 0.0041    decision 0.5990    set_bounds 0.0685    solve 0.6050    add 0.5438    
Current (lb-rhs): -0.0014820098876953125
250 domains visited
Cumulative time: 1.9397921562194824

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.45352715e-07, 1.68924197e-03, 2.37970217e-03]), tensor([0, 1, 2])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1., -1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.45352715e-07, 1.68924197e-03, 4.36763605e-03, 5.91687998e-03,
        5.71470102e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1., -1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.45352715e-07, 1.68924197e-03, 4.36763605e-03, 5.91687998e-03,
        1.60913332e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.45352715e-07, 1.68924197e-03, 4.36763605e-03, 1.49731501e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.45352715e-07, 4.43630060e-03, 2.41784914e-03, 5.27982553e-03,
        5.85417589e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.45352715e-07, 4.43630060e-03, 2.41784914e-03, 5.27982553e-03,
        1.40409335e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.45352715e-07, 4.43630060e-03, 2.41784914e-03, 1.56574114e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.45352715e-07, 4.43630060e-03, 4.40721354e-03, 5.29484591e-03,
        5.20663103e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102,  956]), tensor([-1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.45352715e-07, 4.43630060e-03, 4.40721354e-03, 5.29484591e-03,
        1.46489008e-03]), tensor([0, 1, 2, 3, 4])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316,  653,   61, 1102]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.45352715e-07, 4.43630060e-03, 4.40721354e-03, 1.57766207e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1316]), tensor([1.]), tensor([0]), tensor([1.45352715e-07]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  11
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.046408653259277344
10 lb beta sum: 0.0003580936754588038, worst -0.04640817642211914
Time: prepare 0.0005    bound 0.1308    transfer 0.0002    finalize 0.0002    func 0.1317    
Accumulated time: func 0.7900    prepare 0.0630    bound 0.7082    transfer 0.0060    finalize 0.0109    
After pruning, left:  11

Back to Regular BaB

BaB round 1
batch: 11
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1102] [/input-8, 226] [/input-8, 226] [/input-8, 956] [/input-8, 226] [/input-8, 226] [/input-8, 956] [/input-8, 226] [/input-8, 226] [/input-8, 956] 
split level 1: [/input-8, 956] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] [/input-8, 1525] 
split level 2: [/input-8, 1525] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] 
split level 3: [/input-8, 1139] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] [/input-8, 1116] 
split level 4: [/input-8, 1116] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] [/input-8, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00010545222903601825, worst -0.03746938705444336
10 lb beta sum: 0.00010545222903601825, worst -0.03745627403259277
Time: prepare 0.0133    bound 0.1316    transfer 0.0018    finalize 0.0017    func 0.1507    
Accumulated time: func 0.9407    prepare 0.0766    bound 0.8398    transfer 0.0078    finalize 0.0126    
all_split False
======================Cut inference begins======================
max lb tensor(0.01086765) min lb tensor(-0.03745103)
Number of Verified Splits: 254 of 352
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0003018379211425781 
BICCOS Cumulative time: 0.059995412826538086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03745 (5), -0.03743 (5), -0.03706 (5), -0.03704 (5), -0.03671 (5), -0.03669 (5), -0.03633 (5), -0.03631 (5), -0.03568 (5), -0.03566 (5), -0.03524 (5), -0.03522 (5), -0.03471 (5), -0.03471 (5), -0.03469 (5), -0.03468 (5), -0.03431 (5), -0.03429 (5), -0.03428 (5), -0.03427 (5), 
Length of domains: 98
Time: pickout 0.0005    decision 0.0164    set_bounds 0.0214    solve 0.1508    add 0.0026    
Accumulated time: pickout 0.0046    decision 0.6154    set_bounds 0.0898    solve 0.7558    add 0.5464    
Current (lb-rhs): -0.03745102882385254
348 domains visited
Cumulative time: 2.2873566150665283

BaB round 2
batch: 98
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1102] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 1102] [/input-8, 226] [/input-8, 1102] [/input-8, 226] [/input-8, 226] [/input-8, 226] 
split level 1: [/input-8, 956] [/input-8, 213] [/input-8, 698] [/input-8, 9] [/input-8, 956] [/input-8, 213] [/input-8, 956] [/input-8, 213] [/input-8, 698] [/input-8, 9] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03559517860412598
10 lb beta sum: 0.0, worst -0.03559303283691406
Time: prepare 0.0148    bound 0.1385    transfer 0.0025    finalize 0.0019    func 0.1603    
Accumulated time: func 1.1010    prepare 0.0915    bound 0.9784    transfer 0.0104    finalize 0.0145    
all_split False
======================Cut inference begins======================
max lb tensor(0.00429010) min lb tensor(-0.03559160)
Number of Verified Splits: 220 of 392
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.00032520294189453125 
BICCOS Cumulative time: 0.06032061576843262
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03559 (7), -0.03557 (7), -0.03522 (7), -0.03520 (7), -0.03479 (7), -0.03477 (7), -0.03443 (7), -0.03441 (7), -0.03377 (7), -0.03375 (7), -0.03335 (7), -0.03333 (7), -0.03277 (7), -0.03275 (7), -0.03273 (7), -0.03273 (7), -0.03240 (7), -0.03236 (7), -0.03235 (7), -0.03233 (7), 
Length of domains: 172
Time: pickout 0.0013    decision 0.0197    set_bounds 0.0169    solve 0.1604    add 0.0018    
Accumulated time: pickout 0.0059    decision 0.6351    set_bounds 0.1067    solve 0.9162    add 0.5482    
Current (lb-rhs): -0.03559160232543945
520 domains visited
Cumulative time: 2.4889869689941406

BaB round 3
batch: 172
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 1099] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 1099] [/input-8, 226] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00011841837840620428, worst -0.03432416915893555
10 lb beta sum: 0.00011841837840620428, worst -0.03432488441467285
Time: prepare 0.0130    bound 0.1391    transfer 0.0011    finalize 0.0021    func 0.1581    
Accumulated time: func 1.2590    prepare 0.1048    bound 1.1175    transfer 0.0114    finalize 0.0166    
all_split False
======================Cut inference begins======================
max lb tensor(0.00418162) min lb tensor(-0.03432274)
Number of Verified Splits: 66 of 344
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.000377655029296875 
BICCOS Cumulative time: 0.06069827079772949
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03432 (8), -0.03430 (8), -0.03395 (8), -0.03393 (8), -0.03352 (8), -0.03350 (8), -0.03316 (8), -0.03314 (8), -0.03250 (8), -0.03248 (8), -0.03208 (8), -0.03206 (8), -0.03174 (8), -0.03174 (8), -0.03149 (8), -0.03148 (8), -0.03146 (8), -0.03145 (8), -0.03137 (8), -0.03137 (8), 
Length of domains: 278
Time: pickout 0.0021    decision 0.0204    set_bounds 0.0140    solve 0.1582    add 0.0034    
Accumulated time: pickout 0.0080    decision 0.6555    set_bounds 0.1207    solve 1.0743    add 0.5516    
Current (lb-rhs): -0.03432273864746094
798 domains visited
Cumulative time: 2.6881425380706787

BaB round 4
batch: 278
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 9] [/input-8, 9] [/input-8, 213] [/input-8, 1325] [/input-8, 213] [/input-8, 9] [/input-8, 9] [/input-8, 213] [/input-8, 1325] [/input-8, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0001664904848439619, worst -0.03326010704040527
10 lb beta sum: 0.0003944369382224977, worst -0.03325629234313965
Time: prepare 0.0211    bound 0.1387    transfer 0.0026    finalize 0.0032    func 0.1692    
Accumulated time: func 1.4282    prepare 0.1261    bound 1.2562    transfer 0.0140    finalize 0.0198    
all_split False
======================Cut inference begins======================
max lb tensor(0.00181150) min lb tensor(-0.03325343)
Number of Verified Splits: 24 of 556
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.000331878662109375 
BICCOS Cumulative time: 0.06103014945983887
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03325 (9), -0.03276 (9), -0.03241 (9), -0.03238 (9), -0.03237 (9), -0.03209 (9), -0.03208 (9), -0.03203 (9), -0.03198 (9), -0.03196 (9), -0.03195 (9), -0.03167 (9), -0.03162 (9), -0.03160 (9), -0.03125 (9), -0.03094 (9), -0.03093 (9), -0.03083 (9), -0.03064 (9), -0.03059 (9), 
Length of domains: 532
Time: pickout 0.0028    decision 0.0258    set_bounds 0.0224    solve 0.1694    add 0.0055    
Accumulated time: pickout 0.0108    decision 0.6814    set_bounds 0.1431    solve 1.2437    add 0.5571    
Current (lb-rhs): -0.03325343132019043
1330 domains visited
Cumulative time: 2.9151008129119873

BaB round 5
batch: 532
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1099] [/input-8, 9] [/input, 547] [/input-8, 9] [/input-8, 1099] [/input-8, 1099] [/input-8, 9] [/input, 547] [/input-8, 9] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00017400133947376162, worst -0.032727956771850586
10 lb beta sum: 0.00028854681295342743, worst -0.032720327377319336
Time: prepare 0.0409    bound 0.1475    transfer 0.0031    finalize 0.0056    func 0.2040    
Accumulated time: func 1.6323    prepare 0.1672    bound 1.4037    transfer 0.0171    finalize 0.0254    
all_split False
======================Cut inference begins======================
max lb tensor(0.00326705) min lb tensor(-0.03271699)
Number of Verified Splits: 37 of 1064
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0003533363342285156 
BICCOS Cumulative time: 0.06138348579406738
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03272 (10), -0.03222 (10), -0.03187 (10), -0.03184 (10), -0.03183 (10), -0.03156 (10), -0.03154 (10), -0.03149 (10), -0.03144 (10), -0.03142 (10), -0.03141 (10), -0.03113 (10), -0.03108 (10), -0.03106 (10), -0.03072 (10), -0.03029 (10), -0.02989 (10), -0.02987 (10), -0.02986 (10), -0.02985 (10), 
Length of domains: 1027
Time: pickout 0.0074    decision 0.0398    set_bounds 0.0418    solve 0.2048    add 0.0060    
Accumulated time: pickout 0.0182    decision 0.7212    set_bounds 0.1849    solve 1.4485    add 0.5631    
Current (lb-rhs): -0.032716989517211914
2357 domains visited
Cumulative time: 3.2164182662963867

BaB round 6
batch: 1027
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1325] [/input-8, 1325] [/input-8, 1099] [/input-8, 1099] [/input-8, 1325] [/input-8, 1325] [/input-8, 1099] [/input-8, 1099] [/input-8, 1325] [/input-8, 1325] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00018032462685368955, worst -0.03133082389831543
10 lb beta sum: 0.00037308232276700437, worst -0.031373023986816406
Time: prepare 0.0810    bound 0.2140    transfer 0.0117    finalize 0.0113    func 0.3316    
Accumulated time: func 1.9639    prepare 0.2484    bound 1.6177    transfer 0.0288    finalize 0.0367    
all_split False
======================Cut inference begins======================
max lb tensor(0.00171947) min lb tensor(-0.03132772)
Number of Verified Splits: 6 of 2054
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0004837512969970703 
BICCOS Cumulative time: 0.06186723709106445
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03133 (11), -0.03132 (11), -0.03115 (11), -0.03114 (11), -0.03107 (11), -0.03103 (11), -0.03099 (11), -0.03085 (11), -0.03081 (11), -0.03058 (11), -0.03035 (11), -0.03034 (11), -0.03024 (11), -0.03005 (11), -0.03002 (11), -0.02988 (11), -0.02986 (11), -0.02979 (11), -0.02959 (11), -0.02954 (11), 
Length of domains: 2048
Time: pickout 0.0103    decision 0.0665    set_bounds 0.2117    solve 0.3321    add 0.0125    
Accumulated time: pickout 0.0285    decision 0.7876    set_bounds 0.3966    solve 1.7806    add 0.5756    
Current (lb-rhs): -0.03132772445678711
4405 domains visited
Cumulative time: 3.851665735244751

BaB round 7
batch: 2048
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 547] [/input, 547] [/input-8, 1325] [/input-8, 1325] [/input, 547] [/input, 547] [/input-8, 1325] [/input-8, 1325] [/input, 547] [/input, 547] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00018079826259054244, worst -0.031174421310424805
10 lb beta sum: 0.00044768868247047067, worst -0.0311734676361084
Time: prepare 0.1671    bound 0.3655    transfer 0.0181    finalize 0.0201    func 0.7786    
Accumulated time: func 2.7425    prepare 0.4157    bound 1.9832    transfer 0.0469    finalize 0.0568    
all_split False
======================Cut inference begins======================
max lb tensor(0.00281072) min lb tensor(-0.03117323)
Number of Verified Splits: 52 of 4096
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0005691051483154297 
BICCOS Cumulative time: 0.06243634223937988
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03117 (12), -0.03116 (12), -0.03090 (12), -0.03087 (12), -0.03083 (12), -0.03063 (12), -0.03062 (12), -0.03043 (12), -0.03033 (12), -0.03029 (12), -0.03008 (12), -0.02987 (12), -0.02986 (12), -0.02975 (12), -0.02957 (12), -0.02953 (12), -0.02937 (12), -0.02933 (12), -0.02905 (12), -0.02904 (12), 
Length of domains: 4044
Time: pickout 0.0321    decision 0.1191    set_bounds 0.1359    solve 0.7794    add 0.0186    
Accumulated time: pickout 0.0606    decision 0.9067    set_bounds 0.5325    solve 2.5600    add 0.5942    
Current (lb-rhs): -0.031173229217529297
8449 domains visited
Cumulative time: 4.941795825958252

BaB round 8
batch: 4044
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 213] [/input-8, 213] [/input, 547] [/input, 547] [/input-8, 213] [/input-8, 213] [/input, 547] [/input, 547] [/input-8, 213] [/input-8, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00017270614625886083, worst -0.03046560287475586
10 lb beta sum: 0.0004006925446446985, worst -0.03046393394470215
Time: prepare 0.3569    bound 0.6499    transfer 0.0583    finalize 0.0426    func 1.1605    
Accumulated time: func 3.9030    prepare 0.7729    bound 2.6330    transfer 0.1052    finalize 0.0994    
all_split False
======================Cut inference begins======================
max lb tensor(0.00353418) min lb tensor(-0.03046250)
Number of Verified Splits: 290 of 8088
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0005819797515869141 
BICCOS Cumulative time: 0.0630183219909668
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03046 (13), -0.03045 (13), -0.03016 (13), -0.03012 (13), -0.03009 (13), -0.03008 (13), -0.02979 (13), -0.02975 (13), -0.02969 (13), -0.02968 (13), -0.02939 (13), -0.02937 (13), -0.02934 (13), -0.02933 (13), -0.02930 (13), -0.02929 (13), -0.02905 (13), -0.02900 (13), -0.02900 (13), -0.02895 (13), 
Length of domains: 7798
Time: pickout 0.0485    decision 0.2294    set_bounds 0.4236    solve 1.1630    add 0.0354    
Accumulated time: pickout 0.1091    decision 1.1361    set_bounds 0.9562    solve 3.7230    add 0.6296    
Current (lb-rhs): -0.03046250343322754
16247 domains visited
Cumulative time: 6.852048397064209

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1] [/input-8, 1] [/input-8, 698] [/input-8, 698] [/input-8, 1] [/input-8, 1] [/input-8, 698] [/input-8, 698] [/input-8, 1] [/input-8, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00016817454888951033, worst -0.029367446899414062
10 lb beta sum: 0.0003965197247453034, worst -0.029367446899414062
Time: prepare 0.3678    bound 0.6565    transfer 0.0191    finalize 0.0346    func 1.1319    
Accumulated time: func 5.0349    prepare 1.1409    bound 3.2895    transfer 0.1243    finalize 0.1340    
all_split False
======================Cut inference begins======================
max lb tensor(0.00348306) min lb tensor(-0.02936673)
Number of Verified Splits: 308 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0005364418029785156 
BICCOS Cumulative time: 0.06355476379394531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02937 (14), -0.02936 (14), -0.02907 (14), -0.02905 (13), -0.02902 (14), -0.02902 (14), -0.02901 (14), -0.02894 (13), -0.02893 (13), -0.02872 (14), -0.02868 (14), -0.02865 (13), -0.02862 (13), -0.02860 (14), -0.02859 (14), -0.02836 (14), -0.02835 (14), -0.02830 (14), -0.02827 (14), -0.02827 (14), 
Length of domains: 11586
Time: pickout 0.0515    decision 0.2315    set_bounds 0.5214    solve 1.1340    add 0.0415    
Accumulated time: pickout 0.1606    decision 1.3676    set_bounds 1.4775    solve 4.8571    add 0.6711    
Current (lb-rhs): -0.029366731643676758
24131 domains visited
current_vram/total_varm: 13.6GB/99.9GB, batch_size increase to 8192
Cumulative time: 8.84356689453125

BaB round 10
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 698] [/input, 547] [/input, 547] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00015270552830770612, worst -0.028751611709594727
10 lb beta sum: 0.0003947343793697655, worst -0.02955172210931778
Time: prepare 0.7393    bound 1.2464    transfer 0.0973    finalize 0.0972    func 2.2893    
Accumulated time: func 7.3242    prepare 1.8805    bound 4.5359    transfer 0.2216    finalize 0.2311    
all_split False
======================Cut inference begins======================
max lb tensor(0.00349426) min lb tensor(-0.02875042)
Number of Verified Splits: 956 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0005629062652587891 
BICCOS Cumulative time: 0.0641176700592041
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02875 (15), -0.02874 (15), -0.02845 (15), -0.02841 (15), -0.02840 (15), -0.02839 (15), -0.02810 (15), -0.02806 (14), -0.02806 (15), -0.02798 (15), -0.02797 (15), -0.02796 (14), -0.02786 (14), -0.02785 (14), -0.02774 (15), -0.02773 (15), -0.02768 (15), -0.02768 (15), -0.02766 (15), -0.02765 (15), 
Length of domains: 18822
Time: pickout 0.1056    decision 0.6669    set_bounds 0.9144    solve 2.2932    add 0.0786    
Accumulated time: pickout 0.2662    decision 2.0345    set_bounds 2.3919    solve 7.1502    add 0.7497    
Current (lb-rhs): -0.02875041961669922
39559 domains visited
current_vram/total_varm: 22.1GB/99.9GB, batch_size increase to 16384
Cumulative time: 12.925611734390259

BaB round 11
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1] [/input-8, 1] [/input, 3815] [/input, 3815] [/input-8, 1] [/input-8, 1] [/input, 3815] [/input, 3815] [/input-8, 1] [/input-8, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00014005121192894876, worst -0.027894020080566406
10 lb beta sum: 0.00036603352054953575, worst -0.027894258499145508
Time: prepare 1.4772    bound 2.4259    transfer 0.2769    finalize 0.1864    func 4.5785    
Accumulated time: func 11.9027    prepare 3.3582    bound 6.9618    transfer 0.4985    finalize 0.4175    
all_split False
======================Cut inference begins======================
max lb tensor(0.00348115) min lb tensor(-0.02789330)
Number of Verified Splits: 2387 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0006246566772460938 
BICCOS Cumulative time: 0.0647423267364502
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02789 (16), -0.02774 (15), -0.02773 (15), -0.02760 (16), -0.02759 (16), -0.02755 (16), -0.02754 (16), -0.02753 (16), -0.02745 (15), -0.02740 (15), -0.02735 (15), -0.02735 (15), -0.02734 (15), -0.02733 (15), -0.02733 (15), -0.02724 (16), -0.02720 (16), -0.02712 (16), -0.02712 (16), -0.02708 (16), 
Length of domains: 32819
Time: pickout 0.2115    decision 1.7009    set_bounds 2.0224    solve 4.5839    add 0.1116    
Accumulated time: pickout 0.4778    decision 3.7354    set_bounds 4.4143    solve 11.7342    add 0.8613    
Current (lb-rhs): -0.0278933048248291
69940 domains visited
Cumulative time: 21.618512630462646

BaB round 12
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1829] [/input-8, 1] [/input-8, 1] [/input-8, 1829] [/input-8, 1829] [/input-8, 1] [/input-8, 1] [/input-8, 1829] [/input-8, 1829] [/input-8, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00012484144826885313, worst -0.026884078979492188
10 lb beta sum: 0.00032044033287093043, worst -0.027019977569580078
Time: prepare 1.4822    bound 2.4263    transfer 0.2730    finalize 0.1767    func 4.9866    
Accumulated time: func 16.8893    prepare 4.8407    bound 9.3881    transfer 0.7715    finalize 0.5942    
all_split False
======================Cut inference begins======================
max lb tensor(0.00353646) min lb tensor(-0.02688074)
Number of Verified Splits: 3567 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0006487369537353516 
BICCOS Cumulative time: 0.06539106369018555
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02789 (16), -0.02760 (16), -0.02755 (16), -0.02754 (16), -0.02753 (16), -0.02745 (15), -0.02735 (15), -0.02733 (15), -0.02733 (15), -0.02724 (16), -0.02720 (16), -0.02712 (16), -0.02712 (16), -0.02708 (16), -0.02703 (15), -0.02698 (15), -0.02688 (16), -0.02683 (16), -0.02682 (16), -0.02681 (16), 
Length of domains: 45636
Time: pickout 0.2181    decision 1.7272    set_bounds 1.7777    solve 4.9922    add 0.1137    
Accumulated time: pickout 0.6958    decision 5.4626    set_bounds 6.1920    solve 16.7264    add 0.9751    
Current (lb-rhs): -0.0278933048248291
99141 domains visited
Cumulative time: 30.522226810455322

BaB round 13
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 62] [/input-8, 1829] [/input-8, 1829] [/input-8, 62] [/input-8, 62] [/input-8, 1829] [/input-8, 1829] [/input-8, 62] [/input-8, 62] [/input-8, 1829] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00013722205767408013, worst -0.02688908576965332
10 lb beta sum: 0.00034454333945177495, worst -0.026889801025390625
Time: prepare 1.4797    bound 2.4286    transfer 0.3880    finalize 0.6707    func 5.1824    
Accumulated time: func 22.0717    prepare 6.3207    bound 11.8167    transfer 1.1595    finalize 1.2650    
all_split False
======================Cut inference begins======================
max lb tensor(0.00355959) min lb tensor(-0.02688909)
Number of Verified Splits: 3153 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.000732421875 
BICCOS Cumulative time: 0.06612348556518555
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02689 (17), -0.02688 (16), -0.02659 (17), -0.02659 (16), -0.02659 (17), -0.02658 (16), -0.02655 (16), -0.02654 (17), -0.02654 (17), -0.02653 (17), -0.02650 (16), -0.02649 (16), -0.02648 (16), -0.02648 (16), -0.02647 (16), -0.02624 (17), -0.02619 (16), -0.02619 (17), -0.02618 (16), -0.02614 (16), 
Length of domains: 58867
Time: pickout 0.2177    decision 1.6453    set_bounds 1.8449    solve 5.1869    add 0.1001    
Accumulated time: pickout 0.9136    decision 7.1079    set_bounds 8.0369    solve 21.9133    add 1.0751    
Current (lb-rhs): -0.02688908576965332
128756 domains visited
Cumulative time: 39.578235149383545

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1670] [/input-8, 838] [/input-8, 62] [/input-8, 1670] [/input-8, 1829] [/input-8, 838] [/input-8, 1670] [/input-8, 1829] [/input-8, 1829] [/input-8, 1670] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00010935969476122409, worst -0.025876998901367188
10 lb beta sum: 0.00028886913787573576, worst -0.026035070419311523
Time: prepare 1.5049    bound 2.4318    transfer 0.2719    finalize 0.2081    func 5.1818    
Accumulated time: func 27.2535    prepare 7.8260    bound 14.2485    transfer 1.4314    finalize 1.4730    
all_split False
======================Cut inference begins======================
max lb tensor(0.00219059) min lb tensor(-0.02587700)
Number of Verified Splits: 3794 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0006802082061767578 
BICCOS Cumulative time: 0.0668036937713623
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02689 (17), -0.02659 (17), -0.02659 (16), -0.02659 (17), -0.02654 (17), -0.02654 (17), -0.02653 (17), -0.02650 (16), -0.02648 (16), -0.02647 (16), -0.02624 (17), -0.02619 (17), -0.02618 (16), -0.02613 (17), -0.02613 (17), -0.02613 (16), -0.02608 (17), -0.02588 (17), -0.02584 (17), -0.02582 (16), 
Length of domains: 71457
Time: pickout 0.2225    decision 1.6516    set_bounds 1.9444    solve 5.1872    add 0.1651    
Accumulated time: pickout 1.1361    decision 8.7595    set_bounds 9.9813    solve 27.1005    add 1.2402    
Current (lb-rhs): -0.02688908576965332
157730 domains visited
Cumulative time: 48.828837871551514

BaB round 15
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1670] [/input-8, 1829] [/input-8, 1829] [/input-8, 1670] [/input-8, 1670] [/input-8, 1829] [/input-8, 1829] [/input-8, 1670] [/input-8, 1670] [/input-8, 1829] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0001113344042096287, worst -0.02595973014831543
10 lb beta sum: 0.0002894285134971142, worst -0.025960206985473633
Time: prepare 1.4958    bound 2.4265    transfer 0.2661    finalize 0.2020    func 4.6031    
Accumulated time: func 31.8566    prepare 9.3222    bound 16.6749    transfer 1.6975    finalize 1.6750    
all_split False
======================Cut inference begins======================
max lb tensor(0.00256276) min lb tensor(-0.02595878)
Number of Verified Splits: 3750 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0006685256958007812 
BICCOS Cumulative time: 0.06747221946716309
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02689 (17), -0.02659 (17), -0.02659 (16), -0.02654 (17), -0.02654 (17), -0.02653 (17), -0.02650 (16), -0.02648 (16), -0.02647 (16), -0.02624 (17), -0.02619 (17), -0.02618 (16), -0.02613 (17), -0.02613 (17), -0.02613 (16), -0.02608 (17), -0.02596 (18), -0.02588 (17), -0.02584 (17), -0.02582 (16), 
Length of domains: 84091
Time: pickout 0.2144    decision 1.6477    set_bounds 2.0529    solve 4.6082    add 0.0978    
Accumulated time: pickout 1.3505    decision 10.4072    set_bounds 12.0342    solve 31.7087    add 1.3381    
Current (lb-rhs): -0.02688908576965332
186748 domains visited
Cumulative time: 57.52270460128784

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1670] [/input-8, 1829] [/input-8, 1829] [/input-8, 1829] [/input-8, 1829] [/input-8, 1829] [/input-8, 1829] [/input-8, 1670] [/input-8, 1670] [/input-8, 838] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00012462172890082002, worst -0.025584697723388672
10 lb beta sum: 0.00031690095784142613, worst -0.025634765625
Time: prepare 1.4969    bound 2.4269    transfer 0.2597    finalize 0.1916    func 5.2725    
Accumulated time: func 37.1290    prepare 10.8195    bound 19.1018    transfer 1.9571    finalize 1.8666    
all_split False
======================Cut inference begins======================
max lb tensor(0.00468707) min lb tensor(-0.02558470)
Number of Verified Splits: 3576 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0006825923919677734 
BICCOS Cumulative time: 0.06815481185913086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02689 (17), -0.02659 (17), -0.02654 (17), -0.02654 (17), -0.02653 (17), -0.02624 (17), -0.02619 (17), -0.02613 (17), -0.02613 (17), -0.02608 (17), -0.02596 (18), -0.02588 (17), -0.02584 (17), -0.02582 (17), -0.02581 (17), -0.02580 (17), -0.02580 (17), -0.02579 (17), -0.02558 (17), -0.02557 (17), 
Length of domains: 96899
Time: pickout 0.2297    decision 1.6489    set_bounds 2.0534    solve 5.2784    add 0.0989    
Accumulated time: pickout 1.5802    decision 12.0561    set_bounds 14.0876    solve 36.9872    add 1.4370    
Current (lb-rhs): -0.02688908576965332
215940 domains visited
Cumulative time: 66.91560506820679

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1670] [/input-8, 1829] [/input-8, 1829] [/input-8, 1670] [/input-8, 1670] [/input-8, 1829] [/input-8, 1829] [/input-8, 1829] [/input-8, 1829] [/input-8, 1670] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00011530065967235714, worst -0.02626347541809082
10 lb beta sum: 0.0002811599406413734, worst -0.026263952255249023
Time: prepare 1.5096    bound 2.4271    transfer 0.1725    finalize 0.2214    func 4.5459    
Accumulated time: func 41.6749    prepare 12.3295    bound 21.5289    transfer 2.1296    finalize 2.0879    
all_split False
======================Cut inference begins======================
max lb tensor(0.00694203) min lb tensor(-0.02626300)
Number of Verified Splits: 4317 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0006830692291259766 
BICCOS Cumulative time: 0.06883788108825684
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02588 (17), -0.02560 (18), -0.02558 (17), -0.02557 (17), -0.02556 (18), -0.02554 (17), -0.02551 (18), -0.02551 (17), -0.02550 (18), -0.02549 (17), -0.02548 (17), -0.02547 (17), -0.02547 (17), -0.02545 (18), 
Length of domains: 108966
Time: pickout 0.2234    decision 1.6460    set_bounds 2.2086    solve 4.5522    add 0.1047    
Accumulated time: pickout 1.8036    decision 13.7021    set_bounds 16.2962    solve 41.5394    add 1.5417    
Current (lb-rhs): -0.026262998580932617
244391 domains visited
Cumulative time: 75.73088812828064

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1001] [/input-8, 1670] [/input-8, 1670] [/input, 1001] [/input-8, 838] [/input, 3815] [/input, 3815] [/input, 1001] [/input-8, 1670] [/input-8, 1670] 
cut re-enabled after branching node selection
0 lb beta sum: 9.88339597824961e-05, worst -0.024948835372924805
10 lb beta sum: 0.0002471190528012812, worst -0.02510356903076172
Time: prepare 1.4963    bound 2.4299    transfer 0.1788    finalize 0.1945    func 4.5128    
Accumulated time: func 46.1878    prepare 13.8262    bound 23.9588    transfer 2.3084    finalize 2.2824    
all_split False
======================Cut inference begins======================
max lb tensor(0.00727487) min lb tensor(-0.02494884)
Number of Verified Splits: 4927 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.000823974609375 
BICCOS Cumulative time: 0.06966185569763184
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02588 (17), -0.02560 (18), -0.02558 (17), -0.02556 (18), -0.02554 (17), -0.02551 (18), -0.02551 (17), -0.02550 (18), -0.02549 (17), -0.02548 (17), -0.02547 (17), -0.02547 (17), -0.02545 (18), -0.02521 (18), 
Length of domains: 120423
Time: pickout 0.2505    decision 1.6701    set_bounds 2.2637    solve 4.5185    add 0.0872    
Accumulated time: pickout 2.0541    decision 15.3722    set_bounds 18.5599    solve 46.0579    add 1.6289    
Current (lb-rhs): -0.026262998580932617
272232 domains visited
Cumulative time: 84.59944176673889

BaB round 19
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1670] [/input-8, 1670] [/input, 998] [/input, 998] [/input-8, 1670] [/input-8, 1670] [/input-8, 838] [/input-8, 838] [/input-8, 1670] [/input-8, 1670] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0001020205017994158, worst -0.025251388549804688
10 lb beta sum: 0.0002586827613413334, worst -0.025409698486328125
Time: prepare 1.5222    bound 2.4265    transfer 0.1800    finalize 0.2020    func 4.5447    
Accumulated time: func 50.7325    prepare 15.3488    bound 26.3853    transfer 2.4884    finalize 2.4844    
all_split False
======================Cut inference begins======================
max lb tensor(0.00766659) min lb tensor(-0.02525139)
Number of Verified Splits: 5022 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.000850677490234375 
BICCOS Cumulative time: 0.07051253318786621
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02560 (18), -0.02558 (17), -0.02556 (18), -0.02551 (18), -0.02551 (17), -0.02550 (18), -0.02547 (17), -0.02547 (17), -0.02545 (18), -0.02525 (18), -0.02521 (18), -0.02519 (18), -0.02518 (18), -0.02518 (18), 
Length of domains: 131785
Time: pickout 0.2235    decision 1.6740    set_bounds 2.3293    solve 4.5547    add 0.1242    
Accumulated time: pickout 2.2775    decision 17.0462    set_bounds 20.8892    solve 50.6126    add 1.7531    
Current (lb-rhs): -0.026262998580932617
299978 domains visited
Cumulative time: 93.60422658920288

BaB round 20
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1017] [/input-8, 838] [/input-8, 54] [/input-8, 838] [/input-8, 838] [/input, 3815] [/input, 3815] [/input, 1001] [/input, 1001] [/input, 998] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00010085086978506297, worst -0.02530837059020996
10 lb beta sum: 0.00025625148555263877, worst -0.02530837059020996
Time: prepare 1.5079    bound 2.4285    transfer 0.1783    finalize 0.1924    func 4.5246    
Accumulated time: func 55.2571    prepare 16.8571    bound 28.8138    transfer 2.6667    finalize 2.6768    
all_split False
======================Cut inference begins======================
max lb tensor(0.00841618) min lb tensor(-0.02530789)
Number of Verified Splits: 5019 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0007348060607910156 
BICCOS Cumulative time: 0.07124733924865723
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02560 (18), -0.02558 (17), -0.02556 (18), -0.02551 (18), -0.02551 (17), -0.02550 (18), -0.02547 (17), -0.02547 (17), -0.02545 (18), -0.02531 (19), -0.02525 (18), -0.02521 (18), -0.02519 (18), -0.02518 (18), -0.02518 (18), 
Length of domains: 143150
Time: pickout 0.2297    decision 1.6629    set_bounds 2.4009    solve 4.5305    add 0.0941    
Accumulated time: pickout 2.5073    decision 18.7091    set_bounds 23.2901    solve 55.1431    add 1.8472    
Current (lb-rhs): -0.026262998580932617
327727 domains visited
Cumulative time: 102.5953996181488

BaB round 21
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 62] [/input-8, 62] [/input-8, 1670] [/input-8, 1670] [/input-8, 62] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 62] [/input-8, 62] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00010021003981819376, worst -0.02406167984008789
10 lb beta sum: 0.0002492566709406674, worst -0.02424335479736328
Time: prepare 1.5140    bound 2.4287    transfer 0.1787    finalize 0.2044    func 4.5396    
Accumulated time: func 59.7966    prepare 18.3715    bound 31.2424    transfer 2.8454    finalize 2.8812    
all_split False
======================Cut inference begins======================
max lb tensor(0.00695777) min lb tensor(-0.02406168)
Number of Verified Splits: 5152 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.00267791748046875 
BICCOS Cumulative time: 0.07392525672912598
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02560 (18), -0.02558 (17), -0.02556 (18), -0.02551 (18), -0.02551 (17), -0.02550 (18), -0.02547 (17), -0.02547 (17), -0.02545 (18), -0.02531 (19), -0.02525 (18), -0.02521 (18), -0.02519 (18), -0.02518 (18), -0.02518 (18), 
Length of domains: 154382
Time: pickout 0.2232    decision 1.6674    set_bounds 2.4467    solve 4.5464    add 0.1122    
Accumulated time: pickout 2.7305    decision 20.3764    set_bounds 25.7368    solve 59.6895    add 1.9594    
Current (lb-rhs): -0.026262998580932617
355343 domains visited
Cumulative time: 111.70287036895752

BaB round 22
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1829] [/input-8, 62] [/input-8, 62] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 838] [/input-8, 1670] [/input-8, 1670] [/input-8, 62] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00011810244905063882, worst -0.024951457977294922
10 lb beta sum: 0.00027992838295176625, worst -0.025029659271240234
Time: prepare 1.4971    bound 2.4268    transfer 0.1769    finalize 0.1883    func 4.5042    
Accumulated time: func 64.3009    prepare 19.8690    bound 33.6692    transfer 3.0223    finalize 3.0695    
all_split False
======================Cut inference begins======================
max lb tensor(0.00691557) min lb tensor(-0.02495146)
Number of Verified Splits: 4616 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0008296966552734375 
BICCOS Cumulative time: 0.07475495338439941
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02560 (18), -0.02556 (18), -0.02551 (18), -0.02550 (18), -0.02545 (18), -0.02531 (19), -0.02525 (18), -0.02521 (18), -0.02519 (18), -0.02518 (18), -0.02518 (18), -0.02517 (18), -0.02517 (18), -0.02495 (18), -0.02495 (18), 
Length of domains: 166150
Time: pickout 0.2326    decision 1.6561    set_bounds 2.5681    solve 4.5102    add 0.0937    
Accumulated time: pickout 2.9631    decision 22.0325    set_bounds 28.3049    solve 64.1998    add 2.0531    
Current (lb-rhs): -0.026262998580932617
383495 domains visited
Cumulative time: 120.8337607383728

BaB round 23
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1017] [/input, 1017] [/input-8, 54] [/input-8, 62] [/input, 1017] [/input-8, 1829] [/input-8, 838] [/input-8, 62] [/input, 1001] [/input, 1001] 
cut re-enabled after branching node selection
0 lb beta sum: 9.407757897861302e-05, worst -0.023369789123535156
10 lb beta sum: 0.00024263697559945285, worst -0.023401260375976562
Time: prepare 1.5224    bound 2.4287    transfer 0.1841    finalize 0.2114    func 4.5624    
Accumulated time: func 68.8633    prepare 21.3917    bound 36.0979    transfer 3.2064    finalize 3.2809    
all_split False
======================Cut inference begins======================
max lb tensor(0.00834203) min lb tensor(-0.02336979)
Number of Verified Splits: 5113 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0007600784301757812 
BICCOS Cumulative time: 0.0755150318145752
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02626 (18), -0.02596 (18), -0.02591 (18), -0.02591 (18), -0.02590 (18), -0.02560 (18), -0.02556 (18), -0.02551 (18), -0.02550 (18), -0.02545 (18), -0.02531 (19), -0.02525 (18), -0.02521 (18), -0.02519 (18), -0.02518 (18), -0.02518 (18), -0.02517 (18), -0.02517 (18), -0.02495 (18), -0.02495 (18), 
Length of domains: 177421
Time: pickout 0.2288    decision 1.6632    set_bounds 2.6502    solve 4.5690    add 0.0984    
Accumulated time: pickout 3.1919    decision 23.6957    set_bounds 30.9551    solve 68.7687    add 2.1515    
Current (lb-rhs): -0.026262998580932617
411150 domains visited
Cumulative time: 130.15824818611145

BaB round 24
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 54] [/input-8, 54] [/input-8, 1670] [/input-8, 1670] [/input-8, 54] [/input-8, 1670] [/input-8, 1670] [/input-8, 838] [/input-8, 838] [/input, 998] 
cut re-enabled after branching node selection
0 lb beta sum: 9.410515485797077e-05, worst -0.02561211585998535
10 lb beta sum: 0.000239354936638847, worst -0.02561211585998535
Time: prepare 1.5161    bound 2.4261    transfer 0.1766    finalize 0.1929    func 5.8471    
Accumulated time: func 74.7104    prepare 22.9082    bound 38.5240    transfer 3.3831    finalize 3.4738    
all_split False
======================Cut inference begins======================
max lb tensor(0.00823998) min lb tensor(-0.02561212)
Number of Verified Splits: 5421 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0006866455078125 
BICCOS Cumulative time: 0.0762016773223877
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02561 (19), -0.02554 (19), -0.02553 (19), -0.02531 (19), -0.02531 (19), -0.02526 (19), -0.02525 (18), -0.02523 (19), -0.02519 (19), -0.02495 (18), -0.02495 (18), -0.02491 (18), -0.02487 (18), -0.02486 (18), -0.02485 (18), -0.02485 (18), -0.02484 (18), -0.02480 (19), -0.02462 (19), -0.02455 (18), 
Length of domains: 188384
Time: pickout 0.2454    decision 1.6695    set_bounds 1.4895    solve 5.8539    add 0.0954    
Accumulated time: pickout 3.4373    decision 25.3653    set_bounds 32.4445    solve 74.6227    add 2.2469    
Current (lb-rhs): -0.02561211585998535
438497 domains visited
Cumulative time: 139.59483003616333

BaB round 25
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 54] [/input, 1001] [/input, 1001] [/input, 998] [/input, 998] [/input, 1001] [/input, 998] [/input, 998] [/input, 1001] [/input, 1001] 
cut re-enabled after branching node selection
0 lb beta sum: 8.602645539212972e-05, worst -0.024297237396240234
10 lb beta sum: 0.00021478084090631455, worst -0.02445244789123535
Time: prepare 1.5061    bound 2.4279    transfer 0.1825    finalize 0.2288    func 4.5620    
Accumulated time: func 79.2724    prepare 24.4147    bound 40.9520    transfer 3.5655    finalize 3.7026    
all_split False
======================Cut inference begins======================
max lb tensor(0.00869274) min lb tensor(-0.02429724)
Number of Verified Splits: 5977 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0007078647613525391 
BICCOS Cumulative time: 0.07690954208374023
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02561 (19), -0.02554 (19), -0.02553 (19), -0.02531 (19), -0.02531 (19), -0.02526 (19), -0.02525 (18), -0.02523 (19), -0.02519 (19), -0.02495 (18), -0.02491 (18), -0.02487 (18), -0.02486 (18), -0.02485 (18), -0.02485 (18), -0.02484 (18), -0.02480 (19), -0.02462 (19), -0.02455 (18), -0.02454 (18), 
Length of domains: 198791
Time: pickout 0.2295    decision 1.6678    set_bounds 1.4624    solve 4.5683    add 0.0948    
Accumulated time: pickout 3.6669    decision 27.0331    set_bounds 33.9069    solve 79.1910    add 2.3416    
Current (lb-rhs): -0.02561211585998535
465288 domains visited
Cumulative time: 147.73162651062012

BaB round 26
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1670] [/input, 3815] [/input, 3815] [/input-8, 1670] [/input-8, 1670] [/input-8, 54] [/input-8, 54] [/input-8, 1670] [/input-8, 1670] [/input-8, 54] 
cut re-enabled after branching node selection
0 lb beta sum: 8.237062866101041e-05, worst -0.021788835525512695
10 lb beta sum: 0.00021502136951312423, worst -0.02199554443359375
Time: prepare 1.5101    bound 2.4258    transfer 0.1776    finalize 0.2027    func 4.5324    
Accumulated time: func 83.8048    prepare 25.9252    bound 43.3778    transfer 3.7431    finalize 3.9053    
all_split False
======================Cut inference begins======================
max lb tensor(0.00858903) min lb tensor(-0.02176476)
Number of Verified Splits: 5998 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0008337497711181641 
BICCOS Cumulative time: 0.0777432918548584
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02561 (19), -0.02554 (19), -0.02553 (19), -0.02531 (19), -0.02531 (19), -0.02526 (19), -0.02525 (18), -0.02523 (19), -0.02519 (19), -0.02495 (18), -0.02491 (18), -0.02487 (18), -0.02486 (18), -0.02485 (18), -0.02485 (18), -0.02484 (18), -0.02480 (19), -0.02462 (19), -0.02455 (18), -0.02454 (18), 
Length of domains: 209177
Time: pickout 0.2438    decision 1.6697    set_bounds 2.8815    solve 4.5393    add 0.0961    
Accumulated time: pickout 3.9107    decision 28.7028    set_bounds 36.7884    solve 83.7303    add 2.4378    
Current (lb-rhs): -0.02561211585998535
492058 domains visited
Cumulative time: 157.25878620147705

BaB round 27
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 54] [/input-8, 54] [/input-8, 54] [/input-8, 838] [/input-8, 838] [/input, 3815] [/input, 3815] [/input-8, 838] [/input, 1001] [/input-8, 54] 
cut re-enabled after branching node selection
0 lb beta sum: 9.295887139160186e-05, worst -0.024599313735961914
10 lb beta sum: 0.00023300452448893338, worst -0.024758100509643555
Time: prepare 1.5037    bound 2.4279    transfer 0.1801    finalize 0.2203    func 4.5500    
Accumulated time: func 88.3548    prepare 27.4293    bound 45.8057    transfer 3.9232    finalize 4.1256    
all_split False
======================Cut inference begins======================
max lb tensor(0.00774026) min lb tensor(-0.02459931)
Number of Verified Splits: 5743 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0006852149963378906 
BICCOS Cumulative time: 0.07842850685119629
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02561 (19), -0.02554 (19), -0.02553 (19), -0.02531 (19), -0.02531 (19), -0.02526 (19), -0.02523 (19), -0.02519 (19), -0.02495 (18), -0.02487 (18), -0.02485 (18), -0.02484 (18), -0.02480 (19), -0.02462 (19), -0.02460 (19), -0.02454 (18), -0.02454 (19), -0.02453 (19), -0.02448 (18), -0.02443 (19), 
Length of domains: 219818
Time: pickout 0.2378    decision 1.6719    set_bounds 3.0077    solve 4.5564    add 0.0986    
Accumulated time: pickout 4.1485    decision 30.3746    set_bounds 39.7962    solve 88.2867    add 2.5363    
Current (lb-rhs): -0.02561211585998535
519083 domains visited
Cumulative time: 166.9451127052307

BaB round 28
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] [/input-8, 1829] [/input-8, 1829] [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] 
cut re-enabled after branching node selection
0 lb beta sum: 7.258527330122888e-05, worst -0.024455785751342773
10 lb beta sum: 0.00020208900969009846, worst -0.024455547332763672
Time: prepare 1.5233    bound 2.4273    transfer 0.1766    finalize 0.2037    func 4.5441    
Accumulated time: func 92.8989    prepare 28.9529    bound 48.2330    transfer 4.0998    finalize 4.3293    
all_split False
======================Cut inference begins======================
max lb tensor(0.00793886) min lb tensor(-0.02445436)
Number of Verified Splits: 6298 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0008208751678466797 
BICCOS Cumulative time: 0.07924938201904297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02561 (19), -0.02554 (19), -0.02553 (19), -0.02531 (19), -0.02526 (19), -0.02523 (19), -0.02519 (19), -0.02495 (18), -0.02487 (18), -0.02485 (18), -0.02484 (18), -0.02480 (19), -0.02462 (19), -0.02460 (19), -0.02454 (18), -0.02454 (19), -0.02453 (19), -0.02448 (18), -0.02445 (20), -0.02441 (19), 
Length of domains: 229904
Time: pickout 0.2442    decision 1.6776    set_bounds 1.4774    solve 4.5511    add 0.0982    
Accumulated time: pickout 4.3927    decision 32.0523    set_bounds 41.2735    solve 92.8378    add 2.6346    
Current (lb-rhs): -0.02561211585998535
545553 domains visited
Cumulative time: 175.09714531898499

BaB round 29
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1670] [/input-8, 54] [/input-8, 54] [/input-8, 1670] [/input-8, 1670] [/input-8, 838] [/input-8, 838] [/input-8, 1670] [/input-8, 1670] [/input-8, 54] 
cut re-enabled after branching node selection
0 lb beta sum: 9.908956417348236e-05, worst -0.023973464965820312
10 lb beta sum: 0.00023906136630102992, worst -0.024016857147216797
Time: prepare 1.5372    bound 2.4292    transfer 0.1684    finalize 0.2160    func 4.5636    
Accumulated time: func 97.4625    prepare 30.4905    bound 50.6621    transfer 4.2682    finalize 4.5454    
all_split False
======================Cut inference begins======================
max lb tensor(0.00819683) min lb tensor(-0.02396870)
Number of Verified Splits: 6042 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0007243156433105469 
BICCOS Cumulative time: 0.07997369766235352
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02561 (19), -0.02554 (19), -0.02553 (19), -0.02531 (19), -0.02526 (19), -0.02523 (19), -0.02519 (19), -0.02495 (18), -0.02487 (18), -0.02485 (18), -0.02484 (18), -0.02480 (19), -0.02460 (19), -0.02454 (18), -0.02454 (19), -0.02453 (19), -0.02448 (18), -0.02445 (20), -0.02441 (19), -0.02436 (19), 
Length of domains: 240246
Time: pickout 0.2464    decision 1.6755    set_bounds 3.1842    solve 4.5707    add 0.0986    
Accumulated time: pickout 4.6391    decision 33.7278    set_bounds 44.4577    solve 97.4085    add 2.7332    
Current (lb-rhs): -0.02561211585998535
572279 domains visited
Cumulative time: 184.98034358024597

BaB round 30
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 998] [/input, 998] [/input-8, 1670] [/input-8, 1670] [/input-8, 54] [/input-8, 54] [/input-8, 1670] [/input-8, 1670] [/input-8, 1829] [/input-8, 1829] 
cut re-enabled after branching node selection
0 lb beta sum: 8.22088768472895e-05, worst -0.0235750675201416
10 lb beta sum: 0.0002015440259128809, worst -0.0236361026763916
Time: prepare 1.5252    bound 2.4284    transfer 0.1768    finalize 0.2189    func 6.4255    
Accumulated time: func 103.8879    prepare 32.0161    bound 53.0905    transfer 4.4450    finalize 4.7642    
all_split False
======================Cut inference begins======================
max lb tensor(0.00830674) min lb tensor(-0.02357507)
Number of Verified Splits: 5578 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0008115768432617188 
BICCOS Cumulative time: 0.08078527450561523
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02561 (19), -0.02554 (19), -0.02553 (19), -0.02531 (19), -0.02526 (19), -0.02523 (19), -0.02519 (19), -0.02495 (18), -0.02487 (18), -0.02485 (18), -0.02484 (18), -0.02480 (19), -0.02460 (19), -0.02454 (18), -0.02454 (19), -0.02453 (19), -0.02448 (18), -0.02445 (20), -0.02441 (19), -0.02436 (19), 
Length of domains: 251052
Time: pickout 0.2424    decision 1.6744    set_bounds 1.4861    solve 6.4324    add 0.1007    
Accumulated time: pickout 4.8815    decision 35.4022    set_bounds 45.9439    solve 103.8409    add 2.8339    
Current (lb-rhs): -0.02561211585998535
599469 domains visited
Cumulative time: 195.004807472229

BaB round 31
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3815] [/input-8, 1670] [/input-8, 54] [/input-8, 54] [/input-8, 62] [/input-8, 54] [/input-8, 54] [/input, 3815] [/input-8, 1670] [/input, 3815] 
cut re-enabled after branching node selection
0 lb beta sum: 9.590112313162535e-05, worst -0.023259401321411133
10 lb beta sum: 0.0002306805399712175, worst -0.02337360382080078
Time: prepare 1.5063    bound 2.4263    transfer 0.1769    finalize 0.2168    func 4.5362    
Accumulated time: func 108.4241    prepare 33.5228    bound 55.5169    transfer 4.6219    finalize 4.9810    
all_split False
======================Cut inference begins======================
max lb tensor(0.00850630) min lb tensor(-0.02325940)
Number of Verified Splits: 5485 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 7.
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.0006563663482666016 
BICCOS Cumulative time: 0.08144164085388184
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02561 (19), -0.02554 (19), -0.02553 (19), -0.02531 (19), -0.02526 (19), -0.02523 (19), -0.02519 (19), -0.02495 (18), -0.02487 (18), -0.02485 (18), -0.02484 (18), -0.02480 (19), -0.02460 (19), -0.02454 (18), -0.02454 (19), -0.02453 (19), -0.02448 (18), -0.02445 (20), -0.02436 (19), -0.02435 (19), 
Length of domains: 261951
Time: pickout 0.2362    decision 1.6649    set_bounds 1.4619    solve 4.5436    add 0.1022    
Accumulated time: pickout 5.1177    decision 37.0672    set_bounds 47.4057    solve 108.3845    add 2.9362    
Current (lb-rhs): -0.02561211585998535
626752 domains visited
Time out!!!!!!!!
Result: unknown in 206.4391 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 179, vnnlib ID: 179 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.81497240, -9.61914158, -4.37678957, -7.16895294, -6.05048847,
         -7.32035542, -8.58375645, -7.87642765, -5.33914280, -9.25911236]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [423]; unstable size 423; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 423] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 423] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 423] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.06378555, 1.32269335, 4.03046036, 2.94304752, 4.17913628, 5.32646465,
         4.62639809, 2.15443397, 5.73307467]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0539 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 180, vnnlib ID: 180 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.18043327, -9.67250061, -4.03554153, -4.66885376, -3.01946378,
         -4.69520569, -4.94520855, -1.53955245, -9.21621990, -7.85623407]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 585] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 585] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 188] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.87333965, 7.17064333, 1.94768214, 2.44880009, 1.09218812, 2.47986364,
         2.62327337, 6.51520348, 5.40360212]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0320 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 181, vnnlib ID: 181 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
         -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [497]; unstable size 497; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 497] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 497] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 497] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 148] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.14809799,  2.07557392,  0.01328355,  1.37565887, -0.08653331,
          1.50969958,  1.94958806,  1.83056569,  2.30023527]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
         -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.83it/s]100%|██████████| 1/1 [00:00<00:00,  8.82it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.12310123, -6.43147659, -3.69320679, -5.09748745, -3.54227424,
          -5.23913240, -3.53681922, -5.74136019, -5.95448112, -6.58602953]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00545502]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1164 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.484098434448242
alpha/beta optimization time: 1.2139246463775635
initial alpha-crown bounds: tensor([[ 2.17381597,  2.11343050,  0.04474783,  1.40611649, -0.02632558,
          1.54144168,  2.00770783,  1.88426292,  2.33890080]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.026325583457946777
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62597823143005
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.62594032287598
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62591433525085
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.62589383125305
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.62587523460388
Verifying property 4 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02632558]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
        -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02632558]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 497
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 146
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 648
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.703636169433594e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026325345039367676
10 lb beta sum: 0.0, worst -0.026330113410949707
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    func 0.0529    
Accumulated time: func 0.0529    prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-8, 51] 
split level 2: [/input-8, 1573] 
split level 3: [/input-8, 1099] 
split level 4: [/input-8, 923] 
split level 5: [/input-8, 1445] 
split level 6: [/input-8, 1241] 
split level 7: [/input-8, 1233] 
split level 8: [/input-8, 1236] 
split level 9: [/input-8, 811] 
split level 10: [/input-8, 1186] 
split level 11: [/input-8, 817] 
split level 12: [/input, 2216] 
split level 13: [/input-8, 315] 
split level 14: [/input-8, 354] 
split level 15: [/input-8, 1170] 
split level 16: [/input-8, 918] 
split level 17: [/input-8, 317] 
split level 18: [/input-8, 1249] 
split level 19: [/input-8, 2014] 
split level 20: [/input-8, 83] 
split level 21: [/input-8, 1331] 
split level 22: [/input-8, 930] 
split level 23: [/input-8, 560] 
split level 24: [/input-8, 113] 
split level 25: [/input-8, 748] 
split level 26: [/input-8, 1619] 
split level 27: [/input-8, 1106] 
split level 28: [/input-8, 1438] 
split level 29: [/input-8, 1180] 
split level 30: [/input-8, 41] 
split level 31: [/input-8, 2000] 
split level 32: [/input-8, 1098] 
split level 33: [/input-8, 229] 
split level 34: [/input, 2641] 
split level 35: [/input-8, 818] 
split level 36: [/input-8, 2002] 
split level 37: [/input-8, 819] 
split level 38: [/input-8, 789] 
split level 39: [/input-8, 790] 
split level 40: [/input-8, 812] 
split level 41: [/input, 2253] 
split level 42: [/input-8, 754] 
split level 43: [/input-8, 820] 
split level 44: [/input-8, 147] 
split level 45: [/input, 2217] 
split level 46: [/input, 2219] 
split level 47: [/input, 2238] 
split level 48: [/input-8, 75] 
split level 49: [/input, 2205] 
split level 50: [/input, 1115] 
split level 51: [/input-8, 1620] 
split level 52: [/input-8, 946] 
split level 53: [/input-8, 757] 
split level 54: [/input-8, 1473] 
split level 55: [/input, 753] 
split level 56: [/input, 3477] 
split level 57: [/input, 3672] 
split level 58: [/input-8, 34] 
split level 59: [/input, 1114] 
split level 60: [/input, 1096] 
split level 61: [/input-8, 1613] 
split level 62: [/input, 2662] 
split level 63: [/input, 2765] 
split level 64: [/input, 3214] 
split level 65: [/input-8, 713] 
split level 66: [/input, 2173] 
split level 67: [/input-8, 39] 
split level 68: [/input, 4012] 
split level 69: [/input, 1527] 
split level 70: [/input, 2181] 
split level 71: [/input-8, 1327] 
split level 72: [/input, 2638] 
split level 73: [/input, 1508] 
split level 74: [/input, 1526] 
split level 75: [/input-8, 1994] 
split level 76: [/input, 2163] 
split level 77: [/input, 1690] 
split level 78: [/input-8, 112] 
split level 79: [/input, 1159] 
split level 80: [/input, 4054] 
split level 81: [/input-8, 1158] 
split level 82: [/input, 4039] 
split level 83: [/input, 1468] 
split level 84: [/input, 1082] 
split level 85: [/input, 1515] 
split level 86: [/input, 1865] 
split level 87: [/input, 1897] 
split level 88: [/input-8, 67] 
split level 89: [/input, 2779] 
split level 90: [/input, 2403] 
split level 91: [/input, 1271] 
split level 92: [/input-8, 1517] 
split level 93: [/input, 2458] 
split level 94: [/input, 3652] 
split level 95: [/input, 3953] 
split level 96: [/input, 630] 
split level 97: [/input, 1121] 
split level 98: [/input, 683] 
split level 99: [/input, 854] 
split level 100: [/input, 833] 
split level 101: [/input, 1155] 
split level 102: [/input, 3803] 
split level 103: [/input, 471] 
split level 104: [/input, 2433] 
split level 105: [/input, 3896] 
split level 106: [/input, 3833] 
split level 107: [/input, 3417] 
split level 108: [/input, 33] 
split level 109: [/input-8, 1823] 
split level 110: [/input-8, 691] 
split level 111: [/input-12, 79] 
split level 112: [/input-8, 1912] 
split level 113: [/input-8, 684] 
split level 114: [/input-8, 1323] 
split level 115: [/input, 2996] 
split level 116: [/input-8, 1817] 
split level 117: [/input-8, 862] 
split level 118: [/input, 2526] 
split level 119: [/input-8, 1824] 
split level 120: [/input-8, 1695] 
split level 121: [/input, 835] 
split level 122: [/input, 2778] 
split level 123: [/input, 118] 
split level 124: [/input, 200] 
split level 125: [/input, 1702] 
split level 126: [/input-8, 1895] 
split level 127: [/input, 67] 
split level 128: [/input-8, 1855] 
split level 129: [/input-8, 145] 
split level 130: [/input, 2527] 
split level 131: [/input, 3926] 
split level 132: [/input, 2757] 
split level 133: [/input, 2739] 
split level 134: [/input, 201] 
split level 135: [/input, 883] 
split level 136: [/input, 2780] 
split level 137: [/input, 2370] 
split level 138: [/input-8, 1621] 
split level 139: [/input, 77] 
split level 140: [/input, 3741] 
split level 141: [/input-8, 1458] 
split level 142: [/input-8, 692] 
split level 143: [/input, 2355] 
split level 144: [/input, 2793] 
split level 145: [/input-8, 139] 
split level 146: [/input, 2517] 
split level 147: [/input, 377] 
split level 148: [/input, 716] 
split level 149: [/input, 161] 
split level 150: [/input, 2732] 
split level 151: [/input, 614] 
split level 152: [/input, 1107] 
split level 153: [/input, 3157] 
split level 154: [/input, 438] 
split level 155: [/input, 2390] 
split level 156: [/input, 1091] 
split level 157: [/input, 622] 
split level 158: [/input-8, 1814] 
split level 159: [/input, 1014] 
split level 160: [/input, 1137] 
split level 161: [/input, 4051] 
split level 162: [/input, 2406] 
split level 163: [/input, 2364] 
split level 164: [/input, 460] 
split level 165: [/input, 942] 
split level 166: [/input, 637] 
split level 167: [/input, 1270] 
split level 168: [/input, 3972] 
split level 169: [/input, 594] 
split level 170: [/input-8, 1872] 
split level 171: [/input, 3637] 
split level 172: [/input, 2601] 
split level 173: [/input-8, 74] 
split level 174: [/input, 2672] 
split level 175: [/input-8, 350] 
split level 176: [/input, 3802] 
split level 177: [/input, 2619] 
split level 178: [/input-8, 1464] 
split level 179: [/input-8, 1839] 
split level 180: [/input, 866] 
split level 181: [/input, 735] 
split level 182: [/input, 163] 
split level 183: [/input, 490] 
split level 184: [/input, 3714] 
split level 185: [/input, 2425] 
split level 186: [/input, 2491] 
split level 187: [/input, 3959] 
split level 188: [/input, 2791] 
split level 189: [/input, 3944] 
split level 190: [/input, 2503] 
split level 191: [/input, 473] 
split level 192: [/input-8, 683] 
split level 193: [/input-12, 90] 
split level 194: [/input, 2796] 
split level 195: [/input, 3634] 
split level 196: [/input-8, 1813] 
split level 197: [/input, 213] 
split level 198: [/input-8, 1913] 
split level 199: [/input-12, 47] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06559157371520996
10 lb beta sum: 0.0, worst -0.02806997299194336
Time: prepare 0.0115    bound 0.0972    transfer 0.0011    finalize 0.0025    func 0.1149    
Accumulated time: func 0.1678    prepare 0.0219    bound 0.1497    transfer 0.0012    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.03216529) min lb tensor(-0.02632535)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010310888290405273 
BICCOS Cumulative time: 0.010310888290405273
Preprocessing time: 0.009930849075317383 Inference time: 0.00011491775512695312 Add cuts time: 5.555152893066406e-05 Cut analysis time: 0.00020956993103027344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02440 (1), -0.02436 (1), -0.02435 (1), -0.02428 (1), -0.02423 (1), -0.02419 (1), -0.02409 (1), -0.02408 (1), -0.02406 (1), -0.02406 (1), -0.02405 (1), -0.02405 (1), -0.02393 (1), -0.02393 (1), -0.02388 (1), -0.02374 (1), -0.02350 (1), -0.02349 (1), -0.02348 (1), -0.02332 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5121    set_bounds 0.0085    solve 0.1149    add 0.0736    
Accumulated time: pickout 0.0003    decision 0.5121    set_bounds 0.0085    solve 0.1149    add 0.0736    
Current (lb-rhs): -0.024403810501098633
50 domains visited
Cumulative time: 0.77777099609375

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input, 622] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] [/input-8, 1445] 
split level 2: [/input-8, 918] [/input-8, 918] [/input-8, 918] [/input-8, 918] [/input-8, 918] [/input, 637] [/input-8, 918] [/input, 2217] [/input-8, 918] [/input-8, 918] 
split level 3: [/input-8, 1249] [/input, 4039] [/input-8, 1249] [/input-8, 1249] [/input, 2181] [/input, 638] [/input-8, 1249] [/input, 169] [/input-8, 1249] [/input-8, 1249] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023595571517944336
10 lb beta sum: 0.31766533851623535, worst -0.02168571949005127
Time: prepare 0.0070    bound 0.1175    transfer 0.0010    finalize 0.0022    func 0.1304    
Accumulated time: func 0.2982    prepare 0.0291    bound 0.2672    transfer 0.0022    finalize 0.0049    
all_split False
======================Cut inference begins======================
max lb tensor(0.05727375) min lb tensor(-0.02167773)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.01533198356628418 
BICCOS Cumulative time: 0.025642871856689453
Preprocessing time: 0.011644840240478516 Inference time: 0.0019996166229248047 Add cuts time: 0.001359701156616211 Cut analysis time: 0.00032782554626464844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01337 (2), -0.01336 (2), -0.01333 (2), -0.01319 (2), -0.01308 (2), -0.01305 (2), -0.01303 (2), -0.01286 (2), -0.01271 (2), -0.01268 (2), -0.01266 (2), -0.01248 (2), -0.01242 (2), -0.01217 (2), -0.01212 (2), -0.01180 (2), -0.01151 (2), -0.01149 (2), -0.01140 (2), -0.01093 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0229    set_bounds 0.0132    solve 0.1305    add 0.0776    
Accumulated time: pickout 0.0014    decision 0.5350    set_bounds 0.0218    solve 0.2455    add 0.1511    
Current (lb-rhs): -0.013366982340812683
100 domains visited
Cumulative time: 1.0385937690734863

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-8, 1445] [/input-8, 918] [/input-8, 1445] [/input-8, 1445] [/input-8, 918] [/input-8, 1445] [/input-8, 918] [/input-8, 1445] [/input-8, 1241] [/input-8, 1445] 
split level 2: [/input, 622] [/input-8, 1249] [/input-8, 1249] [/input-8, 918] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 918] [/input-8, 918] [/input-8, 1249] 
split level 3: [/input, 638] [/input, 4039] [/input, 4039] [/input-8, 1249] [/input, 4053] [/input, 4039] [/input, 4039] [/input-8, 1249] [/input-8, 1249] [/input, 4053] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.016811490058898926
10 lb beta sum: 0.5668785572052002, worst -0.013277411460876465
Time: prepare 0.0074    bound 0.1480    transfer 0.0011    finalize 0.0028    func 0.1619    
Accumulated time: func 0.4601    prepare 0.0367    bound 0.4151    transfer 0.0033    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.33791149) min lb tensor(-0.01324928)
Number of Verified Splits: 63 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.01594996452331543 
BICCOS Cumulative time: 0.04159283638000488
Preprocessing time: 0.011641740798950195 Inference time: 0.0022172927856445312 Add cuts time: 0.001749277114868164 Cut analysis time: 0.00034165382385253906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00511 (3), -0.00510 (3), -0.00510 (3), -0.00510 (3), -0.00507 (3), -0.00506 (3), -0.00505 (3), -0.00487 (3), -0.00486 (3), -0.00484 (3), -0.00479 (3), -0.00476 (3), -0.00476 (3), -0.00475 (3), -0.00465 (3), -0.00460 (3), -0.00460 (3), -0.00457 (3), -0.00455 (3), -0.00446 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0138    solve 0.1620    add 0.0812    
Accumulated time: pickout 0.0023    decision 0.5545    set_bounds 0.0355    solve 0.4074    add 0.2323    
Current (lb-rhs): -0.0051089078187942505
150 domains visited
Cumulative time: 1.3320906162261963

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-8, 918] [/input-8, 918] [/input-8, 1445] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1445] [/input-8, 1241] [/input-8, 1445] 
split level 2: [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 918] [/input-8, 1249] [/input-8, 918] [/input-8, 1249] [/input-8, 918] [/input-8, 918] 
split level 3: [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input, 4039] [/input-8, 1249] [/input, 4039] [/input-8, 1249] [/input-8, 1098] [/input, 4039] [/input-8, 1098] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.015097975730895996
10 lb beta sum: 0.5938965678215027, worst -0.00491642951965332
Time: prepare 0.0077    bound 0.1489    transfer 0.0011    finalize 0.0024    func 0.1627    
Accumulated time: func 0.6228    prepare 0.0447    bound 0.5641    transfer 0.0043    finalize 0.0102    
all_split False
======================Cut inference begins======================
max lb tensor(0.05920839) min lb tensor(-0.00474954)
Number of Verified Splits: 85 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 7
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.01810479164123535 
BICCOS Cumulative time: 0.059697628021240234
Preprocessing time: 0.011547088623046875 Inference time: 0.0035762786865234375 Add cuts time: 0.0024137496948242188 Cut analysis time: 0.0005676746368408203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00121 (4), -0.00120 (4), -0.00119 (4), -0.00118 (4), -0.00116 (4), -0.00114 (4), -0.00114 (4), -0.00112 (4), -0.00108 (4), -0.00107 (4), -0.00104 (4), -0.00104 (4), -0.00102 (4), -0.00101 (4), -0.00099 (4), -0.00099 (4), -0.00097 (4), -0.00097 (4), -0.00092 (4), -0.00089 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0138    solve 0.1628    add 0.2133    
Accumulated time: pickout 0.0033    decision 0.5740    set_bounds 0.0493    solve 0.5702    add 0.4456    
Current (lb-rhs): -0.0012081563472747803
200 domains visited
Cumulative time: 1.7609226703643799

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input, 984] [/input-8, 1249] [/input-8, 1249] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input, 4053] 
split level 2: [/input, 968] [/input-8, 1106] [/input-8, 1106] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input, 968] 
split level 3: [/input, 1000] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input, 1000] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014275670051574707
10 lb beta sum: 0.7491750121116638, worst -0.013004466891288757
Time: prepare 0.0078    bound 0.1483    transfer 0.0024    finalize 0.0023    func 0.1634    
Accumulated time: func 0.7862    prepare 0.0527    bound 0.7123    transfer 0.0067    finalize 0.0125    
all_split False
======================Cut inference begins======================
max lb tensor(0.06034958) min lb tensor(-0.00115657)
Number of Verified Splits: 359 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.03655052185058594 
BICCOS Cumulative time: 0.09624814987182617
Preprocessing time: 0.011368989944458008 Inference time: 0.017458677291870117 Add cuts time: 0.006963014602661133 Cut analysis time: 0.0007598400115966797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00116 (5), -0.00057 (5), -0.00024 (5), -0.00013 (5), 
Length of domains: 4
Time: pickout 0.0011    decision 0.0194    set_bounds 0.0143    solve 0.1635    add 0.1071    
Accumulated time: pickout 0.0044    decision 0.5934    set_bounds 0.0636    solve 0.7337    add 0.5526    
Current (lb-rhs): -0.0011565685272216797
204 domains visited
Cumulative time: 2.1030433177948

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([811]), tensor([-1.]), tensor([0]), tensor([3.97426002e-37]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([4039], [-1.0], [0], [3.974360462440503e-37], [2]), '/input-8': ([811, 1445], [1.0, -1.0], [0, 0], [3.9742600173665805e-37, 0.005676643457263708], [0, 1]), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([7.38796802e-11]), tensor([3]))}
Restore {'/input': ([4039], [-1.0], [0], [3.974360462440503e-37], [2]), '/input-8': ([811, 1445], [1.0, -1.0], [0, 0], [3.9742600173665805e-37, 0.005676643457263708], [0, 1]), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([3.97427437e-37]), tensor([3]))}
Restore {'/input': (tensor([4039]), tensor([1.]), tensor([0]), tensor([2.69049305e-43]), tensor([2])), '/input-8': ([811, 1445], [1.0, -1.0], [0, 0], [3.9742600173665805e-37, 0.005676643457263708], [0, 1]), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, -1.0, -1.0], [0, 0, 0, 0], [3.9742600173665805e-37, 0.00798461027443409, 0.0022700445260852575, 0.0016422139015048742], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([6.07198736e-10]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, -1.0, -1.0], [0, 0, 0, 0], [3.9742600173665805e-37, 0.00798461027443409, 0.0022700445260852575, 0.0016422139015048742], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([0.00093977]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, -1.0, 1.0], [0, 0, 0, 0], [3.9742600173665805e-37, 0.00798461027443409, 0.0022700445260852575, 0.0013569609727710485], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([8.60190807e-11]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, -1.0, 1.0], [0, 0, 0, 0], [3.9742600173665805e-37, 0.00798461027443409, 0.0022700445260852575, 0.0013569609727710485], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([0.00094894]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, 1.0, -1.0], [0, 0, 0, 0], [3.9742600173665805e-37, 0.00798461027443409, 0.0019036249723285437, 0.0016644762363284826], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([-1.]), tensor([0]), tensor([3.97426002e-37]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([811, 1445, 918, 1249], [1.0, 1.0, 1.0, -1.0], [0, 0, 0, 0], [3.9742600173665805e-37, 0.00798461027443409, 0.0019036249723285437, 0.0016644762363284826], [0, 1, 2, 3]), '/input-12': (tensor([10]), tensor([1.]), tensor([0]), tensor([3.97427437e-37]), tensor([4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 811, 1445,  918, 1249]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([3.97426002e-37, 7.98461027e-03, 1.90362497e-03, 1.34185120e-03]), tensor([0, 1, 2, 3])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  11
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026232361793518066
10 lb beta sum: 0.5929151773452759, worst -0.02214162051677704
Time: prepare 0.0005    bound 0.1411    transfer 0.0001    finalize 0.0002    func 0.1421    
Accumulated time: func 0.9282    prepare 0.0533    bound 0.8534    transfer 0.0069    finalize 0.0127    
After pruning, left:  7

Back to Regular BaB

BaB round 1
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-8, 1241] [/input-12, 10] [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-12, 10] 
split level 1: [/input-8, 1445] [/input-8, 918] [/input-8, 1241] [/input-8, 317] [/input-8, 1106] [/input-8, 1106] [/input-8, 1241] 
split level 2: [/input-8, 1241] [/input-8, 1249] [/input-8, 918] [/input-8, 1106] [/input-8, 113] [/input-8, 113] [/input-8, 1106] 
split level 3: [/input-8, 918] [/input-8, 1106] [/input-8, 1249] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] [/input-8, 1098] 
split level 4: [/input-8, 1249] [/input-8, 1098] [/input-8, 1098] [/input, 4039] [/input, 4039] [/input, 4039] [/input, 4039] 
cut re-enabled after branching node selection
0 lb beta sum: 1.107593297958374, worst -0.018685519695281982
10 lb beta sum: 1.1147477626800537, worst -0.018621623516082764
Time: prepare 0.0106    bound 0.1454    transfer 0.0007    finalize 0.0013    func 0.1594    
Accumulated time: func 1.0877    prepare 0.0641    bound 0.9988    transfer 0.0075    finalize 0.0140    
all_split False
======================Cut inference begins======================
max lb tensor(0.05540901) min lb tensor(-0.01860517)
Number of Verified Splits: 188 of 224
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.00031495094299316406 
BICCOS Cumulative time: 0.09656310081481934
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01861 (5), -0.01836 (5), -0.01801 (5), -0.01774 (5), -0.01670 (5), -0.01635 (5), -0.01607 (5), -0.01572 (5), -0.01270 (5), -0.01245 (5), -0.01243 (5), -0.01217 (5), -0.01076 (5), -0.01041 (5), -0.01041 (5), -0.01006 (5), -0.00257 (5), -0.00245 (5), -0.00229 (5), -0.00227 (5), 
Length of domains: 36
Time: pickout 0.0006    decision 0.0156    set_bounds 0.0200    solve 0.1595    add 0.0009    
Accumulated time: pickout 0.0051    decision 0.6090    set_bounds 0.0836    solve 0.8931    add 0.5535    
Current (lb-rhs): -0.018605172634124756
240 domains visited
Cumulative time: 2.464595079421997

BaB round 2
batch: 36
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1106] [/input-8, 1170] [/input-8, 1106] [/input-8, 1170] [/input-8, 1170] [/input-8, 1170] [/input-8, 1170] [/input-8, 1170] [/input-8, 1170] [/input-8, 1170] 
split level 1: [/input-8, 113] [/input-8, 1438] [/input-8, 113] [/input-8, 1438] [/input-8, 1106] [/input-8, 113] [/input-8, 1438] [/input-8, 113] [/input-8, 1438] [/input-8, 1106] 
split level 2: [/input-8, 1098] [/input-8, 113] [/input-8, 1098] [/input-8, 113] [/input-8, 113] [/input-8, 1098] [/input-8, 113] [/input-8, 1098] [/input-8, 113] [/input-8, 113] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6821684241294861, worst -0.01649552583694458
10 lb beta sum: 0.6823605298995972, worst -0.016480743885040283
Time: prepare 0.0127    bound 0.1440    transfer 0.0008    finalize 0.0015    func 0.1609    
Accumulated time: func 1.2486    prepare 0.0770    bound 1.1428    transfer 0.0083    finalize 0.0155    
all_split False
======================Cut inference begins======================
max lb tensor(0.00319874) min lb tensor(-0.01646489)
Number of Verified Splits: 156 of 288
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0003046989440917969 
BICCOS Cumulative time: 0.09686779975891113
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01646 (8), -0.01637 (8), -0.01621 (8), -0.01612 (8), -0.01609 (8), -0.01598 (8), -0.01583 (8), -0.01582 (8), -0.01574 (8), -0.01573 (8), -0.01557 (8), -0.01547 (8), -0.01545 (8), -0.01535 (8), -0.01520 (8), -0.01510 (8), -0.01455 (8), -0.01444 (8), -0.01422 (8), -0.01420 (8), 
Length of domains: 132
Time: pickout 0.0012    decision 0.0154    set_bounds 0.0150    solve 0.1610    add 0.0012    
Accumulated time: pickout 0.0062    decision 0.6243    set_bounds 0.0986    solve 1.0541    add 0.5547    
Current (lb-rhs): -0.01646488904953003
372 domains visited
Cumulative time: 2.659105062484741

BaB round 3
batch: 132
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1170] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1170] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 317] [/input-8, 1170] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8266283869743347, worst -0.015807807445526123
10 lb beta sum: 0.8270119428634644, worst -0.01580744981765747
Time: prepare 0.0116    bound 0.1527    transfer 0.0007    finalize 0.0016    func 0.1684    
Accumulated time: func 1.4170    prepare 0.0888    bound 1.2955    transfer 0.0090    finalize 0.0171    
all_split False
======================Cut inference begins======================
max lb tensor(0.00144260) min lb tensor(-0.01580280)
Number of Verified Splits: 8 of 264
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0003910064697265625 
BICCOS Cumulative time: 0.0972588062286377
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01580 (9), -0.01573 (9), -0.01555 (9), -0.01548 (9), -0.01542 (9), -0.01535 (9), -0.01517 (9), -0.01515 (9), -0.01510 (9), -0.01510 (9), -0.01509 (9), -0.01493 (9), -0.01489 (9), -0.01483 (9), -0.01483 (9), -0.01472 (9), -0.01471 (9), -0.01470 (9), -0.01452 (9), -0.01449 (9), 
Length of domains: 256
Time: pickout 0.0019    decision 0.0176    set_bounds 0.0106    solve 0.1685    add 0.0015    
Accumulated time: pickout 0.0081    decision 0.6419    set_bounds 0.1092    solve 1.2226    add 0.5562    
Current (lb-rhs): -0.01580280065536499
628 domains visited
Cumulative time: 2.8599021434783936

BaB round 4
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 317] [/input-8, 1170] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1170] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8304246664047241, worst -0.015345752239227295
10 lb beta sum: 0.8311561346054077, worst -0.015327870845794678
Time: prepare 0.0217    bound 0.1447    transfer 0.0012    finalize 0.0025    func 0.1735    
Accumulated time: func 1.5904    prepare 0.1107    bound 1.4402    transfer 0.0103    finalize 0.0195    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00018384) min lb tensor(-0.01531643)
Number of Verified Splits: 0 of 512
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.00031280517578125 
BICCOS Cumulative time: 0.09757161140441895
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01532 (10), -0.01524 (10), -0.01506 (10), -0.01498 (10), -0.01494 (10), -0.01487 (10), -0.01469 (10), -0.01465 (10), -0.01462 (10), -0.01458 (10), -0.01457 (10), -0.01440 (10), -0.01434 (10), -0.01432 (10), -0.01428 (10), -0.01421 (10), -0.01418 (10), -0.01413 (10), -0.01405 (10), -0.01397 (10), 
Length of domains: 512
Time: pickout 0.0030    decision 0.0223    set_bounds 0.0205    solve 0.1736    add 0.0024    
Accumulated time: pickout 0.0111    decision 0.6642    set_bounds 0.1297    solve 1.3963    add 0.5586    
Current (lb-rhs): -0.015316426753997803
1140 domains visited
Cumulative time: 3.0824692249298096

BaB round 5
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8304883241653442, worst -0.014793336391448975
10 lb beta sum: 0.831274688243866, worst -0.014784276485443115
Time: prepare 0.0452    bound 0.1532    transfer 0.0024    finalize 0.0046    func 0.2121    
Accumulated time: func 1.8025    prepare 0.1562    bound 1.5934    transfer 0.0127    finalize 0.0241    
all_split False
======================Cut inference begins======================
max lb tensor(0.00178157) min lb tensor(-0.01477867)
Number of Verified Splits: 36 of 1024
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0003635883331298828 
BICCOS Cumulative time: 0.09793519973754883
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01478 (11), -0.01469 (11), -0.01452 (11), -0.01444 (11), -0.01440 (11), -0.01431 (11), -0.01416 (11), -0.01411 (11), -0.01406 (11), -0.01406 (11), -0.01402 (11), -0.01386 (11), -0.01381 (11), -0.01376 (11), -0.01373 (11), -0.01370 (11), -0.01366 (11), -0.01358 (11), -0.01349 (11), -0.01343 (11), 
Length of domains: 988
Time: pickout 0.0072    decision 0.0355    set_bounds 0.0380    solve 0.2129    add 0.0038    
Accumulated time: pickout 0.0183    decision 0.6996    set_bounds 0.1677    solve 1.6092    add 0.5624    
Current (lb-rhs): -0.014778673648834229
2128 domains visited
Cumulative time: 3.381115674972534

BaB round 6
batch: 988
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] 
cut re-enabled after branching node selection
0 lb beta sum: 0.827820360660553, worst -0.014439642429351807
10 lb beta sum: 0.8284912109375, worst -0.014427244663238525
Time: prepare 0.0942    bound 0.2184    transfer 0.0045    finalize 0.0105    func 0.3408    
Accumulated time: func 2.1433    prepare 0.2506    bound 1.8118    transfer 0.0173    finalize 0.0347    
all_split False
======================Cut inference begins======================
max lb tensor(0.00191770) min lb tensor(-0.01441163)
Number of Verified Splits: 126 of 1976
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0003979206085205078 
BICCOS Cumulative time: 0.09833312034606934
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01441 (12), -0.01432 (12), -0.01416 (12), -0.01406 (12), -0.01404 (12), -0.01396 (12), -0.01379 (12), -0.01375 (12), -0.01371 (12), -0.01369 (12), -0.01365 (12), -0.01349 (12), -0.01343 (12), -0.01339 (12), -0.01338 (12), -0.01332 (12), -0.01329 (12), -0.01318 (12), -0.01313 (12), -0.01307 (12), 
Length of domains: 1850
Time: pickout 0.0149    decision 0.0637    set_bounds 0.0551    solve 0.3412    add 0.0078    
Accumulated time: pickout 0.0332    decision 0.7633    set_bounds 0.2228    solve 1.9504    add 0.5702    
Current (lb-rhs): -0.014411628246307373
3978 domains visited
Cumulative time: 3.8664391040802

BaB round 7
batch: 1850
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8228117227554321, worst -0.01409214735031128
10 lb beta sum: 0.8232863545417786, worst -0.0142897367477417
Time: prepare 0.1768    bound 0.3480    transfer 0.0087    finalize 0.0184    func 0.5762    
Accumulated time: func 2.7195    prepare 0.4277    bound 2.1598    transfer 0.0260    finalize 0.0530    
all_split False
======================Cut inference begins======================
max lb tensor(0.00535224) min lb tensor(-0.01408869)
Number of Verified Splits: 711 of 3700
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.00042438507080078125 
BICCOS Cumulative time: 0.09875750541687012
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01409 (13), -0.01401 (13), -0.01383 (13), -0.01376 (13), -0.01372 (13), -0.01365 (13), -0.01346 (13), -0.01342 (13), -0.01339 (13), -0.01333 (13), -0.01332 (13), -0.01316 (13), -0.01308 (13), -0.01305 (13), -0.01305 (13), -0.01297 (13), -0.01294 (13), -0.01285 (13), -0.01281 (13), -0.01272 (13), 
Length of domains: 2989
Time: pickout 0.0271    decision 0.2595    set_bounds 0.1526    solve 0.5767    add 0.0124    
Accumulated time: pickout 0.0603    decision 1.0228    set_bounds 0.3753    solve 2.5271    add 0.5825    
Current (lb-rhs): -0.014088690280914307
6967 domains visited
Cumulative time: 4.9012534618377686

BaB round 8
batch: 2989
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1236] [/input-8, 1438] [/input-8, 1233] [/input-8, 1438] [/input-8, 1236] [/input-8, 1438] [/input-8, 1233] [/input-8, 1236] [/input-8, 1233] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8219273090362549, worst -0.013755857944488525
10 lb beta sum: 0.8222535252571106, worst -0.015091057866811752
Time: prepare 0.2941    bound 0.5151    transfer 0.0301    finalize 0.1793    func 1.0571    
Accumulated time: func 3.7766    prepare 0.7220    bound 2.6749    transfer 0.0561    finalize 0.2323    
all_split False
======================Cut inference begins======================
max lb tensor(0.01101190) min lb tensor(-0.01374060)
Number of Verified Splits: 1514 of 5978
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0005180835723876953 
BICCOS Cumulative time: 0.09927558898925781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01374 (14), -0.01367 (14), -0.01355 (14), -0.01347 (14), -0.01337 (14), -0.01329 (14), -0.01318 (14), -0.01311 (14), -0.01308 (14), -0.01299 (14), -0.01296 (14), -0.01287 (14), -0.01281 (14), -0.01278 (14), -0.01272 (14), -0.01263 (14), -0.01261 (14), -0.01253 (14), -0.01245 (14), -0.01245 (14), 
Length of domains: 4464
Time: pickout 0.0412    decision 0.1705    set_bounds 0.2517    solve 1.0587    add 0.0208    
Accumulated time: pickout 0.1015    decision 1.1932    set_bounds 0.6270    solve 3.5859    add 0.6033    
Current (lb-rhs): -0.013740599155426025
11431 domains visited
Cumulative time: 6.457977771759033

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1233] [/input-8, 1180] [/input-8, 1438] [/input-8, 1233] [/input-8, 1233] [/input-8, 1233] [/input-8, 1438] [/input-8, 1438] [/input-8, 1233] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.818281888961792, worst -0.013377606868743896
10 lb beta sum: 0.818549633026123, worst -0.014559121802449226
Time: prepare 0.4048    bound 0.6753    transfer 0.0462    finalize 0.0433    func 1.4090    
Accumulated time: func 5.1856    prepare 1.1270    bound 3.3501    transfer 0.1022    finalize 0.2756    
all_split False
======================Cut inference begins======================
max lb tensor(0.01217514) min lb tensor(-0.01336914)
Number of Verified Splits: 2485 of 8192
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0006346702575683594 
BICCOS Cumulative time: 0.09991025924682617
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01337 (15), -0.01328 (15), -0.01318 (15), -0.01309 (15), -0.01301 (15), -0.01293 (15), -0.01282 (15), -0.01273 (15), -0.01270 (15), -0.01261 (15), -0.01258 (15), -0.01251 (15), -0.01243 (15), -0.01240 (15), -0.01234 (15), -0.01226 (15), -0.01225 (15), -0.01216 (15), -0.01211 (15), -0.01208 (15), 
Length of domains: 6075
Time: pickout 0.0553    decision 0.2269    set_bounds 0.3538    solve 1.4108    add 0.0402    
Accumulated time: pickout 0.1568    decision 1.4201    set_bounds 0.9808    solve 4.9966    add 0.6435    
Current (lb-rhs): -0.013369143009185791
17138 domains visited
current_vram/total_varm: 20.8GB/99.9GB, batch_size increase to 8192
Cumulative time: 8.566759824752808

BaB round 10
batch: 6075
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1236] [/input-8, 1236] [/input-8, 1180] [/input-8, 1180] [/input-8, 1180] [/input-8, 1236] [/input-8, 1236] [/input-8, 1180] [/input-8, 1438] [/input-8, 1236] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8202922344207764, worst -0.012861192226409912
10 lb beta sum: 0.8205127120018005, worst -0.014333367347717285
Time: prepare 0.5958    bound 0.9667    transfer 0.0575    finalize 0.0640    func 1.7622    
Accumulated time: func 6.9478    prepare 1.7231    bound 4.3168    transfer 0.1598    finalize 0.3396    
all_split False
======================Cut inference begins======================
max lb tensor(0.01111256) min lb tensor(-0.01285964)
Number of Verified Splits: 4203 of 12150
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0005681514739990234 
BICCOS Cumulative time: 0.1004784107208252
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01286 (16), -0.01277 (16), -0.01269 (16), -0.01268 (16), -0.01260 (16), -0.01260 (16), -0.01250 (16), -0.01227 (16), -0.01225 (16), -0.01218 (16), -0.01209 (16), -0.01206 (16), -0.01201 (16), -0.01192 (16), -0.01191 (16), -0.01189 (16), -0.01174 (16), -0.01174 (16), -0.01173 (16), -0.01166 (16), 
Length of domains: 7947
Time: pickout 0.1238    decision 0.3344    set_bounds 0.7075    solve 1.7647    add 0.0292    
Accumulated time: pickout 0.2805    decision 1.7546    set_bounds 1.6883    solve 6.7613    add 0.6727    
Current (lb-rhs): -0.012859642505645752
25085 domains visited
Cumulative time: 11.562639713287354

BaB round 11
batch: 7947
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1233] [/input-8, 1180] [/input-8, 1236] [/input-8, 1236] [/input-8, 1438] [/input-8, 1233] [/input-8, 1180] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8125606775283813, worst -0.012569725513458252
10 lb beta sum: 0.8127458691596985, worst -0.015267850831151009
Time: prepare 0.7810    bound 1.2372    transfer 0.0707    finalize 0.2810    func 2.4726    
Accumulated time: func 9.4204    prepare 2.5044    bound 5.5539    transfer 0.2304    finalize 0.6207    
all_split False
======================Cut inference begins======================
max lb tensor(0.00849074) min lb tensor(-0.01254970)
Number of Verified Splits: 5125 of 15894
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0005772113800048828 
BICCOS Cumulative time: 0.10105562210083008
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01255 (17), -0.01246 (17), -0.01238 (17), -0.01237 (17), -0.01229 (17), -0.01229 (17), -0.01201 (17), -0.01195 (17), -0.01191 (17), -0.01182 (17), -0.01176 (17), -0.01173 (17), -0.01165 (17), -0.01164 (17), -0.01157 (17), -0.01156 (17), -0.01147 (17), -0.01145 (17), -0.01144 (17), -0.01138 (17), 
Length of domains: 10769
Time: pickout 0.1433    decision 0.6189    set_bounds 0.7076    solve 2.4756    add 0.0608    
Accumulated time: pickout 0.4238    decision 2.3735    set_bounds 2.3959    solve 9.2369    add 0.7334    
Current (lb-rhs): -0.01254969835281372
35854 domains visited
Cumulative time: 15.614827632904053

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1233] [/input-8, 1233] [/input-8, 229] [/input-8, 229] [/input-8, 229] [/input-8, 1099] [/input-8, 229] [/input-8, 1099] [/input-8, 1099] [/input-8, 354] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8081421852111816, worst -0.01081305742263794
10 lb beta sum: 0.8082685470581055, worst -0.014426946640014648
Time: prepare 0.8162    bound 1.2748    transfer 0.0793    finalize 0.0875    func 2.3653    
Accumulated time: func 11.7857    prepare 3.3210    bound 6.8288    transfer 0.3097    finalize 0.7081    
all_split False
======================Cut inference begins======================
max lb tensor(0.00957233) min lb tensor(-0.01080388)
Number of Verified Splits: 5047 of 16384
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0006837844848632812 
BICCOS Cumulative time: 0.10173940658569336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01255 (17), -0.01246 (17), -0.01238 (17), -0.01237 (17), -0.01229 (17), -0.01229 (17), -0.01201 (17), -0.01195 (17), -0.01191 (17), -0.01182 (17), -0.01176 (17), -0.01173 (17), -0.01165 (17), -0.01164 (17), -0.01157 (17), -0.01156 (17), -0.01147 (17), -0.01145 (17), -0.01138 (17), -0.01131 (17), 
Length of domains: 13914
Time: pickout 0.1185    decision 0.4486    set_bounds 0.9308    solve 2.6164    add 0.0464    
Accumulated time: pickout 0.5423    decision 2.8221    set_bounds 3.3267    solve 11.8533    add 0.7799    
Current (lb-rhs): -0.01254969835281372
47191 domains visited
current_vram/total_varm: 20.8GB/99.9GB, batch_size increase to 16384
Cumulative time: 19.826854944229126

BaB round 13
batch: 13914
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 930] [/input-8, 147] [/input-8, 147] [/input, 2217] [/input-8, 930] [/input-8, 147] [/input-8, 930] [/input-8, 147] [/input-8, 147] [/input-8, 930] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8031855821609497, worst -0.012239396572113037
10 lb beta sum: 0.8033189177513123, worst -0.01499191951006651
Time: prepare 1.3783    bound 2.1132    transfer 0.1577    finalize 0.3938    func 4.2241    
Accumulated time: func 16.0097    prepare 4.6996    bound 8.9419    transfer 0.4674    finalize 1.1020    
all_split False
======================Cut inference begins======================
max lb tensor(0.00946563) min lb tensor(-0.01222652)
Number of Verified Splits: 9923 of 27828
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0007257461547851562 
BICCOS Cumulative time: 0.10246515274047852
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01223 (18), -0.01214 (18), -0.01205 (18), -0.01196 (18), -0.01187 (18), -0.01178 (18), -0.01170 (18), -0.01161 (18), -0.01146 (18), -0.01140 (18), -0.01132 (18), -0.01126 (18), -0.01125 (18), -0.01124 (18), -0.01115 (18), -0.01114 (18), -0.01108 (18), -0.01105 (18), -0.01096 (18), -0.01092 (18), 
Length of domains: 17905
Time: pickout 0.2707    decision 0.7804    set_bounds 1.4782    solve 4.2294    add 0.0622    
Accumulated time: pickout 0.8130    decision 3.6025    set_bounds 4.8049    solve 16.0827    add 0.8420    
Current (lb-rhs): -0.012226521968841553
65096 domains visited
Cumulative time: 26.734766960144043

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 354] [/input-8, 754] [/input, 2217] [/input-8, 147] [/input-8, 754] [/input-8, 1180] [/input-8, 930] [/input-8, 754] [/input-8, 354] [/input-8, 930] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8068444728851318, worst -0.011571347713470459
10 lb beta sum: 0.8073905110359192, worst -0.015376637689769268
Time: prepare 1.6246    bound 2.4726    transfer 0.1752    finalize 0.5041    func 4.9881    
Accumulated time: func 20.9978    prepare 6.3247    bound 11.4145    transfer 0.6426    finalize 1.6061    
all_split False
======================Cut inference begins======================
max lb tensor(0.01005532) min lb tensor(-0.01155752)
Number of Verified Splits: 12019 of 32768
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0007412433624267578 
BICCOS Cumulative time: 0.10320639610290527
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01156 (19), -0.01147 (19), -0.01137 (19), -0.01129 (19), -0.01121 (19), -0.01113 (19), -0.01112 (19), -0.01105 (19), -0.01103 (19), -0.01103 (19), -0.01094 (19), -0.01094 (19), -0.01091 (19), -0.01083 (19), -0.01078 (19), -0.01077 (19), -0.01072 (19), -0.01070 (19), -0.01068 (19), -0.01067 (19), 
Length of domains: 22270
Time: pickout 0.2562    decision 1.6535    set_bounds 1.7419    solve 4.9944    add 0.0782    
Accumulated time: pickout 1.0693    decision 5.2559    set_bounds 6.5468    solve 21.0771    add 0.9202    
Current (lb-rhs): -0.011557519435882568
85845 domains visited
current_vram/total_varm: 41.7GB/99.9GB, batch_size increase to 32768
Cumulative time: 35.5686776638031

BaB round 15
batch: 22270
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 147] [/input-8, 147] [/input-8, 930] [/input-8, 147] [/input-8, 930] [/input-8, 147] [/input-8, 930] [/input-8, 930] [/input-8, 147] [/input-8, 930] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7941769957542419, worst -0.011028468608856201
10 lb beta sum: 0.7943206429481506, worst -0.01509630773216486
Time: prepare 2.2136    bound 3.3658    transfer 0.2481    finalize 0.2808    func 6.7525    
Accumulated time: func 27.7503    prepare 8.5386    bound 14.7803    transfer 0.8906    finalize 1.8869    
all_split False
======================Cut inference begins======================
max lb tensor(0.00900787) min lb tensor(-0.01101285)
Number of Verified Splits: 17080 of 44540
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0009336471557617188 
BICCOS Cumulative time: 0.10414004325866699
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01101 (20), -0.01093 (20), -0.01083 (20), -0.01081 (20), -0.01075 (20), -0.01072 (20), -0.01067 (20), -0.01062 (20), -0.01059 (20), -0.01058 (20), -0.01052 (20), -0.01052 (20), -0.01049 (20), -0.01047 (20), -0.01044 (20), -0.01042 (20), -0.01037 (20), -0.01037 (20), -0.01037 (20), -0.01034 (20), 
Length of domains: 27460
Time: pickout 0.4392    decision 2.5306    set_bounds 2.6493    solve 6.7611    add 0.0990    
Accumulated time: pickout 1.5084    decision 7.7865    set_bounds 9.1961    solve 27.8381    add 1.0192    
Current (lb-rhs): -0.011012852191925049
113305 domains visited
Cumulative time: 48.19854950904846

BaB round 16
batch: 27460
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 354] [/input-8, 354] [/input-8, 354] [/input-8, 229] [/input-8, 354] [/input-8, 354] [/input-8, 354] [/input-8, 354] [/input-8, 354] [/input-8, 354] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7798312902450562, worst -0.010636985301971436
10 lb beta sum: 0.7799230217933655, worst -0.01613520085811615
Time: prepare 2.7302    bound 4.1267    transfer 0.2965    finalize 0.6794    func 8.1905    
Accumulated time: func 35.9408    prepare 11.2692    bound 18.9070    transfer 1.1872    finalize 2.5664    
all_split False
======================Cut inference begins======================
max lb tensor(0.00893098) min lb tensor(-0.01063591)
Number of Verified Splits: 22188 of 54920
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0009751319885253906 
BICCOS Cumulative time: 0.10511517524719238
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01064 (21), -0.01055 (21), -0.01045 (21), -0.01043 (21), -0.01036 (21), -0.01033 (21), -0.01024 (21), -0.01019 (21), -0.01018 (21), -0.01014 (21), -0.01013 (21), -0.01009 (21), -0.01009 (21), -0.01006 (21), -0.01001 (21), -0.01000 (21), -0.00997 (21), -0.00994 (21), -0.00993 (21), -0.00990 (21), 
Length of domains: 32732
Time: pickout 0.5511    decision 2.7876    set_bounds 2.8980    solve 8.6128    add 0.1192    
Accumulated time: pickout 2.0595    decision 10.5741    set_bounds 12.0941    solve 36.4509    add 1.1383    
Current (lb-rhs): -0.010635912418365479
146037 domains visited
Cumulative time: 63.353360652923584

BaB round 17
batch: 32732
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 754] [/input-8, 354] [/input-8, 354] [/input-8, 354] [/input-8, 354] [/input-8, 354] [/input-8, 354] [/input-8, 354] [/input-8, 354] [/input-8, 354] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7678890824317932, worst -0.010127365589141846
10 lb beta sum: 0.7679646611213684, worst -0.040631234645843506
Time: prepare 3.2649    bound 4.8771    transfer 0.3612    finalize 0.8277    func 9.7562    
Accumulated time: func 45.6970    prepare 14.5346    bound 23.7841    transfer 1.5484    finalize 3.3941    
all_split False
======================Cut inference begins======================
max lb tensor(0.00759052) min lb tensor(-0.01011795)
Number of Verified Splits: 23087 of 65464
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0010342597961425781 
BICCOS Cumulative time: 0.10614943504333496
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01012 (22), -0.01003 (22), -0.00993 (22), -0.00992 (22), -0.00985 (22), -0.00980 (22), -0.00975 (22), -0.00972 (22), -0.00966 (22), -0.00966 (22), -0.00965 (22), -0.00963 (22), -0.00957 (22), -0.00957 (22), -0.00955 (22), -0.00955 (22), -0.00954 (22), -0.00949 (22), -0.00947 (22), -0.00944 (22), 
Length of domains: 42377
Time: pickout 0.6902    decision 3.3096    set_bounds 3.4597    solve 10.2422    add 0.1517    
Accumulated time: pickout 2.7497    decision 13.8837    set_bounds 15.5538    solve 46.6931    add 1.2900    
Current (lb-rhs): -0.010117948055267334
188414 domains visited
Cumulative time: 81.41570997238159

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7526257634162903, worst -0.00965791940689087
10 lb beta sum: 0.7526814937591553, worst -0.014232039451599121
Time: prepare 3.2798    bound 10.0696    transfer 0.3500    finalize 1.0263    func 15.1547    
Accumulated time: func 60.8518    prepare 17.8148    bound 33.8537    transfer 1.8983    finalize 4.4204    
all_split False
======================Cut inference begins======================
max lb tensor(0.00666581) min lb tensor(-0.00965184)
Number of Verified Splits: 17413 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0009703636169433594 
BICCOS Cumulative time: 0.10711979866027832
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00965 (23), -0.00958 (23), -0.00947 (23), -0.00946 (23), -0.00940 (22), -0.00939 (23), -0.00935 (23), -0.00929 (22), -0.00928 (22), -0.00928 (23), -0.00926 (23), -0.00920 (23), -0.00918 (23), -0.00915 (22), -0.00915 (23), -0.00915 (23), -0.00911 (23), -0.00911 (23), -0.00909 (23), -0.00909 (23), 
Length of domains: 57732
Time: pickout 0.5492    decision 3.7560    set_bounds 3.6772    solve 15.1675    add 0.1743    
Accumulated time: pickout 3.2990    decision 17.6396    set_bounds 19.2310    solve 61.8606    add 1.4643    
Current (lb-rhs): -0.00965183973312378
236537 domains visited
Cumulative time: 104.93723034858704

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 229] [/input-8, 2000] [/input-8, 229] [/input-8, 789] [/input-8, 2000] [/input-8, 2000] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7602778673171997, worst -0.008941948413848877
10 lb beta sum: 0.7603576183319092, worst -0.015039445832371712
Time: prepare 3.2970    bound 10.0731    transfer 0.3589    finalize 1.0702    func 15.2227    
Accumulated time: func 76.0745    prepare 21.1122    bound 43.9268    transfer 2.2573    finalize 5.4906    
all_split False
======================Cut inference begins======================
max lb tensor(0.00493895) min lb tensor(-0.00894195)
Number of Verified Splits: 18882 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.001024484634399414 
BICCOS Cumulative time: 0.10814428329467773
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00965 (23), -0.00958 (23), -0.00947 (23), -0.00946 (23), -0.00939 (23), -0.00935 (23), -0.00928 (23), -0.00926 (23), -0.00920 (23), -0.00918 (23), -0.00915 (23), -0.00915 (23), -0.00911 (23), -0.00911 (23), -0.00909 (23), -0.00909 (23), -0.00907 (23), -0.00903 (23), -0.00900 (23), -0.00898 (23), 
Length of domains: 71618
Time: pickout 0.5478    decision 3.3982    set_bounds 3.7723    solve 15.2359    add 0.2101    
Accumulated time: pickout 3.8467    decision 21.0378    set_bounds 23.0032    solve 77.0965    add 1.6745    
Current (lb-rhs): -0.00965183973312378
283191 domains visited
Cumulative time: 128.31018447875977

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 754] [/input-8, 819] [/input-8, 819] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 819] [/input-8, 2000] [/input-8, 2000] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7570922374725342, worst -0.009092271327972412
10 lb beta sum: 0.7571542263031006, worst -0.01381559669971466
Time: prepare 3.2736    bound 10.0742    transfer 0.3600    finalize 1.1523    func 15.2914    
Accumulated time: func 91.3660    prepare 24.3863    bound 54.0010    transfer 2.6172    finalize 6.6429    
all_split False
======================Cut inference begins======================
max lb tensor(0.00616533) min lb tensor(-0.00905877)
Number of Verified Splits: 16721 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.001024007797241211 
BICCOS Cumulative time: 0.10916829109191895
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00906 (24), -0.00898 (24), -0.00894 (24), -0.00894 (23), -0.00887 (24), -0.00886 (24), -0.00886 (24), -0.00881 (23), -0.00881 (23), -0.00879 (24), -0.00875 (24), -0.00875 (24), -0.00875 (24), -0.00874 (24), -0.00874 (24), -0.00870 (23), -0.00867 (24), -0.00867 (24), -0.00866 (24), -0.00862 (24), 
Length of domains: 87665
Time: pickout 0.5645    decision 3.8932    set_bounds 3.8352    solve 15.3054    add 0.1734    
Accumulated time: pickout 4.4113    decision 24.9310    set_bounds 26.8384    solve 92.4019    add 1.8478    
Current (lb-rhs): -0.009058773517608643
332006 domains visited
Cumulative time: 152.2670509815216

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 819] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 789] [/input-8, 1331] [/input-8, 1331] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7531566023826599, worst -0.008382976055145264
10 lb beta sum: 0.7532332539558411, worst -0.019011802971363068
Time: prepare 3.3586    bound 10.0733    transfer 0.3589    finalize 1.2830    func 15.5006    
Accumulated time: func 106.8665    prepare 27.7453    bound 64.0743    transfer 2.9761    finalize 7.9259    
all_split False
======================Cut inference begins======================
max lb tensor(0.24061488) min lb tensor(-0.00835377)
Number of Verified Splits: 19472 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.000965118408203125 
BICCOS Cumulative time: 0.11013340950012207
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00906 (24), -0.00898 (24), -0.00894 (24), -0.00887 (24), -0.00886 (24), -0.00886 (24), -0.00879 (24), -0.00875 (24), -0.00875 (24), -0.00875 (24), -0.00874 (24), -0.00874 (24), -0.00867 (24), -0.00867 (24), -0.00866 (24), -0.00862 (24), -0.00857 (24), -0.00856 (24), -0.00856 (24), -0.00856 (24), 
Length of domains: 100961
Time: pickout 0.5757    decision 3.9989    set_bounds 3.9338    solve 15.5147    add 0.1669    
Accumulated time: pickout 4.9869    decision 28.9299    set_bounds 30.7722    solve 107.9166    add 2.0147    
Current (lb-rhs): -0.009058773517608643
378070 domains visited
Cumulative time: 176.66467905044556

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 819] [/input-8, 754] [/input-8, 819] [/input-8, 754] [/input-8, 754] [/input-8, 754] [/input-8, 754] [/input-8, 819] [/input-8, 754] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7467623949050903, worst -0.008531272411346436
10 lb beta sum: 0.746853768825531, worst -0.01463952474296093
Time: prepare 3.3422    bound 10.0716    transfer 0.3607    finalize 0.4704    func 14.6821    
Accumulated time: func 121.5486    prepare 31.0879    bound 74.1459    transfer 3.3368    finalize 8.3963    
all_split False
======================Cut inference begins======================
max lb tensor(0.24063276) min lb tensor(-0.00850517)
Number of Verified Splits: 19952 of 65536
Stop inferencing: Max iteration reached.
Total number of valid cuts: 21.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.0010182857513427734 
BICCOS Cumulative time: 0.11115169525146484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00906 (24), -0.00898 (24), -0.00887 (24), -0.00886 (24), -0.00879 (24), -0.00875 (24), -0.00875 (24), -0.00874 (24), -0.00867 (24), -0.00866 (24), -0.00857 (24), -0.00856 (24), -0.00856 (24), -0.00855 (24), -0.00851 (24), -0.00851 (25), -0.00850 (24), -0.00849 (24), -0.00848 (24), -0.00845 (24), 
Length of domains: 113777
Time: pickout 0.5672    decision 3.6449    set_bounds 4.1269    solve 15.6750    add 0.1644    
Accumulated time: pickout 5.5541    decision 32.5748    set_bounds 34.8991    solve 123.5916    add 2.1792    
Current (lb-rhs): -0.009058773517608643
423654 domains visited
Time out!!!!!!!!
Result: unknown in 203.2701 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 182, vnnlib ID: 182 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.81517506, -16.44219780, -14.93947697, -17.08555794, -16.53348160,
         -17.39346313, -16.71439552, -17.35387802, -14.78421783, -16.59263992]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [413]; unstable size 413; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 111, 1, 413] with unstable size 110 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 413] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 413] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [110]; unstable size 110; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 110] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 110] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.18601298, 1.75380206, 3.75133443, 3.26349282, 4.05069065, 3.40995359,
         3.94186616, 1.68227029, 3.44086933]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0554 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 183, vnnlib ID: 183 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
         -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [769]; unstable size 769; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 283, 1, 769] with unstable size 282 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 769] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 769] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [282]; unstable size 282; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 282] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 282] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.60268450,  4.07875919,  0.22120133,  1.13343310,  1.18244147,
         -0.09481192,  1.85378695,  3.72636414,  4.09832001]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
         -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.11it/s]100%|██████████| 1/1 [00:00<00:00,  9.10it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.32266092, -9.32172298, -4.42147398, -5.43138981, -3.97195244,
          -5.48412561, -4.08728886, -6.25158787, -8.70373154, -9.29818153]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.11533642]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1125 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.09231185913086
alpha/beta optimization time: 1.1949148178100586
initial alpha-crown bounds: tensor([[ 2.64488888,  4.13461924,  0.23508090,  1.15149236,  1.20023549,
         -0.07920110,  1.87038028,  3.78053093,  4.15428400]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0792011022567749
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.64701867103577
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.64698219299316
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.64695954322815
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.64693880081177
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.64691948890686
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.64690041542053
Verifying property 5 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07920110]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
        -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07920110]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 769
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 279
Node /15 input 0: size torch.Size([100]) unstable 8
-----------------
# of unstable neurons: 1056
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010013580322265625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07920098304748535
10 lb beta sum: 0.0, worst -0.0792015790939331
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0523    transfer 0.0001    finalize 0.0001    func 0.0528    
Accumulated time: func 0.0528    prepare 0.0002    bound 0.0523    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 79] 
split level 3: [/input-12, 47] 
split level 4: [/input-8, 1828] 
split level 5: [/input-8, 190] 
split level 6: [/input-8, 1489] 
split level 7: [/input-8, 175] 
split level 8: [/input-8, 1836] 
split level 9: [/input-8, 1955] 
split level 10: [/input-8, 1969] 
split level 11: [/input-8, 1950] 
split level 12: [/input-8, 530] 
split level 13: [/input-8, 181] 
split level 14: [/input, 2474] 
split level 15: [/input-8, 1958] 
split level 16: [/input-8, 1481] 
split level 17: [/input-8, 1835] 
split level 18: [/input-8, 1948] 
split level 19: [/input-8, 1937] 
split level 20: [/input-8, 1483] 
split level 21: [/input, 2506] 
split level 22: [/input-8, 1017] 
split level 23: [/input, 2491] 
split level 24: [/input-8, 30] 
split level 25: [/input-8, 1977] 
split level 26: [/input, 2425] 
split level 27: [/input-8, 1903] 
split level 28: [/input-12, 62] 
split level 29: [/input-8, 107] 
split level 30: [/input, 966] 
split level 31: [/input-8, 1929] 
split level 32: [/input-8, 1930] 
split level 33: [/input-8, 1018] 
split level 34: [/input, 664] 
split level 35: [/input-8, 1121] 
split level 36: [/input, 2536] 
split level 37: [/input-8, 1936] 
split level 38: [/input, 2520] 
split level 39: [/input-8, 1938] 
split level 40: [/input, 2504] 
split level 41: [/input, 2426] 
split level 42: [/input, 1976] 
split level 43: [/input-8, 1933] 
split level 44: [/input-8, 1982] 
split level 45: [/input, 1959] 
split level 46: [/input, 1975] 
split level 47: [/input, 1955] 
split level 48: [/input, 2440] 
split level 49: [/input, 3717] 
split level 50: [/input-8, 1834] 
split level 51: [/input, 2024] 
split level 52: [/input-8, 1473] 
split level 53: [/input-8, 1166] 
split level 54: [/input, 2376] 
split level 55: [/input, 1956] 
split level 56: [/input, 2007] 
split level 57: [/input-8, 1502] 
split level 58: [/input, 3789] 
split level 59: [/input, 1925] 
split level 60: [/input, 1186] 
split level 61: [/input-8, 1997] 
split level 62: [/input, 3756] 
split level 63: [/input, 2004] 
split level 64: [/input, 1909] 
split level 65: [/input, 2442] 
split level 66: [/input, 377] 
split level 67: [/input, 998] 
split level 68: [/input, 1927] 
split level 69: [/input, 999] 
split level 70: [/input-8, 1308] 
split level 71: [/input, 930] 
split level 72: [/input-8, 533] 
split level 73: [/input-8, 963] 
split level 74: [/input-8, 1518] 
split level 75: [/input, 216] 
split level 76: [/input, 2460] 
split level 77: [/input, 1254] 
split level 78: [/input, 3749] 
split level 79: [/input-8, 1931] 
split level 80: [/input-8, 1010] 
split level 81: [/input-8, 373] 
split level 82: [/input, 1384] 
split level 83: [/input, 2420] 
split level 84: [/input-8, 1129] 
split level 85: [/input, 1174] 
split level 86: [/input, 940] 
split level 87: [/input-8, 1513] 
split level 88: [/input-8, 1103] 
split level 89: [/input, 1964] 
split level 90: [/input, 953] 
split level 91: [/input, 1148] 
split level 92: [/input-8, 1747] 
split level 93: [/input, 1987] 
split level 94: [/input, 1971] 
split level 95: [/input, 1190] 
split level 96: [/input, 3772] 
split level 97: [/input, 2406] 
split level 98: [/input, 961] 
split level 99: [/input, 3818] 
split level 100: [/input-8, 1175] 
split level 101: [/input-8, 964] 
split level 102: [/input, 1237] 
split level 103: [/input, 989] 
split level 104: [/input, 1948] 
split level 105: [/input-8, 962] 
split level 106: [/input, 2518] 
split level 107: [/input-8, 1934] 
split level 108: [/input-8, 361] 
split level 109: [/input, 1185] 
split level 110: [/input, 973] 
split level 111: [/input, 1011] 
split level 112: [/input, 3778] 
split level 113: [/input, 893] 
split level 114: [/input-8, 1746] 
split level 115: [/input, 1980] 
split level 116: [/input, 3813] 
split level 117: [/input, 1253] 
split level 118: [/input, 1915] 
split level 119: [/input, 362] 
split level 120: [/input, 1202] 
split level 121: [/input, 962] 
split level 122: [/input, 1932] 
split level 123: [/input, 3724] 
split level 124: [/input, 631] 
split level 125: [/input, 421] 
split level 126: [/input, 2010] 
split level 127: [/input-8, 979] 
split level 128: [/input, 342] 
split level 129: [/input, 1016] 
split level 130: [/input, 1902] 
split level 131: [/input, 909] 
split level 132: [/input, 1170] 
split level 133: [/input-8, 1183] 
split level 134: [/input, 232] 
split level 135: [/input, 388] 
split level 136: [/input, 3739] 
split level 137: [/input-8, 1738] 
split level 138: [/input, 3953] 
split level 139: [/input, 3761] 
split level 140: [/input, 436] 
split level 141: [/input, 1933] 
split level 142: [/input, 1092] 
split level 143: [/input, 996] 
split level 144: [/input, 2498] 
split level 145: [/input, 1914] 
split level 146: [/input, 1917] 
split level 147: [/input, 2018] 
split level 148: [/input, 3793] 
split level 149: [/input, 727] 
split level 150: [/input, 2402] 
split level 151: [/input, 3954] 
split level 152: [/input, 977] 
split level 153: [/input, 2378] 
split level 154: [/input, 2743] 
split level 155: [/input, 451] 
split level 156: [/input, 2387] 
split level 157: [/input, 2178] 
split level 158: [/input, 1017] 
split level 159: [/input, 3698] 
split level 160: [/input, 1164] 
split level 161: [/input, 1269] 
split level 162: [/input, 1165] 
split level 163: [/input, 3970] 
split level 164: [/input, 2037] 
split level 165: [/input, 491] 
split level 166: [/input, 1985] 
split level 167: [/input-8, 369] 
split level 168: [/input, 2040] 
split level 169: [/input, 1934] 
split level 170: [/input, 2391] 
split level 171: [/input-8, 948] 
split level 172: [/input, 993] 
split level 173: [/input, 1249] 
split level 174: [/input, 2510] 
split level 175: [/input, 3863] 
split level 176: [/input, 359] 
split level 177: [/input, 3513] 
split level 178: [/input, 2741] 
split level 179: [/input, 490] 
split level 180: [/input, 1018] 
split level 181: [/input-8, 1128] 
split level 182: [/input, 382] 
split level 183: [/input, 2645] 
split level 184: [/input, 1149] 
split level 185: [/input, 2478] 
split level 186: [/input, 3707] 
split level 187: [/input, 3864] 
split level 188: [/input-8, 1911] 
split level 189: [/input, 836] 
split level 190: [/input-8, 143] 
split level 191: [/input, 1903] 
split level 192: [/input, 1091] 
split level 193: [/input, 1875] 
split level 194: [/input, 3812] 
split level 195: [/input, 461] 
split level 196: [/input, 3745] 
split level 197: [/input, 3683] 
split level 198: [/input-8, 709] 
split level 199: [/input-8, 969] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07918190956115723
10 lb beta sum: 0.0, worst -0.07918179035186768
Time: prepare 0.0116    bound 0.1014    transfer 0.0020    finalize 0.0028    func 0.1203    
Accumulated time: func 0.1731    prepare 0.0215    bound 0.1537    transfer 0.0021    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.04314697) min lb tensor(-0.07917964)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010631799697875977 
BICCOS Cumulative time: 0.010631799697875977
Preprocessing time: 0.009902000427246094 Inference time: 0.00015211105346679688 Add cuts time: 6.651878356933594e-05 Cut analysis time: 0.00051116943359375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07645 (1), -0.07645 (1), -0.07636 (1), -0.07629 (1), -0.07623 (1), -0.07622 (1), -0.07616 (1), -0.07611 (1), -0.07610 (1), -0.07607 (1), -0.07606 (1), -0.07605 (1), -0.07590 (1), -0.07589 (1), -0.07588 (1), -0.07581 (1), -0.07564 (1), -0.07562 (1), -0.07551 (1), -0.07537 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5070    set_bounds 0.0084    solve 0.1204    add 0.0657    
Accumulated time: pickout 0.0003    decision 0.5070    set_bounds 0.0084    solve 0.1204    add 0.0657    
Current (lb-rhs): -0.07645368576049805
50 domains visited
Cumulative time: 0.7802529335021973

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 46] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 1: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 79] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 47] [/input-12, 79] [/input-12, 79] [/input-12, 47] [/input-12, 47] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
split level 3: [/input-8, 181] [/input-8, 1836] [/input-8, 1836] [/input-8, 1489] [/input-8, 1836] [/input-12, 47] [/input-12, 47] [/input-12, 47] [/input-12, 47] [/input-12, 47] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06679439544677734
10 lb beta sum: 0.43500110507011414, worst -0.04207777976989746
Time: prepare 0.0076    bound 0.1162    transfer 0.0010    finalize 0.0024    func 0.1298    
Accumulated time: func 0.3028    prepare 0.0294    bound 0.2699    transfer 0.0031    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.08237481) min lb tensor(-0.04202408)
Number of Verified Splits: 139 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.018932819366455078 
BICCOS Cumulative time: 0.029564619064331055
Preprocessing time: 0.011568546295166016 Inference time: 0.005331754684448242 Add cuts time: 0.0018646717071533203 Cut analysis time: 0.0001678466796875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0194    set_bounds 0.0111    solve 0.1299    add 0.0142    
Accumulated time: pickout 0.0015    decision 0.5263    set_bounds 0.0195    solve 0.2502    add 0.0800    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([79, 90]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.97426002e-37, 1.21254250e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([79, 90]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.97426002e-37, 3.77046913e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([79, 90]), tensor([ 1., -1.]), tensor([0, 0]), tensor([3.97426002e-37, 1.24211833e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([79, 90]), tensor([1., 1.]), tensor([0, 0]), tensor([3.97426002e-37, 3.65846008e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029662907123565674

all verified at 1th iter
Time: prepare 0.0003    bound 0.0094    transfer 0.0001    finalize 0.0001    func 0.0100    
Accumulated time: func 0.3128    prepare 0.0297    bound 0.2792    transfer 0.0032    finalize 0.0054    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 197.47467017173767
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.4745969772339
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.4745728969574
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.5257 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 184, vnnlib ID: 184 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
         -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [448]; unstable size 448; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 126, 1, 448] with unstable size 125 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 448] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 448] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [125]; unstable size 125; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 125] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 125] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.26391172,  0.73275721,  3.13852119,  4.64125395,  3.28221703,
          4.80755997,  5.62747574,  4.06410265, -0.90191293]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
         -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
          -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.29288840]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.14761901, -0.63968253, -0.56031746,  ...,  0.16984135,
             0.21746039,  0.23333341],
           [-1.32222211, -0.84603173, -0.43333322,  ...,  0.21746039,
             0.26507944,  0.28095245],
           [-1.40158725, -1.27460313, -0.84603173,  ...,  0.24920642,
             0.31269848,  0.34444451],
           ...,
           [-1.32222211, -1.33809519, -1.32222211,  ..., -0.03650784,
            -0.59206349, -1.03650784],
           [-0.59206349, -0.49682540, -0.29047608,  ..., -0.09999990,
            -0.81428570, -1.06825387],
           [ 0.32857150,  0.40793657,  0.47142863,  ...,  0.05873025,
            -0.21111101, -0.40158719]],

          [[-0.78904986, -0.16103047,  0.03220624,  ...,  0.66022551,
             0.66022551,  0.67632860],
           [-1.15942025, -0.54750401, -0.03220600,  ...,  0.72463775,
             0.72463775,  0.74074084],
           [-1.33655393, -1.07890499, -0.57971013,  ...,  0.75684386,
             0.77294695,  0.80515307],
           ...,
           [-1.20772946, -1.20772946, -1.19162631,  ..., -0.06441211,
            -0.51529789, -0.93397743],
           [-0.57971013, -0.48309177, -0.27375188,  ..., -0.12882435,
            -0.72463763, -0.95008045],
           [ 0.28985518,  0.37037048,  0.43478271,  ...,  0.03220624,
            -0.12882435, -0.32206106]],

          [[-0.10344811,  0.72113961,  1.23088503,  ...,  1.56072009,
             1.57571256,  1.59070504],
           [-0.85307342,  0.06146942,  0.96101969,  ...,  1.56072009,
             1.57571256,  1.60569763],
           [-0.92803597, -0.67316341, -0.07346311,  ...,  1.59070504,
             1.62069011,  1.63568258],
           ...,
           [-0.73313338, -0.83808094, -0.88305843,  ...,  0.09145443,
            -0.16341813, -0.26836565],
           [-0.29835078, -0.28335828, -0.11844061,  ...,  0.06146942,
            -0.29835078, -0.32833579],
           [ 0.37631202,  0.42128953,  0.46626705,  ...,  0.16641696,
             0.04647692, -0.04347810]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0677 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 185, vnnlib ID: 185 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.06885719, -5.39221478, -5.41002798, -5.94510174, -5.27591610,
         -6.06000948, -5.04459095, -6.26535511, -7.53897762, -5.24221373]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [444]; unstable size 444; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 444] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 444] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 444] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 172] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17368078, -0.12169072, -0.52097607,  0.06974673, -0.65863180,
          0.17358875, -0.89032555,  0.25720024,  1.71557093]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.06885719, -5.39221478, -5.41002798, -5.94510174, -5.27591610,
         -6.06000948, -5.04459095, -6.26535511, -7.53897762, -5.24221373]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.06885624, -5.39221478, -5.41002798, -5.94510174, -5.27591515,
          -6.06000900, -5.04459095, -6.26535511, -7.53897667, -5.24221325],
         [-7.06885624, -5.39221478, -5.41002798, -5.94510174, -5.27591515,
          -6.06000900, -5.04459095, -6.26535511, -7.53897667, -5.24221325]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.15000153,  0.16781473,  0.03370190, -0.19762230]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0633 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 186, vnnlib ID: 186 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.72309113, -11.37285328, -11.28134155, -12.68495083, -11.58407688,
         -12.91345787, -12.84364223, -12.81871128,  -7.10625744, -11.70213604]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [490]; unstable size 490; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 152, 1, 490] with unstable size 151 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 490] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 490] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [151]; unstable size 151; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 151] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.24744248, 3.64492750, 3.52347612, 4.82812643, 3.78522539, 5.03832436,
         5.00732327, 4.91135693, 4.00957584]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0477 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 187, vnnlib ID: 187 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.51928949, -5.15087223, -3.22848940, -3.80073190, -3.15746570,
         -3.94839764, -3.82955623, -4.85578012, -2.35027075, -4.11050558]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [721]; unstable size 721; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 721] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 721] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 721] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 190] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.20104569,  2.09830141,  0.14130938,  0.66386646,  0.04208767,
          0.79857552,  0.56520987,  1.63165128,  1.12448716]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.51928949, -5.15087223, -3.22848940, -3.80073190, -3.15746570,
         -3.94839764, -3.82955623, -4.85578012, -2.35027075, -4.11050558]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.53468847, -5.19556904, -3.22439003, -3.86211801, -3.17368507,
          -4.00655746, -3.77223229, -4.88972187, -2.58229876, -4.19417620]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04761028]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0542 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 188, vnnlib ID: 188 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
         -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [339]; unstable size 339; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 339] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 339] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 339] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 187] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.05137622,  1.62128544,  1.31240141,  0.74176532,  1.35647559,
          1.30591071,  2.72699094,  0.18010390,  1.41348743]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
         -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.04it/s]100%|██████████| 1/1 [00:00<00:00,  9.04it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.97218704, -7.05845642, -4.88922119, -6.54895496, -5.88330650,
          -6.60418797, -6.63821125, -8.03036880, -5.43032932, -6.83684731]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.08296585]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1132 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.740821838378906
alpha/beta optimization time: 1.190702199935913
initial alpha-crown bounds: tensor([[-0.04131842,  1.64049292,  1.33070481,  0.74799609,  1.37658334,
          1.32323456,  2.73499799,  0.19743490,  1.43069577]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.041318416595458984
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.640691280365
Verifying property 0 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04131842]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
        -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04131842]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 339
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 187
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 532
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.822845458984375e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.041318535804748535
10 lb beta sum: 0.0, worst -0.04131948947906494
Time: prepare 0.0002    bound 0.0866    transfer 0.0001    finalize 0.0001    func 0.0870    
Accumulated time: func 0.0870    prepare 0.0002    bound 0.0866    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 62] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 79] 
split level 4: [/input-12, 69] 
split level 5: [/input-8, 356] 
split level 6: [/input-8, 2046] 
split level 7: [/input-8, 2026] 
split level 8: [/input-8, 355] 
split level 9: [/input-8, 364] 
split level 10: [/input-8, 353] 
split level 11: [/input-8, 357] 
split level 12: [/input-8, 354] 
split level 13: [/input-8, 557] 
split level 14: [/input-8, 174] 
split level 15: [/input-8, 345] 
split level 16: [/input-8, 1942] 
split level 17: [/input-8, 1169] 
split level 18: [/input-8, 1918] 
split level 19: [/input-8, 1964] 
split level 20: [/input, 2182] 
split level 21: [/input-8, 50] 
split level 22: [/input-8, 53] 
split level 23: [/input-8, 1965] 
split level 24: [/input-8, 1767] 
split level 25: [/input, 2709] 
split level 26: [/input-8, 1973] 
split level 27: [/input-8, 360] 
split level 28: [/input-8, 1252] 
split level 29: [/input-8, 1937] 
split level 30: [/input-8, 352] 
split level 31: [/input-8, 1875] 
split level 32: [/input-8, 730] 
split level 33: [/input-8, 932] 
split level 34: [/input-8, 2003] 
split level 35: [/input, 1721] 
split level 36: [/input, 420] 
split level 37: [/input-8, 1211] 
split level 38: [/input-8, 273] 
split level 39: [/input-8, 1227] 
split level 40: [/input, 123] 
split level 41: [/input-8, 1822] 
split level 42: [/input-8, 1778] 
split level 43: [/input-8, 1770] 
split level 44: [/input-8, 1836] 
split level 45: [/input, 157] 
split level 46: [/input, 2444] 
split level 47: [/input, 441] 
split level 48: [/input-8, 537] 
split level 49: [/input, 2730] 
split level 50: [/input-8, 1773] 
split level 51: [/input-8, 1018] 
split level 52: [/input-8, 535] 
split level 53: [/input-8, 183] 
split level 54: [/input-8, 132] 
split level 55: [/input, 425] 
split level 56: [/input-8, 1799] 
split level 57: [/input, 1925] 
split level 58: [/input, 3090] 
split level 59: [/input, 2455] 
split level 60: [/input-8, 1228] 
split level 61: [/input, 3089] 
split level 62: [/input, 746] 
split level 63: [/input-8, 545] 
split level 64: [/input, 1764] 
split level 65: [/input, 572] 
split level 66: [/input-8, 1952] 
split level 67: [/input, 983] 
split level 68: [/input-8, 527] 
split level 69: [/input-8, 37] 
split level 70: [/input, 373] 
split level 71: [/input, 2081] 
split level 72: [/input-8, 262] 
split level 73: [/input, 647] 
split level 74: [/input-8, 2038] 
split level 75: [/input, 2364] 
split level 76: [/input-8, 1993] 
split level 77: [/input-8, 717] 
split level 78: [/input-8, 909] 
split level 79: [/input-8, 538] 
split level 80: [/input, 230] 
split level 81: [/input-8, 1217] 
split level 82: [/input, 2186] 
split level 83: [/input-8, 1788] 
split level 84: [/input-8, 133] 
split level 85: [/input-8, 1253] 
split level 86: [/input, 677] 
split level 87: [/input, 1160] 
split level 88: [/input, 2202] 
split level 89: [/input, 2405] 
split level 90: [/input, 3229] 
split level 91: [/input, 643] 
split level 92: [/input, 102] 
split level 93: [/input-8, 908] 
split level 94: [/input, 1737] 
split level 95: [/input, 2097] 
split level 96: [/input-8, 1535] 
split level 97: [/input, 429] 
split level 98: [/input, 3214] 
split level 99: [/input-8, 1995] 
split level 100: [/input, 1131] 
split level 101: [/input, 2068] 
split level 102: [/input-8, 1435] 
split level 103: [/input, 188] 
split level 104: [/input, 2760] 
split level 105: [/input, 2435] 
split level 106: [/input-8, 1779] 
split level 107: [/input, 3263] 
split level 108: [/input, 354] 
split level 109: [/input, 2475] 
split level 110: [/input-8, 1254] 
split level 111: [/input, 2066] 
split level 112: [/input-8, 2037] 
split level 113: [/input-8, 720] 
split level 114: [/input-8, 2039] 
split level 115: [/input, 844] 
split level 116: [/input-8, 1803] 
split level 117: [/input, 742] 
split level 118: [/input-8, 901] 
split level 119: [/input-8, 512] 
split level 120: [/input, 728] 
split level 121: [/input, 2156] 
split level 122: [/input, 1099] 
split level 123: [/input, 2595] 
split level 124: [/input, 3479] 
split level 125: [/input, 2834] 
split level 126: [/input, 1940] 
split level 127: [/input, 841] 
split level 128: [/input, 2379] 
split level 129: [/input, 667] 
split level 130: [/input, 697] 
split level 131: [/input, 587] 
split level 132: [/input-8, 1988] 
split level 133: [/input, 1614] 
split level 134: [/input, 517] 
split level 135: [/input, 1144] 
split level 136: [/input, 315] 
split level 137: [/input, 2468] 
split level 138: [/input, 571] 
split level 139: [/input, 2380] 
split level 140: [/input-8, 1416] 
split level 141: [/input-8, 1845] 
split level 142: [/input, 104] 
split level 143: [/input-8, 1471] 
split level 144: [/input, 676] 
split level 145: [/input, 2365] 
split level 146: [/input-8, 1092] 
split level 147: [/input, 1777] 
split level 148: [/input, 2609] 
split level 149: [/input-8, 849] 
split level 150: [/input, 431] 
split level 151: [/input, 655] 
split level 152: [/input-8, 903] 
split level 153: [/input, 2460] 
split level 154: [/input, 2398] 
split level 155: [/input, 2695] 
split level 156: [/input, 690] 
split level 157: [/input, 2678] 
split level 158: [/input, 2594] 
split level 159: [/input-8, 904] 
split level 160: [/input, 1408] 
split level 161: [/input, 1045] 
split level 162: [/input-8, 690] 
split level 163: [/input, 2985] 
split level 164: [/input, 3016] 
split level 165: [/input-8, 1283] 
split level 166: [/input-8, 1801] 
split level 167: [/input, 1704] 
split level 168: [/input-8, 1829] 
split level 169: [/input-8, 333] 
split level 170: [/input-8, 1839] 
split level 171: [/input-8, 20] 
split level 172: [/input-8, 1343] 
split level 173: [/input-8, 145] 
split level 174: [/input, 2372] 
split level 175: [/input-8, 862] 
split level 176: [/input, 985] 
split level 177: [/input, 1226] 
split level 178: [/input, 1267] 
split level 179: [/input, 3785] 
split level 180: [/input, 2340] 
split level 181: [/input, 2632] 
split level 182: [/input, 2524] 
split level 183: [/input-8, 946] 
split level 184: [/input, 2547] 
split level 185: [/input, 2325] 
split level 186: [/input-8, 955] 
split level 187: [/input, 764] 
split level 188: [/input, 3587] 
split level 189: [/input-8, 1093] 
split level 190: [/input, 1790] 
split level 191: [/input, 1004] 
split level 192: [/input, 3769] 
split level 193: [/input, 1192] 
split level 194: [/input, 3582] 
split level 195: [/input-8, 1137] 
split level 196: [/input-8, 1517] 
split level 197: [/input, 1011] 
split level 198: [/input-8, 1694] 
split level 199: [/input-8, 1870] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.045997023582458496
10 lb beta sum: 0.0, worst -0.041452884674072266
Time: prepare 0.0116    bound 0.0999    transfer 0.0028    finalize 0.0028    func 0.1198    
Accumulated time: func 0.2068    prepare 0.0219    bound 0.1865    transfer 0.0029    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.09352636) min lb tensor(-0.04131746)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.011156082153320312 
BICCOS Cumulative time: 0.011156082153320312
Preprocessing time: 0.010269641876220703 Inference time: 0.00019478797912597656 Add cuts time: 7.724761962890625e-05 Cut analysis time: 0.0006144046783447266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03769 (1), -0.03751 (1), -0.03739 (1), -0.03733 (1), -0.03719 (1), -0.03719 (1), -0.03718 (1), -0.03716 (1), -0.03716 (1), -0.03713 (1), -0.03682 (1), -0.03679 (1), -0.03678 (1), -0.03646 (1), -0.03635 (1), -0.03606 (1), -0.03573 (1), -0.03553 (1), -0.03547 (1), -0.03534 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5229    set_bounds 0.0145    solve 0.1198    add 0.0679    
Accumulated time: pickout 0.0003    decision 0.5229    set_bounds 0.0145    solve 0.1198    add 0.0679    
Current (lb-rhs): -0.03768908977508545
50 domains visited
Cumulative time: 0.8390398025512695

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 62] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 62] [/input-12, 4] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 62] [/input-12, 4] [/input-12, 62] [/input-12, 62] [/input-12, 62] 
split level 2: [/input-12, 4] [/input-12, 69] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 69] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-8, 2026] [/input-8, 2026] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-8, 2026] [/input-12, 69] [/input-12, 69] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03226888179779053

all verified at 1th iter
Time: prepare 0.0077    bound 0.0118    transfer 0.0010    finalize 0.0024    func 0.0255    
Accumulated time: func 0.2323    prepare 0.0299    bound 0.1983    transfer 0.0039    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.06879139) min lb tensor(0.00019896)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03381657600402832 
BICCOS Cumulative time: 0.04497265815734863
Preprocessing time: 0.011725664138793945 Inference time: 0.013643980026245117 Add cuts time: 0.008259773254394531 Cut analysis time: 0.00018715858459472656
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0198    set_bounds 0.0111    solve 0.0255    add 0.0148    
Accumulated time: pickout 0.0013    decision 0.5427    set_bounds 0.0257    solve 0.1454    add 0.0827    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 10]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.97426002e-37, 3.54667753e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 10]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.97426002e-37, 7.18298405e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 10]), tensor([ 1., -1.]), tensor([0, 0]), tensor([3.97426002e-37, 3.78344506e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 10]), tensor([1., 1.]), tensor([0, 0]), tensor([3.97426002e-37, 6.54911250e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.004803657531738281

all verified at 0th iter
Time: prepare 0.0003    bound 0.0042    transfer 0.0001    finalize 0.0001    func 0.0048    
Accumulated time: func 0.2370    prepare 0.0302    bound 0.2025    transfer 0.0040    finalize 0.0054    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 197.52065873146057
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 197.52033877372742
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 197.52030420303345
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.5202829837799
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.52026319503784
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.5202431678772
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.52022409439087
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.52020478248596
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4798 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 189, vnnlib ID: 189 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22406721, -5.09387970, -1.13128150, -2.34915662, -1.20606780,
         -2.44099808, -1.39945912, -3.09898949, -5.70387459, -5.12313890]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [421]; unstable size 421; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 184, 1, 421] with unstable size 183 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 421] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 421] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 183] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.44431520,  3.10675144, -0.30788931,  0.80543149,  0.89428473,
         -0.24248070,  1.52680278,  3.75318289,  3.18413115]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.22406721, -5.09387970, -1.13128150, -2.34915662, -1.20606780,
         -2.44099808, -1.39945912, -3.09898949, -5.70387459, -5.12313890]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.22406721, -5.09387970, -1.13128197, -2.34915662, -1.20606816,
          -2.44099808, -1.39945936, -3.09898996, -5.70387459, -5.12313890],
         [-4.22406721, -5.09387970, -1.13128197, -2.34915662, -1.20606816,
          -2.44099808, -1.39945936, -3.09898996, -5.70387459, -5.12313890]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07478619,  0.19339120]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.01111121, -0.05238085, -0.14761895,  ...,  0.10634929,
             0.21746039,  0.40793657],
           [-0.35396814, -0.41746020, -0.40158719,  ...,  0.01111121,
             0.29682547,  0.10634929],
           [-0.43333322, -0.32222211,  0.05873025,  ..., -0.13174593,
             0.58253974,  0.63015878],
           ...,
           [-0.67142856, -0.67142856, -0.67142856,  ..., -0.29047608,
            -0.29047608, -0.19523799],
           [-0.54444444, -0.59206349, -0.63968253,  ..., -0.86190474,
            -0.84603173, -0.40158719],
           [-0.60793650, -0.62380952, -0.59206349,  ..., -1.14761901,
            -1.03650784, -0.67142856]],

          [[ 0.61191636,  0.53140104,  0.41867965,  ...,  0.49919492,
             0.61191636,  0.69243163],
           [ 0.30595824,  0.20933989,  0.22544295,  ...,  0.06441236,
             0.35426742,  0.08051541],
           [ 0.09661847,  0.20933989,  0.59581327,  ..., -0.19323659,
             0.28985518,  0.32206130],
           ...,
           [ 0.41867965,  0.38647354,  0.33816436,  ..., -0.59581316,
            -0.59581316, -0.49919480],
           [ 0.57971025,  0.48309189,  0.40257660,  ..., -1.07890499,
            -1.09500802, -0.69243151],
           [ 0.54750413,  0.48309189,  0.48309189,  ..., -1.23993552,
            -1.19162631, -0.88566822]],

          [[-0.47826082, -0.49325335, -0.49325335,  ..., -0.28335828,
            -0.31334329, -0.29835078],
           [-0.68815589, -0.65817088, -0.59820086,  ..., -0.47826082,
            -0.35832080, -0.71814090],
           [-0.77811092, -0.62818587, -0.31334329,  ..., -0.86806595,
            -0.46326834, -0.47826082],
           ...,
           [ 0.55622208,  0.52623707,  0.49625200,  ..., -1.00299859,
            -1.04797614, -1.03298354],
           [ 0.72113961,  0.64617711,  0.58620709,  ..., -1.25787115,
            -1.33283365, -1.04797614],
           [ 0.72113961,  0.66116959,  0.67616212,  ..., -1.28785622,
            -1.28785622, -1.07796109]]],


         [[[ 0.01111121, -0.05238085, -0.14761895,  ...,  0.10634929,
             0.21746039,  0.40793657],
           [-0.35396814, -0.41746020, -0.40158719,  ...,  0.01111121,
             0.29682547,  0.10634929],
           [-0.43333322, -0.32222211,  0.05873025,  ..., -0.13174593,
             0.58253974,  0.63015878],
           ...,
           [-0.67142856, -0.67142856, -0.67142856,  ..., -0.29047608,
            -0.29047608, -0.19523799],
           [-0.54444444, -0.59206349, -0.63968253,  ..., -0.86190474,
            -0.84603173, -0.40158719],
           [-0.60793650, -0.62380952, -0.59206349,  ..., -1.14761901,
            -1.03650784, -0.67142856]],

          [[ 0.61191636,  0.53140104,  0.41867965,  ...,  0.49919492,
             0.61191636,  0.69243163],
           [ 0.30595824,  0.20933989,  0.22544295,  ...,  0.06441236,
             0.35426742,  0.08051541],
           [ 0.09661847,  0.20933989,  0.59581327,  ..., -0.19323659,
             0.28985518,  0.32206130],
           ...,
           [ 0.41867965,  0.38647354,  0.33816436,  ..., -0.59581316,
            -0.59581316, -0.49919480],
           [ 0.57971025,  0.48309189,  0.40257660,  ..., -1.07890499,
            -1.09500802, -0.69243151],
           [ 0.54750413,  0.48309189,  0.48309189,  ..., -1.23993552,
            -1.19162631, -0.88566822]],

          [[-0.47826082, -0.49325335, -0.49325335,  ..., -0.28335828,
            -0.31334329, -0.29835078],
           [-0.68815589, -0.65817088, -0.59820086,  ..., -0.47826082,
            -0.35832080, -0.71814090],
           [-0.77811092, -0.62818587, -0.31334329,  ..., -0.86806595,
            -0.46326834, -0.47826082],
           ...,
           [ 0.55622208,  0.52623707,  0.49625200,  ..., -1.00299859,
            -1.04797614, -1.03298354],
           [ 0.72113961,  0.64617711,  0.58620709,  ..., -1.25787115,
            -1.33283365, -1.04797614],
           [ 0.72113961,  0.66116959,  0.67616212,  ..., -1.28785622,
            -1.28785622, -1.07796109]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0550 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 190, vnnlib ID: 190 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.51938772,  -8.11381626,  -9.00568771, -10.62922859,  -9.08360767,
         -10.80996037, -10.68894196,  -9.68361282,  -4.49052000,  -7.37830973]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [513]; unstable size 513; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 513] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 513] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 513] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 197] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.66284275, 3.05478764, 3.87506914, 5.43707466, 3.87113786, 5.60540581,
         5.39609337, 4.38749218, 2.30119872]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0324 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 191, vnnlib ID: 191 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
          -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [548]; unstable size 548; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 548] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 548] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 548] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 214] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.22616148,  5.41774035,  0.20892346,  0.26687157, -0.04204357,
          0.62771273,  1.19141817,  3.92691135,  4.58853817]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
          -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
           -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02311993]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.06825387, -0.90952379, -0.92539680,  ..., -0.51269841,
            -0.24285704, -0.05238085],
           [-0.98888886, -0.90952379, -0.83015871,  ..., -0.56031746,
            -0.30634910, -0.38571417],
           [-0.98888886, -0.92539680, -0.78253967,  ..., -0.71904761,
            -0.56031746, -0.54444444],
           ...,
           [ 0.18571436,  0.36031753,  0.40793657,  ..., -0.48095238,
            -0.52857143, -0.76666665],
           [ 0.20158738,  0.37619054,  0.42380959,  ..., -0.38571417,
            -0.33809513, -0.59206349],
           [ 0.28095245,  0.28095245,  0.37619054,  ..., -0.65555555,
            -0.57619047, -0.38571417]],

          [[-0.77294683, -0.66022539, -0.67632848,  ..., -0.32206106,
            -0.54750401, -1.54589367],
           [-0.70853460, -0.69243151, -0.56360704,  ..., -0.40257636,
            -0.61191624, -1.61030602],
           [-0.72463763, -0.80515295, -0.61191624,  ..., -0.61191624,
            -0.82125598, -1.67471826],
           ...,
           [-0.08051517,  0.43478271,  0.64412248,  ..., -0.41867942,
            -0.56360704, -0.91787434],
           [ 0.03220624,  0.57971025,  0.82125610,  ..., -0.19323659,
            -0.22544271, -0.64412236],
           [ 0.24154601,  0.61191636,  0.90177143,  ..., -0.33816412,
            -0.28985494, -0.27375188]],

          [[-0.67316341, -0.62818587, -0.61319339,  ..., -0.34332830,
            -0.43328333, -1.00299859],
           [-0.61319339, -0.65817088, -0.55322337,  ..., -0.38830581,
            -0.49325335, -1.13793111],
           [-0.61319339, -0.76311839, -0.59820086,  ..., -0.58320838,
            -0.71814090, -1.24287868],
           ...,
           [-0.01349309,  0.46626705,  0.63118458,  ..., -0.34332830,
            -0.43328333, -0.73313338],
           [ 0.07646193,  0.58620709,  0.76611710,  ..., -0.16341813,
            -0.16341813, -0.50824583],
           [ 0.25637197,  0.60119957,  0.84107965,  ..., -0.32833579,
            -0.28335828, -0.20839565]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0394 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 192, vnnlib ID: 192 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.85122108,  -9.83976269,  -4.36141491,  -6.06150818,  -4.73432350,
          -6.12186289,  -4.43167305,  -5.76936531, -10.48191452,  -9.88933086]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [496]; unstable size 496; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 219, 1, 496] with unstable size 218 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 496] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 496] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [218]; unstable size 218; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 218] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.02029133,  4.69440031,  1.40866971,  0.14043295,  1.46608901,
         -0.25579298,  0.97369635,  5.52549458,  4.68338776]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.85122108,  -9.83976269,  -4.36141491,  -6.06150818,  -4.73432350,
          -6.12186289,  -4.43167305,  -5.76936531, -10.48191452,  -9.88933086]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.19215965, -10.07285023,  -4.68872547,  -6.33513165,  -5.02730227,
           -6.40092230,  -4.53446865,  -6.08764648, -10.82570934, -10.10628033]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15425682]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0496 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 193, vnnlib ID: 193 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
         -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 538] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 538] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 153] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.15295124, -0.39681900,  2.03169203,  1.50405169,  1.48509026,
          1.57360125,  1.36475945,  0.63238287,  1.97044277]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
         -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
          -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12399006]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.00476182e+00, -1.05238092e+00, -7.66666651e-01,  ...,
             1.88412726e+00,  1.86825418e+00,  1.86825418e+00],
           [-8.93650770e-01, -8.93650770e-01, -8.30158710e-01,  ...,
             1.88412726e+00,  1.91587329e+00,  1.94761932e+00],
           [-1.00476182e+00, -9.25396800e-01, -9.25396800e-01,  ...,
             1.82063520e+00,  2.01111126e+00,  2.04285717e+00],
           ...,
           [ 1.53968334e-01,  5.87302521e-02, -3.65078375e-02,  ...,
             2.49206424e-01,  2.65079439e-01,  2.65079439e-01],
           [ 1.22222304e-01,  1.22222304e-01,  1.06349289e-01,  ...,
             2.17460394e-01,  2.17460394e-01,  2.49206424e-01],
           [ 4.87301648e-01,  4.23809588e-01,  4.55555618e-01,  ...,
             2.01587379e-01,  1.85714364e-01,  2.01587379e-01]],

          [[-1.01449275e+00, -1.06280184e+00, -7.72946835e-01,  ...,
             2.06119204e+00,  2.06119204e+00,  2.04508877e+00],
           [-9.01771307e-01, -9.01771307e-01, -8.37359071e-01,  ...,
             2.02898574e+00,  2.06119204e+00,  2.07729483e+00],
           [-1.01449275e+00, -9.33977425e-01, -9.33977425e-01,  ...,
             1.91626441e+00,  2.09339786e+00,  2.10950065e+00],
           ...,
           [ 3.22062373e-02, -6.44121096e-02, -1.61030471e-01,  ...,
             1.61030710e-01,  1.77133769e-01,  1.77133769e-01],
           [ 1.22934580e-07,  1.22934580e-07, -1.61029361e-02,  ...,
             1.28824592e-01,  1.28824592e-01,  1.61030710e-01],
           [ 3.70370477e-01,  3.05958241e-01,  3.38164359e-01,  ...,
             1.12721533e-01,  9.66184735e-02,  1.12721533e-01]],

          [[-1.00299859e+00, -1.04797614e+00, -7.93103397e-01,  ...,
             2.05547261e+00,  2.05547261e+00,  2.09295392e+00],
           [-8.98050964e-01, -8.83058429e-01, -8.53073418e-01,  ...,
             2.02548766e+00,  2.07046509e+00,  2.10045004e+00],
           [-1.01799107e+00, -9.28035975e-01, -9.43028450e-01,  ...,
             1.92054021e+00,  2.10045004e+00,  2.10045004e+00],
           ...,
           [ 9.14544314e-02,  3.14844176e-02, -4.34781015e-02,  ...,
             2.56371975e-01,  2.71364480e-01,  2.71364480e-01],
           [ 1.06446937e-01,  1.06446937e-01,  9.14544314e-02,  ...,
             2.26386964e-01,  2.26386964e-01,  2.56371975e-01],
           [ 4.51274544e-01,  3.91304523e-01,  4.21289533e-01,  ...,
             2.11394474e-01,  1.96401969e-01,  2.11394474e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0550 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 194, vnnlib ID: 194 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
          -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [698]; unstable size 698; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 698] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 698] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 698] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 161] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.69664454,  5.13874626,  2.27037501, -0.31452271,  2.41091108,
          0.62896585,  2.07980633,  4.13404322,  5.02704430]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
          -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
           -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12302685]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.09999990, -0.13174593, -0.09999990,  ...,  0.31269848,
             0.29682547,  0.32857150],
           [-0.09999990, -0.13174593, -0.09999990,  ...,  0.37619054,
             0.34444451,  0.36031753],
           [-0.08412688, -0.09999990, -0.06825387,  ...,  0.43968260,
             0.40793657,  0.40793657],
           ...,
           [ 0.21746039,  0.80476195,  0.31269848,  ...,  0.24920642,
             0.53492069,  0.45555562],
           [ 0.43968260,  0.61428577,  0.04285724,  ..., -0.00476181,
             0.37619054,  0.26507944],
           [ 0.67777783,  0.82063496,  0.34444451,  ...,  0.07460327,
             0.51904768,  0.26507944]],

          [[ 0.14492765,  0.08051541,  0.08051541,  ...,  0.40257660,
             0.40257660,  0.45088577],
           [ 0.16103071,  0.11272153,  0.09661847,  ...,  0.43478271,
             0.41867965,  0.45088577],
           [ 0.19323683,  0.16103071,  0.16103071,  ...,  0.48309189,
             0.46698883,  0.46698883],
           ...,
           [ 0.35426742,  0.95008057,  0.46698883,  ...,  0.35426742,
             0.54750413,  0.40257660],
           [ 0.49919492,  0.64412248,  0.09661847,  ...,  0.09661847,
             0.38647354,  0.19323683],
           [ 0.64412248,  0.72463775,  0.28985518,  ...,  0.11272153,
             0.51529801,  0.16103071]],

          [[-0.56821585, -0.61319339, -0.59820086,  ..., -0.29835078,
            -0.29835078, -0.26836565],
           [-0.52323836, -0.55322337, -0.55322337,  ..., -0.28335828,
            -0.26836565, -0.23838064],
           [-0.46326834, -0.49325335, -0.47826082,  ..., -0.26836565,
            -0.25337315, -0.20839565],
           ...,
           [-0.16341813,  0.28635699, -0.11844061,  ..., -0.35832080,
            -0.19340314, -0.32833579],
           [-0.10344811, -0.01349309, -0.46326834,  ..., -0.65817088,
            -0.40329832, -0.61319339],
           [-0.05847061,  0.10644694, -0.25337315,  ..., -0.74812591,
            -0.40329832, -0.76311839]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0517 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 195, vnnlib ID: 195 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.77076054, -7.62575722, -4.14598608, -4.30755711, -4.49275303,
         -4.30263758, -4.76192760, -5.12311316, -9.43562317, -7.12698030]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [451]; unstable size 451; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 451] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 451] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 451] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.21912003,  2.78572989, -0.07663596,  0.15777630, -0.08433509,
          0.31483459,  0.74149060,  4.69014645,  2.36163020]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.77076054, -7.62575722, -4.14598608, -4.30755711, -4.49275303,
         -4.30263758, -4.76192760, -5.12311316, -9.43562317, -7.12698030]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.77750111, -7.54761982, -4.16146708, -4.15072727, -4.44591999,
          -4.14375591, -4.69891930, -5.00807619, -9.32279205, -7.01225615],
         [-7.77750111, -7.54761982, -4.16146708, -4.15072727, -4.44591999,
          -4.14375591, -4.69891930, -5.00807619, -9.32279205, -7.01225615]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01073980, -0.01771116]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0560 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 196, vnnlib ID: 196 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.99589634, -8.26478100, -4.99381447, -4.63861275, -5.23205948,
         -4.79511499, -4.13116074, -5.92502117, -6.71752071, -6.90651417]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 226, 1, 527] with unstable size 225 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 527] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [225]; unstable size 225; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 225] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.63359296,  2.80945683, -0.02099717,  0.19597054,  0.13199283,
         -0.82713413,  0.77079380,  1.11276019,  1.53818464]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.99589634, -8.26478100, -4.99381447, -4.63861275, -5.23205948,
         -4.79511499, -4.13116074, -5.92502117, -6.71752071, -6.90651417]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.99589586, -8.26478100, -4.99381447, -4.63861370, -5.23206043,
          -4.79511547, -4.13116169, -5.92502165, -6.71752071, -6.90651464],
         [-6.99589586, -8.26478100, -4.99381447, -4.63861370, -5.23206043,
          -4.79511547, -4.13116169, -5.92502165, -6.71752071, -6.90651464]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.35520077, -0.50745201]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]],


         [[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0419 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 197, vnnlib ID: 197 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.43056643, -7.67667961, -2.21826839, -5.13023186, -4.35107708,
         -5.29444695, -6.64366817, -6.71203184, -2.96457338, -7.15871954]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [420]; unstable size 420; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 420] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 420] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 420] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 139] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.68506241, 0.59332937, 3.33365774, 2.62052536, 3.49451232, 4.81873131,
         4.89159966, 1.19089472, 5.18301582]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0302 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 198, vnnlib ID: 198 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.62386703, -13.36399269, -10.09908199, -10.70369053, -11.34663582,
         -10.95080948, -11.28316879, -13.42721939, -11.15745735, -13.38610840]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [426]; unstable size 426; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 133, 1, 426] with unstable size 132 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 426] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 426] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [132]; unstable size 132; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 132] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.35772824, 0.16254246, 0.66209161, 1.36232638, 0.89922100, 1.23943424,
         3.33602262, 1.22553658, 3.36414504]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0634 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 199, vnnlib ID: 199 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.18024397, -5.98002243, -5.06597948, -4.94513512, -5.08981609,
         -5.01497555, -4.47184467, -5.60709667, -6.87614346, -5.18200159]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [543]; unstable size 543; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 543] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 543] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 543] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 203] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.73734796,  0.50935507,  0.11531353,  0.06424892,  0.13350654,
          0.12348175,  0.50896823,  1.37839437, -0.26445580]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.18024397, -5.98002243, -5.06597948, -4.94513512, -5.08981609,
         -5.01497555, -4.47184467, -5.60709667, -6.87614346, -5.18200159]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.03544331, -5.49160671, -5.23422575, -5.08459759, -5.23702908,
          -5.16129684, -4.69914150, -5.69229412, -6.59322977, -4.69896603]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00017548]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0066 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0387 seconds
############# Summary #############
Final verified acc: 46.5% (total 200 examples)
Problem instances count: 200 , total verified (safe/unsat): 93 , total falsified (unsafe/sat): 101 , timeout: 6
mean time for ALL instances (total 200):6.78248279752976, max time: 223.44115281105042
mean time for verified SAFE instances(total 93): 0.9243305831827143, max time: 57.21103239059448
mean time for verified (SAFE + UNSAFE) instances (total 194): 0.4809523685691283, max time: [1.7791893482208252, 0.05766439437866211, 0.03972744941711426, 0.03590273857116699, 0.03980731964111328, 0.04733777046203613, 0.05027365684509277, 0.04550671577453613, 0.03434348106384277, 0.3678097724914551, 0.04358172416687012, 0.051976919174194336, 0.04835057258605957, 0.055513620376586914, 0.039730072021484375, 0.060765981674194336, 0.05764341354370117, 0.061591148376464844, 0.039330244064331055, 0.03749656677246094, 0.046646833419799805, 0.04790854454040527, 0.033190250396728516, 0.060196638107299805, 0.03827857971191406, 0.05610251426696777, 0.0510096549987793, 0.03489851951599121, 0.06401848793029785, 0.07293820381164551, 0.07717204093933105, 0.04983854293823242, 0.052330732345581055, 0.06396198272705078, 0.07615828514099121, 0.08577179908752441, 0.04475855827331543, 0.05624890327453613, 0.04262733459472656, 0.07094073295593262, 0.07078433036804199, 0.07380080223083496, 0.041289329528808594, 0.04575967788696289, 0.05295443534851074, 0.05884099006652832, 0.05306077003479004, 0.07619857788085938, 0.06331300735473633, 0.0647430419921875, 0.05487942695617676, 0.05063343048095703, 0.04053187370300293, 0.047216176986694336, 0.04360842704772949, 0.07579159736633301, 0.06116795539855957, 0.07413315773010254, 0.0570683479309082, 0.03556346893310547, 0.053646087646484375, 0.04856753349304199, 0.052073001861572266, 0.08058404922485352, 0.05109715461730957, 0.058799028396606445, 0.04770326614379883, 0.04611325263977051, 0.056336402893066406, 0.04278922080993652, 0.0536191463470459, 0.03766298294067383, 0.03459954261779785, 0.06001639366149902, 0.04053759574890137, 0.04067540168762207, 0.03914046287536621, 0.04392647743225098, 0.03232550621032715, 0.05168008804321289, 0.053637027740478516, 0.059087514877319336, 0.05104875564575195, 0.058981895446777344, 0.038498640060424805, 0.04938340187072754, 0.050935983657836914, 0.06686639785766602, 0.050174713134765625, 0.05920100212097168, 0.06766057014465332, 0.06327366828918457, 0.05420517921447754, 0.05504345893859863, 0.03938698768615723, 0.04961991310119629, 0.05496025085449219, 0.05174994468688965, 0.056008338928222656, 0.04185366630554199, 0.038666486740112305]
mean time for verified SAFE + TIMEOUT instances (total 99): 13.62782436428648, max time: [223.44115281105042, 203.74003338813782, 211.78604197502136, 214.51544618606567, 206.43911790847778, 203.2700755596161] 
mean time for verified UNSAFE instances (total 101): 0.07269322045958869, max time: 1.7791893482208252
unsafe-pgd (total 101), index: [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 16, 19, 21, 23, 25, 26, 29, 32, 34, 35, 36, 37, 43, 44, 45, 46, 48, 50, 53, 54, 56, 58, 61, 63, 65, 66, 72, 76, 77, 78, 80, 82, 84, 87, 88, 89, 90, 94, 95, 96, 98, 100, 101, 102, 104, 105, 106, 108, 113, 119, 120, 122, 124, 125, 126, 127, 129, 130, 132, 134, 141, 143, 145, 148, 149, 150, 151, 152, 155, 156, 158, 163, 165, 167, 170, 172, 173, 174, 176, 184, 185, 187, 189, 191, 192, 193, 194, 195, 196, 199]
safe-incomplete (total 84), index: [2, 7, 8, 14, 15, 17, 18, 20, 22, 27, 28, 30, 31, 33, 38, 39, 40, 41, 42, 47, 49, 51, 55, 59, 60, 62, 68, 69, 70, 71, 73, 74, 75, 79, 81, 83, 85, 86, 91, 92, 93, 99, 103, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 121, 131, 133, 135, 136, 138, 139, 140, 142, 144, 146, 147, 153, 154, 157, 160, 161, 162, 164, 166, 168, 171, 175, 177, 179, 180, 182, 186, 190, 197, 198]
safe (total 9), index: [24, 57, 123, 128, 137, 159, 169, 183, 188]
unknown (total 6), index: [52, 64, 67, 97, 178, 181]
