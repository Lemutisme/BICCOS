Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: ablation_results/cifar_cnn_a_adv4/gcp.out
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: cnn_4layer_adv4
  path: models/sdp/cifar_cnn_a_adv4.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 4096
  auto_enlarge_batch_size: true
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: mip
    output_cut: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 200
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: false
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: depth_first
  cut:
    enabled: true
    cuts_path: /tmp/abcrown_cuts_31948
    implication: false
    bab_cut: true
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 0.99
    iteration: 200
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.05
    number_cuts: 500
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: true
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
    biccos:
      enabled: false
      auto_param: true
      constraint_strengthening: true
      recursively_strengthening: false
      merge_cut_enabled: false
      fast_inference_enabled: false
      drop_ratio: 0.5
      max_infer_iter: 40
      heuristic: neuron_influence_score
      save_cuts: false
      multi_tree_branching:
        enabled: false
        restore_best_tree: false
        keep_n_best_domains: 50
        target_batch_size: 200
        iterations: 5
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
      branching_point_node: ''
      branching_point_db: []
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 50
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  biccos_mip_sanity_check: false
  sanity_check: 0
  z_split_enabled: false

Experiments at Wed Oct 30 17:05:38 2024 on n23g0022.hpc.itc.rwth-aachen.de
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten(start_dim=1, end_dim=-1)
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  0.weight: shape torch.Size([16, 3, 4, 4])
  0.bias: shape torch.Size([16])
  2.weight: shape torch.Size([32, 16, 4, 4])
  2.bias: shape torch.Size([32])
  5.weight: shape torch.Size([100, 2048])
  5.bias: shape torch.Size([100])
  7.weight: shape torch.Size([10, 100])
  7.bias: shape torch.Size([10])
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to ablation_results/cifar_cnn_a_adv4/gcp.out.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.39694118, -4.29481602, -2.76418877, -2.27564764, -2.33342099,
         -2.30766487, -2.16014171, -2.94787169, -5.16796875, -4.44396448]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [149]; unstable size 149; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 96, 1, 149] with unstable size 95 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 149] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [95]; unstable size 95; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 95] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 95] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.88380694,  1.74300122,  0.37986493, -0.05004513,  0.02511473,
         -0.22278100,  0.53882384,  2.69820690,  1.93023586]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.39694118, -4.29481602, -2.76418877, -2.27564764, -2.33342099,
         -2.30766487, -2.16014171, -2.94787169, -5.16796875, -4.44396448]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.39694166, -4.29481649, -2.76418877, -2.27564788, -2.33342123,
          -2.30766511, -2.16014194, -2.94787169, -5.16796970, -4.44396496],
         [-4.39694166, -4.29481649, -2.76418877, -2.27564788, -2.33342123,
          -2.30766511, -2.16014194, -2.94787169, -5.16796970, -4.44396496]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.05777335, -0.11550593]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 1.1445 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
         -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [560]; unstable size 560; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 560] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 560] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 560] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 164] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.78500080, -0.48810309,  8.46035385,  7.31322861,  7.79788828,
          7.43279171,  7.35444212,  7.89911652,  5.04577732]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
         -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.95612621, -10.30323696, -19.92111397, -18.71479988, -19.25238991,
          -18.84130478, -18.81987762, -19.40709114, -16.19555664, -10.55979347]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.25655651]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.46507931, -1.30634916, -1.32222211,  ...,  0.10634929,
             0.02698422,  0.04285724],
           [-1.25873005, -1.35396814, -1.40158725,  ...,  0.31269848,
             0.28095245,  0.28095245],
           [ 0.15396833,  0.42380959,  0.29682547,  ..., -0.00476181,
            -0.17936498, -0.24285704],
           ...,
           [-0.86190474, -0.60793650, -0.38571417,  ...,  0.91587305,
             0.82063496,  0.83650798],
           [-0.43333322, -0.30634910, -0.22698402,  ...,  0.90000004,
             0.77301592,  0.75714290],
           [-0.33809513, -0.30634910, -0.27460307,  ...,  0.88412702,
             0.78888893,  0.67777783]],

          [[-1.44927526, -1.28824472, -1.30434775,  ...,  0.20933989,
             0.14492765,  0.20933989],
           [-1.35265696, -1.36875999, -1.33655393,  ...,  0.37037048,
             0.35426742,  0.40257660],
           [-1.32045078, -1.35265696, -1.41706920,  ...,  0.04830930,
            -0.14492741, -0.24154577],
           ...,
           [-0.75684375, -0.51529789, -0.30595800,  ...,  0.91787446,
             0.83735919,  0.90177143],
           [-0.32206106, -0.19323659, -0.14492741,  ...,  0.90177143,
             0.78904998,  0.82125610],
           [-0.17713353, -0.17713353, -0.16103047,  ...,  0.90177143,
             0.78904998,  0.74074084]],

          [[-1.54272878, -1.49775124, -1.49775124,  ...,  0.42128953,
             0.34632701,  0.37631202],
           [-1.51274371, -1.55772126, -1.52773619,  ...,  0.52623707,
             0.49625200,  0.49625200],
           [-1.13793111, -1.09295356, -1.12293863,  ...,  0.09145443,
            -0.08845562, -0.19340314],
           ...,
           [-0.59820086, -0.43328333, -0.28335828,  ...,  0.88605714,
             0.81109464,  0.88605714],
           [-0.23838064, -0.14842562, -0.11844061,  ...,  0.85607213,
             0.76611710,  0.81109464],
           [-0.07346311, -0.10344811, -0.08845562,  ...,  0.75112462,
             0.79610211,  0.73613209]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0791 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22966528, -2.93601108, -5.89175558, -5.29639721, -5.30219364,
         -5.44004345, -5.44263363, -6.58539677, -3.89646339, -3.77071643]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [779]; unstable size 779; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 779] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 779] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 779] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 180] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.59069443, 1.86671638, 1.25944376, 1.32242680, 1.39030790, 1.32808542,
         2.61486292, 0.20729780, 0.53434557]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0685 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
          -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [408]; unstable size 408; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 408] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 408] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 408] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 166] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.20016575,  7.28631210,  0.47117403,  0.94903350,  0.90004659,
          2.26531672, -1.32159257,  7.77309513,  6.37577629]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
          -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.81480026, -13.08546257,  -5.93704462,  -6.55520630,  -5.17417622,
           -6.50369120,  -7.90147018,  -4.16475153, -13.59602165, -12.16934872]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.00942469]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0702 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
         -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [478]; unstable size 478; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 168, 1, 478] with unstable size 167 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 478] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 478] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [167]; unstable size 167; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 167] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 167] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.56216979,  4.48248863, -0.30218947,  1.40200806,  1.50853717,
          0.35172987,  1.49864471,  3.28840876,  3.77214050]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
         -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.62150002, -7.81213474, -2.44004679, -4.24660492, -2.49402499,
          -4.36055088, -3.27121401, -4.32307100, -6.43716717, -7.05409288]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05397820]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.45555562,  0.47142863,  0.50317466,  ...,  0.23333341,
             0.16984135, -0.06825387],
           [ 0.37619054,  0.55079371,  0.91587305,  ...,  0.39206356,
             0.59841275,  0.21746039],
           [ 0.47142863,  0.64603180,  0.70952386,  ...,  0.58253974,
             0.85238099,  0.82063496],
           ...,
           [ 0.32857150,  0.55079371,  0.18571436,  ..., -0.67142856,
            -1.22698402, -1.06825387],
           [ 0.47142863,  0.47142863,  0.21746039,  ..., -0.00476181,
            -1.14761901, -1.44920623],
           [ 0.45555562,  0.15396833, -0.11587292,  ...,  1.04285717,
             0.34444451, -0.54444444]],

          [[ 1.03059590,  1.09500813,  1.19162667,  ...,  1.12721443,
             0.96618366,  0.70853472],
           [ 1.03059590,  1.14331758,  1.28824508,  ...,  1.27214205,
             1.36876035,  0.98228669],
           [ 1.15942061,  1.22383285,  1.23993587,  ...,  1.38486338,
             1.54589403,  1.44927561],
           ...,
           [ 1.07890511,  1.28824508,  0.86956531,  ..., -0.70853460,
            -1.20772946, -0.96618354],
           [ 1.15942061,  1.22383285,  1.03059590,  ..., -0.19323659,
            -1.12721407, -1.33655393],
           [ 1.07890511,  0.93397754,  0.85346222,  ...,  0.99838978,
             0.28985518, -0.43478248]],

          [[ 0.10644694,  0.19640197,  0.42128953,  ..., -0.01349309,
             0.09145443, -0.31334329],
           [ 0.16641696,  0.45127454,  0.94602716,  ...,  0.19640197,
             0.75112462,  0.28635699],
           [ 0.16641696,  0.39130452,  0.48125952,  ...,  0.36131951,
             0.91604215,  1.03598225],
           ...,
           [ 0.06146942,  0.37631202,  0.07646193,  ..., -0.83808094,
            -1.27286363, -1.09295356],
           [ 0.19640197,  0.37631202, -0.11844061,  ..., -0.43328333,
            -1.27286363, -1.42278874],
           [ 0.25637197, -0.14842562, -0.73313338,  ...,  0.82608712,
            -0.02848560, -0.82308841]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0674 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.27786207, -6.88116646, -0.89845192, -1.13938844, -1.43722224,
         -1.21051192, -1.90963769, -2.81326365, -5.21822262, -6.45287228]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 158, 1, 544] with unstable size 157 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 544] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [157]; unstable size 157; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 157] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 157] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.32219422,  4.72163057, -0.79683375, -0.61578476, -0.54585779,
          0.10253292,  1.03042436,  3.03628206,  4.49144220]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.27786207, -6.88116646, -0.89845192, -1.13938844, -1.43722224,
         -1.21051192, -1.90963769, -2.81326365, -5.21822262, -6.45287228]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.27786303, -6.88116646, -0.89845204, -1.13938868, -1.43722200,
          -1.21051180, -1.90963745, -2.81326342, -5.21822357, -6.45287180],
         [-2.27786303, -6.88116646, -0.89845204, -1.13938868, -1.43722200,
          -1.21051180, -1.90963745, -2.81326342, -5.21822357, -6.45287180]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53876996, -0.29783332, -0.22671020]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0746 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87105656,  -9.24069786, -12.81012917, -14.19307423, -13.00804424,
         -14.29401398, -13.74548244, -12.64065266, -10.14831066, -10.41334629]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [461]; unstable size 461; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 461] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 461] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 461] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 180] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.16120410,  2.30639243,  3.48797083,  2.47389174,  3.57205105,
          3.02852058,  1.96217561, -0.08661658, -0.06133330]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87105656,  -9.24069786, -12.81012917, -14.19307423, -13.00804424,
         -14.29401398, -13.74548244, -12.64065266, -10.14831066, -10.41334629]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.87105656,  -9.24069881, -12.81012917, -14.19307613, -13.00804520,
          -14.29401493, -13.74548244, -12.64065266, -10.14831066, -10.41334724],
         [ -9.87105656,  -9.24069881, -12.81012917, -14.19307613, -13.00804520,
          -14.29401493, -13.74548244, -12.64065266, -10.14831066, -10.41334724]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.63035774,  0.27725410,  0.54229069]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]],


         [[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]],


         [[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0727 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.80696106, -12.16898727,  -8.71912003,  -9.57566929,  -8.25873089,
          -9.65113735,  -7.55729103,  -9.84239197, -12.61449814, -12.48052692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 445] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 445] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 185] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.65562153, 3.64904451, 0.87793171, 1.69124269, 0.44899166, 1.76054680,
         1.83400548, 4.22224331, 4.04899549]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0488 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.20309448, -16.77884865, -16.19422150, -18.35743332, -17.19257736,
         -18.67626762, -18.95268631, -19.17121124, -14.57676315, -17.35821724]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [435]; unstable size 435; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 109, 1, 435] with unstable size 108 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 435] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 435] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [108]; unstable size 108; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 108] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 108] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.19290400, 3.64490747, 5.67161989, 4.61943054, 5.98125458, 6.26108789,
         6.53781796, 2.12617970, 4.84152555]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0535 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.81122494, -13.31232357,  -9.44408321,  -9.38682652,  -9.45646095,
          -9.43222713,  -9.70102882, -10.80779362, -10.39734077, -12.81629562]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [536]; unstable size 536; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 536] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 536] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 536] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 186] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.80840868,  3.05787325, -0.29071200, -0.06402752, -0.28085589,
         -0.10329640,  1.11252022,  0.34938383,  2.63984060]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.81122494, -13.31232357,  -9.44408321,  -9.38682652,  -9.45646095,
          -9.43222713,  -9.70102882, -10.80779362, -10.39734077, -12.81629562]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.81122589, -13.31232452,  -9.44408417,  -9.38682556,  -9.45646000,
           -9.43222809,  -9.70102978, -10.80779362, -10.39734077, -12.81629467],
         [-10.81122589, -13.31232452,  -9.44408417,  -9.38682556,  -9.45646000,
           -9.43222809,  -9.70102978, -10.80779362, -10.39734077, -12.81629467]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.01185608, -0.04540253,  0.02423191,  0.26880169]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0699 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.81260872, -21.71220779, -15.47353172, -14.34746075, -17.37693214,
         -14.11986828, -17.64429283, -15.59352016, -20.41330528, -19.86410522]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [213]; unstable size 213; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 90, 1, 213] with unstable size 89 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 213] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 213] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [89]; unstable size 89; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 89] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 89] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.94948363,  5.68683910, -0.28762674, -1.39250028,  1.63050795,
         -1.61977458,  1.77867985,  4.45255136,  3.87534189]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.81260872, -21.71220779, -15.47353172, -14.34746075, -17.37693214,
         -14.11986828, -17.64429283, -15.59352016, -20.41330528, -19.86410522]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.81260681, -21.71220398, -15.47353172, -14.34746075, -17.37693214,
          -14.11986828, -17.64429092, -15.59352112, -20.41330528, -19.86410332],
         [-17.81260681, -21.71220398, -15.47353172, -14.34746075, -17.37693214,
          -14.11986828, -17.64429092, -15.59352112, -20.41330528, -19.86410332]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11998940, -1.24606037, -1.47365284]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0745 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.67578030, -10.93076611,  -6.99289465,  -8.49931908,  -6.64460850,
          -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557758]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 527] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 527] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 191] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17059851,  3.08206797,  1.16293228, -0.63490009,  1.28766203,
         -0.08916250,  1.48330271,  3.14107704,  2.88401604]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.67578030, -10.93076611,  -6.99289465,  -8.49931908,  -6.64460850,
          -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557758]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.67578030, -10.93076611,  -6.99289465,  -8.49932003,  -6.64460754,
           -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557854],
         [ -8.67578030, -10.93076611,  -6.99289465,  -8.49932003,  -6.64460754,
           -8.63103390,  -7.24618435,  -9.07669258, -10.93262672, -10.73557854]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.34828711,  0.25328970]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.79841268, -0.83015871, -0.84603173,  ..., -0.70317459,
            -0.76666665, -0.73492062],
           [-0.79841268, -0.83015871, -0.87777776,  ..., -0.84603173,
            -0.78253967, -0.75079364],
           [-0.81428570, -0.83015871, -0.89365077,  ..., -0.81428570,
            -0.75079364, -0.75079364],
           ...,
           [ 1.39206374,  1.23333359,  0.50317466,  ...,  0.21746039,
            -0.27460307, -0.63968253],
           [ 0.88412702,  0.43968260, -0.21111101,  ...,  1.45555580,
             1.26507962,  0.70952386],
           [ 0.36031753, -0.24285704, -0.68730158,  ...,  1.45555580,
             1.36031771,  1.67777801]],

          [[-0.16103047, -0.20933965, -0.22544271,  ..., -0.03220600,
            -0.09661824, -0.06441211],
           [-0.17713353, -0.20933965, -0.25764883,  ..., -0.17713353,
            -0.11272129, -0.09661824],
           [-0.19323659, -0.20933965, -0.27375188,  ..., -0.12882435,
            -0.08051517, -0.08051517],
           ...,
           [ 1.41706955,  1.28824508,  0.61191636,  ...,  0.51529801,
             0.14492765, -0.12882435],
           [ 0.99838978,  0.61191636,  0.03220624,  ...,  1.59420323,
             1.48148179,  1.03059590],
           [ 0.59581327,  0.08051541, -0.28985494,  ...,  1.49758482,
             1.40096653,  1.75523376]],

          [[-0.50824583, -0.55322337, -0.56821585,  ..., -0.43328333,
            -0.47826082, -0.40329832],
           [-0.52323836, -0.55322337, -0.59820086,  ..., -0.56821585,
            -0.49325335, -0.43328333],
           [-0.53823084, -0.55322337, -0.61319339,  ..., -0.53823084,
            -0.46326834, -0.41829082],
           ...,
           [ 0.99100471,  0.84107965,  0.21139447,  ...,  0.06146942,
            -0.28335828, -0.43328333],
           [ 0.61619210,  0.27136448, -0.25337315,  ...,  1.06596720,
             0.99100471,  0.63118458],
           [ 0.30134949, -0.14842562, -0.46326834,  ...,  1.03598225,
             0.97601217,  1.32084000]]],


         [[[-0.79841268, -0.83015871, -0.84603173,  ..., -0.70317459,
            -0.76666665, -0.73492062],
           [-0.79841268, -0.83015871, -0.87777776,  ..., -0.84603173,
            -0.78253967, -0.75079364],
           [-0.81428570, -0.83015871, -0.89365077,  ..., -0.81428570,
            -0.75079364, -0.75079364],
           ...,
           [ 1.39206374,  1.23333359,  0.50317466,  ...,  0.21746039,
            -0.27460307, -0.63968253],
           [ 0.88412702,  0.43968260, -0.21111101,  ...,  1.45555580,
             1.26507962,  0.70952386],
           [ 0.36031753, -0.24285704, -0.68730158,  ...,  1.45555580,
             1.36031771,  1.67777801]],

          [[-0.16103047, -0.20933965, -0.22544271,  ..., -0.03220600,
            -0.09661824, -0.06441211],
           [-0.17713353, -0.20933965, -0.25764883,  ..., -0.17713353,
            -0.11272129, -0.09661824],
           [-0.19323659, -0.20933965, -0.27375188,  ..., -0.12882435,
            -0.08051517, -0.08051517],
           ...,
           [ 1.41706955,  1.28824508,  0.61191636,  ...,  0.51529801,
             0.14492765, -0.12882435],
           [ 0.99838978,  0.61191636,  0.03220624,  ...,  1.59420323,
             1.48148179,  1.03059590],
           [ 0.59581327,  0.08051541, -0.28985494,  ...,  1.49758482,
             1.40096653,  1.75523376]],

          [[-0.50824583, -0.55322337, -0.56821585,  ..., -0.43328333,
            -0.47826082, -0.40329832],
           [-0.52323836, -0.55322337, -0.59820086,  ..., -0.56821585,
            -0.49325335, -0.43328333],
           [-0.53823084, -0.55322337, -0.61319339,  ..., -0.53823084,
            -0.46326834, -0.41829082],
           ...,
           [ 0.99100471,  0.84107965,  0.21139447,  ...,  0.06146942,
            -0.28335828, -0.43328333],
           [ 0.61619210,  0.27136448, -0.25337315,  ...,  1.06596720,
             0.99100471,  0.63118458],
           [ 0.30134949, -0.14842562, -0.46326834,  ...,  1.03598225,
             0.97601217,  1.32084000]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0695 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.44387496, -2.72885609, -0.99721217, -1.58509552, -2.43515849,
         -1.54629862, -4.83794689, -0.93704540, -3.84024239, -1.71335077]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 108, 1, 377] with unstable size 107 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 377] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [107]; unstable size 107; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 107] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 107] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.08005628,  1.21544480, -0.21125805,  0.39911640,  1.30089641,
          0.36341107,  3.49761176,  2.30609989,  0.25215483]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.44387496, -2.72885609, -0.99721217, -1.58509552, -2.43515849,
         -1.54629862, -4.83794689, -0.93704540, -3.84024239, -1.71335077]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.34201694, -2.72922182, -0.92797631, -1.60974824, -2.46359158,
          -1.57565308, -4.80144787, -1.07656217, -3.71189547, -1.76798725]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.14858586]]], device='cuda:0')
number of violation:  1
Attack finished in 0.2532 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.2985 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
         -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [505]; unstable size 505; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 505] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 505] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 505] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 156] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.97732306,  1.82492733,  4.21384001,  3.08415413,  4.54206800,
          3.54140091,  4.89616060,  0.14590693,  0.62829101]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
         -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.19204140, -13.62735748, -16.19686890, -18.63919830, -17.46629143,
          -18.98551178, -17.92122269, -19.29259300, -14.41958141, -14.50180340]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.43531609]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.45555562, 0.40793657, 0.42380959,  ..., 0.75714290,
            0.74126989, 0.70952386],
           [0.47142863, 0.42380959, 0.43968260,  ..., 0.72539687,
            0.69365084, 0.66190481],
           [0.53492069, 0.50317466, 0.55079371,  ..., 0.70952386,
            0.69365084, 0.66190481],
           ...,
           [0.63015878, 0.64603180, 0.66190481,  ..., 0.64603180,
            0.67777783, 0.66190481],
           [0.64603180, 0.61428577, 0.59841275,  ..., 0.63015878,
            0.64603180, 0.66190481],
           [0.72539687, 0.66190481, 0.63015878,  ..., 0.63015878,
            0.59841275, 0.64603180]],

          [[0.48309189, 0.43478271, 0.45088577,  ..., 0.75684386,
            0.72463775, 0.69243163],
           [0.49919492, 0.45088577, 0.46698883,  ..., 0.70853472,
            0.67632860, 0.64412248],
           [0.56360716, 0.53140104, 0.57971025,  ..., 0.69243163,
            0.67632860, 0.64412248],
           ...,
           [0.61191636, 0.62801939, 0.64412248,  ..., 0.62801939,
            0.66022551, 0.64412248],
           [0.62801939, 0.59581327, 0.57971025,  ..., 0.61191636,
            0.62801939, 0.64412248],
           [0.70853472, 0.64412248, 0.61191636,  ..., 0.61191636,
            0.57971025, 0.62801939]],

          [[0.66116959, 0.61619210, 0.63118458,  ..., 0.76611710,
            0.81109464, 0.79610211],
           [0.67616212, 0.63118458, 0.64617711,  ..., 0.76611710,
            0.78110963, 0.75112462],
           [0.73613209, 0.70614707, 0.75112462,  ..., 0.79610211,
            0.78110963, 0.75112462],
           ...,
           [0.66116959, 0.67616212, 0.72113961,  ..., 0.73613209,
            0.76611710, 0.75112462],
           [0.67616212, 0.64617711, 0.66116959,  ..., 0.72113961,
            0.73613209, 0.75112462],
           [0.75112462, 0.69115460, 0.69115460,  ..., 0.72113961,
            0.69115460, 0.73613209]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0480 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.37443638, -4.00673676, -7.36628103, -7.49868298, -7.54243469,
         -7.68763971, -6.80421257, -6.88844681, -6.20179558, -2.71405101]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [421]; unstable size 421; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 163, 1, 421] with unstable size 162 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 421] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 421] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [162]; unstable size 162; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 162] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.00862336, 0.99976748, 3.98278904, 4.17501926, 4.15570545, 4.36021328,
         3.39363956, 3.39964390, 2.97036386]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0638 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.54657602, -8.36112595, -3.46242666, -2.87187982, -3.89005208,
         -2.88797569, -4.48041725, -3.49748850, -7.86016560, -7.33907175]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 138, 1, 403] with unstable size 137 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [137]; unstable size 137; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 137] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 137] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.24231577e+00, 4.76083994e+00, 2.99191654e-01, 6.74156666e-01,
         1.52279437e-03, 1.30786681e+00, 2.09971309e-01, 4.47964859e+00,
         3.82559681e+00]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0651 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.45027256, -14.85908413,  -9.90371609, -10.28254223,  -9.57412910,
         -10.25789833,  -9.99507999, -11.03962898, -13.74928951, -14.72655964]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [731]; unstable size 731; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 228, 1, 731] with unstable size 227 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 731] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 731] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [227]; unstable size 227; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 227] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 227] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.43560493,  3.57842565, -0.70241714, -1.03279150, -0.04905008,
         -0.72894001,  0.25918615,  2.60397291,  3.52938461]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.45027256, -14.85908413,  -9.90371609, -10.28254223,  -9.57412910,
         -10.25789833,  -9.99507999, -11.03962898, -13.74928951, -14.72655964]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.45027161, -14.85908413,  -9.90371609, -10.28254223,  -9.57412815,
          -10.25789928,  -9.99507904, -11.03962803, -13.74928951, -14.72655869],
         [-12.45027161, -14.85908413,  -9.90371609, -10.28254223,  -9.57412815,
          -10.25789928,  -9.99507904, -11.03962803, -13.74928951, -14.72655869]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.37882614, -0.70841408, -0.02464294, -0.28746319]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0621 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.49743176,  -9.17833710, -13.67570496, -15.20650959, -13.95639992,
         -15.42528915, -14.06286907, -16.15926170, -11.69949532, -11.19551754]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [373]; unstable size 373; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 373] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 373] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 373] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 175] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.61845303, 3.61285639, 5.11308956, 3.87147617, 5.31955910, 4.01641178,
         5.91223860, 1.82210588, 1.76377106]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0632 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.34389973,  -9.96172714,  -4.05279398,  -5.78736115,  -3.97068667,
          -5.86786509,  -3.54266286,  -5.87278652, -10.21232128,  -9.72180271]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [483]; unstable size 483; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 483] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 483] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 483] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 208] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.06753731, 5.54263163, 0.10674787, 1.85941637, 0.03022206, 1.92791629,
         1.74811411, 5.96987152, 5.31630135]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.71088123, -13.29491711,  -7.63611126,  -7.11927986,  -7.38616085,
          -7.11191607,  -7.48660755,  -8.97584915, -11.56023979, -13.25586891]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [539]; unstable size 539; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 539] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 539] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 539] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 220] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.10444069e+00,  5.31401682e+00,  2.42111683e-01, -5.13114929e-02,
         -2.78017223e-02, -2.51591206e-03,  1.45366096e+00,  3.80054927e+00,
          5.33967876e+00]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.71088123, -13.29491711,  -7.63611126,  -7.11927986,  -7.38616085,
          -7.11191607,  -7.48660755,  -8.97584915, -11.56023979, -13.25586891]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.71088123, -13.29491806,  -7.63611174,  -7.11928177,  -7.38616180,
           -7.11191511,  -7.48660755,  -8.97585011, -11.56023979, -13.25586891],
         [-10.71088123, -13.29491806,  -7.63611174,  -7.11928177,  -7.38616180,
           -7.11191511,  -7.48660755,  -8.97585011, -11.56023979, -13.25586891]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.26688004, -0.00736666,  0.36732578]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]],


         [[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]],


         [[[-1.79364979e-01, -2.42857039e-01, -2.58730054e-01,  ...,
            -4.96825397e-01, -6.23809516e-01, -8.46031725e-01],
           [-8.77777755e-01, -1.02063489e+00, -1.02063489e+00,  ...,
            -3.38095129e-01, -3.69841158e-01, -5.92063487e-01],
           [-1.02063489e+00, -9.88888860e-01, -9.88888860e-01,  ...,
            -1.79364979e-01, -1.63491964e-01, -4.33333218e-01],
           ...,
           [ 2.49206424e-01,  2.65079439e-01,  3.12698483e-01,  ...,
             2.17460394e-01,  2.33333409e-01,  2.80952454e-01],
           [ 1.38095319e-01,  3.28571498e-01,  3.60317528e-01,  ...,
             3.12698483e-01,  3.28571498e-01,  3.12698483e-01],
           [ 4.55555618e-01,  5.50793707e-01,  6.77777827e-01,  ...,
             5.03174663e-01,  5.03174663e-01,  4.71428633e-01]],

          [[-2.73751885e-01, -3.22061062e-01, -3.54267180e-01,  ...,
            -6.60225391e-01, -7.56843746e-01, -9.66183543e-01],
           [-1.30434775e+00, -1.41706920e+00, -1.41706920e+00,  ...,
            -5.47504008e-01, -5.47504008e-01, -7.24637628e-01],
           [-1.44927526e+00, -1.40096617e+00, -1.40096617e+00,  ...,
            -4.34782475e-01, -4.02576357e-01, -6.28019273e-01],
           ...,
           [-3.22059989e-02, -3.22059989e-02, -1.61029361e-02,  ...,
            -1.61030471e-01, -1.12721294e-01,  1.61031820e-02],
           [-1.93236589e-01, -1.61029361e-02, -3.22059989e-02,  ...,
             1.22934580e-07,  4.83092964e-02,  6.44123554e-02],
           [ 2.25442946e-01,  2.89855182e-01,  3.86473536e-01,  ...,
             3.38164359e-01,  3.38164359e-01,  3.05958241e-01]],

          [[ 4.64769229e-02,  1.49940979e-03, -1.34930937e-02,  ...,
            -8.08095932e-01, -8.38080943e-01, -9.58020985e-01],
           [-8.68065953e-01, -1.04797614e+00, -1.10794616e+00,  ...,
            -8.08095932e-01, -7.48125911e-01, -8.53073418e-01],
           [-1.07796109e+00, -1.09295356e+00, -1.13793111e+00,  ...,
            -7.48125911e-01, -6.43178403e-01, -7.93103397e-01],
           ...,
           [-1.93403140e-01, -2.68365651e-01, -2.98350781e-01,  ...,
            -4.63268340e-01, -4.03298318e-01, -2.68365651e-01],
           [-4.18290824e-01, -3.43328297e-01, -3.28335792e-01,  ...,
            -3.28335792e-01, -2.83358276e-01, -2.23388135e-01],
           [ 3.14844176e-02, -4.34781015e-02,  1.36431947e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.36431947e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0371 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.09629250, -13.56788158,  -9.81583977, -10.23123169,  -9.89592838,
         -10.26214600,  -8.58048058, -11.66953659, -13.15151978, -13.97097874]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [556]; unstable size 556; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 556] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 556] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 556] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 232] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.87823057, 4.08753538, 0.91786969, 1.31721747, 0.97389340, 1.33815885,
         2.53606868, 3.77071428, 4.53204918]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0770 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.60548306, -4.32711458, -0.42147765, -0.48017693, -0.49338007,
         -0.45899674, -1.75417352, -0.30924958, -4.08429527, -3.55203962]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [430]; unstable size 430; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 430] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 430] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 430] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 166] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.60546780,  3.26384211, -0.35429382,  0.00655460, -0.27650321,
          0.93680191, -0.40704596,  3.07671976,  2.56389141]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.60548306, -4.32711458, -0.42147765, -0.48017693, -0.49338007,
         -0.45899674, -1.75417352, -0.30924958, -4.08429527, -3.55203962]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.60548258, -4.32711411, -0.42147765, -0.48017645, -0.49337971,
          -0.45899615, -1.75417328, -0.30924922, -4.08429432, -3.55203867],
         [-3.60548258, -4.32711411, -0.42147765, -0.48017645, -0.49337971,
          -0.45899615, -1.75417328, -0.30924922, -4.08429432, -3.55203867]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.03751850,  0.03438357, -0.14974692]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]],


         [[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]],


         [[[-1.83015871, -1.79841268, -1.75079370,  ..., -1.79841268,
            -1.76666665, -1.75079370],
           [-1.79841268, -1.78253973, -1.78253973,  ..., -1.78253973,
            -1.73492062, -1.71904767],
           [-1.78253973, -1.73492062, -1.71904767,  ..., -1.81428576,
            -1.81428576, -1.83015871],
           ...,
           [-1.03650784, -1.17936504, -1.29047608,  ..., -1.08412695,
            -1.24285710, -1.08412695],
           [-0.95714283, -1.03650784, -1.09999990,  ..., -0.87777776,
            -0.94126981, -0.86190474],
           [-0.71904761, -0.73492062, -0.63968253,  ..., -0.60793650,
            -0.68730158, -0.67142856]],

          [[-1.78743970, -1.81964576, -1.80354273,  ..., -1.77133656,
            -1.78743970, -1.78743970],
           [-1.78743970, -1.78743970, -1.78743970,  ..., -1.70692432,
            -1.77133656, -1.78743970],
           [-1.80354273, -1.73913050, -1.72302747,  ..., -1.78743970,
            -1.77133656, -1.78743970],
           ...,
           [-0.93397743, -1.04669881, -1.17552328,  ..., -1.25603855,
            -1.28824472, -1.07890499],
           [-0.91787434, -1.01449275, -1.06280184,  ..., -0.95008045,
            -0.91787434, -0.80515295],
           [-0.75684375, -0.80515295, -0.69243151,  ..., -0.64412236,
            -0.66022539, -0.61191624]],

          [[-1.46776617, -1.45277369, -1.39280367,  ..., -1.34782624,
            -1.36281872, -1.34782624],
           [-1.45277369, -1.39280367, -1.33283365,  ..., -1.33283365,
            -1.31784117, -1.31784117],
           [-1.45277369, -1.33283365, -1.27286363,  ..., -1.46776617,
            -1.39280367, -1.37781119],
           ...,
           [-1.07796109, -1.07796109, -1.13793111,  ..., -1.22788620,
            -1.28785622, -1.12293863],
           [-1.15292358, -1.18290865, -1.18290865,  ..., -1.10794616,
            -1.13793111, -1.06296861],
           [-1.07796109, -1.07796109, -0.94302845,  ..., -0.95802099,
            -1.01799107, -1.00299859]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0524 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.63814020, -7.09170341, -5.93957424, -7.54413128, -6.39586449,
         -7.70300293, -8.28325272, -8.31898880, -2.61777067, -6.41391087]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [452]; unstable size 452; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 159, 1, 452] with unstable size 158 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 452] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 452] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [158]; unstable size 158; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 158] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 158] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.56345731, 3.82402372, 2.68081307, 4.30023193, 3.12777877, 4.44676113,
         5.01942158, 4.85944176, 3.30816460]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0643 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.14455748, -5.84289455, -2.86230087, -2.12573886, -3.17329073,
         -2.12218904, -4.42577553, -2.79664421, -3.31719923, -4.93841982]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 427] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 427] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 156] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.56514996,  3.04386854,  0.44034660, -0.01067105,  0.67077887,
          1.90764415,  0.08045042,  0.57008052,  2.19504976]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.14455748, -5.84289455, -2.86230087, -2.12573886, -3.17329073,
         -2.12218904, -4.42577553, -2.79664421, -3.31719923, -4.93841982]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.16760874, -5.79149437, -2.92998362, -2.25009131, -3.25186229,
          -2.25700569, -4.37982655, -2.96575403, -3.27511168, -4.89296436]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00691438]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0076 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0752 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
         -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [710]; unstable size 710; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 710] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 710] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 710] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 223] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.10017014,  0.81654787,  2.80445457,  0.97049618,  2.92300129,
          1.57911158,  2.45411730,  1.05910659,  0.55258167]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
         -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.01it/s]100%|██████████| 1/1 [00:00<00:00,  8.00it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.62336159,  -7.42845249,  -8.70991421, -10.74260235,  -8.88674164,
          -10.87233353,  -9.51017857, -10.43375587,  -8.81735802,  -8.17679691]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.19490910]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1277 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.263999938964844
alpha/beta optimization time: 3.6091842651367188
initial alpha-crown bounds: tensor([[-0.06242156,  0.84010839,  2.82575083,  0.99328041,  2.94463921,
          1.60075665,  2.47774172,  1.08523750,  0.55890656]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.062421560287475586
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.5935 seconds.
lower bounds for all target labels: [-0.062419891357421875, 0.8401088714599609, 2.825748920440674, 0.993281364440918, 2.9446358680725098, 1.6007580757141113, 2.477738380432129, 1.085237741470337, 0.5589064359664917]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [0]
start creating model mps for candidates: ['lay/16_0']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 196.13001132011414
Verifying property 0 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.944639205932617.

Properties batch 1, size 1
Remaining timeout: 195.9492223262787
Verifying property 1 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.8257508277893066.

Properties batch 2, size 1
Remaining timeout: 195.85595846176147
Verifying property 2 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.4777417182922363.

Properties batch 3, size 1
Remaining timeout: 195.76447081565857
Verifying property 3 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6007566452026367.

Properties batch 4, size 1
Remaining timeout: 195.67404556274414
Verifying property 4 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0852375030517578.

Properties batch 5, size 1
Remaining timeout: 195.58367371559143
Verifying property 5 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9932804107666016.

Properties batch 6, size 1
Remaining timeout: 195.4910547733307
Verifying property 6 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.8401083946228027.

Properties batch 7, size 1
Remaining timeout: 195.38785338401794
Verifying property 7 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5589065551757812.

Properties batch 8, size 1
Remaining timeout: 195.25893211364746
Verifying property 8 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06242156]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.53025484,  -6.93467522,  -8.63117790, -10.59670353,  -8.79525089,
        -10.72763157,  -9.39887810, -10.28261948,  -8.60503674,  -7.72983885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06242156]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 710
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 216
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 930
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006747245788574219
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 90] 
split level 2: [/input-8, 45] 
split level 3: [/input-8, 1875] 
split level 4: [/input-8, 1881] 
split level 5: [/input-8, 1130] 
split level 6: [/input-8, 1769] 
split level 7: [/input-8, 1710] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 4.8160552978515625e-05
Time: prepare 0.0031    bound 0.0078    transfer 0.0017    finalize 0.0015    func 0.0142    
Accumulated time: func 0.0142    prepare 0.0036    bound 0.0078    transfer 0.0017    finalize 0.0015    
all_split False
Length of domains: 0
Time: pickout 0.0005    decision 0.2065    set_bounds 0.0161    solve 0.0143    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.2065    set_bounds 0.0161    solve 0.0143    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.2658071517944336

the mip building process is not terminated yet, kill it
Result: safe in 5.3958 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.18077564, -5.20051479, -2.12253857, -2.36523008, -1.95707440,
         -2.48700714, -1.75185084, -2.55259371, -4.91013861, -3.94676566]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [653]; unstable size 653; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 653] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 653] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 653] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 204] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.29296613, -1.59309256, -1.48934960, -1.80449390, -1.37909257,
         -2.13179302, -1.44039261,  1.14391506, -0.00782728]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.18077564, -5.20051479, -2.12253857, -2.36523008, -1.95707440,
         -2.48700714, -1.75185084, -2.55259371, -4.91013861, -3.94676566]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.18077517, -5.20051384, -2.12253881, -2.36523008, -1.95707417,
          -2.48700714, -1.75185037, -2.55259418, -4.91013765, -3.94676566],
         [-3.18077517, -5.20051384, -2.12253881, -2.36523008, -1.95707417,
          -2.48700714, -1.75185037, -2.55259418, -4.91013765, -3.94676566]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.05823636, -0.81554508, -1.22370100, -0.69376802, -1.42892480,
          -0.62818098,  0.76599050]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         ...,


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0920 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.89522552, -12.50763512, -11.44470501, -10.71474552, -11.76819897,
         -10.88390923, -11.10462856, -10.95513725, -12.58380413, -11.60862064]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [382]; unstable size 382; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 122, 1, 382] with unstable size 121 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 382] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 382] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [121]; unstable size 121; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 121] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 121] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.28878093,  0.57599193, -0.86663389, -1.54129553, -0.57239199,
         -1.38458633, -1.21227455, -1.42654026,  0.52066183]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.89522552, -12.50763512, -11.44470501, -10.71474552, -11.76819897,
         -10.88390923, -11.10462856, -10.95513725, -12.58380413, -11.60862064]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.89522552, -12.50763512, -11.44470310, -10.71474457, -11.76819706,
          -10.88390827, -11.10462856, -10.95513630, -12.58380413, -11.60861969],
         [-10.89522552, -12.50763512, -11.44470310, -10.71474457, -11.76819706,
          -10.88390827, -11.10462856, -10.95513630, -12.58380413, -11.60861969]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.71339417, -0.16391659, -0.89387512,  0.15957737, -0.72471142,
          -0.50399113, -0.65348339]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         ...,


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]],


         [[[2.04285717, 1.99523830, 1.99523830,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 1.99523830, 1.96349227,  ..., 2.02698421,
            2.02698421, 2.02698421],
           [2.04285717, 2.02698421, 1.99523830,  ..., 2.03492069,
            2.03492069, 2.03492069],
           ...,
           [2.01111126, 1.13809550, 1.05873048,  ..., 2.02698421,
            2.01111126, 2.01111126],
           [2.01111126, 1.12222254, 0.74126989,  ..., 1.99523830,
            1.96349227, 2.01111126],
           [2.04285717, 1.94761932, 1.94761932,  ..., 2.02698421,
            2.02698421, 2.02698421]],

          [[2.10950065, 2.06119204, 2.09339786,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10144925, 2.06119204, 2.06119204,  ..., 2.09339786,
            2.09339786, 2.09339786],
           [2.10950065, 2.09339786, 2.10144925,  ..., 2.10144925,
            2.10144925, 2.10144925],
           ...,
           [2.07729483, 1.19162667, 1.11111140,  ..., 2.09339786,
            2.07729483, 2.07729483],
           [2.07729483, 1.17552364, 0.78904998,  ..., 2.06119204,
            2.02898574, 2.07729483],
           [2.10950065, 2.01288271, 2.01288271,  ..., 2.09339786,
            2.09339786, 2.09339786]],

          [[2.10045004, 2.05547261, 2.07046509,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.05547261, 2.05547261,  ..., 2.08545780,
            2.08545780, 2.08545780],
           [2.10045004, 2.08545780, 2.09295392,  ..., 2.09295392,
            2.09295392, 2.09295392],
           ...,
           [2.07046509, 1.24587750, 1.17091501,  ..., 2.08545780,
            2.07046509, 2.07046509],
           [2.07046509, 1.23088503, 0.87106466,  ..., 2.05547261,
            2.02548766, 2.07046509],
           [2.10045004, 2.01049519, 2.01049519,  ..., 2.08545780,
            2.08545780, 2.08545780]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0839 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.43655968, -7.86374569, -4.02158070, -5.24551868, -3.37242651,
         -5.30696249, -5.20856190, -1.00180030, -7.81787586, -6.36246300]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 161, 1, 515] with unstable size 160 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 515] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [160]; unstable size 160; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 160] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.54672909, 5.77573156, 2.48532701, 3.64926147, 1.99377513, 3.71493483,
         3.49136138, 5.76536751, 4.38623142]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0674 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.78016090, -14.31425953, -12.11413383, -13.61369610, -13.22554588,
         -13.89419746, -13.81897068, -15.55597496, -11.84562683, -14.04191494]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [440]; unstable size 440; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 110, 1, 440] with unstable size 109 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 440] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 440] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [109]; unstable size 109; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 109] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 109] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.06632042, 1.97255516, 3.32466197, 3.00493073, 3.59111691, 3.54375315,
         5.13309097, 1.75885558, 3.87197638]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0655 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.58011818, -16.93579865, -13.35176086, -12.33354282, -12.53640938,
         -12.27129459, -12.42931461, -13.10805130, -16.13471413, -17.27034378]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [468]; unstable size 468; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 468] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 468] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 468] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 159] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.95476007,  3.13256741, -0.12001920, -1.12539387, -0.82774329,
         -1.18586886, -1.15729165,  2.37652397,  3.54983091]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.58011818, -16.93579865, -13.35176086, -12.33354282, -12.53640938,
         -12.27129459, -12.42931461, -13.10805130, -16.13471413, -17.27034378]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.58012009, -16.93579865, -13.35176182, -12.33354473, -12.53641129,
          -12.27129650, -12.42931652, -13.10805321, -16.13471413, -17.27034378],
         [-15.58012009, -16.93579865, -13.35176182, -12.33354473, -12.53641129,
          -12.27129650, -12.42931652, -13.10805321, -16.13471413, -17.27034378]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.24370861, -0.77450848, -0.57164192, -0.83675671, -0.67873669]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0875 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.56713295, -10.98260689,  -8.09094048,  -9.93765926,  -9.26453114,
         -10.17694187,  -9.82418156, -11.28379536,  -9.40003777, -10.42401791]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [530]; unstable size 530; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 122, 1, 530] with unstable size 121 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 530] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 530] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [121]; unstable size 121; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 121] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 121] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.92235804, 1.25571513, 2.97574425, 2.32010770, 3.20374870, 2.90414071,
         4.19674778, 2.57079268, 3.44977450]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0640 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.24266052, -9.05385590, -4.63273811, -6.82860374, -4.25593948,
         -6.95034361, -6.54124737, -4.92567825, -7.73889160, -7.98849154]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [484]; unstable size 484; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 199, 1, 484] with unstable size 198 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 484] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 484] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [198]; unstable size 198; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 198] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 198] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.37995410, 3.76833701, 0.10083741, 2.16897559, 2.29998016, 1.78575850,
         0.35607696, 2.66335440, 2.83313727]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0686 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.89239407, -6.05108643, -2.55554962, -3.76616883, -2.11981702,
         -3.83909178, -3.28839850, -3.06943870, -4.45051193, -5.43191195]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [594]; unstable size 594; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 594] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 594] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 594] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 191] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.09662676,  2.10026455, -1.01723385,  0.09384108, -1.30339622,
          0.17089629, -0.43055558,  0.45394588,  1.56536508]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.89239407, -6.05108643, -2.55554962, -3.76616883, -2.11981702,
         -3.83909178, -3.28839850, -3.06943870, -4.45051193, -5.43191195]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.89239454, -6.05108738, -2.55554962, -3.76616931, -2.11981726,
          -3.83909178, -3.28839874, -3.06943822, -4.45051241, -5.43191242],
         [-3.89239454, -6.05108738, -2.55554962, -3.76616931, -2.11981726,
          -3.83909178, -3.28839874, -3.06943822, -4.45051241, -5.43191242]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.51388860, -0.94962096,  0.21896052]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0731 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.06789207, -13.08512020, -11.95641899, -14.25201702, -13.24593544,
         -14.51348209, -14.12713146, -14.87085629, -10.82266903, -12.98229504]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 125, 1, 591] with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 591] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [124]; unstable size 124; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 124] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 124] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.60616136, 2.43306828, 4.57036257, 3.65054798, 4.81807995, 4.45948219,
         5.13743353, 1.49430275, 3.58136392]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0634 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87295246,  -9.77221680,  -7.06542158,  -6.92552090,  -6.61218357,
          -6.98795938,  -6.45421982,  -7.64116573, -10.70925426,  -9.26054478]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [514]; unstable size 514; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 255, 1, 514] with unstable size 254 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 514] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 514] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [254]; unstable size 254; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 254] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 254] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.37700820,  1.93588448, -0.13754916, -0.62001419,  0.04202433,
         -0.79881167,  0.29987144,  3.01180077,  1.52556276]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87295246,  -9.77221680,  -7.06542158,  -6.92552090,  -6.61218357,
          -6.98795938,  -6.45421982,  -7.64116573, -10.70925426,  -9.26054478]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.87295151,  -9.77221584,  -7.06542110,  -6.92552185,  -6.61218452,
           -6.98795891,  -6.45422077,  -7.64116478, -10.70925331,  -9.26054478],
         [ -9.87295151,  -9.77221584,  -7.06542110,  -6.92552185,  -6.61218452,
           -6.98795891,  -6.45422077,  -7.64116478, -10.70925331,  -9.26054478]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.13989925, -0.31333733, -0.47130108]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]],


         [[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]],


         [[[-1.79841268, -1.94126987, -1.67142856,  ..., -1.56031740,
            -1.75079370, -1.76666665],
           [-1.62380958, -1.92539680, -1.78253973,  ..., -1.57619035,
            -1.71904767, -1.75079370],
           [-1.38571417, -1.86190474, -1.86190474,  ..., -1.56031740,
            -1.68730164, -1.73492062],
           ...,
           [-0.14761895, -0.52857143, -0.63968253,  ..., -0.25873005,
            -0.32222211, -0.38571417],
           [-0.00476181, -0.36984116, -0.67142856,  ..., -0.33809513,
            -0.38571417, -0.48095238],
           [ 0.01111121, -0.03650784, -0.25873005,  ..., -0.35396814,
            -0.33809513, -0.41746020]],

          [[-1.80354273, -1.90016103, -1.75523353,  ..., -1.65861523,
            -1.81964576, -1.78743970],
           [-1.69082129, -1.88405800, -1.83574879,  ..., -1.67471826,
            -1.77133656, -1.77133656],
           [-1.54589367, -1.86795497, -1.91626418,  ..., -1.64251208,
            -1.75523353, -1.77133656],
           ...,
           [-0.40257636, -0.83735907, -0.91787434,  ..., -0.49919480,
            -0.54750401, -0.61191624],
           [-0.22544271, -0.64412236, -0.90177131,  ..., -0.61191624,
            -0.66022539, -0.74074072],
           [-0.16103047, -0.25764883, -0.46698871,  ..., -0.67632848,
            -0.66022539, -0.74074072]],

          [[-1.39280367, -1.58770621, -1.34782624,  ..., -1.28785622,
            -1.45277369, -1.43778121],
           [-1.25787115, -1.55772126, -1.43778121,  ..., -1.30284870,
            -1.40779614, -1.40779614],
           [-1.04797614, -1.48275876, -1.51274371,  ..., -1.28785622,
            -1.39280367, -1.40779614],
           ...,
           [ 0.13643195, -0.49325335, -0.83808094,  ...,  0.19640197,
             0.15142445,  0.09145443],
           [ 0.33133450, -0.19340314, -0.61319339,  ...,  0.07646193,
             0.03148442, -0.04347810],
           [ 0.52623707,  0.39130452,  0.13643195,  ...,  0.01649191,
             0.01649191, -0.05847061]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0742 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.22711134, -6.61452389, -3.28024340, -3.07715249, -3.65528822,
         -3.21469426, -1.80790162, -3.44135714, -7.19001961, -5.18115664]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 427] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 427] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 192] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.43010759,  2.73373127, -0.20912015,  0.11641049,  0.11481588,
         -1.58735907, -0.18466654,  3.42027831,  1.36505198]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.22711134, -6.61452389, -3.28024340, -3.07715249, -3.65528822,
         -3.21469426, -1.80790162, -3.44135714, -7.19001961, -5.18115664]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.22711134, -6.61452293, -3.28024387, -3.07715273, -3.65528846,
          -3.21469450, -1.80790162, -3.44135761, -7.19001865, -5.18115664],
         [-6.22711134, -6.61452293, -3.28024387, -3.07715273, -3.65528846,
          -3.21469450, -1.80790162, -3.44135761, -7.19001865, -5.18115664]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.20309114, -1.26925111,  0.36420488]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]],


         [[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]],


         [[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0737 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.63098383, -5.91123009, -1.57904100, -1.50031447, -3.17599440,
         -1.57833910, -2.31312609, -2.17043972, -5.16499329, -4.05005884]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [429]; unstable size 429; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 115, 1, 429] with unstable size 114 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 429] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 429] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [114]; unstable size 114; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 114] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 114] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.02613175,  3.04000401, -0.86533892, -0.93197477,  0.78377461,
         -0.84204781, -0.27393401,  2.37316871,  1.32241940]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.63098383, -5.91123009, -1.57904100, -1.50031447, -3.17599440,
         -1.57833910, -2.31312609, -2.17043972, -5.16499329, -4.05005884]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.63098431, -5.91123009, -1.57904124, -1.50031507, -3.17599440,
          -1.57833958, -2.31312585, -2.17043996, -5.16499329, -4.05005884],
         [-2.63098431, -5.91123009, -1.57904124, -1.50031507, -3.17599440,
          -1.57833958, -2.31312585, -2.17043996, -5.16499329, -4.05005884]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.59139872, -0.67012489, -0.59210038,  0.14268589]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0792 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.53942776,  -7.02883530,  -7.54472733, -10.47971630,  -7.86964130,
         -10.67128658, -10.97943497,  -9.78617668,  -5.69757843,  -6.90828276]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [473]; unstable size 473; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 141, 1, 473] with unstable size 140 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 1, 1, 473] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 473] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [140]; unstable size 140; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 1, 1, 140] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.97586250,  1.62177134,  4.44206476,  1.95841980,  4.61180305,
          4.90358877,  3.71702051, -0.18866634,  0.87091970]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.53942776,  -7.02883530,  -7.54472733, -10.47971630,  -7.86964130,
         -10.67128658, -10.97943497,  -9.78617668,  -5.69757843,  -6.90828276]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.34467602,  -6.78079128,  -7.36285162, -10.22102642,  -7.63834572,
          -10.41161633, -10.81610203,  -9.54494476,  -5.22521114,  -6.57947111]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11946487]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0066 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0759 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.99526882, -8.88451767, -3.74724054, -4.25434780, -3.80330396,
         -4.31974983, -2.96723056, -5.10482168, -9.22820282, -7.71018076]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 442] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 442] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 188] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.31716251, 5.14074612, 0.38760489, 0.92174959, 0.43740439, 0.97805089,
         1.55073750, 5.43588734, 3.94455695]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0619 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.29222870,  -9.06495857,  -5.48218775,  -5.67955399,  -5.15304756,
          -5.78769970,  -4.06756973,  -5.97489452, -10.72794914,  -8.75968742]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [344]; unstable size 344; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 344] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 344] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 344] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 166] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.44414234, 4.29334497, 0.94329727, 1.21160614, 0.62566411, 1.30977714,
         1.30732989, 5.79046440, 4.05936241]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0657 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.00760698, -10.36704826,  -7.93206787,  -9.08809185,  -9.34877014,
          -9.23899841, -10.37455654,  -9.37908459,  -8.12404442, -10.51943302]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 159, 1, 377] with unstable size 158 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 377] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [158]; unstable size 158; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 158] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 158] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.70369053, 1.60599136, 2.61762953, 2.92221189, 2.76581216, 3.82137728,
         2.85164261, 1.76453435, 4.06818771]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0622 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.83257341, -6.46854591, -5.99145317, -5.71124935, -5.55805302,
         -5.72428894, -7.17641068, -6.33211374, -1.95075095, -5.86147213]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [468]; unstable size 468; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 468] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 468] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 468] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 180] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.54666638, 3.82981730, 3.37250423, 2.99276829, 2.92181778, 2.99155474,
         4.37545872, 3.59890223, 3.20619917]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0723 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.92135620, -9.33125305, -5.36672211, -5.52371502, -5.86994457,
         -5.72914362, -4.85611820, -7.33439922, -7.56188965, -8.56555939]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 184, 1, 544] with unstable size 183 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 544] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 183] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.39630222, 3.45109177, 0.09544992, 0.32944334, 0.53940797, 0.51911551,
         1.82263887, 1.84724069, 2.81309223]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0625 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.31921101, -8.17862988, -3.92548275, -4.37522030, -3.57966661,
         -4.41261387, -3.19976306, -4.81196594, -8.46736908, -7.38388491]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [501]; unstable size 501; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 223, 1, 501] with unstable size 222 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 501] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 501] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 222] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.06676197,  2.64715958, -0.83596241, -0.06112341, -1.19111848,
         -1.62032008, -0.01587445,  3.07019234,  2.02515411]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.31921101, -8.17862988, -3.92548275, -4.37522030, -3.57966661,
         -4.41261387, -3.19976306, -4.81196594, -8.46736908, -7.38388491]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.31921053, -8.17862988, -3.92548323, -4.37522030, -3.57966733,
          -4.41261482, -3.19976282, -4.81196690, -8.46736908, -7.38388443],
         [-7.31921053, -8.17862988, -3.92548323, -4.37522030, -3.57966733,
          -4.41261482, -3.19976282, -4.81196690, -8.46736908, -7.38388443]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.48713160, -0.03739452, -0.83294749, -1.21285200,  0.39935207]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0755 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.73774433, -9.38230991, -5.25654364, -6.28954697, -4.75454044,
         -6.38296413, -5.13899040, -6.38740015, -9.45212460, -9.40668297]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [644]; unstable size 644; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 644] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 644] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 644] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 232] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.87710190,  3.18848825,  0.69205034, -0.69066864,  0.77880299,
         -0.48637587,  0.73772764,  3.31828928,  3.26127815]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.73774433, -9.38230991, -5.25654364, -6.28954697, -4.75454044,
         -6.38296413, -5.13899040, -6.38740015, -9.45212460, -9.40668297]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.73774529, -9.38231087, -5.25654459, -6.28954792, -4.75454140,
          -6.38296461, -5.13899136, -6.38740110, -9.45212364, -9.40668201],
         [-7.73774529, -9.38231087, -5.25654459, -6.28954792, -4.75454140,
          -6.38296461, -5.13899136, -6.38740110, -9.45212364, -9.40668201]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.50200319, -0.11755323]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.84603173, -0.87777776, -0.86190474,  ..., -0.36984116,
            -0.36984116, -0.36984116],
           [-0.86190474, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           [-0.84603173, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           ...,
           [-0.52857143, -0.49682540, -0.48095238,  ..., -0.16349196,
            -0.13174593, -0.32222211],
           [-0.46507925, -0.48095238, -0.48095238,  ..., -0.30634910,
            -0.22698402, -0.27460307],
           [-0.43333322, -0.43333322, -0.48095238,  ..., -0.38571417,
            -0.27460307, -0.16349196]],

          [[-0.96618354, -0.99838966, -0.98228657,  ..., -0.45088565,
            -0.45088565, -0.45088565],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           ...,
           [-0.80515295, -0.82125598, -0.83735907,  ..., -0.51529789,
            -0.51529789, -0.74074072],
           [-0.78904986, -0.80515295, -0.82125598,  ..., -0.64412236,
            -0.57971013, -0.64412236],
           [-0.77294683, -0.78904986, -0.78904986,  ..., -0.72463763,
            -0.62801927, -0.54750401]],

          [[-1.00299859, -1.01799107, -1.01799107,  ..., -0.71814090,
            -0.73313338, -0.71814090],
           [-1.01799107, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           [-1.00299859, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           ...,
           [-0.98800600, -0.98800600, -0.97301346,  ..., -0.52323836,
            -0.47826082, -0.67316341],
           [-0.95802099, -0.97301346, -0.97301346,  ..., -0.64317840,
            -0.55322337, -0.61319339],
           [-0.95802099, -0.98800600, -1.01799107,  ..., -0.71814090,
            -0.59820086, -0.50824583]]],


         [[[-0.84603173, -0.87777776, -0.86190474,  ..., -0.36984116,
            -0.36984116, -0.36984116],
           [-0.86190474, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           [-0.84603173, -0.87777776, -0.87777776,  ..., -0.35396814,
            -0.35396814, -0.35396814],
           ...,
           [-0.52857143, -0.49682540, -0.48095238,  ..., -0.16349196,
            -0.13174593, -0.32222211],
           [-0.46507925, -0.48095238, -0.48095238,  ..., -0.30634910,
            -0.22698402, -0.27460307],
           [-0.43333322, -0.43333322, -0.48095238,  ..., -0.38571417,
            -0.27460307, -0.16349196]],

          [[-0.96618354, -0.99838966, -0.98228657,  ..., -0.45088565,
            -0.45088565, -0.45088565],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           [-0.98228657, -0.99838966, -0.99838966,  ..., -0.43478248,
            -0.43478248, -0.43478248],
           ...,
           [-0.80515295, -0.82125598, -0.83735907,  ..., -0.51529789,
            -0.51529789, -0.74074072],
           [-0.78904986, -0.80515295, -0.82125598,  ..., -0.64412236,
            -0.57971013, -0.64412236],
           [-0.77294683, -0.78904986, -0.78904986,  ..., -0.72463763,
            -0.62801927, -0.54750401]],

          [[-1.00299859, -1.01799107, -1.01799107,  ..., -0.71814090,
            -0.73313338, -0.71814090],
           [-1.01799107, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           [-1.00299859, -1.01799107, -1.01799107,  ..., -0.70314842,
            -0.70314842, -0.70314842],
           ...,
           [-0.98800600, -0.98800600, -0.97301346,  ..., -0.52323836,
            -0.47826082, -0.67316341],
           [-0.95802099, -0.97301346, -0.97301346,  ..., -0.64317840,
            -0.55322337, -0.61319339],
           [-0.95802099, -0.98800600, -1.01799107,  ..., -0.71814090,
            -0.59820086, -0.50824583]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0712 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879883,  -8.99937153,
          -9.13003254,  -9.50150967, -10.35948181,  -9.91758919, -10.61350632]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 508] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 508] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 197] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.60292816, -2.29249477, -2.02272058, -2.05514479, -1.91961002,
         -1.48416185, -0.73623347, -1.02746487,  0.09661871]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879883,  -8.99937153,
          -9.13003254,  -9.50150967, -10.35948181,  -9.91758919, -10.61350632]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.38197994, -10.24376202,  -8.79766655,  -9.01879978,  -8.99937153,
           -9.13003254,  -9.50150967, -10.35948181,  -9.91758823, -10.61350632],
         [ -9.38197994, -10.24376202,  -8.79766655,  -9.01879978,  -8.99937153,
           -9.13003254,  -9.50150967, -10.35948181,  -9.91758823, -10.61350632]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.86178207, -1.44609547, -1.22496223, -1.24439049, -1.11372948,
          -0.74225235,  0.11571980, -0.32617378]]], device='cuda:0')
number of violation:  7
clean attack image tensor([[[[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         ...,


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0801 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.77434063, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670811,
          -6.53051615,  -7.14518929,  -8.42440701, -10.45952797, -10.54728985]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [695]; unstable size 695; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 695] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 695] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 695] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 199] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70145559,  3.44708276, -0.32370079, -0.09620173,  0.17705202,
          0.33821183,  1.44863999,  3.27855825,  3.35601664]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.77434063, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670811,
          -6.53051615,  -7.14518929,  -8.42440701, -10.45952797, -10.54728985]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.77434158, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670906,
           -6.53051615,  -7.14519024,  -8.42440796, -10.45952892, -10.54729080],
         [ -8.77434158, -10.69703484,  -6.51883745,  -6.45090008,  -7.04670906,
           -6.53051615,  -7.14519024,  -8.42440796, -10.45952892, -10.54729080]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01167870, -0.07961607]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0497 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.38532257, -6.06158733, -5.10214949, -7.15757179, -4.90412474,
         -7.31758070, -7.94371891, -6.91108131, -0.65056217, -5.11655426]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [488]; unstable size 488; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 488] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 488] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 488] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.34641814, 4.86730623, 3.89913702, 5.95862436, 3.74042487, 6.11034679,
         6.67927408, 5.60504532, 3.94073176]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0654 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
         -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [425]; unstable size 425; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 425] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 425] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 425] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 199] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.02166939,  3.21041322,  0.75644529, -0.07432845,  0.52634156,
          0.06094790,  0.40918601,  4.12974262,  2.57223129]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
         -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.23477888, -5.68500996, -2.55144548, -1.29489720, -2.30533838,
          -1.34893715, -1.73671746, -2.07432318, -6.50224018, -4.89857721]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05403996]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.82063496,  0.82063496,  0.88412702,  ..., -0.89365077,
            -0.86190474, -0.83015871],
           [ 0.99523818,  1.12222254,  1.43968284,  ..., -0.89365077,
            -0.90952379, -0.90952379],
           [ 1.47142887,  1.72539711,  1.93174624,  ..., -0.84603173,
            -0.90952379, -0.94126981],
           ...,
           [ 0.96349210,  0.70952386,  0.48730165,  ...,  0.04285724,
             0.16984135,  0.15396833],
           [ 1.07460344,  0.77301592,  0.58253974,  ...,  0.72539687,
             0.20158738,  0.29682547],
           [ 1.01111114,  0.78888893,  0.45555562,  ...,  1.63015902,
             1.05873048,  0.86825401]],

          [[-0.32206106, -0.41867942, -0.40257636,  ..., -1.22383249,
            -1.14331722, -1.04669881],
           [-0.19323659, -0.03220600,  0.46698883,  ..., -1.30434775,
            -1.27214170, -1.22383249],
           [ 0.56360716,  1.01449287,  1.23993587,  ..., -1.41706920,
            -1.44927526, -1.43317223],
           ...,
           [-0.43478248, -0.66022539, -0.85346210,  ..., -0.75684375,
            -0.66022539, -0.64412236],
           [-0.24154577, -0.51529789, -0.77294683,  ..., -0.45088565,
            -0.80515295, -0.85346210],
           [-0.22544271, -0.41867942, -0.80515295,  ..., -0.03220600,
            -0.45088565, -0.74074072]],

          [[-0.64317840, -0.74812591, -0.79310340,  ..., -1.06296861,
            -0.95802099, -0.85307342],
           [-0.55322337, -0.41829082, -0.04347810,  ..., -1.15292358,
            -1.10794616, -1.06296861],
           [ 0.31634200,  0.58620709,  0.55622208,  ..., -1.30284870,
            -1.30284870, -1.30284870],
           ...,
           [-0.91304344, -1.04797614, -1.13793111,  ..., -0.98800600,
            -0.89805096, -0.86806595],
           [-0.77811092, -0.98800600, -1.09295356,  ..., -0.88305843,
            -1.03298354, -1.10794616],
           [-0.74812591, -0.91304344, -1.12293863,  ..., -0.73313338,
            -0.98800600, -1.18290865]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0698 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.14186001,  -7.07143116, -10.46663189, -11.16532612, -10.33747673,
         -11.26323891, -10.40632534, -10.15031719,  -8.55157280,  -8.28031540]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 538] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 538] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 206] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.38833761, 2.48165607, 3.18024445, 2.31973934, 3.26281786, 2.38422155,
         2.02770805, 0.85605979, 0.95938033]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0753 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.38072777, -8.34097099, -7.53324938, -7.26011181, -6.91416168,
         -7.30822277, -7.39192200, -8.73349857, -8.18290806, -9.00568867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [791]; unstable size 791; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 190, 1, 791] with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 791] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 791] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 189] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.38350573,  0.14631462, -0.09611964, -0.06322638, -0.81499457,
         -0.28940237,  0.85859978,  0.09628749,  0.96366215]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.38072777, -8.34097099, -7.53324938, -7.26011181, -6.91416168,
         -7.30822277, -7.39192200, -8.73349857, -8.18290806, -9.00568867]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.38072777, -8.34097099, -7.53324986, -7.26011276, -6.91416264,
          -7.30822325, -7.39192200, -8.73349953, -8.18290710, -9.00568962],
         [-8.38072777, -8.34097099, -7.53324986, -7.26011276, -6.91416264,
          -7.30822325, -7.39192200, -8.73349953, -8.18290710, -9.00568962]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.22502661, -0.04811049, -0.39406061,  0.08369875]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0776 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -4.23172474, -11.22384930,  -5.34106207,  -9.06499481,  -7.32086372,
          -9.25464153, -10.79966545, -10.12152672,  -6.76570702, -10.71261692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [459]; unstable size 459; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 131, 1, 459] with unstable size 130 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 459] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 459] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [130]; unstable size 130; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 130] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 130] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.35711479, 0.89513063, 4.55454111, 2.81934166, 4.73727608, 6.20089054,
         5.47830963, 2.08739543, 5.85482740]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0579 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
          -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [504]; unstable size 504; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 504] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 504] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 504] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 199] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.36880374,  5.11926985,  0.38846827,  0.01013416,  0.33952880,
         -0.05993855,  1.64709640,  4.65361881,  4.72898006]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
          -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.72it/s]100%|██████████| 1/1 [00:00<00:00,  7.71it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.49543190, -11.39906597,  -6.25923395,  -5.68034649,  -6.18490219,
           -5.65740013,  -5.70066929,  -7.64016151, -10.87086868, -11.04580212]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04326916]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1327 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.35684585571289
alpha/beta optimization time: 1.1826286315917969
initial alpha-crown bounds: tensor([[ 3.39546871,  5.14681578,  0.40474558,  0.01093243,  0.35315764,
         -0.05082333,  1.65623391,  4.68375731,  4.75655603]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.050823330879211426
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.5894 seconds.
lower bounds for all target labels: [3.3954687118530273, 5.146815776824951, 0.40474557876586914, 0.010932430624961853, 0.3531566858291626, -0.050823330879211426, 1.6562339067459106, 4.683757305145264, 4.756556034088135]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [5]
start creating model mps for candidates: ['lay/16_5']
parallel save mip model to /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 262983 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.56993079185486
Verifying property 0 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.146815776824951.

Properties batch 1, size 1
Remaining timeout: 198.41926097869873
Verifying property 1 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.756556034088135.

Properties batch 2, size 1
Remaining timeout: 198.32636046409607
Verifying property 2 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.683757305145264.

Properties batch 3, size 1
Remaining timeout: 198.23290181159973
Verifying property 3 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.3954687118530273.

Properties batch 4, size 1
Remaining timeout: 198.14175057411194
Verifying property 4 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6562339067459106.

Properties batch 5, size 1
Remaining timeout: 198.05116271972656
Verifying property 5 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.40474557876586914.

Properties batch 6, size 1
Remaining timeout: 197.95210027694702
Verifying property 6 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.353157639503479.

Properties batch 7, size 1
Remaining timeout: 197.84662175178528
Verifying property 7 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.010932430624961853.

Properties batch 8, size 1
Remaining timeout: 197.7367935180664
Verifying property 8 with 1 instances.
##### Instance 52 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05082333]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.30221272, -11.14697456,  -6.05900908,  -5.33924294,  -5.99430466,
         -5.30768108,  -5.64619446,  -7.31474876, -10.63627148, -10.70530987],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05082333]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 504
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 196
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 705
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006058216094970703
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-12, 76] 
split level 1: [/input-8, 1820] 
split level 2: [/input-8, 531] 
split level 3: [/input-8, 1890] 
split level 4: [/input-8, 1819] 
split level 5: [/input-8, 1876] 
split level 6: [/input-8, 1945] 
split level 7: [/input-8, 1889] 
pruning_in_iteration open status: True
ratio of positive domain = 137 / 256 = 0.53515625
pruning-in-iteration extra time: 0.005052804946899414
Time: prepare 0.0032    bound 0.4945    transfer 0.0025    finalize 0.0015    func 0.5017    
Accumulated time: func 0.5017    prepare 0.0036    bound 0.4945    transfer 0.0025    finalize 0.0015    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02992 (8), -0.02894 (8), -0.02858 (8), -0.02652 (8), -0.02642 (8), -0.02601 (8), -0.02544 (8), -0.02512 (8), -0.02491 (8), -0.02448 (8), -0.02442 (8), -0.02430 (8), -0.02344 (8), -0.02307 (8), -0.02305 (8), -0.02279 (8), -0.02261 (8), -0.02229 (8), -0.02209 (8), -0.02203 (8), 
Length of domains: 119
Time: pickout 0.0004    decision 0.0230    set_bounds 0.0167    solve 0.5017    add 0.0711    
Accumulated time: pickout 0.0004    decision 0.0230    set_bounds 0.0167    solve 0.5017    add 0.0711    
Current (lb-rhs): -0.02991783618927002
119 domains visited
Cumulative time: 0.6252930164337158

BaB round 2
Fetch cut process: mps for current label is not ready yet
batch: 119
splitting decisions: 
split level 0: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
pruning_in_iteration open status: True
ratio of positive domain = 122 / 238 = 0.5126050420168067
pruning-in-iteration extra time: 0.004416704177856445
Time: prepare 0.0046    bound 0.1231    transfer 0.0023    finalize 0.0013    func 0.1314    
Accumulated time: func 0.6330    prepare 0.0084    bound 0.6176    transfer 0.0048    finalize 0.0028    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02845 (9), -0.02750 (9), -0.02712 (9), -0.02503 (9), -0.02496 (9), -0.02454 (9), -0.02400 (9), -0.02366 (9), -0.02346 (9), -0.02301 (9), -0.02285 (9), -0.02273 (9), -0.02199 (9), -0.02159 (9), -0.02142 (9), -0.02131 (9), -0.02091 (9), -0.02060 (9), -0.02048 (9), -0.02042 (9), 
Length of domains: 116
Time: pickout 0.0128    decision 0.0503    set_bounds 0.0055    solve 0.1314    add 0.0682    
Accumulated time: pickout 0.0132    decision 0.0733    set_bounds 0.0222    solve 0.6332    add 0.1393    
Current (lb-rhs): -0.028450846672058105
235 domains visited
Cumulative time: 0.9012088775634766

BaB round 3
Fetch cut process: mps for current label is not ready yet
batch: 116
splitting decisions: 
split level 0: [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] [/input-8, 1880] 
pruning_in_iteration open status: True
ratio of positive domain = 56 / 232 = 0.24137931034482762
pruning-in-iteration extra time: 0.00414729118347168
Time: prepare 0.0048    bound 0.1325    transfer 0.0007    finalize 0.0012    func 0.1393    
Accumulated time: func 0.7723    prepare 0.0133    bound 0.7501    transfer 0.0055    finalize 0.0040    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02798 (10), -0.02714 (10), -0.02667 (10), -0.02465 (10), -0.02451 (10), -0.02408 (10), -0.02366 (10), -0.02322 (10), -0.02312 (10), -0.02254 (10), -0.02238 (10), -0.02165 (10), -0.02161 (10), -0.02121 (10), -0.02085 (10), -0.02078 (10), -0.02009 (10), -0.01995 (10), -0.01992 (10), -0.01984 (10), 
Length of domains: 176
Time: pickout 0.0151    decision 0.0172    set_bounds 0.0046    solve 0.1394    add 0.0682    
Accumulated time: pickout 0.0283    decision 0.0905    set_bounds 0.0268    solve 0.7725    add 0.2075    
Current (lb-rhs): -0.027983903884887695
411 domains visited
Cumulative time: 1.1531157493591309

BaB round 4
Fetch cut process: mps for current label is not ready yet
batch: 176
splitting decisions: 
split level 0: [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] 
pruning_in_iteration open status: True
ratio of positive domain = 107 / 352 = 0.3039772727272727
pruning-in-iteration extra time: 0.004164934158325195
Time: prepare 0.0071    bound 0.1701    transfer 0.0026    finalize 0.0019    func 0.1818    
Accumulated time: func 0.9541    prepare 0.0206    bound 0.9202    transfer 0.0081    finalize 0.0059    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02724 (11), -0.02640 (11), -0.02593 (11), -0.02388 (11), -0.02377 (11), -0.02334 (11), -0.02294 (11), -0.02250 (11), -0.02241 (11), -0.02182 (11), -0.02161 (11), -0.02097 (11), -0.02092 (11), -0.02048 (11), -0.02012 (11), -0.01984 (11), -0.01958 (11), -0.01907 (11), -0.01902 (11), -0.01899 (11), 
Length of domains: 245
Time: pickout 0.0159    decision 0.0196    set_bounds 0.0072    solve 0.1819    add 0.0961    
Accumulated time: pickout 0.0442    decision 0.1102    set_bounds 0.0340    solve 0.9544    add 0.3036    
Current (lb-rhs): -0.027242302894592285
656 domains visited
Cumulative time: 1.481633186340332

BaB round 5
Fetch cut process: mps for current label is not ready yet
batch: 245
splitting decisions: 
split level 0: [/input-8, 1877] [/input, 1992] [/input-8, 1877] [/input, 1992] [/input, 1941] [/input, 1941] [/input, 1941] [/input, 1941] [/input-8, 1877] [/input, 1992] 
pruning_in_iteration open status: False
ratio of positive domain = 95 / 490 = 0.19387755102040816
pruning-in-iteration extra time: 5.602836608886719e-05
Time: prepare 0.0109    bound 0.0986    transfer 0.0027    finalize 0.0024    func 0.1147    
Accumulated time: func 1.0689    prepare 0.0318    bound 1.0188    transfer 0.0109    finalize 0.0083    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02587 (12), -0.02508 (12), -0.02499 (12), -0.02387 (12), -0.02372 (12), -0.02319 (12), -0.02305 (12), -0.02240 (12), -0.02225 (12), -0.02169 (12), -0.02152 (12), -0.02128 (12), -0.02125 (12), -0.02076 (12), -0.02072 (12), -0.02040 (12), -0.02014 (12), -0.01974 (12), -0.01970 (12), -0.01963 (12), 
Length of domains: 393
Time: pickout 0.0139    decision 0.0241    set_bounds 0.0079    solve 0.1148    add 0.0844    
Accumulated time: pickout 0.0581    decision 0.1343    set_bounds 0.0419    solve 1.0693    add 0.3880    
Current (lb-rhs): -0.02586948871612549
1049 domains visited
Cumulative time: 1.7381048202514648

BaB round 6
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0042
batch: 393
splitting decisions: 
split level 0: [/input, 1992] [/input-8, 1877] [/input, 1992] [/input-8, 1877] [/input-8, 1877] [/input, 1992] [/input-8, 1877] [/input, 1992] [/input, 1992] [/input-8, 1877] 
pruning_in_iteration open status: False
ratio of positive domain = 144 / 786 = 0.18320610687022898
pruning-in-iteration extra time: 7.343292236328125e-05
Time: prepare 0.0183    bound 0.1004    transfer 0.0050    finalize 0.0042    func 0.1280    
Accumulated time: func 1.1968    prepare 0.0503    bound 1.1192    transfer 0.0159    finalize 0.0125    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02502 (13), -0.02415 (13), -0.02388 (13), -0.02368 (13), -0.02300 (13), -0.02282 (13), -0.02249 (13), -0.02245 (13), -0.02235 (13), -0.02185 (13), -0.02170 (13), -0.02119 (13), -0.02107 (13), -0.02100 (13), -0.02094 (13), -0.02049 (13), -0.02044 (13), -0.02040 (13), -0.02036 (13), -0.02032 (13), 
Length of domains: 635
Time: pickout 0.0155    decision 0.0325    set_bounds 0.0139    solve 0.1281    add 0.0850    
Accumulated time: pickout 0.0736    decision 0.1669    set_bounds 0.0558    solve 1.1974    add 0.4730    
Current (lb-rhs): -0.02502298355102539
1684 domains visited
Cumulative time: 2.024980068206787

BaB round 7
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0033
batch: 635
splitting decisions: 
split level 0: [/input-8, 1969] [/input-8, 1893] [/input-8, 1969] [/input-8, 1969] [/input, 1992] [/input-8, 1877] [/input, 1992] [/input-8, 1877] [/input-8, 1893] [/input-8, 1893] 
pruning_in_iteration open status: False
ratio of positive domain = 201 / 1270 = 0.15826771653543303
pruning-in-iteration extra time: 5.5789947509765625e-05
Time: prepare 0.0300    bound 0.1097    transfer 0.0065    finalize 0.0072    func 0.1541    
Accumulated time: func 1.3509    prepare 0.0805    bound 1.2289    transfer 0.0224    finalize 0.0197    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02382 (14), -0.02295 (14), -0.02240 (14), -0.02240 (14), -0.02239 (14), -0.02228 (14), -0.02180 (14), -0.02165 (14), -0.02159 (14), -0.02156 (14), -0.02155 (14), -0.02115 (14), -0.02110 (14), -0.02087 (14), -0.02045 (14), -0.02043 (14), -0.02035 (14), -0.02014 (14), -0.02003 (14), -0.02000 (14), 
Length of domains: 1063
Time: pickout 0.0228    decision 0.0454    set_bounds 0.0241    solve 0.1543    add 0.0910    
Accumulated time: pickout 0.0964    decision 0.2123    set_bounds 0.0799    solve 1.3517    add 0.5640    
Current (lb-rhs): -0.023824572563171387
2747 domains visited
Cumulative time: 2.3745980262756348

BaB round 8
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
batch: 1063
splitting decisions: 
split level 0: [/input-8, 1893] [/input-8, 1969] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1969] [/input-8, 1893] 
pruning_in_iteration open status: False
ratio of positive domain = 393 / 2126 = 0.18485418626528693
pruning-in-iteration extra time: 5.6743621826171875e-05
Time: prepare 0.0543    bound 0.1375    transfer 0.0113    finalize 0.0144    func 0.2177    
Accumulated time: func 1.5687    prepare 0.1350    bound 1.3664    transfer 0.0336    finalize 0.0341    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02306 (15), -0.02219 (15), -0.02163 (15), -0.02156 (15), -0.02152 (15), -0.02151 (15), -0.02104 (15), -0.02102 (15), -0.02089 (15), -0.02072 (15), -0.02068 (15), -0.02039 (15), -0.02019 (15), -0.02018 (15), -0.01999 (15), -0.01995 (15), -0.01994 (15), -0.01987 (15), -0.01963 (15), -0.01962 (15), 
Length of domains: 1711
Time: pickout 0.0161    decision 0.0699    set_bounds 0.0403    solve 0.2182    add 0.0960    
Accumulated time: pickout 0.1126    decision 0.2822    set_bounds 0.1202    solve 1.5698    add 0.6600    
Current (lb-rhs): -0.023060202598571777
4458 domains visited
Cumulative time: 2.828829288482666

BaB round 9
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
batch: 1711
splitting decisions: 
split level 0: [/input, 1912] [/input-8, 802] [/input, 1891] [/input-8, 1969] [/input, 421] [/input, 421] [/input, 1941] [/input, 1941] [/input, 1941] [/input, 1941] 
pruning_in_iteration open status: False
ratio of positive domain = 543 / 3422 = 0.15867913500876685
pruning-in-iteration extra time: 6.723403930664062e-05
Time: prepare 0.0888    bound 0.1826    transfer 0.0162    finalize 0.0189    func 0.4777    
Accumulated time: func 2.0464    prepare 0.2241    bound 1.5490    transfer 0.0499    finalize 0.0530    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02265 (16), -0.02178 (16), -0.02118 (16), -0.02110 (16), -0.02106 (16), -0.02081 (16), -0.02070 (16), -0.02066 (16), -0.02060 (16), -0.02026 (16), -0.02022 (16), -0.02012 (16), -0.02001 (16), -0.02000 (16), -0.01993 (16), -0.01976 (16), -0.01969 (16), -0.01966 (16), -0.01945 (16), -0.01938 (16), 
Length of domains: 2854
Time: pickout 0.0312    decision 0.1056    set_bounds 0.0671    solve 0.4783    add 0.1284    
Accumulated time: pickout 0.1438    decision 0.3877    set_bounds 0.1874    solve 2.0481    add 0.7884    
Current (lb-rhs): -0.022649526596069336
7312 domains visited
Cumulative time: 3.6507387161254883

BaB round 10
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
batch: 2854
splitting decisions: 
split level 0: [/input-8, 802] [/input, 1941] [/input, 1977] [/input-8, 1893] [/input-8, 1893] [/input-8, 802] [/input-8, 802] [/input-8, 802] [/input-8, 802] [/input-8, 1893] 
pruning_in_iteration open status: False
ratio of positive domain = 1048 / 5708 = 0.1836019621583742
pruning-in-iteration extra time: 7.2479248046875e-05
Time: prepare 0.1523    bound 0.2737    transfer 0.0326    finalize 0.0333    func 0.4925    
Accumulated time: func 2.5388    prepare 0.3768    bound 1.8227    transfer 0.0825    finalize 0.0863    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02115 (17), -0.02104 (17), -0.02029 (17), -0.02017 (17), -0.01995 (17), -0.01983 (17), -0.01969 (17), -0.01966 (17), -0.01958 (17), -0.01947 (17), -0.01941 (17), -0.01935 (17), -0.01918 (17), -0.01918 (17), -0.01909 (17), -0.01907 (17), -0.01906 (17), -0.01898 (17), -0.01898 (17), -0.01890 (17), 
Length of domains: 4636
Time: pickout 0.0588    decision 0.1720    set_bounds 0.1155    solve 0.4934    add 0.1799    
Accumulated time: pickout 0.2026    decision 0.5598    set_bounds 0.3028    solve 2.5415    add 0.9683    
Current (lb-rhs): -0.021152853965759277
11948 domains visited
Cumulative time: 4.68294620513916

BaB round 11
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
batch: 4096
splitting decisions: 
split level 0: [/input, 1978] [/input-8, 802] [/input-8, 802] [/input-8, 802] [/input, 1891] [/input, 1891] [/input, 1977] [/input, 1977] [/input-8, 802] [/input-8, 802] 
pruning_in_iteration open status: True
ratio of positive domain = 1710 / 8192 = 0.208740234375
pruning-in-iteration extra time: 0.0006349086761474609
Time: prepare 0.2204    bound 0.3672    transfer 0.0447    finalize 0.0461    func 0.6789    
Accumulated time: func 3.2178    prepare 0.5975    bound 2.1900    transfer 0.1272    finalize 0.1324    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02115 (17), -0.02029 (17), -0.02021 (18), -0.01947 (17), -0.01937 (18), -0.01936 (18), -0.01929 (18), -0.01918 (17), -0.01912 (18), -0.01912 (18), -0.01887 (18), -0.01884 (18), -0.01876 (18), -0.01866 (17), -0.01860 (18), -0.01859 (18), -0.01857 (18), -0.01853 (17), -0.01852 (17), -0.01851 (18), 
Length of domains: 7022
Time: pickout 0.0697    decision 0.4012    set_bounds 0.1678    solve 0.6804    add 0.1465    
Accumulated time: pickout 0.2723    decision 0.9609    set_bounds 0.4706    solve 3.2218    add 1.1148    
Current (lb-rhs): -0.021152853965759277
18430 domains visited
current_vram/total_varm: 10.1GB/99.9GB, batch_size increase to 8192
Cumulative time: 6.164968013763428

BaB round 12
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
batch: 7022
splitting decisions: 
split level 0: [/input, 1977] [/input, 1978] [/input-8, 802] [/input, 1912] [/input, 2712] [/input, 421] [/input, 1977] [/input-8, 802] [/input-8, 802] [/input-8, 802] 
pruning_in_iteration open status: True
ratio of positive domain = 3411 / 14044 = 0.24287952150384506
pruning-in-iteration extra time: 0.005254507064819336
Time: prepare 0.3790    bound 0.5452    transfer 0.0823    finalize 0.2482    func 1.2557    
Accumulated time: func 4.4734    prepare 0.9769    bound 2.7352    transfer 0.2095    finalize 0.3806    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02031 (18), -0.01966 (19), -0.01948 (18), -0.01923 (18), -0.01884 (19), -0.01882 (19), -0.01876 (19), -0.01871 (18), -0.01856 (19), -0.01833 (19), -0.01830 (18), -0.01827 (19), -0.01823 (19), -0.01822 (19), -0.01819 (18), -0.01807 (19), -0.01802 (19), -0.01802 (18), -0.01798 (19), -0.01797 (19), 
Length of domains: 10633
Time: pickout 0.1081    decision 0.5675    set_bounds 0.2829    solve 1.2581    add 0.2545    
Accumulated time: pickout 0.3804    decision 1.5285    set_bounds 0.7536    solve 4.4799    add 1.3693    
Current (lb-rhs): -0.020314931869506836
29063 domains visited
Cumulative time: 8.662979364395142

BaB round 13
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0025
batch: 8192
splitting decisions: 
split level 0: [/input, 1978] [/input-8, 1309] [/input-8, 1309] [/input-8, 802] [/input-8, 1309] [/input-8, 1309] [/input-8, 1309] [/input-8, 1309] [/input-8, 1309] [/input-8, 1309] 
pruning_in_iteration open status: True
ratio of positive domain = 5218 / 16384 = 0.3184814453125
pruning-in-iteration extra time: 0.00549006462097168
Time: prepare 0.4414    bound 0.5800    transfer 0.0893    finalize 0.0907    func 1.2025    
Accumulated time: func 5.6760    prepare 1.4187    bound 3.3152    transfer 0.2989    finalize 0.4713    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01977 (19), -0.01933 (20), -0.01923 (18), -0.01894 (19), -0.01849 (20), -0.01848 (20), -0.01840 (20), -0.01835 (19), -0.01819 (18), -0.01802 (18), -0.01799 (20), -0.01796 (18), -0.01787 (20), -0.01785 (19), -0.01776 (20), -0.01772 (19), -0.01770 (20), -0.01768 (20), -0.01765 (20), -0.01762 (20), 
Length of domains: 13607
Time: pickout 0.1290    decision 0.4970    set_bounds 0.5197    solve 1.4057    add 0.1620    
Accumulated time: pickout 0.5093    decision 2.0255    set_bounds 1.2733    solve 5.8856    add 1.5313    
Current (lb-rhs): -0.01977407932281494
40229 domains visited
current_vram/total_varm: 22.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 11.416831970214844

BaB round 14
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
batch: 13607
splitting decisions: 
split level 0: [/input, 1978] [/input, 1941] [/input, 1977] [/input, 1977] [/input, 1977] [/input, 1978] [/input, 2712] [/input, 1977] [/input, 1977] [/input, 1977] 
pruning_in_iteration open status: True
ratio of positive domain = 8691 / 27214 = 0.3193576835452341
pruning-in-iteration extra time: 0.005890369415283203
Time: prepare 0.7482    bound 0.9242    transfer 0.1504    finalize 0.4019    func 2.2261    
Accumulated time: func 7.9020    prepare 2.1673    bound 4.2395    transfer 0.4493    finalize 0.8732    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01943 (20), -0.01867 (19), -0.01860 (20), -0.01839 (21), -0.01814 (21), -0.01807 (21), -0.01796 (21), -0.01777 (21), -0.01768 (20), -0.01761 (19), -0.01751 (20), -0.01749 (19), -0.01741 (21), -0.01734 (21), -0.01731 (19), -0.01721 (19), -0.01720 (21), -0.01720 (20), -0.01705 (21), -0.01703 (21), 
Length of domains: 18523
Time: pickout 0.2191    decision 1.0282    set_bounds 0.5774    solve 2.2307    add 0.3251    
Accumulated time: pickout 0.7285    decision 3.0537    set_bounds 1.8507    solve 8.1163    add 1.8563    
Current (lb-rhs): -0.01943337917327881
58752 domains visited
Cumulative time: 15.85473918914795

BaB round 15
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.cuts: total 574 constraints, 29473 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.2506
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1891] [/input, 1978] [/input, 2712] [/input, 1891] [/input, 1891] [/input, 1955] [/input, 1912] [/input, 2712] [/input, 1912] [/input, 421] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018491744995117188
10 lb beta sum: 26305.14453125, worst 0.0010728836059570312

all verified at 10th iter
pruning_in_iteration open status: True
ratio of positive domain = 32768 / 32768 = 1.0
pruning-in-iteration extra time: 0.003115415573120117
Time: prepare 0.8939    bound 3.6396    transfer 0.1765    finalize 0.4658    func 5.3808    
Accumulated time: func 13.2828    prepare 3.0616    bound 7.8791    transfer 0.6258    finalize 1.3390    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01721 (19), -0.01603 (19), -0.01476 (20), -0.01462 (21), -0.01457 (19), -0.01438 (19), -0.01421 (21), -0.01416 (19), -0.01405 (19), -0.01400 (19), -0.01398 (20), -0.01389 (19), -0.01381 (20), -0.01360 (20), -0.01353 (20), -0.01349 (19), -0.01341 (19), -0.01333 (19), -0.01329 (19), -0.01328 (20), 
Length of domains: 2139
Time: pickout 0.2594    decision 1.7207    set_bounds 0.9768    solve 5.3871    add 0.0152    
Accumulated time: pickout 0.9878    decision 4.7744    set_bounds 2.8275    solve 13.5034    add 1.8715    
Current (lb-rhs): -0.01721024513244629
58752 domains visited
Cumulative time: 24.642971992492676

BaB round 16
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.cuts: total 999 constraints, 41878 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.3516
batch: 2139
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1309] [/input-8, 1309] [/input-8, 1309] [/input, 1978] [/input, 2712] [/input-8, 1309] [/input, 2712] [/input, 2712] [/input, 1978] [/input-8, 1309] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01664268970489502

all verified at 8th iter
pruning_in_iteration open status: True
ratio of positive domain = 4278 / 4278 = 1.0
pruning-in-iteration extra time: 0.002267599105834961
Time: prepare 0.2742    bound 0.4802    transfer 0.0190    finalize 0.0263    func 0.8275    
Accumulated time: func 14.1104    prepare 3.3361    bound 8.3593    transfer 0.6448    finalize 1.3653    
all_split False
Length of domains: 0
Time: pickout 0.0428    decision 0.1335    set_bounds 0.0936    solve 0.8284    add 0.0002    
Accumulated time: pickout 1.0306    decision 4.9079    set_bounds 2.9211    solve 14.3319    add 1.8717    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
58752 domains visited
Cumulative time: 26.12163543701172

found process to kill: terminal indx = 5
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.mps
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.cuts
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.indx
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=52_spec=5_30435156.log
found process for pidx=5
kill process for pidx=5
Result: safe in 28.7735 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.67231560, -12.31690121,  -9.13868904,  -9.91203594, -10.08119774,
         -10.03050518, -10.11687660,  -9.52802277, -13.05829144, -11.58372593]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [415]; unstable size 415; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 415] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 415] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 415] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 142] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.06250858,  1.38609815, -1.36709845, -0.49393940, -0.48505685,
         -0.38832164, -1.14975965,  2.17636347,  0.71444750]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.67231560, -12.31690121,  -9.13868904,  -9.91203594, -10.08119774,
         -10.03050518, -10.11687660,  -9.52802277, -13.05829144, -11.58372593]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.67231464, -12.31690121,  -9.13868713,  -9.91203594, -10.08119774,
          -10.03050327, -10.11687565,  -9.52802277, -13.05829048, -11.58372498],
         [ -9.67231464, -12.31690121,  -9.13868713,  -9.91203594, -10.08119774,
          -10.03050327, -10.11687565,  -9.52802277, -13.05829048, -11.58372498]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44456100, -0.97818851, -0.20483971, -0.03567791, -0.08637238,
          -0.58885288]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0844 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22662783, -5.64782429, -2.60211635, -3.16177058, -3.14393139,
         -3.25724936, -3.03231645, -2.89354324, -3.41767120, -4.93730450]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [530]; unstable size 530; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 530] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 530] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 530] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 159] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.37045446,  1.62803984, -1.37615514, -0.83468586, -0.86788630,
         -0.74519157, -0.99820888, -1.20427859,  0.93063664]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.22662783, -5.64782429, -2.60211635, -3.16177058, -3.14393139,
         -3.25724936, -3.03231645, -2.89354324, -3.41767120, -4.93730450]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.22662783, -5.64782429, -2.60211611, -3.16177034, -3.14393115,
          -3.25724936, -3.03231645, -2.89354324, -3.41767168, -4.93730497],
         [-4.22662783, -5.64782429, -2.60211611, -3.16177034, -3.14393115,
          -3.25724936, -3.03231645, -2.89354324, -3.41767168, -4.93730497]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.81555557, -0.25590134, -0.27374053, -0.16042233, -0.38535523,
          -0.52412844]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]],


         [[[ 1.42380977,  1.34444475,  1.42380977,  ...,  1.12222254,
             1.13809550,  1.24920666],
           [ 0.69365084,  0.56666672,  0.83650798,  ...,  1.15396857,
             1.15396857,  1.18571460],
           [-0.09999990, -0.19523799, -0.09999990,  ...,  1.04285717,
             0.75714290,  0.61428577],
           ...,
           [ 1.04285717,  0.93174607,  0.91587305,  ...,  1.01111114,
             0.97936511,  0.86825401],
           [ 0.93174607,  0.88412702,  0.91587305,  ...,  0.97936511,
             0.91587305,  0.85238099],
           [ 0.69365084,  0.59841275,  0.58253974,  ...,  0.93174607,
             0.91587305,  0.91587305]],

          [[ 1.70692456,  1.62640929,  1.70692456,  ...,  1.44927561,
             1.46537876,  1.59420323],
           [ 1.01449287,  0.86956531,  1.14331758,  ...,  1.51368785,
             1.56199706,  1.59420323],
           [ 0.25764906,  0.17713377,  0.27375212,  ...,  1.43317258,
             1.19162667,  1.04669893],
           ...,
           [ 1.25603890,  1.14331758,  1.12721443,  ...,  1.14331758,
             1.12721443,  1.01449287],
           [ 1.12721443,  1.07890511,  1.12721443,  ...,  1.11111140,
             1.07890511,  0.99838978],
           [ 0.90177143,  0.80515307,  0.78904998,  ...,  1.07890511,
             1.06280196,  1.06280196]],

          [[ 1.75562263,  1.68066013,  1.75562263,  ...,  1.69565260,
             1.75562263,  1.81559265],
           [ 0.88605714,  0.76611710,  1.00599718,  ...,  1.74063015,
             1.78560758,  1.77061510],
           [-0.17841063, -0.25337315, -0.16341813,  ...,  1.33583248,
             1.02098966,  0.85607213],
           ...,
           [ 1.30584753,  1.20089996,  1.18590748,  ...,  1.15592217,
             1.15592217,  1.05097473],
           [ 1.24587750,  1.20089996,  1.24587750,  ...,  1.12593722,
             1.11094475,  1.03598225],
           [ 0.99100471,  0.90104967,  0.88605714,  ...,  1.09595215,
             1.09595215,  1.09595215]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0807 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.00991821, -13.35237980,  -9.67140388, -10.73055935,  -9.20372391,
         -10.78434086,  -8.77386570, -10.62020874, -14.29128361, -13.35895061]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [545]; unstable size 545; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 545] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 545] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 545] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 249] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.56179976, 3.63847303, 0.57008624, 1.61158299, 0.13146019, 1.65996599,
         1.35068643, 4.52710819, 3.71646404]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0620 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
         -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [520]; unstable size 520; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 520] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 520] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 520] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 171] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.49318433,  3.10641098,  5.37454367,  3.09507990,  5.62251997,
          5.56271124,  4.11786795, -0.92750764,  2.68375874]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
         -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.58841896, -12.71182537, -12.23468971, -14.64789867, -12.31371975,
          -14.90933514, -14.82857895, -13.46736908,  -7.97204685, -11.84747696]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.61637211]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666e+00,  1.67777801e+00,  1.32857168e+00,  ...,
             2.80952454e-01,  1.06349289e-01, -5.23808524e-02],
           [ 9.79365110e-01,  1.39206374e+00,  1.24920666e+00,  ...,
            -1.95237994e-01, -1.79364979e-01, -1.31745934e-01],
           [ 1.28095269e+00,  1.39206374e+00,  9.15873051e-01,  ...,
            -2.06348225e-02,  1.11112073e-02,  2.17460394e-01],
           ...,
           [-4.96825397e-01, -4.80952382e-01, -4.33333218e-01,  ...,
            -4.80952382e-01, -4.96825397e-01, -4.96825397e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.80952382e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.96825397e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01]],

          [[ 1.91626441e+00,  2.06119204e+00,  1.70692456e+00,  ...,
             1.27214205e+00,  1.15942061e+00,  1.06280196e+00],
           [ 1.72302771e+00,  1.88405824e+00,  1.83574903e+00,  ...,
             1.07890511e+00,  1.06280196e+00,  1.04669893e+00],
           [ 1.94847047e+00,  1.91626441e+00,  1.69082153e+00,  ...,
             1.19162667e+00,  1.20772982e+00,  1.30434811e+00],
           ...,
           [-3.22059989e-02, -4.83090580e-02, -3.22059989e-02,  ...,
            -6.44121096e-02, -8.05151686e-02, -8.05151686e-02],
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -3.22059989e-02],
           [-6.44121096e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -1.61029361e-02]],

          [[ 2.10045004e+00,  2.08545780e+00,  1.81559265e+00,  ...,
             1.84557760e+00,  1.80060017e+00,  1.74063015e+00],
           [ 1.96551764e+00,  1.92054021e+00,  1.96551764e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.81559265e+00],
           [ 2.08545780e+00,  1.96551764e+00,  1.96551764e+00,  ...,
             1.95052516e+00,  1.95052516e+00,  1.96551764e+00],
           ...,
           [ 2.11394474e-01,  1.21439442e-01,  1.81409463e-01,  ...,
             2.11394474e-01,  2.11394474e-01,  2.11394474e-01],
           [ 2.26386964e-01,  1.51424453e-01,  1.81409463e-01,  ...,
             2.26386964e-01,  2.26386964e-01,  2.41379470e-01],
           [ 1.81409463e-01,  1.66416958e-01,  1.96401969e-01,  ...,
             1.96401969e-01,  2.11394474e-01,  2.26386964e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0676 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
         -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [542]; unstable size 542; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 542] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 542] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 542] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 201] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.90671396e+00,  3.71085119e+00,  5.54727316e-02, -9.76629555e-04,
          3.31381559e-01,  5.89845061e-01,  4.14882660e-01,  3.71298957e+00,
          2.61608982e+00]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
         -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.08it/s]100%|██████████| 1/1 [00:00<00:00,  9.07it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.24166107, -8.22013760, -4.23363972, -3.89632154, -4.55042458,
          -3.89160490, -4.79965591, -4.76971054, -8.16572952, -7.05139542]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00471663]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1130 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.498353004455566
alpha/beta optimization time: 1.1953153610229492
initial alpha-crown bounds: tensor([[ 2.93031049e+00,  3.74855542e+00,  6.38682842e-02, -3.64616513e-04,
          3.41102839e-01,  5.96957684e-01,  4.24151599e-01,  3.74316120e+00,
          2.65061092e+00]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0003646165132522583
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6199 seconds.
lower bounds for all target labels: [2.9303112030029297, 3.7485580444335938, 0.06386911869049072, -0.0003645792603492737, 0.34110140800476074, 0.5969570875167847, 0.4241515100002289, 3.7431588172912598, 2.6506104469299316]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [3]
start creating model mps for candidates: ['lay/16_3']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.57015562057495
Verifying property 0 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.7485554218292236.

Properties batch 1, size 1
Remaining timeout: 198.40859746932983
Verifying property 1 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.743161201477051.

Properties batch 2, size 1
Remaining timeout: 198.30312538146973
Verifying property 2 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.9303104877471924.

Properties batch 3, size 1
Remaining timeout: 198.19600749015808
Verifying property 3 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.65061092376709.

Properties batch 4, size 1
Remaining timeout: 198.09527778625488
Verifying property 4 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5969576835632324.

Properties batch 5, size 1
Remaining timeout: 197.99479508399963
Verifying property 5 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.42415159940719604.

Properties batch 6, size 1
Remaining timeout: 197.89069437980652
Verifying property 6 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.34110283851623535.

Properties batch 7, size 1
Remaining timeout: 197.77830266952515
Verifying property 7 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.06386828422546387.

Properties batch 8, size 1
Remaining timeout: 197.65697383880615
Verifying property 8 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.00036462]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.31217670, -8.42142200, -4.16140318, -3.79582143, -4.46238518,
        -3.77659655, -4.79564857, -4.59870291, -8.33152199, -7.22583532],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00036462]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 542
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 197
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 745
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006487369537353516
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-12, 47] 
split level 1: [/input-12, 10] 
split level 2: [/input-12, 62] 
split level 3: [/input-8, 1192] 
split level 4: [/input-12, 33] 
split level 5: [/input-8, 174] 
split level 6: [/input-8, 1184] 
split level 7: [/input-8, 1300] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 8.7738037109375e-05
Time: prepare 0.0032    bound 0.0048    transfer 0.0034    finalize 0.0025    func 0.0139    
Accumulated time: func 0.0139    prepare 0.0036    bound 0.0048    transfer 0.0034    finalize 0.0025    
all_split False
Length of domains: 0
Time: pickout 0.0005    decision 0.0250    set_bounds 0.0204    solve 0.0140    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0250    set_bounds 0.0204    solve 0.0140    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.06577467918395996

the mip building process is not terminated yet, kill it
Result: safe in 2.8141 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.68161011, -4.31493664, -3.29749870, -3.86696267, -4.55905437,
         -4.00861025, -3.69984698, -5.91490364, -4.24547005, -4.16366720]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 403] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 403] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 182] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.68392754, -0.33067036, -0.84067488,  0.38051927,  0.12290451,
         -0.46707964,  1.54917371, -0.29823148, -0.40686059]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.68161011, -4.31493664, -3.29749870, -3.86696267, -4.55905437,
         -4.00861025, -3.69984698, -5.91490364, -4.24547005, -4.16366720]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.68161011, -4.31493664, -3.29749966, -3.86696267, -4.55905437,
          -4.00861073, -3.69984746, -5.91490364, -4.24547005, -4.16366720],
         [-3.68161011, -4.31493664, -3.29749966, -3.86696267, -4.55905437,
          -4.00861073, -3.69984746, -5.91490364, -4.24547005, -4.16366720]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.18535256,  0.44797397, -0.56946301, -0.16711521,  0.37850738,
           0.29670453]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]],


         [[[-0.17936498, -0.14761895, -0.09999990,  ...,  0.24920642,
             0.28095245,  0.36031753],
           [-0.13174593, -0.11587292, -0.09999990,  ...,  0.56666672,
             0.29682547,  0.29682547],
           [-0.11587292, -0.08412688, -0.08412688,  ...,  0.32857150,
             0.31269848,  0.36031753],
           ...,
           [ 0.42380959,  0.47142863,  0.63015878,  ...,  1.10634947,
             1.15396857,  1.23333359],
           [ 0.43968260,  0.56666672,  0.59841275,  ...,  1.16984153,
             1.26507962,  1.29682565],
           [ 0.51904768,  0.59841275,  0.56666672,  ...,  1.26507962,
             1.31269872,  1.26507962]],

          [[-0.22544271, -0.19323659, -0.14492741,  ...,  0.22544295,
             0.24154601,  0.27375212],
           [-0.17713353, -0.16103047, -0.14492741,  ...,  0.72463775,
             0.37037048,  0.25764906],
           [-0.16103047, -0.12882435, -0.14492741,  ...,  0.56360716,
             0.43478271,  0.37037048],
           ...,
           [ 0.67632860,  0.74074084,  0.93397754,  ...,  1.32045114,
             1.33655429,  1.38486338],
           [ 0.74074084,  0.88566834,  0.93397754,  ...,  1.33655429,
             1.41706955,  1.41706955],
           [ 0.80515307,  0.90177143,  0.90177143,  ...,  1.43317258,
             1.46537876,  1.36876035]],

          [[-0.11844061, -0.08845562, -0.04347810,  ...,  0.40629703,
             0.42128953,  0.46626705],
           [-0.07346311, -0.05847061, -0.04347810,  ...,  0.30134949,
             0.15142445,  0.25637197],
           [-0.05847061, -0.02848560, -0.02848560,  ...,  0.07646193,
             0.13643195,  0.30134949],
           ...,
           [ 0.97601217,  1.02098966,  1.20089996,  ...,  1.54572761,
             1.59070504,  1.63568258],
           [ 1.03598225,  1.17091501,  1.21589243,  ...,  1.56072009,
             1.63568258,  1.65067506],
           [ 1.11094475,  1.21589243,  1.20089996,  ...,  1.63568258,
             1.68066013,  1.60569763]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0812 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.26414204, -10.67618656,  -7.14083195,  -7.60558414,  -6.94402504,
          -7.67818594,  -6.53135300,  -8.68149567,  -9.88610840, -10.70594692]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 538] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 538] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 195] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.35335875, 3.54954529, 0.39658886, 0.85085702, 0.24288142, 0.91747469,
         1.88348365, 2.84460545, 3.62032890]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0655 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.17061424, -20.50812531, -23.04294586, -24.22522926, -25.19203758,
         -24.61592484, -24.87892914, -26.22239113, -21.59410477, -22.00157738]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 89, 1, 511] with unstable size 88 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 511] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [88]; unstable size 88; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 88] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 88] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.22561836, 1.90276670, 3.01938915, 3.98550987, 3.39302921, 3.71364927,
         4.93401432, 0.62228298, 1.22355115]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0634 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.76015854, -4.19035864, -4.85114622, -5.85322762, -4.73305225,
         -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916135]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [653]; unstable size 653; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 223, 1, 653] with unstable size 222 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 653] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 653] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 222] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30759096,  0.50324702,  1.35600054,  0.23959780,  1.49378967,
          0.62164283,  0.94105095, -0.94007611, -0.65508509]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.76015854, -4.19035864, -4.85114622, -5.85322762, -4.73305225,
         -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916135]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.76015854, -4.19035912, -4.85114622, -5.85322952, -4.73305321,
          -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916230],
         [-3.76015854, -4.19035912, -4.85114622, -5.85322952, -4.73305321,
          -5.99784613, -5.29220486, -5.57987642, -3.28484440, -3.88916230]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.43020058, -0.47531414,  0.12900376]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0727 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.28970528, -10.67957401, -10.33640766, -13.22579098, -10.36513615,
         -13.49066448, -14.18056297, -12.48040295,  -5.26089621, -10.53180790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [564]; unstable size 564; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 123, 1, 564] with unstable size 122 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 564] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 564] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [122]; unstable size 122; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 122] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 122] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.76197678, 4.99777508, 4.48139000, 7.34546185, 4.49978971, 7.59466982,
         8.32230759, 6.48773861, 4.83865166]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0670 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.66796303, -10.52346611,  -3.42282248,  -5.06743813,  -4.46258068,
          -5.11582899,  -5.54765797,  -6.57940102,  -9.65262794, -10.61189556]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 133, 1, 403] with unstable size 132 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [132]; unstable size 132; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 132] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.52602589,  4.36306620, -2.47155905, -0.77068269, -1.39496136,
         -0.72536492,  0.64461362,  3.49572921,  4.39420128]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.66796303, -10.52346611,  -3.42282248,  -5.06743813,  -4.46258068,
          -5.11582899,  -5.54765797,  -6.57940102,  -9.65262794, -10.61189556]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.66796207, -10.52346516,  -3.42282248,  -5.06743717,  -4.46258068,
           -5.11582804,  -5.54765701,  -6.57940102,  -9.65262604, -10.61189556],
         [ -7.66796207, -10.52346516,  -3.42282248,  -5.06743717,  -4.46258068,
           -5.11582804,  -5.54765701,  -6.57940102,  -9.65262604, -10.61189556]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-2.12483454, -0.48021984, -1.08507633, -0.43182898]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0723 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
         -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [728]; unstable size 728; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 728] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 728] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 728] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 186] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.92469144,  6.41981840,  1.23279619, -0.06353921,  1.31932342,
          0.44406345,  2.49051285,  4.72230101,  5.96450901]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
         -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.77it/s]100%|██████████| 1/1 [00:00<00:00,  8.76it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.11066437, -8.78367043, -1.73745489, -3.23712897, -1.76644242,
          -3.33225727, -2.47211003, -4.53414059, -7.01842499, -8.31025410]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02898753]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1168 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.59933853149414
alpha/beta optimization time: 1.208754539489746
initial alpha-crown bounds: tensor([[ 2.93429852,  6.45055294,  1.23612082, -0.05334744,  1.32260966,
          0.45382071,  2.50835919,  4.75239944,  5.99452543]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.05334743857383728
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6238 seconds.
lower bounds for all target labels: [2.934298515319824, 6.450552463531494, 1.2361208200454712, -0.05334743857383728, 1.3226094245910645, 0.45382070541381836, 2.508358955383301, 4.752398490905762, 5.99452543258667]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [3]
start creating model mps for candidates: ['lay/16_3']
parallel save mip model to /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 264115 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5474147796631
Verifying property 0 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.450552940368652.

Properties batch 1, size 1
Remaining timeout: 198.36389470100403
Verifying property 1 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.99452543258667.

Properties batch 2, size 1
Remaining timeout: 198.24969029426575
Verifying property 2 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.752399444580078.

Properties batch 3, size 1
Remaining timeout: 198.155531167984
Verifying property 3 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.934298515319824.

Properties batch 4, size 1
Remaining timeout: 198.06473636627197
Verifying property 4 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.50835919380188.

Properties batch 5, size 1
Remaining timeout: 197.97448348999023
Verifying property 5 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3226096630096436.

Properties batch 6, size 1
Remaining timeout: 197.88181805610657
Verifying property 6 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2361208200454712.

Properties batch 7, size 1
Remaining timeout: 197.7820999622345
Verifying property 7 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.45382070541381836.

Properties batch 8, size 1
Remaining timeout: 197.67220187187195
Verifying property 8 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05334744]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.00622368, -8.74640179, -1.57641745, -3.12036347, -1.72908556,
        -3.21535397, -2.39184046, -4.51465273, -6.92866707, -8.24733448],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05334744]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 728
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 184
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 916
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0004401206970214844
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-12, 50] 
split level 1: [/input-8, 545] 
split level 2: [/input-8, 541] 
split level 3: [/input-8, 941] 
split level 4: [/input-8, 559] 
split level 5: [/input-8, 534] 
split level 6: [/input-8, 530] 
split level 7: [/input-8, 1258] 
pruning_in_iteration open status: False
ratio of positive domain = 18 / 256 = 0.0703125
pruning-in-iteration extra time: 8.988380432128906e-05
Time: prepare 0.0032    bound 0.0979    transfer 0.0032    finalize 0.0027    func 0.1071    
Accumulated time: func 0.1071    prepare 0.0037    bound 0.0979    transfer 0.0032    finalize 0.0027    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02603 (8), -0.02538 (8), -0.02517 (8), -0.02506 (8), -0.02452 (8), -0.02443 (8), -0.02441 (8), -0.02420 (8), -0.02378 (8), -0.02358 (8), -0.02356 (8), -0.02346 (8), -0.02298 (8), -0.02293 (8), -0.02282 (8), -0.02266 (8), -0.02260 (8), -0.02260 (8), -0.02232 (8), -0.02201 (8), 
Length of domains: 238
Time: pickout 0.0005    decision 0.0238    set_bounds 0.0186    solve 0.1072    add 0.0266    
Accumulated time: pickout 0.0005    decision 0.0238    set_bounds 0.0186    solve 0.1072    add 0.0266    
Current (lb-rhs): -0.02602580189704895
238 domains visited
Cumulative time: 0.18732619285583496

BaB round 2
Fetch cut process: mps for current label is not ready yet
batch: 238
splitting decisions: 
split level 0: [/input-8, 1465] [/input-8, 1470] [/input-8, 1465] [/input-8, 1470] [/input-8, 1465] [/input-8, 1470] [/input-8, 1465] [/input-8, 1452] [/input-8, 1470] [/input-8, 1452] 
pruning_in_iteration open status: False
ratio of positive domain = 71 / 476 = 0.14915966386554624
pruning-in-iteration extra time: 8.368492126464844e-05
Time: prepare 0.0095    bound 0.1036    transfer 0.0046    finalize 0.0033    func 0.1217    
Accumulated time: func 0.2288    prepare 0.0133    bound 0.2014    transfer 0.0078    finalize 0.0060    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02549 (9), -0.02483 (9), -0.02464 (9), -0.02452 (9), -0.02398 (9), -0.02389 (9), -0.02384 (9), -0.02367 (9), -0.02319 (9), -0.02303 (9), -0.02299 (9), -0.02287 (9), -0.02282 (9), -0.02250 (9), -0.02235 (9), -0.02232 (9), -0.02225 (9), -0.02216 (9), -0.02202 (9), -0.02184 (9), 
Length of domains: 402
Time: pickout 0.0170    decision 0.0265    set_bounds 0.0114    solve 0.1218    add 0.0076    
Accumulated time: pickout 0.0174    decision 0.0503    set_bounds 0.0299    solve 0.2290    add 0.0342    
Current (lb-rhs): -0.025489144027233124
640 domains visited
Cumulative time: 0.3725724220275879

BaB round 3
Fetch cut process: mps for current label is not ready yet
batch: 402
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 1465] [/input-8, 1452] [/input-8, 1465] [/input-8, 1452] [/input-8, 1465] [/input-8, 1452] [/input-8, 1465] [/input-8, 1465] [/input-8, 1465] 
pruning_in_iteration open status: False
ratio of positive domain = 100 / 804 = 0.12437810945273631
pruning-in-iteration extra time: 5.3882598876953125e-05
Time: prepare 0.0160    bound 0.1043    transfer 0.0045    finalize 0.0050    func 0.1300    
Accumulated time: func 0.3587    prepare 0.0295    bound 0.3058    transfer 0.0123    finalize 0.0110    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02530 (10), -0.02464 (10), -0.02445 (10), -0.02428 (10), -0.02378 (10), -0.02365 (10), -0.02361 (10), -0.02343 (10), -0.02298 (10), -0.02279 (10), -0.02277 (10), -0.02262 (10), -0.02261 (10), -0.02229 (10), -0.02216 (10), -0.02212 (10), -0.02198 (10), -0.02195 (10), -0.02177 (10), -0.02161 (10), 
Length of domains: 696
Time: pickout 0.0058    decision 0.0334    set_bounds 0.0183    solve 0.1311    add 0.0114    
Accumulated time: pickout 0.0232    decision 0.0837    set_bounds 0.0482    solve 0.3601    add 0.0456    
Current (lb-rhs): -0.02529759705066681
1336 domains visited
Cumulative time: 0.5740833282470703

BaB round 4
Fetch cut process: mps for current label is not ready yet
batch: 696
splitting decisions: 
split level 0: [/input-8, 1452] [/input-8, 1266] [/input-8, 1470] [/input-8, 1266] [/input-8, 1470] [/input-8, 1266] [/input-8, 1470] [/input-8, 1470] [/input-8, 1266] [/input-8, 1470] 
pruning_in_iteration open status: False
ratio of positive domain = 199 / 1392 = 0.14295977011494254
pruning-in-iteration extra time: 7.963180541992188e-05
Time: prepare 0.0277    bound 0.1155    transfer 0.0048    finalize 0.0087    func 0.1568    
Accumulated time: func 0.5156    prepare 0.0574    bound 0.4213    transfer 0.0170    finalize 0.0197    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02521 (11), -0.02456 (11), -0.02436 (11), -0.02416 (11), -0.02370 (11), -0.02352 (11), -0.02351 (11), -0.02331 (11), -0.02289 (11), -0.02267 (11), -0.02266 (11), -0.02244 (11), -0.02203 (11), -0.02182 (11), -0.02159 (11), -0.02129 (11), -0.02103 (11), -0.02098 (11), -0.02091 (11), -0.02087 (11), 
Length of domains: 1183
Time: pickout 0.0087    decision 0.0498    set_bounds 0.0314    solve 0.1571    add 0.0781    
Accumulated time: pickout 0.0320    decision 0.1335    set_bounds 0.0796    solve 0.5172    add 0.1237    
Current (lb-rhs): -0.02521214634180069
2519 domains visited
Cumulative time: 0.902127742767334

BaB round 5
Fetch cut process: mps for current label is not ready yet
batch: 1183
splitting decisions: 
split level 0: [/input-8, 306] [/input-8, 1452] [/input-8, 306] [/input-8, 1452] [/input-8, 306] [/input-8, 1452] [/input-8, 306] [/input-8, 306] [/input-8, 1452] [/input-8, 306] 
pruning_in_iteration open status: False
ratio of positive domain = 418 / 2366 = 0.17666948436179208
pruning-in-iteration extra time: 5.435943603515625e-05
Time: prepare 0.0476    bound 0.1391    transfer 0.0063    finalize 0.0157    func 0.2089    
Accumulated time: func 0.7245    prepare 0.1052    bound 0.5604    transfer 0.0233    finalize 0.0354    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02470 (12), -0.02403 (12), -0.02385 (12), -0.02364 (12), -0.02317 (12), -0.02301 (12), -0.02300 (12), -0.02278 (12), -0.02251 (12), -0.02235 (12), -0.02216 (12), -0.02214 (12), -0.02195 (12), -0.02185 (12), -0.02167 (12), -0.02151 (12), -0.02134 (12), -0.02108 (12), -0.02099 (12), -0.02099 (12), 
Length of domains: 1921
Time: pickout 0.0145    decision 0.0783    set_bounds 0.0552    solve 0.2098    add 0.0908    
Accumulated time: pickout 0.0465    decision 0.2119    set_bounds 0.1348    solve 0.7270    add 0.2145    
Current (lb-rhs): -0.024697929620742798
4440 domains visited
Cumulative time: 1.360966682434082

BaB round 6
Fetch cut process: mps for current label is not ready yet
batch: 1921
splitting decisions: 
split level 0: [/input-8, 544] [/input-8, 1261] [/input-8, 544] [/input-8, 1261] [/input-8, 544] [/input-8, 1261] [/input-8, 544] [/input-8, 544] [/input-8, 1261] [/input-8, 544] 
pruning_in_iteration open status: False
ratio of positive domain = 725 / 3842 = 0.18870380010411247
pruning-in-iteration extra time: 6.008148193359375e-05
Time: prepare 0.0978    bound 0.1964    transfer 0.0162    finalize 0.0203    func 0.3316    
Accumulated time: func 1.0561    prepare 0.2032    bound 0.7567    transfer 0.0395    finalize 0.0557    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02444 (13), -0.02378 (13), -0.02359 (13), -0.02337 (13), -0.02292 (13), -0.02274 (13), -0.02273 (13), -0.02251 (13), -0.02221 (13), -0.02209 (13), -0.02190 (13), -0.02188 (13), -0.02167 (13), -0.02156 (13), -0.02136 (13), -0.02125 (13), -0.02103 (13), -0.02079 (13), -0.02070 (13), -0.02068 (13), 
Length of domains: 3088
Time: pickout 0.0303    decision 0.1146    set_bounds 0.3614    solve 0.3324    add 0.1267    
Accumulated time: pickout 0.0767    decision 0.3265    set_bounds 0.4962    solve 1.0593    add 0.3412    
Current (lb-rhs): -0.02443910390138626
7528 domains visited
Cumulative time: 2.3384978771209717

BaB round 7
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0023
batch: 3088
splitting decisions: 
split level 0: [/input-8, 310] [/input-8, 1265] [/input-8, 310] [/input-8, 540] [/input-8, 310] [/input-8, 1265] [/input-8, 310] [/input-8, 540] [/input-8, 310] [/input-8, 540] 
pruning_in_iteration open status: False
ratio of positive domain = 1027 / 6176 = 0.16628886010362698
pruning-in-iteration extra time: 7.152557373046875e-05
Time: prepare 0.1388    bound 0.2996    transfer 0.0339    finalize 0.0435    func 0.5168    
Accumulated time: func 1.5729    prepare 0.3423    bound 1.0564    transfer 0.0734    finalize 0.0992    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02380 (14), -0.02314 (14), -0.02295 (14), -0.02295 (14), -0.02273 (14), -0.02230 (14), -0.02228 (14), -0.02212 (14), -0.02211 (14), -0.02208 (14), -0.02188 (14), -0.02188 (14), -0.02156 (14), -0.02146 (14), -0.02144 (14), -0.02128 (14), -0.02128 (14), -0.02126 (14), -0.02124 (14), -0.02103 (14), 
Length of domains: 5081
Time: pickout 0.0469    decision 0.1831    set_bounds 0.2831    solve 0.5183    add 0.1612    
Accumulated time: pickout 0.1236    decision 0.5096    set_bounds 0.7793    solve 1.5776    add 0.5024    
Current (lb-rhs): -0.023803889751434326
12609 domains visited
Cumulative time: 3.5501625537872314

BaB round 8
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0030
batch: 4096
splitting decisions: 
split level 0: [/input-8, 540] [/input-8, 1266] [/input-8, 1266] [/input-8, 540] [/input-8, 1266] [/input, 648] [/input-8, 1266] [/input-8, 540] [/input-8, 1266] [/input-8, 1266] 
pruning_in_iteration open status: True
ratio of positive domain = 1756 / 8192 = 0.21435546875
pruning-in-iteration extra time: 0.0021295547485351562
Time: prepare 0.1881    bound 0.3703    transfer 0.0448    finalize 0.0448    func 0.6487    
Accumulated time: func 2.2216    prepare 0.5307    bound 1.4267    transfer 0.1182    finalize 0.1440    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02281 (15), -0.02278 (15), -0.02215 (15), -0.02211 (15), -0.02196 (15), -0.02195 (15), -0.02193 (15), -0.02192 (15), -0.02192 (15), -0.02137 (15), -0.02130 (15), -0.02129 (15), -0.02127 (15), -0.02126 (15), -0.02125 (15), -0.02112 (15), -0.02110 (15), -0.02109 (15), -0.02108 (15), -0.02107 (15), 
Length of domains: 7421
Time: pickout 0.0607    decision 0.2480    set_bounds 0.3262    solve 0.6502    add 0.1515    
Accumulated time: pickout 0.1843    decision 0.7576    set_bounds 1.1055    solve 2.2278    add 0.6540    
Current (lb-rhs): -0.02280573546886444
19045 domains visited
current_vram/total_varm: 10.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 5.009510040283203

BaB round 9
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
batch: 7421
splitting decisions: 
split level 0: [/input-8, 1266] [/input-8, 540] [/input-8, 1266] [/input-8, 540] [/input-8, 1266] [/input, 1208] [/input-8, 1266] [/input, 1208] [/input-8, 540] [/input-8, 1265] 
pruning_in_iteration open status: False
ratio of positive domain = 2633 / 14842 = 0.1774019673898396
pruning-in-iteration extra time: 0.0002162456512451172
Time: prepare 0.5834    bound 0.6298    transfer 0.0856    finalize 0.0999    func 1.4002    
Accumulated time: func 3.6218    prepare 1.1145    bound 2.0565    transfer 0.2039    finalize 0.2438    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02256 (16), -0.02254 (16), -0.02190 (16), -0.02187 (16), -0.02171 (16), -0.02169 (16), -0.02168 (16), -0.02167 (16), -0.02167 (16), -0.02109 (16), -0.02104 (16), -0.02104 (16), -0.02102 (16), -0.02100 (16), -0.02100 (16), -0.02087 (16), -0.02085 (16), -0.02084 (16), -0.02082 (16), -0.02082 (16), 
Length of domains: 12099
Time: pickout 0.1038    decision 0.6148    set_bounds 0.2237    solve 1.4034    add 0.2033    
Accumulated time: pickout 0.2882    decision 1.3724    set_bounds 1.3292    solve 3.6313    add 0.8572    
Current (lb-rhs): -0.02256106585264206
31144 domains visited
Cumulative time: 7.592042684555054

BaB round 10
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0031
batch: 8192
splitting decisions: 
split level 0: [/input-8, 309] [/input-8, 309] [/input-8, 1266] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 309] [/input-8, 1266] [/input-8, 309] [/input-8, 309] 
pruning_in_iteration open status: False
ratio of positive domain = 2750 / 16384 = 0.1678466796875
pruning-in-iteration extra time: 0.00011348724365234375
Time: prepare 0.4350    bound 0.6887    transfer 0.0891    finalize 0.3220    func 1.5359    
Accumulated time: func 5.1577    prepare 1.5499    bound 2.7452    transfer 0.2930    finalize 0.5659    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02208 (17), -0.02204 (17), -0.02141 (17), -0.02140 (17), -0.02137 (17), -0.02134 (17), -0.02131 (17), -0.02123 (17), -0.02121 (17), -0.02119 (17), -0.02119 (17), -0.02082 (17), -0.02067 (17), -0.02064 (17), -0.02061 (17), -0.02055 (17), -0.02055 (17), -0.02053 (17), -0.02051 (17), -0.02051 (17), 
Length of domains: 17398
Time: pickout 0.1251    decision 0.6993    set_bounds 0.3411    solve 1.5393    add 0.3649    
Accumulated time: pickout 0.4133    decision 2.0717    set_bounds 1.6703    solve 5.1705    add 1.2221    
Current (lb-rhs): -0.02207612246274948
44635 domains visited
current_vram/total_varm: 23.2GB/99.9GB, batch_size increase to 16384
Cumulative time: 10.692986488342285

BaB round 11
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts: total 609 constraints, 30509 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.2584
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1175] [/input, 1208] [/input-8, 1175] [/input-8, 1175] [/input-8, 540] [/input-8, 1266] [/input-8, 540] [/input-8, 1266] [/input-8, 540] [/input-8, 1266] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.021815910935401917
10 lb beta sum: 8.58031940460205, worst -0.010895438492298126
pruning_in_iteration open status: True
ratio of positive domain = 32119 / 32768 = 0.980194091796875
pruning-in-iteration extra time: 0.005437135696411133
Time: prepare 0.9091    bound 5.3802    transfer 0.1783    finalize 0.4800    func 7.1558    
Accumulated time: func 12.3135    prepare 2.4595    bound 8.1254    transfer 0.4713    finalize 1.0459    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01901 (16), -0.01836 (16), -0.01817 (16), -0.01814 (16), -0.01751 (16), -0.01750 (16), -0.01733 (16), -0.01732 (16), -0.01671 (16), -0.01664 (16), -0.01650 (16), -0.01643 (16), -0.01615 (15), -0.01584 (16), -0.01582 (16), -0.01581 (15), -0.01581 (15), -0.01560 (16), -0.01559 (16), -0.01551 (15), 
Length of domains: 1663
Time: pickout 0.2523    decision 1.7019    set_bounds 0.9361    solve 7.1619    add 0.0956    
Accumulated time: pickout 0.6655    decision 3.7736    set_bounds 2.6064    solve 12.3324    add 1.3177    
Current (lb-rhs): -0.01900683343410492
45284 domains visited
Cumulative time: 21.267013549804688

BaB round 12
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts: total 1192 constraints, 47057 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.3956
batch: 1663
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 648] [/input, 1208] [/input, 648] [/input, 648] [/input, 648] [/input-8, 1265] [/input, 648] [/input-8, 1265] [/input, 648] [/input, 1208] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.021633878350257874
10 lb beta sum: 3.7282016277313232, worst -0.012679100036621094
pruning_in_iteration open status: True
ratio of positive domain = 3038 / 3326 = 0.9134095009019844
pruning-in-iteration extra time: 0.00394439697265625
Time: prepare 0.0924    bound 0.9630    transfer 0.0182    finalize 0.0207    func 1.1154    
Accumulated time: func 13.4289    prepare 2.5521    bound 9.0884    transfer 0.4895    finalize 1.0665    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00412 (19), -0.00396 (19), -0.00379 (19), -0.00376 (19), -0.00366 (19), -0.00363 (19), -0.00356 (19), -0.00330 (19), -0.00323 (19), -0.00318 (19), -0.00294 (19), -0.00291 (19), -0.00286 (19), -0.00284 (19), -0.00283 (19), -0.00278 (19), -0.00274 (19), -0.00273 (19), -0.00270 (19), -0.00270 (19), 
Length of domains: 288
Time: pickout 0.0345    decision 0.1022    set_bounds 0.2023    solve 1.1163    add 0.0746    
Accumulated time: pickout 0.7000    decision 3.8758    set_bounds 2.8087    solve 13.4487    add 1.3923    
Current (lb-rhs): -0.004117757081985474
45572 domains visited
Cumulative time: 23.22922706604004

BaB round 13
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0021
batch: 288
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 309] [/input-8, 309] [/input-8, 540] [/input-8, 309] [/input-8, 309] [/input-8, 1217] [/input-8, 1261] [/input-8, 540] [/input-8, 1261] [/input-8, 1261] 
cut re-enabled after branching node selection
0 lb beta sum: 2.5805418491363525, worst -0.003909535706043243
10 lb beta sum: 4.0511884689331055, worst -0.018510639667510986
Early stop at 13th iter due to 10 iterations no improvement!
pruning_in_iteration open status: True
ratio of positive domain = 197 / 576 = 0.34201388888888884
pruning-in-iteration extra time: 0.0035827159881591797
Time: prepare 0.0286    bound 0.1908    transfer 0.0034    finalize 0.0041    func 0.2305    
Accumulated time: func 13.6594    prepare 2.5809    bound 9.2792    transfer 0.4928    finalize 1.0706    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00391 (20), -0.00377 (20), -0.00374 (20), -0.00337 (20), -0.00333 (20), -0.00325 (20), -0.00324 (20), -0.00323 (20), -0.00310 (20), -0.00305 (20), -0.00299 (20), -0.00298 (20), -0.00295 (20), -0.00291 (20), -0.00281 (20), -0.00281 (20), -0.00273 (20), -0.00267 (20), -0.00266 (20), -0.00262 (20), 
Length of domains: 379
Time: pickout 0.0158    decision 0.0287    set_bounds 0.0127    solve 0.2306    add 0.0884    
Accumulated time: pickout 0.7158    decision 3.9045    set_bounds 2.8213    solve 13.6793    add 1.4807    
Current (lb-rhs): -0.003909535706043243
45951 domains visited
Cumulative time: 23.618048667907715

BaB round 14
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
batch: 379
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1217] [/input-8, 1217] [/input-8, 1217] [/input-8, 1261] [/input-8, 1250] [/input-8, 540] [/input-8, 1175] [/input-8, 1261] [/input-8, 540] [/input-8, 1250] 
cut re-enabled after branching node selection
0 lb beta sum: 2.615048885345459, worst -0.009068921208381653
10 lb beta sum: 2.7179412841796875, worst -0.020563021302223206
pruning_in_iteration open status: True
ratio of positive domain = 223 / 758 = 0.2941952506596306
pruning-in-iteration extra time: 5.602836608886719e-05
Time: prepare 0.0382    bound 0.3139    transfer 0.0021    finalize 0.0046    func 0.3637    
Accumulated time: func 14.0231    prepare 2.6194    bound 9.5931    transfer 0.4949    finalize 1.0752    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00357 (21), -0.00337 (21), -0.00325 (21), -0.00325 (21), -0.00323 (21), -0.00323 (21), -0.00318 (21), -0.00308 (21), -0.00291 (21), -0.00290 (21), -0.00288 (21), -0.00281 (21), -0.00281 (21), -0.00273 (21), -0.00267 (21), -0.00261 (21), -0.00259 (21), -0.00259 (21), -0.00259 (21), -0.00256 (21), 
Length of domains: 535
Time: pickout 0.0174    decision 0.0342    set_bounds 0.0171    solve 0.3639    add 0.0860    
Accumulated time: pickout 0.7332    decision 3.9387    set_bounds 2.8384    solve 14.0433    add 1.5667    
Current (lb-rhs): -0.003566071391105652
46486 domains visited
Cumulative time: 24.146565914154053

BaB round 15
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0007
batch: 535
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1261] [/input-8, 540] [/input-8, 1175] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input-8, 1250] [/input, 1208] [/input-8, 1175] [/input-8, 1250] 
cut re-enabled after branching node selection
0 lb beta sum: 2.6221072673797607, worst -0.004766866564750671
10 lb beta sum: 3.4828853607177734, worst -0.01916271448135376
pruning_in_iteration open status: True
ratio of positive domain = 386 / 1070 = 0.36074766355140186
pruning-in-iteration extra time: 0.005308389663696289
Time: prepare 0.0535    bound 0.4008    transfer 0.0030    finalize 0.0072    func 0.4714    
Accumulated time: func 14.4945    prepare 2.6731    bound 9.9939    transfer 0.4978    finalize 1.0824    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00323 (22), -0.00323 (22), -0.00323 (22), -0.00313 (22), -0.00312 (22), -0.00284 (22), -0.00281 (22), -0.00281 (22), -0.00281 (22), -0.00281 (22), -0.00277 (22), -0.00259 (22), -0.00259 (22), -0.00257 (22), -0.00253 (22), -0.00247 (22), -0.00245 (22), -0.00241 (22), -0.00236 (22), -0.00234 (22), 
Length of domains: 684
Time: pickout 0.0201    decision 0.0435    set_bounds 0.0228    solve 0.4716    add 0.0886    
Accumulated time: pickout 0.7532    decision 3.9822    set_bounds 2.8612    solve 14.5149    add 1.6553    
Current (lb-rhs): -0.0032332688570022583
47170 domains visited
Cumulative time: 24.801742792129517

BaB round 16
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
batch: 684
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1208] [/input, 1208] [/input-8, 1250] [/input, 1208] [/input, 1208] [/input, 1208] [/input, 1208] [/input, 1208] [/input-8, 1250] [/input-8, 1250] 
cut re-enabled after branching node selection
0 lb beta sum: 2.6262357234954834, worst -0.0045465826988220215
10 lb beta sum: 2.7413244247436523, worst -0.01980617642402649
pruning_in_iteration open status: False
ratio of positive domain = 264 / 1368 = 0.19298245614035092
pruning-in-iteration extra time: 5.6743621826171875e-05
Time: prepare 0.0687    bound 0.4778    transfer 0.0058    finalize 0.0067    func 0.5682    
Accumulated time: func 15.0627    prepare 2.7421    bound 10.4717    transfer 0.5036    finalize 1.0891    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00323 (23), -0.00291 (23), -0.00284 (23), -0.00281 (23), -0.00281 (23), -0.00272 (23), -0.00260 (23), -0.00255 (23), -0.00253 (23), -0.00250 (23), -0.00247 (23), -0.00244 (23), -0.00241 (23), -0.00241 (23), -0.00238 (23), -0.00236 (23), -0.00236 (23), -0.00232 (23), -0.00230 (23), -0.00230 (23), 
Length of domains: 969
Time: pickout 0.0240    decision 0.0513    set_bounds 0.0285    solve 0.5697    add 0.0846    
Accumulated time: pickout 0.7773    decision 4.0336    set_bounds 2.8897    solve 15.0846    add 1.7399    
Current (lb-rhs): -0.0032332688570022583
48139 domains visited
Cumulative time: 25.571091890335083

BaB round 17
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
batch: 969
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] 
cut re-enabled after branching node selection
0 lb beta sum: 2.6230475902557373, worst -0.003487221896648407
10 lb beta sum: 3.821934938430786, worst -0.019162222743034363
pruning_in_iteration open status: True
ratio of positive domain = 832 / 1938 = 0.4293085655314758
pruning-in-iteration extra time: 0.005581855773925781
Time: prepare 0.1059    bound 0.6061    transfer 0.0059    finalize 0.0107    func 0.7414    
Accumulated time: func 15.8042    prepare 2.8483    bound 11.0778    transfer 0.5095    finalize 1.0998    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00261 (24), -0.00256 (24), -0.00247 (24), -0.00244 (24), -0.00241 (24), -0.00241 (24), -0.00236 (24), -0.00236 (24), -0.00236 (24), -0.00231 (24), -0.00226 (24), -0.00226 (24), -0.00224 (24), -0.00222 (24), -0.00221 (24), -0.00220 (24), -0.00214 (24), -0.00214 (24), -0.00213 (24), -0.00211 (24), 
Length of domains: 1106
Time: pickout 0.0318    decision 0.0687    set_bounds 0.0431    solve 0.7425    add 0.0889    
Accumulated time: pickout 0.8090    decision 4.1023    set_bounds 2.9328    solve 15.8271    add 1.8288    
Current (lb-rhs): -0.0026126503944396973
49245 domains visited
Cumulative time: 26.5657958984375

BaB round 18
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
batch: 1106
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 899] [/input-8, 899] [/input-8, 899] [/input-8, 899] [/input-8, 899] [/input-8, 899] [/input-8, 899] [/input-8, 899] [/input-8, 899] [/input-8, 899] 
cut re-enabled after branching node selection
0 lb beta sum: 2.635472059249878, worst -0.0037550628185272217
10 lb beta sum: 3.620983839035034, worst -0.01945723593235016
pruning_in_iteration open status: True
ratio of positive domain = 1095 / 2212 = 0.49502712477396027
pruning-in-iteration extra time: 0.0056743621826171875
Time: prepare 0.1277    bound 0.7030    transfer 0.0130    finalize 0.0170    func 0.8767    
Accumulated time: func 16.6809    prepare 2.9763    bound 11.7808    transfer 0.5226    finalize 1.1168    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00241 (25), -0.00241 (25), -0.00241 (25), -0.00240 (25), -0.00236 (25), -0.00234 (25), -0.00230 (25), -0.00223 (25), -0.00223 (25), -0.00219 (25), -0.00218 (25), -0.00214 (25), -0.00211 (25), -0.00210 (25), -0.00210 (25), -0.00209 (25), -0.00208 (25), -0.00206 (25), -0.00205 (25), -0.00200 (25), 
Length of domains: 1117
Time: pickout 0.0332    decision 0.0765    set_bounds 0.0494    solve 0.8773    add 0.0904    
Accumulated time: pickout 0.8423    decision 4.1788    set_bounds 2.9822    solve 16.7044    add 1.9192    
Current (lb-rhs): -0.002410672605037689
50362 domains visited
Cumulative time: 27.70754861831665

BaB round 19
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
batch: 1117
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 900] [/input-8, 900] [/input-8, 900] [/input-8, 900] [/input-8, 900] [/input-8, 900] [/input-8, 899] [/input-8, 899] [/input-8, 899] [/input-8, 899] 
cut re-enabled after branching node selection
0 lb beta sum: 2.6414153575897217, worst -0.002468712627887726
10 lb beta sum: 4.6928019523620605, worst -0.019629940390586853
pruning_in_iteration open status: True
ratio of positive domain = 1310 / 2234 = 0.5863921217547001
pruning-in-iteration extra time: 0.005456209182739258
Time: prepare 0.1213    bound 0.6425    transfer 0.0115    finalize 0.0137    func 0.8045    
Accumulated time: func 17.4853    prepare 3.0980    bound 12.4233    transfer 0.5340    finalize 1.1305    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00236 (26), -0.00234 (26), -0.00233 (26), -0.00223 (26), -0.00215 (26), -0.00205 (26), -0.00203 (26), -0.00200 (26), -0.00196 (26), -0.00195 (26), -0.00192 (26), -0.00192 (26), -0.00187 (26), -0.00182 (26), -0.00177 (26), -0.00177 (26), -0.00176 (26), -0.00174 (26), -0.00170 (26), -0.00168 (26), 
Length of domains: 924
Time: pickout 0.0309    decision 0.2317    set_bounds 0.0508    solve 0.8050    add 0.0857    
Accumulated time: pickout 0.8731    decision 4.4105    set_bounds 3.0330    solve 17.5095    add 2.0050    
Current (lb-rhs): -0.0023595765233039856
51286 domains visited
Cumulative time: 28.926620960235596

BaB round 20
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts: total 1277 constraints, 49442 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.4168
batch: 924
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 866] [/input-8, 866] [/input-8, 866] [/input-8, 900] [/input-8, 866] [/input-8, 866] [/input-8, 866] [/input-8, 900] [/input-8, 900] [/input, 661] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01752476394176483
10 lb beta sum: 3.012448310852051, worst -0.011060744524002075
pruning_in_iteration open status: True
ratio of positive domain = 1824 / 1848 = 0.987012987012987
pruning-in-iteration extra time: 0.001329183578491211
Time: prepare 0.0519    bound 0.6415    transfer 0.0055    finalize 0.0117    func 0.7236    
Accumulated time: func 18.2090    prepare 3.1502    bound 13.0649    transfer 0.5396    finalize 1.1422    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00074 (27), -0.00050 (27), -0.00048 (27), -0.00043 (27), -0.00035 (27), -0.00035 (27), -0.00033 (27), -0.00033 (27), -0.00030 (27), -0.00024 (27), -0.00023 (27), -0.00017 (27), -0.00016 (27), -0.00015 (27), -0.00013 (27), -0.00012 (27), -0.00011 (27), -0.00010 (27), -0.00010 (27), -0.00008 (27), 
Length of domains: 24
Time: pickout 0.0262    decision 0.0641    set_bounds 0.0403    solve 0.7241    add 0.0555    
Accumulated time: pickout 0.8994    decision 4.4745    set_bounds 3.0733    solve 18.2336    add 2.0605    
Current (lb-rhs): -0.0007409006357192993
51310 domains visited
Cumulative time: 30.270049571990967

BaB round 21
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
batch: 24
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1269] [/input-8, 1269] [/input-8, 1269] [/input-8, 900] [/input-8, 1269] [/input-8, 1269] [/input-8, 1269] [/input-8, 1269] [/input-8, 1269] [/input-8, 1269] 
split level 1: [/input, 788] [/input, 788] [/input, 788] [/input-8, 866] [/input, 788] [/input, 788] [/input, 788] [/input, 788] [/input, 788] [/input, 788] 
split level 2: [/input, 968] [/input, 968] [/input, 968] [/input, 940] [/input, 661] [/input, 968] [/input, 661] [/input, 968] [/input, 661] [/input, 661] 
split level 3: [/input, 661] [/input, 661] [/input, 661] [/input, 968] [/input, 968] [/input, 661] [/input, 968] [/input, 661] [/input, 968] [/input, 968] 
cut re-enabled after branching node selection
0 lb beta sum: 2.788567543029785, worst -0.0006847083568572998
10 lb beta sum: 35.75041580200195, worst -0.009993582963943481
Early stop at 13th iter due to 10 iterations no improvement!
pruning_in_iteration open status: True
ratio of positive domain = 354 / 384 = 0.921875
pruning-in-iteration extra time: 0.003394603729248047
Time: prepare 0.0192    bound 0.1729    transfer 0.0012    finalize 0.0025    func 0.1989    
Accumulated time: func 18.4078    prepare 3.1696    bound 13.2377    transfer 0.5408    finalize 1.1447    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00033 (31), -0.00033 (31), -0.00033 (31), -0.00033 (31), -0.00029 (31), -0.00026 (31), -0.00026 (31), -0.00024 (31), -0.00024 (31), -0.00023 (31), -0.00022 (31), -0.00019 (31), -0.00017 (31), -0.00015 (31), -0.00013 (31), -0.00012 (31), -0.00011 (31), -0.00009 (31), -0.00008 (31), -0.00006 (31), 
Length of domains: 30
Time: pickout 0.0048    decision 0.0198    set_bounds 0.0197    solve 0.1990    add 0.0619    
Accumulated time: pickout 0.9042    decision 4.4943    set_bounds 3.0930    solve 18.4326    add 2.1224    
Current (lb-rhs): -0.00032745301723480225
51340 domains visited
Cumulative time: 30.585437536239624

BaB round 22
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
batch: 30
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1242] [/input-8, 1242] [/input-8, 1242] [/input-8, 1242] [/input-8, 1242] [/input-8, 1952] [/input-8, 1242] [/input-8, 1952] [/input-8, 1242] [/input-8, 1952] 
split level 1: [/input-8, 1952] [/input-8, 1952] [/input-8, 1952] [/input-8, 1952] [/input-8, 1952] [/input, 2440] [/input-8, 1952] [/input, 2440] [/input-8, 1952] [/input, 2440] 
split level 2: [/input, 2440] [/input, 2440] [/input, 2440] [/input, 2440] [/input, 2440] [/input, 775] [/input, 2440] [/input, 775] [/input, 2440] [/input, 775] 
cut re-enabled after branching node selection
0 lb beta sum: 2.824807643890381, worst -0.0045354366302490234
10 lb beta sum: 7.153870582580566, worst -0.008346408605575562

all verified at 18th iter
pruning_in_iteration open status: True
ratio of positive domain = 240 / 240 = 1.0
pruning-in-iteration extra time: 0.004917144775390625
Time: prepare 0.0124    bound 0.2759    transfer 0.0008    finalize 0.0018    func 0.2925    
Accumulated time: func 18.7004    prepare 3.1822    bound 13.5136    transfer 0.5417    finalize 1.1465    
all_split False
Length of domains: 0
Time: pickout 0.0050    decision 0.0144    set_bounds 0.0106    solve 0.2926    add 0.0001    
Accumulated time: pickout 0.9092    decision 4.5087    set_bounds 3.1035    solve 18.7252    add 2.1225    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
51340 domains visited
Cumulative time: 30.910856008529663

found process to kill: terminal indx = 3
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.mps
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.cuts
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.indx
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=64_spec=3_30438399.log
found process for pidx=3
kill process for pidx=3
Result: safe in 33.6220 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.25397301, -11.57504463,  -9.66235542,  -8.69976139,  -9.31725407,
          -8.85229206,  -9.17159748,  -9.49390125,  -9.43022537, -10.41604328]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [395]; unstable size 395; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 134, 1, 395] with unstable size 133 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 395] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 395] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [133]; unstable size 133; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 133] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.46065462,  1.67517185,  0.13809061, -0.74742353, -0.27090001,
         -0.60667473, -0.21644306, -0.32564586,  0.60563827]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.25397301, -11.57504463,  -9.66235542,  -8.69976139,  -9.31725407,
          -8.85229206,  -9.17159748,  -9.49390125,  -9.43022537, -10.41604328]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.25397110, -11.57504368,  -9.66235447,  -8.69975948,  -9.31725216,
           -8.85229015,  -9.17159748,  -9.49389839,  -9.43022156, -10.41604137],
         [ -9.25397110, -11.57504368,  -9.66235447,  -8.69975948,  -9.31725216,
           -8.85229015,  -9.17159748,  -9.49389839,  -9.43022156, -10.41604137]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08237362, -0.47183800,  0.14565468, -0.31930733,  0.32230091,
           0.25862408]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0832 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.07646894, -7.65943909, -2.80038643, -4.19312286, -2.84907341,
         -4.31067753, -2.97104788, -5.49396992, -5.05455065, -7.49684191]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [412]; unstable size 412; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 412] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 412] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 412] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 191] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.59529108,  3.83634615, -0.28098133,  0.94465244,  1.05693662,
         -0.35508788,  2.21556473,  1.40176010,  3.70545506]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.07646894, -7.65943909, -2.80038643, -4.19312286, -2.84907341,
         -4.31067753, -2.97104788, -5.49396992, -5.05455065, -7.49684191]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.07646942, -7.65943909, -2.80038691, -4.19312382, -2.84907389,
          -4.31067753, -2.97104836, -5.49396992, -5.05455112, -7.49684286],
         [-4.07646942, -7.65943909, -2.80038691, -4.19312382, -2.84907389,
          -4.31067753, -2.97104836, -5.49396992, -5.05455112, -7.49684286]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04868698,  0.12197447]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.08412688,  0.31269848,  1.05873048,  ...,  0.59841275,
             0.75714290,  0.74126989],
           [ 0.13809532,  0.48730165,  0.80476195,  ...,  0.39206356,
             0.42380959,  0.51904768],
           [-0.16349196,  0.29682547,  0.86825401,  ...,  0.78888893,
             0.42380959,  0.83650798],
           ...,
           [-0.76666665, -0.98888886, -1.17936504,  ..., -0.90952379,
            -0.95714283, -0.81428570],
           [-0.86190474, -1.13174593, -1.14761901,  ..., -0.32222211,
            -0.67142856, -0.43333322],
           [-1.00476182, -1.13174593, -1.05238092,  ..., -0.33809513,
            -0.40158719, -0.62380952]],

          [[ 0.37037048,  0.80515307,  1.38486338,  ...,  1.35265732,
             1.69082153,  1.25603890],
           [ 0.62801939,  0.85346222,  0.99838978,  ...,  1.12721443,
             1.22383285,  0.86956531],
           [ 0.53140104,  0.61191636,  0.98228669,  ...,  1.48148179,
             1.04669893,  0.95008057],
           ...,
           [-0.16103047, -0.75684375, -0.98228657,  ..., -0.64412236,
            -0.74074072, -0.46698871],
           [-0.46698871, -0.91787434, -0.96618354,  ...,  0.25764906,
            -0.06441211,  0.20933989],
           [-0.77294683, -0.86956519, -0.88566822,  ...,  0.40257660,
             0.46698883,  0.30595824]],

          [[-0.37331331, -0.26836565,  0.21139447,  ...,  0.12143944,
             0.21139447,  0.07646193],
           [-0.14842562, -0.23838064, -0.13343313,  ...,  0.21139447,
             0.01649191, -0.28335828],
           [-0.19340314, -0.31334329,  0.06146942,  ...,  0.70614707,
             0.13643195, -0.16341813],
           ...,
           [-0.43328333, -0.62818587, -0.88305843,  ..., -0.68815589,
            -0.65817088, -0.61319339],
           [-0.52323836, -0.74812591, -0.77811092,  ..., -0.16341813,
            -0.32833579, -0.11844061],
           [-0.67316341, -0.77811092, -0.68815589,  ..., -0.13343313,
            -0.01349309, -0.05847061]]],


         [[[-0.08412688,  0.31269848,  1.05873048,  ...,  0.59841275,
             0.75714290,  0.74126989],
           [ 0.13809532,  0.48730165,  0.80476195,  ...,  0.39206356,
             0.42380959,  0.51904768],
           [-0.16349196,  0.29682547,  0.86825401,  ...,  0.78888893,
             0.42380959,  0.83650798],
           ...,
           [-0.76666665, -0.98888886, -1.17936504,  ..., -0.90952379,
            -0.95714283, -0.81428570],
           [-0.86190474, -1.13174593, -1.14761901,  ..., -0.32222211,
            -0.67142856, -0.43333322],
           [-1.00476182, -1.13174593, -1.05238092,  ..., -0.33809513,
            -0.40158719, -0.62380952]],

          [[ 0.37037048,  0.80515307,  1.38486338,  ...,  1.35265732,
             1.69082153,  1.25603890],
           [ 0.62801939,  0.85346222,  0.99838978,  ...,  1.12721443,
             1.22383285,  0.86956531],
           [ 0.53140104,  0.61191636,  0.98228669,  ...,  1.48148179,
             1.04669893,  0.95008057],
           ...,
           [-0.16103047, -0.75684375, -0.98228657,  ..., -0.64412236,
            -0.74074072, -0.46698871],
           [-0.46698871, -0.91787434, -0.96618354,  ...,  0.25764906,
            -0.06441211,  0.20933989],
           [-0.77294683, -0.86956519, -0.88566822,  ...,  0.40257660,
             0.46698883,  0.30595824]],

          [[-0.37331331, -0.26836565,  0.21139447,  ...,  0.12143944,
             0.21139447,  0.07646193],
           [-0.14842562, -0.23838064, -0.13343313,  ...,  0.21139447,
             0.01649191, -0.28335828],
           [-0.19340314, -0.31334329,  0.06146942,  ...,  0.70614707,
             0.13643195, -0.16341813],
           ...,
           [-0.43328333, -0.62818587, -0.88305843,  ..., -0.68815589,
            -0.65817088, -0.61319339],
           [-0.52323836, -0.74812591, -0.77811092,  ..., -0.16341813,
            -0.32833579, -0.11844061],
           [-0.67316341, -0.77811092, -0.68815589,  ..., -0.13343313,
            -0.01349309, -0.05847061]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0577 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
         -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [678]; unstable size 678; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 678] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 678] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 678] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 182] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.24960232,  6.38107681,  1.60664821, -0.06612653,  1.70738173,
          0.18758941,  2.45988202,  5.07852507,  5.93349123]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
         -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.63it/s]100%|██████████| 1/1 [00:00<00:00,  7.63it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.62309074, -9.13611889, -2.05009270, -3.92859149, -2.05051351,
          -4.03291273, -2.54317069, -4.72930622, -7.65253258, -8.69230938]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00042081]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1345 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.699167251586914
alpha/beta optimization time: 1.2407732009887695
initial alpha-crown bounds: tensor([[ 3.27143478,  6.42873430,  1.61031735, -0.06354007,  1.71119165,
          0.19428962,  2.46747231,  5.10520935,  5.97405815]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.06354007124900818
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.8065 seconds.
lower bounds for all target labels: [3.2714362144470215, 6.428736209869385, 1.6103172302246094, -0.06354087591171265, 1.7111914157867432, 0.19428861141204834, 2.467471122741699, 5.1052069664001465, 5.974056720733643]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [3]
start creating model mps for candidates: ['lay/16_3']
parallel save mip model to /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 264821 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.4950611591339
Verifying property 0 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.428734302520752.

Properties batch 1, size 1
Remaining timeout: 198.30541563034058
Verifying property 1 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.974058151245117.

Properties batch 2, size 1
Remaining timeout: 198.2000434398651
Verifying property 2 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.1052093505859375.

Properties batch 3, size 1
Remaining timeout: 198.09264469146729
Verifying property 3 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.271434783935547.

Properties batch 4, size 1
Remaining timeout: 197.97745728492737
Verifying property 4 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.4674723148345947.

Properties batch 5, size 1
Remaining timeout: 197.870787858963
Verifying property 5 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.7111916542053223.

Properties batch 6, size 1
Remaining timeout: 197.76818251609802
Verifying property 6 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.610317349433899.

Properties batch 7, size 1
Remaining timeout: 197.66400957107544
Verifying property 7 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.19428962469100952.

Properties batch 8, size 1
Remaining timeout: 197.55555081367493
Verifying property 8 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06354007]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.55771780, -9.15554237, -1.90561867, -3.81715608, -2.01485729,
        -3.92124176, -2.46277452, -4.73829317, -7.58408260, -8.67660141],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06354007]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 678
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 180
Node /15 input 0: size torch.Size([100]) unstable 2
-----------------
# of unstable neurons: 860
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.00048661231994628906
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-8, 545] 
split level 1: [/input-8, 538] 
split level 2: [/input-8, 550] 
split level 3: [/input-8, 551] 
split level 4: [/input-8, 541] 
split level 5: [/input-8, 546] 
split level 6: [/input-8, 561] 
split level 7: [/input-8, 547] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 7.367134094238281e-05
Time: prepare 0.0019    bound 0.0989    transfer 0.0039    finalize 0.0025    func 0.1073    
Accumulated time: func 0.1073    prepare 0.0023    bound 0.0989    transfer 0.0039    finalize 0.0025    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05436 (8), -0.05338 (8), -0.05269 (8), -0.05223 (8), -0.05171 (8), -0.05162 (8), -0.05159 (8), -0.05109 (8), -0.05106 (8), -0.05069 (8), -0.05069 (8), -0.05061 (8), -0.05015 (8), -0.05007 (8), -0.04995 (8), -0.04992 (8), -0.04972 (8), -0.04950 (8), -0.04948 (8), -0.04940 (8), 
Length of domains: 256
Time: pickout 0.0005    decision 0.0253    set_bounds 0.0171    solve 0.1074    add 0.0226    
Accumulated time: pickout 0.0005    decision 0.0253    set_bounds 0.0171    solve 0.1074    add 0.0226    
Current (lb-rhs): -0.05436273291707039
256 domains visited
Cumulative time: 0.1777820587158203

BaB round 2
Fetch cut process: mps for current label is not ready yet
batch: 256
splitting decisions: 
split level 0: [/input-8, 530] [/input-8, 530] [/input-8, 1453] [/input-8, 1453] [/input-8, 530] [/input-8, 530] [/input-8, 1453] [/input-8, 1453] [/input-8, 530] [/input-8, 530] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 7.319450378417969e-05
Time: prepare 0.0077    bound 0.1065    transfer 0.0034    finalize 0.0042    func 0.1219    
Accumulated time: func 0.2292    prepare 0.0102    bound 0.2054    transfer 0.0073    finalize 0.0067    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05348 (9), -0.05247 (9), -0.05175 (9), -0.05127 (9), -0.05073 (9), -0.05073 (9), -0.05070 (9), -0.05019 (9), -0.05009 (9), -0.04981 (9), -0.04979 (9), -0.04970 (9), -0.04969 (9), -0.04920 (9), -0.04900 (9), -0.04897 (9), -0.04891 (9), -0.04884 (9), -0.04870 (9), -0.04853 (9), 
Length of domains: 512
Time: pickout 0.0054    decision 0.0346    set_bounds 0.0142    solve 0.1220    add 0.0818    
Accumulated time: pickout 0.0059    decision 0.0599    set_bounds 0.0314    solve 0.2294    add 0.1045    
Current (lb-rhs): -0.05348433554172516
768 domains visited
Cumulative time: 0.4432377815246582

BaB round 3
Fetch cut process: mps for current label is not ready yet
batch: 512
splitting decisions: 
split level 0: [/input-8, 1453] [/input-8, 1453] [/input-8, 530] [/input-8, 530] [/input-8, 1453] [/input-8, 1453] [/input-8, 530] [/input-8, 530] [/input-8, 1453] [/input-8, 1453] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1024 = 0.0
pruning-in-iteration extra time: 5.316734313964844e-05
Time: prepare 0.0161    bound 0.1044    transfer 0.0098    finalize 0.0064    func 0.1368    
Accumulated time: func 0.3661    prepare 0.0265    bound 0.3098    transfer 0.0171    finalize 0.0131    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05287 (10), -0.05184 (10), -0.05113 (10), -0.05064 (10), -0.05009 (10), -0.05009 (10), -0.05005 (10), -0.04952 (10), -0.04945 (10), -0.04913 (10), -0.04907 (10), -0.04906 (10), -0.04875 (10), -0.04854 (10), -0.04835 (10), -0.04832 (10), -0.04828 (10), -0.04812 (10), -0.04787 (10), -0.04782 (10), 
Length of domains: 1024
Time: pickout 0.0192    decision 0.0415    set_bounds 0.0259    solve 0.1371    add 0.0851    
Accumulated time: pickout 0.0251    decision 0.1014    set_bounds 0.0573    solve 0.3665    add 0.1895    
Current (lb-rhs): -0.05287101864814758
1792 domains visited
Cumulative time: 0.7632384300231934

BaB round 4
Fetch cut process: mps for current label is not ready yet
batch: 1024
splitting decisions: 
split level 0: [/input-8, 562] [/input-8, 562] [/input-8, 562] [/input-8, 562] [/input-8, 562] [/input-8, 562] [/input-8, 562] [/input-8, 562] [/input-8, 562] [/input-8, 562] 
pruning_in_iteration open status: False
ratio of positive domain = 1 / 2048 = 0.00048828125
pruning-in-iteration extra time: 6.0558319091796875e-05
Time: prepare 0.0313    bound 0.1362    transfer 0.0032    finalize 0.0151    func 0.1870    
Accumulated time: func 0.5530    prepare 0.0580    bound 0.4460    transfer 0.0202    finalize 0.0282    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05256 (11), -0.05153 (11), -0.05082 (11), -0.05032 (11), -0.04978 (11), -0.04971 (11), -0.04957 (11), -0.04918 (11), -0.04913 (11), -0.04878 (11), -0.04869 (11), -0.04854 (11), -0.04842 (11), -0.04818 (11), -0.04797 (11), -0.04796 (11), -0.04783 (11), -0.04775 (11), -0.04747 (11), -0.04744 (11), 
Length of domains: 2047
Time: pickout 0.0127    decision 0.0745    set_bounds 0.0529    solve 0.1877    add 0.0828    
Accumulated time: pickout 0.0378    decision 0.1759    set_bounds 0.1102    solve 0.5542    add 0.2723    
Current (lb-rhs): -0.05256210267543793
3839 domains visited
Cumulative time: 1.1839971542358398

BaB round 5
Fetch cut process: mps for current label is not ready yet
batch: 2047
splitting decisions: 
split level 0: [/input-8, 554] [/input-8, 554] [/input-8, 554] [/input-8, 554] [/input-8, 554] [/input-8, 554] [/input-8, 554] [/input-8, 554] [/input-8, 554] [/input-8, 554] 
pruning_in_iteration open status: False
ratio of positive domain = 160 / 4094 = 0.039081582804103565
pruning-in-iteration extra time: 6.0558319091796875e-05
Time: prepare 0.0755    bound 0.2290    transfer 0.0250    finalize 0.0248    func 0.3547    
Accumulated time: func 0.9077    prepare 0.1338    bound 0.6750    transfer 0.0453    finalize 0.0530    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05175 (12), -0.05071 (12), -0.05000 (12), -0.04950 (12), -0.04895 (12), -0.04890 (12), -0.04879 (12), -0.04871 (12), -0.04830 (12), -0.04826 (12), -0.04789 (12), -0.04786 (12), -0.04780 (12), -0.04775 (12), -0.04772 (12), -0.04766 (12), -0.04728 (12), -0.04715 (12), -0.04709 (12), -0.04704 (12), 
Length of domains: 3933
Time: pickout 0.0310    decision 0.1302    set_bounds 0.3338    solve 0.3560    add 0.0791    
Accumulated time: pickout 0.0688    decision 0.3060    set_bounds 0.4440    solve 0.9102    add 0.3514    
Current (lb-rhs): -0.051748842000961304
7772 domains visited
Cumulative time: 2.120255708694458

BaB round 6
Fetch cut process: mps for current label is not ready yet
batch: 3933
splitting decisions: 
split level 0: [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] [/input-8, 1446] 
pruning_in_iteration open status: False
ratio of positive domain = 246 / 7866 = 0.03127383676582762
pruning-in-iteration extra time: 6.246566772460938e-05
Time: prepare 0.1205    bound 0.3544    transfer 0.0447    finalize 0.1990    func 0.7197    
Accumulated time: func 1.6274    prepare 0.2545    bound 1.0294    transfer 0.0899    finalize 0.2520    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05073 (13), -0.04972 (13), -0.04920 (13), -0.04887 (13), -0.04841 (13), -0.04813 (13), -0.04793 (13), -0.04784 (13), -0.04781 (13), -0.04777 (13), -0.04770 (13), -0.04727 (13), -0.04723 (13), -0.04692 (13), -0.04685 (13), -0.04684 (13), -0.04680 (13), -0.04680 (13), -0.04677 (13), -0.04671 (13), 
Length of domains: 7615
Time: pickout 0.0447    decision 0.2272    set_bounds 0.3257    solve 0.7213    add 0.1484    
Accumulated time: pickout 0.1135    decision 0.5333    set_bounds 0.7697    solve 1.6315    add 0.4998    
Current (lb-rhs): -0.05073116719722748
15387 domains visited
Cumulative time: 3.605337619781494

BaB round 7
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0028
batch: 4096
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] 
pruning_in_iteration open status: False
ratio of positive domain = 1385 / 8192 = 0.1690673828125
pruning-in-iteration extra time: 6.723403930664062e-05
Time: prepare 0.1348    bound 0.3656    transfer 0.0469    finalize 0.0441    func 0.5923    
Accumulated time: func 2.2197    prepare 0.3896    bound 1.3950    transfer 0.1368    finalize 0.2961    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05073 (13), -0.04972 (13), -0.04887 (13), -0.04876 (14), -0.04841 (13), -0.04784 (13), -0.04781 (13), -0.04781 (14), -0.04777 (13), -0.04770 (13), -0.04757 (14), -0.04727 (13), -0.04723 (13), -0.04684 (13), -0.04680 (13), -0.04680 (13), -0.04677 (13), -0.04671 (13), -0.04670 (13), -0.04662 (14), 
Length of domains: 10295
Time: pickout 0.0514    decision 0.2722    set_bounds 0.3899    solve 0.5935    add 0.2093    
Accumulated time: pickout 0.1649    decision 0.8055    set_bounds 1.1596    solve 2.2250    add 0.7091    
Current (lb-rhs): -0.05073116719722748
22163 domains visited
current_vram/total_varm: 11.8GB/99.9GB, batch_size increase to 8192
Cumulative time: 5.146294355392456

BaB round 8
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
batch: 8192
splitting decisions: 
split level 0: [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] 
pruning_in_iteration open status: False
ratio of positive domain = 1689 / 16384 = 0.10308837890625
pruning-in-iteration extra time: 9.608268737792969e-05
Time: prepare 0.2751    bound 0.6816    transfer 0.0905    finalize 0.1034    func 1.1521    
Accumulated time: func 3.3719    prepare 0.6651    bound 2.0765    transfer 0.2273    finalize 0.3994    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05073 (13), -0.04972 (13), -0.04887 (13), -0.04841 (13), -0.04787 (15), -0.04784 (13), -0.04777 (13), -0.04770 (13), -0.04737 (14), -0.04737 (15), -0.04727 (13), -0.04723 (13), -0.04692 (15), -0.04680 (13), -0.04677 (13), -0.04671 (13), -0.04670 (13), -0.04668 (15), -0.04653 (14), -0.04641 (15), 
Length of domains: 16747
Time: pickout 0.1088    decision 0.4958    set_bounds 0.8021    solve 1.1550    add 0.2893    
Accumulated time: pickout 0.2737    decision 1.3012    set_bounds 1.9618    solve 3.3800    add 0.9983    
Current (lb-rhs): -0.05073116719722748
36807 domains visited
current_vram/total_varm: 24.1GB/99.9GB, batch_size increase to 16384
Cumulative time: 8.027195930480957

BaB round 9
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0033
batch: 16384
splitting decisions: 
split level 0: [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] 
pruning_in_iteration open status: False
ratio of positive domain = 2050 / 32768 = 0.06256103515625
pruning-in-iteration extra time: 0.00017952919006347656
Time: prepare 0.5193    bound 1.3127    transfer 0.1748    finalize 0.1998    func 2.2081    
Accumulated time: func 5.5799    prepare 1.1849    bound 3.3892    transfer 0.4021    finalize 0.5992    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05073 (13), -0.04972 (13), -0.04887 (13), -0.04841 (13), -0.04784 (13), -0.04777 (13), -0.04770 (13), -0.04727 (13), -0.04723 (13), -0.04702 (16), -0.04680 (13), -0.04677 (13), -0.04671 (13), -0.04670 (13), -0.04658 (16), -0.04653 (16), -0.04644 (15), -0.04626 (13), -0.04613 (13), -0.04606 (16), 
Length of domains: 31022
Time: pickout 0.1946    decision 1.9158    set_bounds 1.5253    solve 2.2154    add 0.2393    
Accumulated time: pickout 0.4683    decision 3.2170    set_bounds 3.4871    solve 5.5954    add 1.2376    
Current (lb-rhs): -0.05073116719722748
67466 domains visited
current_vram/total_varm: 27.4GB/99.9GB, batch_size increase to 32768
Cumulative time: 14.16919755935669

BaB round 10
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts: total 931 constraints, 37819 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.3186
batch: 31022
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05035804212093353
10 lb beta sum: 1.680169939994812, worst -0.04072440788149834
pruning_in_iteration open status: False
ratio of positive domain = 7913 / 62044 = 0.12753852104957775
pruning-in-iteration extra time: 0.0011560916900634766
Time: prepare 0.9688    bound 13.2332    transfer 0.3420    finalize 0.8009    func 15.7430    
Accumulated time: func 21.3229    prepare 2.1541    bound 16.6224    transfer 0.7442    finalize 1.4002    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03450 (14), -0.03397 (14), -0.03349 (14), -0.03257 (16), -0.03243 (16), -0.03236 (14), -0.03232 (16), -0.03232 (14), -0.03228 (14), -0.03227 (14), -0.03214 (16), -0.03176 (16), -0.03166 (16), -0.03165 (16), -0.03161 (16), -0.03161 (14), -0.03158 (17), -0.03158 (14), -0.03157 (17), -0.03153 (16), 
Length of domains: 46870
Time: pickout 0.3396    decision 3.1304    set_bounds 2.4180    solve 15.7531    add 0.6482    
Accumulated time: pickout 0.8079    decision 6.3474    set_bounds 5.9050    solve 21.3486    add 1.8858    
Current (lb-rhs): -0.03449537232518196
114336 domains visited
Cumulative time: 36.952242612838745

BaB round 11
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts: total 1135 constraints, 41249 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.3557
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 949] [/input-8, 949] [/input-8, 1251] [/input-8, 1251] [/input-8, 949] [/input-8, 949] [/input-8, 1251] [/input-8, 1251] [/input-8, 949] [/input-8, 949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04588182270526886
10 lb beta sum: 2.0248210430145264, worst -0.03869558125734329
pruning_in_iteration open status: False
ratio of positive domain = 1524 / 65536 = 0.02325439453125
pruning-in-iteration extra time: 0.0014057159423828125
Time: prepare 1.0411    bound 21.0641    transfer 0.3544    finalize 0.9662    func 23.8504    
Accumulated time: func 45.1733    prepare 3.1957    bound 37.6865    transfer 1.0985    finalize 2.3663    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03450 (14), -0.03397 (14), -0.03349 (14), -0.03243 (16), -0.03236 (14), -0.03232 (16), -0.03232 (14), -0.03228 (14), -0.03227 (14), -0.03214 (16), -0.03165 (16), -0.03161 (16), -0.03161 (14), -0.03158 (17), -0.03158 (14), -0.03157 (17), -0.03153 (16), -0.03137 (17), -0.03134 (14), -0.03132 (14), 
Length of domains: 75754
Time: pickout 0.3816    decision 3.3563    set_bounds 2.4169    solve 23.8598    add 18.6233    
Accumulated time: pickout 1.1896    decision 9.7037    set_bounds 8.3219    solve 45.2084    add 20.5092    
Current (lb-rhs): -0.03449537232518196
175988 domains visited
Cumulative time: 86.06885313987732

BaB round 12
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts: total 1226 constraints, 42798 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.3715
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 340] [/input-8, 933] [/input-8, 933] [/input-8, 933] [/input-8, 933] [/input-8, 933] [/input-8, 933] [/input-8, 933] [/input-8, 933] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04484933614730835
10 lb beta sum: 2.2427914142608643, worst -0.04264426976442337
pruning_in_iteration open status: False
ratio of positive domain = 1048 / 65536 = 0.0159912109375
pruning-in-iteration extra time: 0.0014612674713134766
Time: prepare 1.0506    bound 22.0490    transfer 0.3532    finalize 0.4612    func 24.3398    
Accumulated time: func 69.5131    prepare 4.2469    bound 59.7355    transfer 1.4517    finalize 2.8276    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03450 (14), -0.03397 (14), -0.03349 (14), -0.03243 (16), -0.03236 (14), -0.03232 (16), -0.03232 (14), -0.03228 (14), -0.03227 (14), -0.03214 (16), -0.03165 (16), -0.03161 (16), -0.03161 (14), -0.03158 (17), -0.03158 (14), -0.03157 (17), -0.03153 (16), -0.03137 (17), -0.03134 (14), -0.03132 (14), 
Length of domains: 105844
Time: pickout 0.4171    decision 3.6699    set_bounds 3.1058    solve 24.3527    add 0.4191    
Accumulated time: pickout 1.6067    decision 13.3736    set_bounds 11.4277    solve 69.5610    add 20.9283    
Current (lb-rhs): -0.03449537232518196
238846 domains visited
Cumulative time: 118.5516984462738

BaB round 13
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts: total 1230 constraints, 42830 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.3694
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 539] [/input-8, 949] [/input-8, 340] [/input-8, 1251] [/input-8, 340] [/input-8, 340] [/input-8, 949] [/input-8, 1251] [/input-8, 340] [/input-8, 539] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04347872734069824
10 lb beta sum: 2.2293541431427, worst -0.04457247257232666
pruning_in_iteration open status: False
ratio of positive domain = 1028 / 65536 = 0.01568603515625
pruning-in-iteration extra time: 0.0014967918395996094
Time: prepare 1.1247    bound 21.9924    transfer 0.3741    finalize 0.4977    func 24.4133    
Accumulated time: func 93.9265    prepare 5.3722    bound 81.7279    transfer 1.8258    finalize 3.3253    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03450 (14), -0.03397 (14), -0.03349 (14), -0.03243 (16), -0.03236 (14), -0.03232 (16), -0.03232 (14), -0.03228 (14), -0.03227 (14), -0.03214 (16), -0.03165 (16), -0.03161 (16), -0.03161 (14), -0.03158 (17), -0.03158 (14), -0.03157 (17), -0.03153 (16), -0.03137 (17), -0.03134 (14), -0.03132 (14), 
Length of domains: 136069
Time: pickout 0.4178    decision 3.9497    set_bounds 2.5567    solve 24.4237    add 0.4438    
Accumulated time: pickout 2.0245    decision 17.3233    set_bounds 13.9845    solve 93.9848    add 21.3721    
Current (lb-rhs): -0.03449537232518196
301839 domains visited
Cumulative time: 150.86108684539795

BaB round 14
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts: total 1222 constraints, 42659 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.3647
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 340] [/input-8, 340] [/input-8, 539] [/input-8, 340] [/input-8, 540] [/input-8, 340] [/input-8, 539] [/input-8, 340] [/input-8, 539] [/input-8, 340] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04296722263097763
10 lb beta sum: 2.2489054203033447, worst -0.038055017590522766
pruning_in_iteration open status: False
ratio of positive domain = 1164 / 65536 = 0.01776123046875
pruning-in-iteration extra time: 0.001476287841796875
Time: prepare 1.0904    bound 22.1006    transfer 0.3875    finalize 0.5674    func 24.5730    
Accumulated time: func 118.4994    prepare 6.4631    bound 103.8285    transfer 2.2133    finalize 3.8927    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03450 (14), -0.03397 (14), -0.03349 (14), -0.03243 (16), -0.03236 (14), -0.03232 (16), -0.03232 (14), -0.03228 (14), -0.03227 (14), -0.03214 (16), -0.03165 (16), -0.03161 (16), -0.03161 (14), -0.03158 (17), -0.03158 (14), -0.03157 (17), -0.03153 (16), -0.03137 (17), -0.03134 (14), -0.03132 (14), 
Length of domains: 166136
Time: pickout 0.4202    decision 4.3784    set_bounds 2.6859    solve 24.5841    add 0.2185    
Accumulated time: pickout 2.4447    decision 21.7018    set_bounds 16.6704    solve 118.5689    add 21.5906    
Current (lb-rhs): -0.03449537232518196
364674 domains visited
Cumulative time: 183.6356885433197

BaB round 15
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts: total 1226 constraints, 42753 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.3770
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 540] [/input-8, 1259] [/input, 3189] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04217252880334854
10 lb beta sum: 2.2482357025146484, worst -0.0409957617521286
pruning_in_iteration open status: False
ratio of positive domain = 1942 / 65536 = 0.029632568359375
pruning-in-iteration extra time: 0.001476287841796875
Time: prepare 1.0642    bound 22.0313    transfer 0.4124    finalize 0.4935    func 24.4231    
Accumulated time: func 142.9225    prepare 7.5278    bound 125.8598    transfer 2.6258    finalize 4.3862    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03450 (14), -0.03397 (14), -0.03349 (14), -0.03243 (16), -0.03236 (14), -0.03232 (16), -0.03232 (14), -0.03228 (14), -0.03227 (14), -0.03214 (16), -0.03165 (16), -0.03161 (16), -0.03161 (14), -0.03158 (17), -0.03158 (14), -0.03157 (17), -0.03153 (16), -0.03137 (17), -0.03134 (14), -0.03132 (14), 
Length of domains: 194280
Time: pickout 0.4563    decision 4.5954    set_bounds 2.8162    solve 24.4346    add 0.2471    
Accumulated time: pickout 2.9010    decision 26.2972    set_bounds 19.4866    solve 143.0035    add 21.8377    
Current (lb-rhs): -0.03449537232518196
425586 domains visited
Time out!!!!!!!!
found process to kill: terminal indx = 3
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.mps
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.cuts
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.indx
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=67_spec=3_30441800.log
found process for pidx=3
Result: unknown in 220.2497 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.71828079, -12.07358360,  -7.51085901,  -7.73513126,  -5.85087204,
          -7.76494551,  -8.30688477,  -4.66740465, -11.87115002, -11.40974522]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 561] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 561] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 170] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.23245573, 6.33307838, 2.35018468, 2.53250027, 0.82198739, 2.56909752,
         2.92734623, 6.26306963, 5.81518650]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0411 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.44977188,  -9.06816578,  -8.76676846, -10.00036716,  -8.16498661,
         -10.20727444, -10.19177628,  -9.06856728,  -5.60935688,  -8.05991840]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [446]; unstable size 446; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 151, 1, 446] with unstable size 150 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 446] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 446] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 150] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.39624703, 2.77556825, 2.57724094, 3.80850053, 2.01538920, 4.00958395,
         3.97526073, 2.81353402, 1.83315969]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0727 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.04652691, -11.10261822,  -7.86249161,  -8.90385628,  -7.35591507,
          -8.96246243,  -6.67423820,  -9.53345776, -12.04738331, -11.83759594]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [415]; unstable size 415; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 415] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 415] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 415] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.83799863, 3.77172470, 0.92177492, 1.93019617, 0.40763259, 1.98125410,
         2.40290666, 4.67680836, 4.50188541]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0283 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.33996439, -6.41871643, -5.27160645, -5.78144073, -5.19606686,
         -5.95623350, -5.03869438, -5.45932245, -5.23290539, -6.04166842]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 442] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 442] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 146] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.31949663, 1.40748453, 1.74333322, 1.23676848, 1.91310012, 1.10932422,
         1.36478341, 1.55591106, 2.01130962]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0775 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.12939644, -9.72904682, -5.54302311, -6.04563618, -5.96231461,
         -6.23193979, -5.71355343, -6.85170698, -7.76404381, -8.90234089]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [423]; unstable size 423; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 423] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 423] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 423] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 201] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.53611350,  2.83135986, -0.80475771, -0.42034245,  0.15137628,
         -0.61510253,  0.28265750,  0.83452541,  1.97465444]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.12939644, -9.72904682, -5.54302311, -6.04563618, -5.96231461,
         -6.23193979, -5.71355343, -6.85170698, -7.76404381, -8.90234089]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.12939644, -9.72904778, -5.54302359, -6.04563808, -5.96231556,
          -6.23194075, -5.71355438, -6.85170746, -7.76404476, -8.90234089],
         [-6.12939644, -9.72904778, -5.54302359, -6.04563808, -5.96231556,
          -6.23194075, -5.71355438, -6.85170746, -7.76404476, -8.90234089]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08375835, -0.50261450, -0.08332253, -0.33208370]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]],


         [[[1.64603198, 1.59841299, 1.61428595,  ..., 1.72539711,
            1.70952404, 1.80476213],
           [1.59841299, 1.55079389, 1.55079389,  ..., 1.67777801,
            1.67777801, 1.74127007],
           [1.59841299, 1.56666696, 1.56666696,  ..., 1.69365108,
            1.69365108, 1.75714314],
           ...,
           [1.26507962, 1.34444475, 1.47142887,  ..., 1.88412726,
            1.96349227, 2.04285717],
           [1.36031771, 1.32857168, 1.48730183,  ..., 1.86825418,
            1.97936535, 2.04285717],
           [1.59841299, 1.34444475, 1.21746063,  ..., 1.90000021,
            1.96349227, 2.04285717]],

          [[1.49758482, 1.46537876, 1.46537876,  ..., 1.61030626,
            1.59420323, 1.67471850],
           [1.46537876, 1.41706955, 1.41706955,  ..., 1.56199706,
            1.56199706, 1.62640929],
           [1.46537876, 1.43317258, 1.43317258,  ..., 1.57810009,
            1.57810009, 1.62640929],
           ...,
           [1.22383285, 1.15942061, 1.22383285,  ..., 1.90016127,
            2.01288271, 2.09339786],
           [1.75523376, 1.65861547, 1.67471850,  ..., 1.93236744,
            2.06119204, 2.10950065],
           [1.99677968, 1.75523376, 1.59420323,  ..., 2.01288271,
            2.07729483, 2.10950065]],

          [[1.72563756, 1.68066013, 1.69565260,  ..., 1.84557760,
            1.83058512, 1.92054021],
           [1.68066013, 1.63568258, 1.63568258,  ..., 1.80060017,
            1.80060017, 1.86057019],
           [1.68066013, 1.65067506, 1.66566753,  ..., 1.81559265,
            1.81559265, 1.87556267],
           ...,
           [1.59070504, 1.38081002, 1.45577252,  ..., 2.07046509,
            2.08545780, 2.10045004],
           [2.09295392, 2.08545780, 2.09295392,  ..., 1.99550271,
            2.02548766, 2.10045004],
           [2.10045004, 1.99550271, 1.99550271,  ..., 2.01049519,
            2.05547261, 2.10045004]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0784 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.04236412, -15.83466625, -11.57055759, -12.04814053, -11.33596802,
         -12.07632923, -10.29791260, -13.00263977, -15.47680664, -15.46460438]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [504]; unstable size 504; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 504] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 504] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 504] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 239] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.98187900, 4.42113018, 0.88485718, 1.34177840, 0.68826032, 1.36417842,
         2.12291312, 4.03281069, 4.06385756]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0688 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.82596016, -8.01462746, -5.61366749, -5.94512081, -4.99872208,
         -6.00526476, -5.77766132, -3.03901243, -9.93118095, -6.94092846]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [450]; unstable size 450; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 450] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 450] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 450] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 141] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.08748531, 3.92924953, 2.12131405, 2.35519123, 1.63135076, 2.42033052,
         2.09290028, 5.92347908, 2.98009157]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0634 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.71775055, -8.71694279, -8.45971107, -9.68828869, -8.52095413,
         -9.86249352, -9.58036518, -8.48355675, -7.19637108, -7.55859327]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [433]; unstable size 433; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 433] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 433] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 433] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 170] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.48584497, 1.32305896, 2.39883733, 1.24146891, 2.56375098, 2.28120017,
         1.11799204, 0.07953003, 0.28410673]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0663 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.67823887, -8.79199886, -4.26914644, -4.69909000, -4.87025404,
         -4.79431295, -5.06131744, -5.80675077, -8.86075783, -8.01763248]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [469]; unstable size 469; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 469] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 469] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 469] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 153] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.32742596,  3.28234100, -0.82947564, -0.11151652, -0.27848172,
         -0.02716172,  0.58209598,  3.50851631,  2.55930853]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.67823887, -8.79199886, -4.26914644, -4.69909000, -4.87025404,
         -4.79431295, -5.06131744, -5.80675077, -8.86075783, -8.01763248]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.67823887, -8.79199982, -4.26914644, -4.69909000, -4.87025356,
          -4.79431295, -5.06131649, -5.80675030, -8.86075783, -8.01763248],
         [-6.67823887, -8.79199982, -4.26914644, -4.69909000, -4.87025356,
          -4.79431295, -5.06131649, -5.80675030, -8.86075783, -8.01763248]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.52516651, -0.09522295,  0.07594061,  0.26700354]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]],


         [[[ 0.88412702, -0.05238085, -1.08412695,  ...,  0.18571436,
             0.29682547,  0.40793657],
           [ 0.90000004, -0.00476181, -0.35396814,  ...,  0.74126989,
             0.39206356,  0.28095245],
           [ 0.88412702,  0.77301592,  0.40793657,  ...,  1.90000021,
             1.59841299,  0.97936511],
           ...,
           [ 0.01111121, -0.06825387, -0.09999990,  ...,  1.56666696,
             1.56666696,  1.74127007],
           [-0.03650784, -0.08412688, -0.16349196,  ...,  1.67777801,
             1.61428595,  1.59841299],
           [-0.08412688, -0.11587292, -0.17936498,  ...,  1.20158756,
             1.23333359,  0.86825401]],

          [[ 0.03220624, -0.74074072, -1.46537840,  ..., -0.09661824,
             0.03220624,  0.16103071],
           [ 0.16103071, -0.61191624, -0.69243151,  ...,  0.53140104,
             0.11272153, -0.04830906],
           [ 0.27375212,  0.27375212,  0.11272153,  ...,  1.70692456,
             1.33655429,  0.64412248],
           ...,
           [-0.46698871, -0.54750401, -0.59581316,  ...,  1.27214205,
             1.19162667,  1.33655429],
           [-0.49919480, -0.57971013, -0.67632848,  ...,  1.35265732,
             1.27214205,  1.22383285],
           [-0.53140092, -0.61191624, -0.70853460,  ...,  0.70853472,
             0.78904998,  0.38647354]],

          [[-0.77811092, -1.03298354, -1.49775124,  ..., -0.43328333,
            -0.25337315, -0.08845562],
           [-0.82308841, -1.07796109, -0.89805096,  ...,  0.06146942,
            -0.32833579, -0.47826082],
           [-0.79310340, -0.41829082, -0.26836565,  ...,  1.32084000,
             0.96101969,  0.27136448],
           ...,
           [-0.88305843, -0.95802099, -1.00299859,  ...,  0.78110963,
             0.55622208,  0.52623707],
           [-0.89805096, -0.97301346, -1.06296861,  ...,  0.76611710,
             0.52623707,  0.45127454],
           [-0.94302845, -0.98800600, -1.06296861,  ...,  0.01649191,
             0.03148442, -0.08845562]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0419 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.94152546,  -9.43132877, -11.42302418, -12.00805473, -11.48972893,
         -12.21064949, -12.50059700, -12.93048859,  -7.66620636,  -8.89758873]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [513]; unstable size 513; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 513] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 513] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 513] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 161] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.39024830,  0.27186391,  1.95888186,  2.51927996,  2.04223776,
          2.70385861,  2.90191841,  3.45087051, -1.63618660]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.94152546,  -9.43132877, -11.42302418, -12.00805473, -11.48972893,
         -12.21064949, -12.50059700, -12.93048859,  -7.66620636,  -8.89758873]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.94152737,  -9.43132782, -11.42302322, -12.00805569, -11.48972893,
          -12.21065044, -12.50059700, -12.93048954,  -7.66620636,  -8.89758873],
         [ -8.94152737,  -9.43132782, -11.42302322, -12.00805569, -11.48972893,
          -12.21065044, -12.50059700, -12.93048954,  -7.66620636,  -8.89758873]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04393864, -1.23138237]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.32222211e+00, -1.32222211e+00, -1.29047608e+00,  ...,
            -1.33809519e+00, -1.33809519e+00, -1.33809519e+00],
           [-1.27460313e+00, -1.27460313e+00, -1.25873005e+00,  ...,
            -1.29047608e+00, -1.29047608e+00, -1.29047608e+00],
           [-1.22698402e+00, -1.24285710e+00, -1.24285710e+00,  ...,
            -1.25873005e+00, -1.25873005e+00, -1.27460313e+00],
           ...,
           [ 9.04762819e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.69841349e-01,  1.06349289e-01,  7.46032670e-02],
           [ 7.46032670e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.06349289e-01,  7.46032670e-02, -5.23808524e-02],
           [-4.76180762e-03,  1.11112073e-02,  4.28572372e-02,  ...,
            -4.76180762e-03, -3.65078375e-02, -1.47618949e-01]],

          [[-2.41545767e-01, -2.73751885e-01, -2.41545767e-01,  ...,
            -2.89854944e-01, -2.89854944e-01, -2.89854944e-01],
           [-1.93236589e-01, -2.09339648e-01, -1.93236589e-01,  ...,
            -2.25442708e-01, -2.25442708e-01, -2.25442708e-01],
           [-1.61030471e-01, -1.93236589e-01, -1.61030471e-01,  ...,
            -2.09339648e-01, -2.09339648e-01, -2.09339648e-01],
           ...,
           [ 1.44927651e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             8.05154145e-02,  3.22062373e-02,  3.22062373e-02],
           [ 1.28824592e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             1.61031820e-02,  1.22934580e-07, -3.22059989e-02],
           [ 3.22062373e-02,  4.83092964e-02,  8.05154145e-02,  ...,
            -4.83090580e-02, -6.44121096e-02, -1.12721294e-01]],

          [[ 7.21139610e-01,  6.91154599e-01,  7.06147075e-01,  ...,
             6.76162124e-01,  6.76162124e-01,  6.76162124e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.81109631e-01,  ...,
             7.36132085e-01,  7.36132085e-01,  7.36132085e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.66117096e-01,  ...,
             7.51124620e-01,  7.36132085e-01,  7.36132085e-01],
           ...,
           [ 6.14694245e-02,  3.14844176e-02,  6.14694245e-02,  ...,
             1.64919142e-02, -1.34930937e-02,  1.49940979e-03],
           [ 4.64769229e-02,  3.14844176e-02,  6.14694245e-02,  ...,
            -2.84855980e-02, -4.34781015e-02, -7.34631121e-02],
           [-2.84855980e-02, -1.34930937e-02,  1.64919142e-02,  ...,
            -8.84556174e-02, -1.18440613e-01, -1.63418129e-01]]],


         [[[-1.32222211e+00, -1.32222211e+00, -1.29047608e+00,  ...,
            -1.33809519e+00, -1.33809519e+00, -1.33809519e+00],
           [-1.27460313e+00, -1.27460313e+00, -1.25873005e+00,  ...,
            -1.29047608e+00, -1.29047608e+00, -1.29047608e+00],
           [-1.22698402e+00, -1.24285710e+00, -1.24285710e+00,  ...,
            -1.25873005e+00, -1.25873005e+00, -1.27460313e+00],
           ...,
           [ 9.04762819e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.69841349e-01,  1.06349289e-01,  7.46032670e-02],
           [ 7.46032670e-02,  1.06349289e-01,  1.38095319e-01,  ...,
             1.06349289e-01,  7.46032670e-02, -5.23808524e-02],
           [-4.76180762e-03,  1.11112073e-02,  4.28572372e-02,  ...,
            -4.76180762e-03, -3.65078375e-02, -1.47618949e-01]],

          [[-2.41545767e-01, -2.73751885e-01, -2.41545767e-01,  ...,
            -2.89854944e-01, -2.89854944e-01, -2.89854944e-01],
           [-1.93236589e-01, -2.09339648e-01, -1.93236589e-01,  ...,
            -2.25442708e-01, -2.25442708e-01, -2.25442708e-01],
           [-1.61030471e-01, -1.93236589e-01, -1.61030471e-01,  ...,
            -2.09339648e-01, -2.09339648e-01, -2.09339648e-01],
           ...,
           [ 1.44927651e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             8.05154145e-02,  3.22062373e-02,  3.22062373e-02],
           [ 1.28824592e-01,  1.12721533e-01,  1.44927651e-01,  ...,
             1.61031820e-02,  1.22934580e-07, -3.22059989e-02],
           [ 3.22062373e-02,  4.83092964e-02,  8.05154145e-02,  ...,
            -4.83090580e-02, -6.44121096e-02, -1.12721294e-01]],

          [[ 7.21139610e-01,  6.91154599e-01,  7.06147075e-01,  ...,
             6.76162124e-01,  6.76162124e-01,  6.76162124e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.81109631e-01,  ...,
             7.36132085e-01,  7.36132085e-01,  7.36132085e-01],
           [ 7.81109631e-01,  7.51124620e-01,  7.66117096e-01,  ...,
             7.51124620e-01,  7.36132085e-01,  7.36132085e-01],
           ...,
           [ 6.14694245e-02,  3.14844176e-02,  6.14694245e-02,  ...,
             1.64919142e-02, -1.34930937e-02,  1.49940979e-03],
           [ 4.64769229e-02,  3.14844176e-02,  6.14694245e-02,  ...,
            -2.84855980e-02, -4.34781015e-02, -7.34631121e-02],
           [-2.84855980e-02, -1.34930937e-02,  1.64919142e-02,  ...,
            -8.84556174e-02, -1.18440613e-01, -1.63418129e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0700 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.31059456, -9.19869709, -6.36061764, -5.86587429, -6.10512066,
         -5.87761021, -5.44350815, -7.33536816, -9.65457726, -9.34368134]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [529]; unstable size 529; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 279, 1, 529] with unstable size 278 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 529] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 529] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [278]; unstable size 278; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 278] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 278] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.59141266,  2.18968105,  0.02786517, -0.24016404, -0.01105538,
         -0.84800017,  0.91358435,  2.79599810,  2.43839073]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.31059456, -9.19869709, -6.36061764, -5.86587429, -6.10512066,
         -5.87761021, -5.44350815, -7.33536816, -9.65457726, -9.34368134]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.31059361, -9.19869709, -6.36061716, -5.86587334, -6.10511971,
          -5.87760925, -5.44350719, -7.33536768, -9.65457630, -9.34368038],
         [-8.31059361, -9.19869709, -6.36061716, -5.86587334, -6.10511971,
          -5.87760925, -5.44350719, -7.33536768, -9.65457630, -9.34368038]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.23924637,  0.01173592, -0.42236614]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0697 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.56623745, -11.41576767, -10.07493591,  -9.61873627,  -8.49861526,
          -9.59471893, -10.02411652,  -5.97250652, -15.06334496, -10.70611000]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [380]; unstable size 380; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 380] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 380] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 380] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 170] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.77624798, 4.21953011, 3.57391548, 2.98815536, 2.16194487, 2.97055173,
         3.34188175, 7.80460024, 3.62507725]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0657 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965576,
         -7.48542309, -5.95269966, -6.55542850, -6.95760822, -7.28021479]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [718]; unstable size 718; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 226, 1, 718] with unstable size 225 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 718] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 718] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [225]; unstable size 225; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 225] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.73039532, -0.79011083,  0.57272589, -1.24159360,  0.72255588,
         -0.83794022, -0.30544642,  0.50340199,  0.65051723]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965576,
         -7.48542309, -5.95269966, -6.55542850, -6.95760822, -7.28021479]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965672,
          -7.48542261, -5.95269966, -6.55542803, -6.95760727, -7.28021431],
         [-6.03761673, -8.41805744, -5.85938931, -7.32063293, -5.45965672,
          -7.48542261, -5.95269966, -6.55542803, -6.95760727, -7.28021431]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.17822742, -0.57796001, -0.08491707,  0.51781130]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0738 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.97952795, -8.99672222, -2.56834173, -6.00308132, -2.85744190,
         -6.12038279, -4.47296047, -6.33899212, -7.67273140, -9.32237816]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [671]; unstable size 671; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 671] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 671] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 671] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 138] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.03369808, 5.73617172, 3.16968560, 0.11967242, 3.28296471, 1.49780858,
         3.40163088, 4.61310005, 6.06763077]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0588 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.72943306, -13.36404133, -10.46452236, -10.18775558, -10.67775059,
         -10.31442547, -10.42091751, -12.09385109, -14.04162884, -12.43282795]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [519]; unstable size 519; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 208, 1, 519] with unstable size 207 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 519] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 519] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [207]; unstable size 207; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 207] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 207] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.77904415,  2.09425759, -0.17746937, -0.14749081, -0.04247403,
         -0.25705305,  1.25096059,  2.87834311,  1.30093026]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.72943306, -13.36404133, -10.46452236, -10.18775558, -10.67775059,
         -10.31442547, -10.42091751, -12.09385109, -14.04162884, -12.43282795]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.72943401, -13.36404228, -10.46452332, -10.18775558, -10.67775154,
          -10.31442547, -10.42091846, -12.09385109, -14.04162884, -12.43282604],
         [-12.72943401, -13.36404228, -10.46452332, -10.18775558, -10.67775154,
          -10.31442547, -10.42091846, -12.09385109, -14.04162884, -12.43282604]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.15009785, -0.12666988,  0.36332607,  0.10649300]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0653 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.06531239,  -7.74203110,  -9.88070679,  -9.82949257,  -9.60023689,
          -9.98339939, -10.37213230,  -9.42480564,  -7.49855232,  -6.63923311]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [475]; unstable size 475; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 475] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 475] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 475] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 175] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.84191799, 0.84316367, 2.53841209, 2.50969028, 2.26216412, 2.65042305,
         3.05267286, 2.06743336, 0.15342283]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0340 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.73141861, -11.30915737,  -4.88030291,  -7.12666321,  -4.79732800,
          -7.23894691,  -4.88668823,  -8.34137917, -11.50362206, -11.30148792]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [430]; unstable size 430; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 430] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 430] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 430] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 147] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.51234388,  5.89082623, -0.09712332,  2.02813959,  2.13893557,
         -0.29849386,  3.28444505,  6.09165287,  5.92712975]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.73141861, -11.30915737,  -4.88030291,  -7.12666321,  -4.79732800,
          -7.23894691,  -4.88668823,  -8.34137917, -11.50362206, -11.30148792]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.57346249, -11.22899342,  -4.74797535,  -7.02396488,  -4.79112053,
           -7.14028025,  -4.77940559,  -8.43676853, -11.36150742, -11.23217297],
         [ -8.57346249, -11.22899342,  -4.74797535,  -7.02396488,  -4.79112053,
           -7.14028025,  -4.77940559,  -8.43676853, -11.36150742, -11.23217297]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04314518, -0.01171494]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0143 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0384 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.23663616,  -7.30285454, -10.59052181, -11.18651009,  -9.79314327,
         -11.32224941, -10.81732941, -10.63050747,  -8.28581619,  -8.59702969]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [473]; unstable size 473; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 473] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 473] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 473] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 188] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.20088053, 2.32582474, 2.93001938, 1.51513958, 3.04989457, 2.44549179,
         2.25616550, 0.37113976, 1.01464093]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0616 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.20327091, -13.29206181, -10.09174442, -10.56737804, -10.67555809,
         -10.55320644, -10.67248249, -11.32285500, -14.20694542, -13.81692600]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 540] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 540] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 159] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.68249512, 2.60424328, 0.24534428, 0.40565336, 0.23199633, 0.28501636,
         0.98760176, 3.62160516, 3.12635517]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0526 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.88856792, -8.49503231, -5.36369038, -4.94106483, -4.84540939,
         -4.91523314, -4.41490841, -5.03733397, -9.81567383, -8.20178318]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [406]; unstable size 406; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 406] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 406] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 406] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 177] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.21111035,  2.55126309, -0.03250980, -0.36227429, -0.47769570,
         -0.38185108, -1.15160513,  3.89880347,  2.32914209]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.88856792, -8.49503231, -5.36369038, -4.94106483, -4.84540939,
         -4.91523314, -4.41490841, -5.03733397, -9.81567383, -8.20178318]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.88856697, -8.49503231, -5.36369038, -4.94106483, -4.84540987,
          -4.91523314, -4.41490841, -5.03733492, -9.81567383, -8.20178318],
         [-8.88856697, -8.49503231, -5.36369038, -4.94106483, -4.84540987,
          -4.91523314, -4.41490841, -5.03733492, -9.81567383, -8.20178318]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.32635546, -0.09627008, -0.19192505, -0.12210178, -0.62242651]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0584 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.65746784, -6.18078041, -1.80823123, -1.86352706, -2.33689523,
         -1.93374062, -3.13896918, -1.17628169, -6.39098358, -3.11623693]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [313]; unstable size 313; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 117, 1, 313] with unstable size 116 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 313] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 313] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [116]; unstable size 116; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 116] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 116] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.51907647,  3.67257810, -0.19120371,  0.28516850, -0.12094021,
          0.99198145, -0.98088312,  3.95130229,  0.65798187]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.65746784, -6.18078041, -1.80823123, -1.86352706, -2.33689523,
         -1.93374062, -3.13896918, -1.17628169, -6.39098358, -3.11623693]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.65746784, -6.18078041, -1.80823135, -1.86352754, -2.33689499,
          -1.93374085, -3.13896894, -1.17628217, -6.39098454, -3.11623693],
         [-3.65746784, -6.18078041, -1.80823135, -1.86352754, -2.33689499,
          -1.93374085, -3.13896894, -1.17628217, -6.39098454, -3.11623693]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.05529618,  0.12550950, -0.63194919]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0553 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
         -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [462]; unstable size 462; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 180, 1, 462] with unstable size 179 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 462] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 462] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [179]; unstable size 179; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 179] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 179] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.67029381,  1.91223335,  2.76860046,  2.38123560,  2.85544062,
          2.41773987,  3.34567595, -0.93968225,  0.84438074]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
         -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.67684555, -4.17685509, -7.04651976, -7.85120487, -7.47941399,
          -7.95128965, -7.51899147, -8.40921116, -3.84111595, -5.26576757]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.33573914]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.67142856, -1.65555561,  ..., -0.27460307,
            -0.32222211, -0.24285704],
           [-1.09999990, -0.90952379, -0.89365077,  ...,  0.02698422,
            -0.22698402, -0.35396814],
           [-0.70317459, -0.57619047, -0.73492062,  ...,  0.09047628,
            -0.08412688, -0.16349196],
           ...,
           [ 0.64603180,  0.61428577,  0.63015878,  ..., -1.86190474,
            -1.81428576, -1.52857137],
           [ 0.61428577,  0.55079371,  0.56666672,  ..., -1.70317459,
            -1.36984122, -0.87777776],
           [ 0.01111121, -0.17936498, -0.24285704,  ..., -0.98888886,
            -0.78253967, -0.62380952]],

          [[-1.64251208, -1.57809973, -1.56199670,  ..., -0.70853460,
            -0.77294683, -0.67632848],
           [-0.86956519, -0.67632848, -0.66022539,  ..., -0.59581316,
            -0.78904986, -0.83735907],
           [-0.33816412, -0.20933965, -0.35426718,  ..., -0.62801927,
            -0.74074072, -0.69243151],
           ...,
           [ 0.64412248,  0.62801939,  0.64412248,  ..., -1.77133656,
            -1.72302747, -1.44927526],
           [ 0.64412248,  0.57971025,  0.59581327,  ..., -1.64251208,
            -1.32045078, -0.80515295],
           [ 0.11272153, -0.08051517, -0.16103047,  ..., -0.95008045,
            -0.74074072, -0.59581316]],

          [[-1.28785622, -1.22788620, -1.21289361,  ..., -0.56821585,
            -0.67316341, -0.59820086],
           [-0.43328333, -0.25337315, -0.23838064,  ..., -0.47826082,
            -0.70314842, -0.76311839],
           [ 0.16641696,  0.28635699,  0.13643195,  ..., -0.56821585,
            -0.68815589, -0.62818587],
           ...,
           [ 0.61619210,  0.60119957,  0.61619210,  ..., -1.46776617,
            -1.40779614, -1.15292358],
           [ 0.66116959,  0.60119957,  0.61619210,  ..., -1.36281872,
            -1.04797614, -0.58320838],
           [ 0.24137947,  0.06146942, -0.01349309,  ..., -0.73313338,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.84198666, -4.72074509, -2.69757771, -2.34419656, -2.72111034,
         -2.42904544, -2.38987303, -3.45313597, -5.43384743, -4.25232363]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [597]; unstable size 597; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 597] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 597] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 597] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 203] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.79418397,  1.27176404, -0.11253977, -0.41002408, -0.13396955,
         -0.34127319,  0.48139536,  2.23571205,  0.95288682]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.84198666, -4.72074509, -2.69757771, -2.34419656, -2.72111034,
         -2.42904544, -2.38987303, -3.45313597, -5.43384743, -4.25232363]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.84198666, -4.72074509, -2.69757748, -2.34419608, -2.72111011,
          -2.42904544, -2.38987303, -3.45313621, -5.43384695, -4.25232363],
         [-4.84198666, -4.72074509, -2.69757748, -2.34419608, -2.72111011,
          -2.42904544, -2.38987303, -3.45313621, -5.43384695, -4.25232363]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.30770445, -0.04567695,  0.33123708,  0.03917241]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0764 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.19456577,  -8.36557293, -13.55558205, -13.23456478, -12.32262707,
         -13.37201500, -13.57000160, -12.17472267, -11.16325188,  -8.78851414]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [588]; unstable size 588; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 588] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 588] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 588] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 142] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.16457844, 4.29507446, 3.98237991, 3.06007886, 4.11273384, 4.28068399,
         2.84930611, 2.22545958, 0.24410954]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0521 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.71225262, -12.01007652,  -8.29110718,  -7.58899784,  -8.32572460,
          -7.52227640,  -8.05987549,  -8.91144371, -14.67064476, -11.80937672]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 458] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 458] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.67991829, 3.77827573, 0.47558510, 0.04749578, 0.50099063, 0.13609672,
         1.01967573, 6.51380968, 3.67172766]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0612 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.25923347,  -8.93387318, -12.07442665, -12.36280155, -11.61011887,
         -12.40742683, -12.73714542, -11.05641937,  -9.61292076, -10.40355968]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 515] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 515] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 138] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.75624776, 2.35665655, 2.62816501, 1.91056156, 2.66094518, 2.94464588,
         1.34808433, 0.20877779, 1.29339421]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0649 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-0.12398815, -7.37717056, -1.18167615, -3.64735293, -2.90664721,
         -3.76087618, -4.92453289, -5.42116880, -1.31887615, -6.85669994]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [515]; unstable size 515; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 128, 1, 515] with unstable size 127 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 515] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 515] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [127]; unstable size 127; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 127] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 127] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.24615049,  5.69084549,  2.23981619,  1.54952383,  2.35145092,
          3.44639969,  3.95842123, -0.23636484,  5.13023090]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.12398815, -7.37717056, -1.18167615, -3.64735293, -2.90664721,
         -3.76087618, -4.92453289, -5.42116880, -1.31887615, -6.85669994]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.12398925, -7.37717152, -1.18167734, -3.64735389, -2.90664840,
          -3.76087666, -4.92453480, -5.42116880, -1.31887758, -6.85670042],
         [-0.12398925, -7.37717152, -1.18167734, -3.64735389, -2.90664840,
          -3.76087666, -4.92453480, -5.42116880, -1.31887758, -6.85670042]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.05768812,  0.13720024]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]],


         [[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0682 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.27392960, -10.40883446, -10.95635605, -11.48171997, -11.53870010,
         -11.52956009, -10.56092262, -12.92515469, -12.09226036, -11.58665943]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [407]; unstable size 407; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 156, 1, 407] with unstable size 155 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 407] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 407] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [155]; unstable size 155; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 155] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 155] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.79021215, -0.15416002,  0.34587622,  0.41858768,  0.38338351,
         -0.53462267,  1.75449777,  0.91765881,  0.82849878]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.27392960, -10.40883446, -10.95635605, -11.48171997, -11.53870010,
         -11.52956009, -10.56092262, -12.92515469, -12.09226036, -11.58665943]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.27393055, -10.40883350, -10.95635605, -11.48171997, -11.53870010,
          -11.52956009, -10.56092167, -12.92515469, -12.09225941, -11.58665943],
         [-10.27393055, -10.40883350, -10.95635605, -11.48171997, -11.53870010,
          -11.52956009, -10.56092167, -12.92515469, -12.09225941, -11.58665943]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13490295,  0.54752254,  0.15208817]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]],


         [[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]],


         [[[-1.73492062, -1.73492062, -1.71904767,  ..., -0.19523799,
             0.29682547,  0.23333341],
           [-1.75079370, -1.71904767, -1.65555561,  ..., -0.17936498,
             0.26507944,  0.20158738],
           [-1.75079370, -1.63968253, -1.48095226,  ..., -0.21111101,
             0.18571436,  0.12222230],
           ...,
           [-0.75079364, -0.75079364, -0.63968253,  ..., -0.86190474,
            -0.89365077, -0.90952379],
           [-0.76666665, -0.73492062, -0.60793650,  ..., -0.86190474,
            -0.90952379, -0.92539680],
           [-0.71904761, -0.65555555, -0.54444444,  ..., -0.81428570,
            -0.90952379, -0.90952379]],

          [[-1.88405800, -1.88405800, -1.85185194,  ..., -0.27375188,
             0.24154601,  0.24154601],
           [-1.90016103, -1.85185194, -1.80354273,  ..., -0.25764883,
             0.24154601,  0.24154601],
           [-1.88405800, -1.77133656, -1.61030602,  ..., -0.25764883,
             0.20933989,  0.19323683],
           ...,
           [-0.53140092, -0.53140092, -0.41867942,  ..., -0.64412236,
            -0.67632848, -0.69243151],
           [-0.56360704, -0.53140092, -0.38647330,  ..., -0.64412236,
            -0.69243151, -0.69243151],
           [-0.51529789, -0.45088565, -0.32206106,  ..., -0.61191624,
            -0.67632848, -0.69243151]],

          [[-1.60269880, -1.66266882, -1.66266882,  ...,  0.45127454,
             0.79610211,  0.79610211],
           [-1.67766130, -1.67766130, -1.61769128,  ...,  0.45127454,
             0.81109464,  0.79610211],
           [-1.69265378, -1.60269880, -1.45277369,  ...,  0.40629703,
             0.78110963,  0.75112462],
           ...,
           [ 0.25637197,  0.25637197,  0.36131951,  ...,  0.12143944,
             0.13643195,  0.12143944],
           [ 0.28635699,  0.31634200,  0.43628204,  ...,  0.10644694,
             0.12143944,  0.10644694],
           [ 0.33133450,  0.37631202,  0.49625200,  ...,  0.15142445,
             0.13643195,  0.10644694]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0741 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.03281784, -8.23260021, -1.84217274, -3.97030663, -2.07109594,
         -4.04030323, -2.67588925, -4.08758450, -7.76276398, -8.17520523]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [391]; unstable size 391; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 391] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 391] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 391] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 169] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.71139061,  4.86630106, -1.22754908,  0.94557452, -1.01543295,
          1.00673771,  0.82872880,  4.49219036,  4.77490425]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.03281784, -8.23260021, -1.84217274, -3.97030663, -2.07109594,
         -4.04030323, -2.67588925, -4.08758450, -7.76276398, -8.17520523]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.03281879, -8.23260021, -1.84217358, -3.97030759, -2.07109690,
          -4.04030418, -2.67589021, -4.08758593, -7.76276398, -8.17520523],
         [-5.03281879, -8.23260021, -1.84217358, -3.97030759, -2.07109690,
          -4.04030418, -2.67589021, -4.08758593, -7.76276398, -8.17520523]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.83371663, -0.60479331]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0695 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
         -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [746]; unstable size 746; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 746] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 746] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 746] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 260] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.64249671,  4.36007452,  0.44215178, -0.09383833,  0.53698564,
          0.11810175,  1.25011325,  2.22731781,  3.35412192]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
         -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.85it/s]100%|██████████| 1/1 [00:00<00:00,  8.84it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.02882814, -6.13730335, -0.72621405, -1.43307424, -0.73920232,
          -1.52886283, -1.13457453, -2.27671862, -4.01522541, -5.08771849]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.01298827]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1158 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.18382453918457
alpha/beta optimization time: 1.2178618907928467
initial alpha-crown bounds: tensor([[ 1.68035650,  4.42552090,  0.46530288, -0.08068620,  0.55969673,
          0.14187613,  1.27987504,  2.29280543,  3.41907716]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08068619668483734
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6406 seconds.
lower bounds for all target labels: [1.680356502532959, 4.425520896911621, 0.4653027057647705, -0.08068650960922241, 0.5596967339515686, 0.1418755054473877, 1.2798748016357422, 2.2928054332733154, 3.419077157974243]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [3]
start creating model mps for candidates: ['lay/16_3']
parallel save mip model to /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 266587 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.52953934669495
Verifying property 0 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.425520896911621.

Properties batch 1, size 1
Remaining timeout: 198.32885313034058
Verifying property 1 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.419077157974243.

Properties batch 2, size 1
Remaining timeout: 198.21353697776794
Verifying property 2 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.2928054332733154.

Properties batch 3, size 1
Remaining timeout: 198.10137367248535
Verifying property 3 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.680356502532959.

Properties batch 4, size 1
Remaining timeout: 197.98957681655884
Verifying property 4 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2798750400543213.

Properties batch 5, size 1
Remaining timeout: 197.87720251083374
Verifying property 5 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5596967339515686.

Properties batch 6, size 1
Remaining timeout: 197.76084446907043
Verifying property 6 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.46530288457870483.

Properties batch 7, size 1
Remaining timeout: 197.63607621192932
Verifying property 7 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.14187613129615784.

Properties batch 8, size 1
Remaining timeout: 197.50976181030273
Verifying property 8 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08068620]], device='cuda:0') need to verify.
Model prediction is: tensor([-2.72495699, -5.89168453, -0.38030732, -1.11891258, -0.52149594,
        -1.21352100, -0.91386914, -2.07719803, -3.71372318, -4.84915781],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08068620]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 746
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 254
Node /15 input 0: size torch.Size([100]) unstable 9
-----------------
# of unstable neurons: 1009
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008778572082519531
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-12, 61] 
split level 1: [/input-12, 69] 
split level 2: [/input-8, 549] 
split level 3: [/input-8, 545] 
split level 4: [/input-8, 546] 
split level 5: [/input-8, 537] 
split level 6: [/input-8, 1467] 
split level 7: [/input-8, 547] 
pruning_in_iteration open status: True
ratio of positive domain = 128 / 256 = 0.5
pruning-in-iteration extra time: 0.004950761795043945
Time: prepare 0.0033    bound 0.1242    transfer 0.0040    finalize 0.0030    func 0.1346    
Accumulated time: func 0.1346    prepare 0.0037    bound 0.1242    transfer 0.0040    finalize 0.0030    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05332 (8), -0.05290 (8), -0.05277 (8), -0.05234 (8), -0.05218 (8), -0.05177 (8), -0.05162 (8), -0.05139 (8), -0.05133 (8), -0.05125 (8), -0.05121 (8), -0.05083 (8), -0.05077 (8), -0.05077 (8), -0.05070 (8), -0.05043 (8), -0.05038 (8), -0.05024 (8), -0.05021 (8), -0.04987 (8), 
Length of domains: 128
Time: pickout 0.0006    decision 0.0254    set_bounds 0.0208    solve 0.1347    add 0.0689    
Accumulated time: pickout 0.0006    decision 0.0254    set_bounds 0.0208    solve 0.1347    add 0.0689    
Current (lb-rhs): -0.05332261323928833
128 domains visited
Cumulative time: 0.25644683837890625

BaB round 2
Fetch cut process: mps for current label is not ready yet
batch: 128
splitting decisions: 
split level 0: [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 6.508827209472656e-05
Time: prepare 0.0053    bound 0.0952    transfer 0.0008    finalize 0.0023    func 0.1036    
Accumulated time: func 0.2382    prepare 0.0092    bound 0.2195    transfer 0.0048    finalize 0.0053    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05228 (9), -0.05199 (9), -0.05173 (9), -0.05144 (9), -0.05138 (9), -0.05121 (9), -0.05097 (9), -0.05084 (9), -0.05078 (9), -0.05065 (9), -0.05044 (9), -0.05040 (9), -0.05035 (9), -0.05023 (9), -0.05021 (9), -0.05013 (9), -0.04988 (9), -0.04985 (9), -0.04980 (9), -0.04968 (9), 
Length of domains: 256
Time: pickout 0.0024    decision 0.0170    set_bounds 0.0061    solve 0.1037    add 0.0757    
Accumulated time: pickout 0.0029    decision 0.0424    set_bounds 0.0269    solve 0.2384    add 0.1446    
Current (lb-rhs): -0.05227714031934738
384 domains visited
Cumulative time: 0.4619574546813965

BaB round 3
Fetch cut process: mps for current label is not ready yet
batch: 256
splitting decisions: 
split level 0: [/input-8, 949] [/input, 715] [/input-8, 949] [/input, 715] [/input-8, 949] [/input, 715] [/input-8, 949] [/input, 715] [/input-8, 949] [/input, 715] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 5.936622619628906e-05
Time: prepare 0.0115    bound 0.1008    transfer 0.0060    finalize 0.0050    func 0.1235    
Accumulated time: func 0.3617    prepare 0.0209    bound 0.3203    transfer 0.0107    finalize 0.0104    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05120 (10), -0.05095 (10), -0.05065 (10), -0.05065 (10), -0.05040 (10), -0.05040 (10), -0.05030 (10), -0.05019 (10), -0.05010 (10), -0.04995 (10), -0.04985 (10), -0.04976 (10), -0.04976 (10), -0.04975 (10), -0.04964 (10), -0.04961 (10), -0.04943 (10), -0.04941 (10), -0.04940 (10), -0.04932 (10), 
Length of domains: 512
Time: pickout 0.0148    decision 0.0232    set_bounds 0.0114    solve 0.1237    add 0.0231    
Accumulated time: pickout 0.0177    decision 0.0656    set_bounds 0.0382    solve 0.3621    add 0.1677    
Current (lb-rhs): -0.05120323598384857
896 domains visited
Cumulative time: 0.6688783168792725

BaB round 4
Fetch cut process: mps for current label is not ready yet
batch: 512
splitting decisions: 
split level 0: [/input-8, 941] [/input-8, 548] [/input-8, 941] [/input-8, 548] [/input-8, 941] [/input-8, 548] [/input-8, 941] [/input-8, 548] [/input-8, 941] [/input-8, 548] 
pruning_in_iteration open status: False
ratio of positive domain = 2 / 1024 = 0.001953125
pruning-in-iteration extra time: 6.222724914550781e-05
Time: prepare 0.0233    bound 0.1034    transfer 0.0101    finalize 0.0088    func 0.1458    
Accumulated time: func 0.5075    prepare 0.0444    bound 0.4238    transfer 0.0209    finalize 0.0191    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.05044 (11), -0.05014 (11), -0.04989 (11), -0.04988 (11), -0.04959 (11), -0.04958 (11), -0.04955 (11), -0.04945 (11), -0.04933 (11), -0.04916 (11), -0.04903 (11), -0.04902 (11), -0.04900 (11), -0.04900 (11), -0.04890 (11), -0.04885 (11), -0.04868 (11), -0.04863 (11), -0.04861 (11), -0.04854 (11), 
Length of domains: 1018
Time: pickout 0.0273    decision 0.0380    set_bounds 0.0240    solve 0.1460    add 0.1013    
Accumulated time: pickout 0.0451    decision 0.1036    set_bounds 0.0623    solve 0.5081    add 0.2689    
Current (lb-rhs): -0.05043844133615494
1914 domains visited
Cumulative time: 1.014503002166748

BaB round 5
Fetch cut process: mps for current label is not ready yet
batch: 1018
splitting decisions: 
split level 0: [/input-8, 1470] [/input-8, 1470] [/input-8, 731] [/input-8, 1470] [/input-8, 731] [/input-8, 1470] [/input-8, 731] [/input-8, 1470] [/input-8, 1470] [/input-8, 932] 
pruning_in_iteration open status: False
ratio of positive domain = 153 / 2036 = 0.075147347740668
pruning-in-iteration extra time: 0.00010728836059570312
Time: prepare 0.0523    bound 0.1499    transfer 0.2626    finalize 0.1155    func 0.5819    
Accumulated time: func 1.0894    prepare 0.0970    bound 0.5737    transfer 0.2835    finalize 0.1346    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04943 (12), -0.04917 (12), -0.04913 (12), -0.04888 (12), -0.04887 (12), -0.04883 (12), -0.04862 (12), -0.04860 (12), -0.04858 (12), -0.04858 (12), -0.04856 (12), -0.04845 (12), -0.04832 (12), -0.04830 (12), -0.04828 (12), -0.04820 (12), -0.04818 (12), -0.04811 (12), -0.04805 (12), -0.04803 (12), 
Length of domains: 1857
Time: pickout 0.0325    decision 0.0792    set_bounds 0.0551    solve 0.5838    add 0.1105    
Accumulated time: pickout 0.0775    decision 0.1829    set_bounds 0.1174    solve 1.0919    add 0.3794    
Current (lb-rhs): -0.049429282546043396
3771 domains visited
Cumulative time: 1.9279224872589111

BaB round 6
Fetch cut process: mps for current label is not ready yet
batch: 1857
splitting decisions: 
split level 0: [/input-8, 731] [/input-8, 330] [/input-8, 1470] [/input-8, 330] [/input-8, 1470] [/input-8, 330] [/input-8, 330] [/input-8, 731] [/input-8, 330] [/input-8, 330] 
pruning_in_iteration open status: False
ratio of positive domain = 467 / 3714 = 0.1257404415724287
pruning-in-iteration extra time: 6.961822509765625e-05
Time: prepare 0.0911    bound 0.1994    transfer 0.0223    finalize 0.0241    func 0.3374    
Accumulated time: func 1.4269    prepare 0.1885    bound 0.7731    transfer 0.3058    finalize 0.1588    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04893 (13), -0.04867 (13), -0.04863 (13), -0.04838 (13), -0.04836 (13), -0.04833 (13), -0.04813 (13), -0.04811 (13), -0.04808 (13), -0.04808 (13), -0.04806 (13), -0.04796 (13), -0.04781 (13), -0.04779 (13), -0.04778 (13), -0.04768 (13), -0.04767 (13), -0.04760 (13), -0.04756 (13), -0.04752 (13), 
Length of domains: 3166
Time: pickout 0.1212    decision 0.1395    set_bounds 0.1068    solve 0.3385    add 0.1450    
Accumulated time: pickout 0.1987    decision 0.3223    set_bounds 0.2242    solve 1.4303    add 0.5244    
Current (lb-rhs): -0.04893054813146591
6937 domains visited
Cumulative time: 2.7940194606781006

BaB round 7
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0034
batch: 3166
splitting decisions: 
split level 0: [/input-8, 1515] [/input-8, 1453] [/input-8, 1453] [/input-8, 1515] [/input-8, 1453] [/input-8, 1453] [/input-8, 1453] [/input-8, 1453] [/input-8, 1453] [/input-8, 1453] 
pruning_in_iteration open status: True
ratio of positive domain = 1452 / 6332 = 0.22931143398610232
pruning-in-iteration extra time: 0.004854679107666016
Time: prepare 0.1595    bound 0.3145    transfer 0.1034    finalize 0.0523    func 0.6317    
Accumulated time: func 2.0586    prepare 0.3483    bound 1.0876    transfer 0.4092    finalize 0.2111    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04844 (14), -0.04818 (14), -0.04813 (14), -0.04788 (14), -0.04786 (14), -0.04784 (14), -0.04763 (14), -0.04761 (14), -0.04759 (14), -0.04758 (14), -0.04756 (14), -0.04746 (14), -0.04731 (14), -0.04729 (14), -0.04727 (14), -0.04720 (14), -0.04716 (14), -0.04711 (14), -0.04706 (14), -0.04700 (14), 
Length of domains: 4880
Time: pickout 0.0631    decision 0.5093    set_bounds 0.1630    solve 0.6332    add 0.1619    
Accumulated time: pickout 0.2618    decision 0.8317    set_bounds 0.3872    solve 2.0635    add 0.6864    
Current (lb-rhs): -0.04843541979789734
11817 domains visited
Cumulative time: 4.3493921756744385

BaB round 8
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0041
batch: 4096
splitting decisions: 
split level 0: [/input-8, 932] [/input-8, 941] [/input-8, 2003] [/input-8, 1470] [/input-8, 1470] [/input-8, 2003] [/input-8, 1470] [/input-8, 1470] [/input-8, 2003] [/input-8, 932] 
pruning_in_iteration open status: False
ratio of positive domain = 790 / 8192 = 0.096435546875
pruning-in-iteration extra time: 8.511543273925781e-05
Time: prepare 0.2270    bound 0.3715    transfer 0.0519    finalize 0.0648    func 0.7169    
Accumulated time: func 2.7755    prepare 0.5757    bound 1.4591    transfer 0.4611    finalize 0.2759    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04748 (15), -0.04718 (15), -0.04717 (15), -0.04713 (15), -0.04697 (15), -0.04693 (15), -0.04690 (15), -0.04683 (15), -0.04683 (15), -0.04671 (15), -0.04663 (15), -0.04663 (15), -0.04662 (15), -0.04660 (15), -0.04660 (15), -0.04658 (15), -0.04658 (15), -0.04650 (15), -0.04642 (15), -0.04640 (15), 
Length of domains: 8126
Time: pickout 0.0819    decision 0.4871    set_bounds 0.1980    solve 0.7191    add 0.1742    
Accumulated time: pickout 0.3437    decision 1.3187    set_bounds 0.5852    solve 2.7826    add 0.8605    
Current (lb-rhs): -0.04748079180717468
19159 domains visited
current_vram/total_varm: 27.4GB/99.9GB, batch_size increase to 8192
Cumulative time: 6.039194345474243

BaB round 9
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0019
batch: 8126
splitting decisions: 
split level 0: [/input-8, 2003] [/input-8, 932] [/input-8, 932] [/input-8, 932] [/input-8, 932] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 1470] [/input-8, 2003] 
pruning_in_iteration open status: False
ratio of positive domain = 799 / 16252 = 0.04916317991631802
pruning-in-iteration extra time: 0.00018739700317382812
Time: prepare 0.4314    bound 0.6898    transfer 0.1002    finalize 0.1314    func 1.3541    
Accumulated time: func 4.1296    prepare 1.0075    bound 2.1488    transfer 0.5612    finalize 0.4073    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04691 (16), -0.04657 (16), -0.04657 (16), -0.04656 (16), -0.04637 (16), -0.04636 (16), -0.04634 (16), -0.04622 (16), -0.04622 (16), -0.04606 (16), -0.04603 (16), -0.04602 (16), -0.04602 (16), -0.04601 (16), -0.04601 (16), -0.04599 (16), -0.04599 (16), -0.04591 (16), -0.04582 (16), -0.04580 (16), 
Length of domains: 15400
Time: pickout 0.1376    decision 0.6731    set_bounds 0.5482    solve 1.3576    add 0.1885    
Accumulated time: pickout 0.4813    decision 1.9918    set_bounds 1.1334    solve 4.1403    add 1.0490    
Current (lb-rhs): -0.046911872923374176
34559 domains visited
Cumulative time: 9.005029678344727

BaB round 10
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts: total 619 constraints, 24014 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.2072
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 941] [/input-8, 932] [/input-8, 941] [/input-8, 1470] [/input-8, 941] [/input-8, 1470] [/input-8, 941] [/input-8, 932] [/input-8, 941] [/input-8, 932] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.045998185873031616
10 lb beta sum: 1.6424837112426758, worst -0.03502778708934784
pruning_in_iteration open status: False
ratio of positive domain = 1245 / 16384 = 0.07598876953125
pruning-in-iteration extra time: 0.00019860267639160156
Time: prepare 0.4308    bound 2.8788    transfer 0.0917    finalize 0.1360    func 3.6448    
Accumulated time: func 7.7744    prepare 1.4386    bound 5.0276    transfer 0.6530    finalize 0.5433    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04425 (16), -0.04417 (16), -0.04407 (16), -0.04400 (16), -0.04398 (16), -0.04391 (16), -0.04383 (16), -0.04374 (16), -0.04373 (16), -0.04373 (16), -0.04366 (16), -0.04365 (16), -0.04364 (16), -0.04360 (16), -0.04357 (16), -0.04354 (16), -0.04351 (16), -0.04349 (16), -0.04344 (16), -0.04343 (16), 
Length of domains: 21847
Time: pickout 0.1349    decision 0.6812    set_bounds 0.5730    solve 3.6488    add 0.2648    
Accumulated time: pickout 0.6162    decision 2.6730    set_bounds 1.7064    solve 7.7890    add 1.3138    
Current (lb-rhs): -0.04424923658370972
49198 domains visited
current_vram/total_varm: 27.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 14.556276798248291

BaB round 11
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts: total 1003 constraints, 44916 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.6062
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1453] [/input-8, 933] [/input, 937] [/input-8, 933] [/input, 937] [/input-8, 933] [/input, 937] [/input-8, 933] [/input-8, 1453] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.045611731708049774
10 lb beta sum: 2.360734224319458, worst -0.034508999437093735
pruning_in_iteration open status: False
ratio of positive domain = 385 / 32768 = 0.011749267578125
pruning-in-iteration extra time: 0.0006759166717529297
Time: prepare 0.8329    bound 7.4937    transfer 0.1809    finalize 0.5121    func 9.2356    
Accumulated time: func 17.0100    prepare 2.2721    bound 12.5213    transfer 0.8338    finalize 1.0554    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04417 (16), -0.04407 (16), -0.04400 (16), -0.04374 (16), -0.04366 (16), -0.04364 (16), -0.04360 (16), -0.04357 (16), -0.04354 (16), -0.04351 (16), -0.04349 (16), -0.04341 (16), -0.04340 (16), -0.04332 (16), -0.04329 (16), -0.04324 (16), -0.04324 (16), -0.04314 (16), -0.04308 (16), -0.04304 (16), 
Length of domains: 37372
Time: pickout 0.2790    decision 1.6948    set_bounds 0.7122    solve 9.2416    add 0.3581    
Accumulated time: pickout 0.8952    decision 4.3678    set_bounds 2.4186    solve 17.0307    add 1.6719    
Current (lb-rhs): -0.04417431354522705
81107 domains visited
current_vram/total_varm: 42.4GB/99.9GB, batch_size increase to 32768
Cumulative time: 27.515112161636353

BaB round 12
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts: total 1367 constraints, 54433 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.6716
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 941] [/input-8, 941] [/input-8, 941] [/input-8, 941] [/input-8, 941] [/input-8, 941] [/input-8, 941] [/input-8, 941] [/input-8, 941] [/input-8, 939] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.045117445290088654
10 lb beta sum: 2.700948715209961, worst -0.0360332727432251
pruning_in_iteration open status: False
ratio of positive domain = 836 / 65536 = 0.01275634765625
pruning-in-iteration extra time: 0.0017120838165283203
Time: prepare 1.6913    bound 23.4061    transfer 0.4595    finalize 0.4702    func 26.8282    
Accumulated time: func 43.8382    prepare 3.9638    bound 35.9274    transfer 1.2934    finalize 1.5256    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04417 (16), -0.04407 (16), -0.04400 (16), -0.04374 (16), -0.04366 (16), -0.04364 (16), -0.04360 (16), -0.04357 (16), -0.04354 (16), -0.04351 (16), -0.04349 (16), -0.04341 (16), -0.04340 (16), -0.04332 (16), -0.04329 (16), -0.04324 (16), -0.04324 (16), -0.04314 (16), -0.04308 (16), -0.04304 (16), 
Length of domains: 67817
Time: pickout 0.4477    decision 3.3629    set_bounds 2.0101    solve 26.8381    add 3.0287    
Accumulated time: pickout 1.3429    decision 7.7307    set_bounds 4.4287    solve 43.8688    add 4.7007    
Current (lb-rhs): -0.04417431354522705
144320 domains visited
Cumulative time: 64.03547978401184

BaB round 13
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts: total 1297 constraints, 69835 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.6118
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04328495264053345
10 lb beta sum: 2.980282783508301, worst -0.03937733173370361
pruning_in_iteration open status: False
ratio of positive domain = 535 / 65536 = 0.0081634521484375
pruning-in-iteration extra time: 0.00164794921875
Time: prepare 1.6684    bound 25.4703    transfer 0.4595    finalize 0.9596    func 28.9911    
Accumulated time: func 72.8293    prepare 5.6327    bound 61.3977    transfer 1.7528    finalize 2.4852    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04417 (16), -0.04407 (16), -0.04400 (16), -0.04374 (16), -0.04366 (16), -0.04364 (16), -0.04360 (16), -0.04357 (16), -0.04354 (16), -0.04351 (16), -0.04349 (16), -0.04341 (16), -0.04340 (16), -0.04332 (16), -0.04329 (16), -0.04324 (16), -0.04324 (16), -0.04314 (16), -0.04308 (16), -0.04304 (16), 
Length of domains: 98706
Time: pickout 0.4930    decision 3.4538    set_bounds 1.7940    solve 29.0012    add 0.4203    
Accumulated time: pickout 1.8359    decision 11.1846    set_bounds 6.2227    solve 72.8700    add 5.1209    
Current (lb-rhs): -0.04417431354522705
207977 domains visited
Cumulative time: 99.90984082221985

BaB round 14
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts: total 1485 constraints, 66617 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.5556
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 925] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04222796857357025
10 lb beta sum: 3.0174269676208496, worst -0.04418065398931503
pruning_in_iteration open status: False
ratio of positive domain = 1053 / 65536 = 0.0160675048828125
pruning-in-iteration extra time: 0.001802206039428711
Time: prepare 1.6609    bound 27.6766    transfer 0.4645    finalize 1.0816    func 31.3098    
Accumulated time: func 104.1391    prepare 7.2940    bound 89.0743    transfer 2.2174    finalize 3.5667    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04417 (16), -0.04407 (16), -0.04400 (16), -0.04374 (16), -0.04366 (16), -0.04364 (16), -0.04360 (16), -0.04357 (16), -0.04354 (16), -0.04351 (16), -0.04349 (16), -0.04341 (16), -0.04340 (16), -0.04332 (16), -0.04329 (16), -0.04324 (16), -0.04324 (16), -0.04314 (16), -0.04308 (16), -0.04304 (16), 
Length of domains: 128374
Time: pickout 0.4936    decision 3.8317    set_bounds 1.8664    solve 31.3205    add 0.4256    
Accumulated time: pickout 2.3295    decision 15.0163    set_bounds 8.0891    solve 104.1905    add 5.5466    
Current (lb-rhs): -0.04417431354522705
270413 domains visited
Cumulative time: 138.53499579429626

BaB round 15
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts: total 1494 constraints, 66658 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.5774
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1252] [/input-8, 1252] [/input-8, 1252] [/input-8, 1252] [/input-8, 1252] [/input-8, 1252] [/input, 3771] [/input-8, 1252] [/input-8, 1252] [/input, 3771] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04044415056705475
10 lb beta sum: 2.9859166145324707, worst -0.03851821646094322
pruning_in_iteration open status: False
ratio of positive domain = 669 / 65536 = 0.0102081298828125
pruning-in-iteration extra time: 0.0018086433410644531
Time: prepare 1.6727    bound 27.7723    transfer 0.4576    finalize 1.1933    func 31.5157    
Accumulated time: func 135.6548    prepare 8.9672    bound 116.8466    transfer 2.6750    finalize 4.7601    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04417 (16), -0.04407 (16), -0.04400 (16), -0.04374 (16), -0.04366 (16), -0.04364 (16), -0.04360 (16), -0.04357 (16), -0.04354 (16), -0.04351 (16), -0.04349 (16), -0.04341 (16), -0.04340 (16), -0.04332 (16), -0.04329 (16), -0.04324 (16), -0.04324 (16), -0.04314 (16), -0.04308 (16), -0.04304 (16), 
Length of domains: 158929
Time: pickout 0.5259    decision 3.6125    set_bounds 1.3824    solve 31.5266    add 0.2806    
Accumulated time: pickout 2.8554    decision 18.6287    set_bounds 9.4714    solve 135.7171    add 5.8272    
Current (lb-rhs): -0.04417431354522705
333736 domains visited
Cumulative time: 176.6256067752838

BaB round 16
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts: total 1492 constraints, 66645 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.6347
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 942] [/input, 1193] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input, 937] [/input-8, 942] [/input, 1193] [/input-8, 942] [/input, 1193] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04010824114084244
10 lb beta sum: 2.9633593559265137, worst -0.03756614774465561
pruning_in_iteration open status: False
ratio of positive domain = 684 / 65536 = 0.01043701171875
pruning-in-iteration extra time: 0.001796722412109375
Time: prepare 1.7142    bound 27.5907    transfer 0.4718    finalize 0.5537    func 30.7519    
Accumulated time: func 166.4067    prepare 10.6818    bound 144.4374    transfer 3.1468    finalize 5.3138    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.04417 (16), -0.04407 (16), -0.04400 (16), -0.04374 (16), -0.04366 (16), -0.04364 (16), -0.04360 (16), -0.04357 (16), -0.04354 (16), -0.04351 (16), -0.04349 (16), -0.04341 (16), -0.04340 (16), -0.04332 (16), -0.04329 (16), -0.04324 (16), -0.04324 (16), -0.04314 (16), -0.04308 (16), -0.04304 (16), 
Length of domains: 189563
Time: pickout 0.7000    decision 4.3363    set_bounds 2.3460    solve 30.7675    add 0.1981    
Accumulated time: pickout 3.5554    decision 22.9650    set_bounds 11.8175    solve 166.4846    add 6.0253    
Current (lb-rhs): -0.04417431354522705
397138 domains visited
Time out!!!!!!!!
found process to kill: terminal indx = 3
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.mps
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.cuts
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.indx
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=97_spec=3_30463999.log
found process for pidx=3
Result: unknown in 219.4081 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.37744045, -10.80906868,  -8.33961296,  -7.23910141,  -7.87373829,
          -7.23198557,  -8.77867413,  -8.54426098,  -8.87928581, -11.17584705]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [575]; unstable size 575; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 575] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 575] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 575] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 203] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.58143497,  2.85189438,  0.84675455, -0.01254817,  0.32769132,
          1.16247272,  0.93366635,  1.05069101,  3.29250550]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.37744045, -10.80906868,  -8.33961296,  -7.23910141,  -7.87373829,
          -7.23198557,  -8.77867413,  -8.54426098,  -8.87928581, -11.17584705]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.25428486, -10.69138241,  -8.43463802,  -7.42673492,  -7.95977592,
           -7.43381834,  -8.90330410,  -8.69818687,  -8.78907394, -11.06161213]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00708342]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0088 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1026 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.58199978, -10.54873943,  -7.14900303,  -7.91397190,  -7.28075123,
          -7.99828959,  -6.68323803,  -8.80146408, -10.43879700, -10.40846443]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [399]; unstable size 399; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 399] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 399] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 399] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 148] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.51980448, 3.39100170, 0.25737536, 1.03178000, 0.39332831, 1.10958433,
         1.78996491, 3.33789587, 3.28932023]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0337 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 100, vnnlib ID: 100 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.83844137, -7.17797089, -2.05605650, -2.00732827, -2.00628233,
         -2.03319240, -2.81610751, -2.43622375, -6.60829258, -6.27670431]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [528]; unstable size 528; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 528] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 528] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 528] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 219] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.83865047,  4.03018188, -0.40402794, -0.52554822,  0.00620086,
          0.34507680, -0.21024543,  3.40293241,  3.30322170]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.83844137, -7.17797089, -2.05605650, -2.00732827, -2.00628233,
         -2.03319240, -2.81610751, -2.43622375, -6.60829258, -6.27670431]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.83844137, -7.17797089, -2.05605650, -2.00732780, -2.00628185,
          -2.03319216, -2.81610799, -2.43622375, -6.60829067, -6.27670383],
         [-4.83844137, -7.17797089, -2.05605650, -2.00732780, -2.00628185,
          -2.03319216, -2.81610799, -2.43622375, -6.60829067, -6.27670383]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04872870, -0.00104594,  0.42889595]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0657 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 101, vnnlib ID: 101 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.07705116,  -8.48606205,  -8.37792206, -10.12561226,  -8.12428093,
         -10.33940601, -10.15317154,  -9.66516113,  -4.95619965,  -7.79425383]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [671]; unstable size 671; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 129, 1, 671] with unstable size 128 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 671] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 671] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [128]; unstable size 128; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 128] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 128] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.19773501,  2.97831392,  2.78014851,  4.45424080,  2.49679518,
          4.66083670,  4.47122526,  3.93926191,  2.36554980]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.07705116,  -8.48606205,  -8.37792206, -10.12561226,  -8.12428093,
         -10.33940601, -10.15317154,  -9.66516113,  -4.95619965,  -7.79425383]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.05900955,  -8.47574997,  -8.22770882,  -9.97550106,  -7.97159195,
          -10.18599319,  -9.99292660,  -9.50112343,  -5.14422226,  -7.78701639]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.08521271]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0054 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0326 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 102, vnnlib ID: 102 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.02811790, -5.76409245,  0.56327426, -0.35700279, -0.37683630,
         -0.41983262, -1.42136240, -0.92577142, -3.90326118, -3.97468066]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [607]; unstable size 607; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 607] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 607] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 607] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 193] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.11923027,  4.51169968, -1.18529069, -0.36719000, -0.30698454,
          0.61107707,  0.20735407,  2.80999279,  2.81428123]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.02811790, -5.76409245,  0.56327426, -0.35700279, -0.37683630,
         -0.41983262, -1.42136240, -0.92577142, -3.90326118, -3.97468066]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.02811766, -5.76409245,  0.56327415, -0.35700274, -0.37683612,
          -0.41983256, -1.42136264, -0.92577130, -3.90326071, -3.97468066],
         [-2.02811766, -5.76409245,  0.56327415, -0.35700274, -0.37683612,
          -0.41983256, -1.42136264, -0.92577130, -3.90326071, -3.97468066]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.94011027, -0.01983339,  0.04299644]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0449 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 103, vnnlib ID: 103 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.43231535, -10.02100658,  -4.30439758,  -6.53697205,  -3.91013026,
          -6.62372160,  -5.03309059,  -6.37713289, -10.00526237, -10.26388931]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [627]; unstable size 627; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 151, 1, 627] with unstable size 150 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 627] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 627] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 150] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.15813875, 5.56159401, 0.26368931, 2.36857629, 2.45099640, 0.80457848,
         2.22993994, 5.61817694, 5.84348679]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0669 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 104, vnnlib ID: 104 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.93001795, -6.11589432, -2.52689791, -2.70035768, -2.83776188,
         -2.69209170, -3.78257012, -3.50543237, -5.88740206, -5.34398603]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 636] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 636] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 174] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.56663632,  2.53126144, -0.52419865, -0.01101995, -0.24716067,
          0.67172003,  0.37379950,  2.27085972,  1.89936161]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.93001795, -6.11589432, -2.52689791, -2.70035768, -2.83776188,
         -2.69209170, -3.78257012, -3.50543237, -5.88740206, -5.34398603]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.93001842, -6.11589527, -2.52689838, -2.70035863, -2.83776259,
          -2.69209194, -3.78257155, -3.50543332, -5.88740253, -5.34398603],
         [-4.93001842, -6.11589527, -2.52689838, -2.70035863, -2.83776259,
          -2.69209194, -3.78257155, -3.50543332, -5.88740253, -5.34398603]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16519356,  0.00826669,  0.14567065]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]],


         [[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]],


         [[[ 0.24920642,  0.20158738,  0.21746039,  ..., -0.57619047,
            -0.57619047, -0.63968253],
           [ 0.29682547,  0.24920642,  0.23333341,  ..., -0.71904761,
            -0.94126981, -0.81428570],
           [ 0.23333341,  0.16984135,  0.20158738,  ..., -0.67142856,
            -1.05238092, -0.71904761],
           ...,
           [-0.30634910, -0.30634910, -0.27460307,  ..., -0.35396814,
            -0.29047608, -0.29047608],
           [-0.30634910, -0.30634910, -0.36984116,  ..., -0.36984116,
            -0.32222211, -0.22698402],
           [-0.25873005, -0.22698402, -0.43333322,  ..., -0.41746020,
            -0.35396814, -0.29047608]],

          [[-0.14492741, -0.14492741, -0.12882435,  ..., -0.59581316,
            -0.59581316, -0.64412236],
           [-0.09661824, -0.11272129, -0.12882435,  ..., -0.75684375,
            -0.99838966, -0.82125598],
           [-0.16103047, -0.17713353, -0.14492741,  ..., -0.70853460,
            -1.11111104, -0.75684375],
           ...,
           [-0.40257636, -0.40257636, -0.38647330,  ..., -0.74074072,
            -0.62801927, -0.66022539],
           [-0.40257636, -0.40257636, -0.48309177,  ..., -0.72463763,
            -0.67632848, -0.57971013],
           [-0.35426718, -0.32206106, -0.54750401,  ..., -0.72463763,
            -0.69243151, -0.61191624]],

          [[-0.05847061, -0.07346311, -0.04347810,  ..., -0.25337315,
            -0.31334329, -0.32833579],
           [-0.01349309, -0.04347810, -0.04347810,  ..., -0.43328333,
            -0.71814090, -0.53823084],
           [-0.07346311, -0.10344811, -0.05847061,  ..., -0.43328333,
            -0.88305843, -0.46326834],
           ...,
           [-0.41829082, -0.38830581, -0.37331331,  ..., -0.59820086,
            -0.52323836, -0.53823084],
           [-0.40329832, -0.40329832, -0.44827583,  ..., -0.59820086,
            -0.55322337, -0.47826082],
           [-0.35832080, -0.31334329, -0.50824583,  ..., -0.58320838,
            -0.55322337, -0.50824583]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0590 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 105, vnnlib ID: 105 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.00338268, -10.28219223,  -7.15202951,  -7.92889309,  -7.82962704,
          -8.00282669,  -8.39284706,  -8.90988731,  -9.23245716,  -9.69780827]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [521]; unstable size 521; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 521] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 521] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 521] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 238] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.72178507,  0.36531496, -2.17974448, -1.32797301, -1.40488410,
         -1.24957275, -1.02663398, -0.66461682, -0.09302127]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.00338268, -10.28219223,  -7.15202951,  -7.92889309,  -7.82962704,
          -8.00282669,  -8.39284706,  -8.90988731,  -9.23245716,  -9.69780827]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.00338173, -10.28219318,  -7.15202951,  -7.92889309,  -7.82962799,
           -8.00282669,  -8.39284611,  -8.90988731,  -9.23245621,  -9.69780731],
         [ -8.00338173, -10.28219318,  -7.15202951,  -7.92889309,  -7.82962799,
           -8.00282669,  -8.39284611,  -8.90988731,  -9.23245621,  -9.69780731]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.90650558, -1.75785780, -0.98099422, -1.08025932, -0.90706062,
          -0.51704121,  0.32256889,  0.78792000]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         ...,


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0823 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 106, vnnlib ID: 106 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.55728149, -3.29340839, -5.60895300, -5.84854221, -5.21763039,
         -5.96553278, -5.89570904, -5.05772591, -2.31981516, -3.37378526]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 503] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 503] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 171] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30047560,  1.62997246,  1.88469386,  1.13955164,  1.99374723,
          1.89228368,  0.82793856, -1.50930858, -0.16130120]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.55728149, -3.29340839, -5.60895300, -5.84854221, -5.21763039,
         -5.96553278, -5.89570904, -5.05772591, -2.31981516, -3.37378526]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.55728054, -3.29340792, -5.60895252, -5.84854126, -5.21762943,
          -5.96553278, -5.89570808, -5.05772543, -2.31981421, -3.37378430],
         [-3.55728054, -3.29340792, -5.60895252, -5.84854126, -5.21762943,
          -5.96553278, -5.89570808, -5.05772543, -2.31981421, -3.37378430]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.26387262, -0.97359371,  0.08037639]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]],


         [[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]],


         [[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0715 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 107, vnnlib ID: 107 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.40574551, -9.71419811, -7.44596434, -8.90537739, -7.12733173,
         -9.08124161, -9.19281673, -8.36250019, -6.23399162, -9.56327915]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [557]; unstable size 557; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 190, 1, 557] with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 557] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 557] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 189] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.60150957, 1.47714353, 2.81160688, 1.12638509, 2.97082520, 2.97414351,
         2.26859903, 0.29780388, 3.46658897]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0695 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 108, vnnlib ID: 108 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.84473133, -10.54042339,  -8.17759705,  -8.29182148,  -7.74204731,
          -8.36287403,  -7.75897408,  -9.04864311, -11.14440346, -10.47354794]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 585] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 585] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 216] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.04735827,  1.40457869, -0.36931920, -0.89572740,  0.04944560,
         -0.85430765,  0.22342524,  2.20092106,  1.37345505]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.84473133, -10.54042339,  -8.17759705,  -8.29182148,  -7.74204731,
          -8.36287403,  -7.75897408,  -9.04864311, -11.14440346, -10.47354794]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.84472942, -10.54042244,  -8.17759705,  -8.29182243,  -7.74204826,
           -8.36287403,  -7.75897312,  -9.04864311, -11.14440155, -10.47354794],
         [ -9.84472942, -10.54042244,  -8.17759705,  -8.29182243,  -7.74204826,
           -8.36287403,  -7.75897312,  -9.04864311, -11.14440155, -10.47354794]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11422539, -0.54977417, -0.53284931]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0488 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 109, vnnlib ID: 109 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.50140810, -11.02397823,  -8.54122639, -10.14165115,  -9.63691139,
         -10.37123966, -10.39661026, -10.64028358,  -9.73715496, -10.65245342]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [237]; unstable size 237; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 100, 1, 237] with unstable size 99 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 237] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 237] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [99]; unstable size 99; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 99] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 99] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.88083577, 1.77790594, 3.23222160, 2.73587132, 3.45677876, 3.48044491,
         3.60492229, 2.78642964, 3.66938210]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0457 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 110, vnnlib ID: 110 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.10360909, -14.90222263, -10.64630795, -10.67387867, -10.32881927,
         -10.73543262,  -8.65091515, -12.13699913, -14.77171898, -15.26986790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [377]; unstable size 377; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 377] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 377] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 377] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 241] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.91985512, 5.48559284, 1.68281054, 1.66879582, 1.33047307, 1.72007775,
         2.92767096, 5.54262400, 5.84726381]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0633 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 111, vnnlib ID: 111 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.24005079, -9.04290104, -4.47385645, -6.15989971, -3.75543547,
         -6.18814945, -5.15722942, -4.77376652, -9.54131126, -8.83624268]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [550]; unstable size 550; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 550] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 550] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 550] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 203] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.75045252, 4.26294136, 0.44944513, 1.99260736, 2.02144289, 0.96410072,
         0.68850255, 4.72861528, 4.22467470]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0618 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 112, vnnlib ID: 112 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.06766558, -6.83603859, -6.95109749, -7.23270035, -7.89028740,
         -7.38764238, -7.01568794, -7.03979397, -5.81813335, -5.25799608]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 509] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 509] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 146] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.27733994, 1.24176252, 0.94732475, 1.20107603, 1.83796215, 1.33658981,
         1.02798748, 0.93377829, 0.00646114]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0632 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 113, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
          -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [596]; unstable size 596; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 596] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 596] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 596] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 200] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.83063006,  2.85584259,  0.91094625,  1.03836179, -0.07551450,
          0.71604705,  1.38741755,  4.26548862,  2.89728880]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
          -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.44208622,  -9.75026035,  -7.34684753,  -6.16673279,  -7.47608280,
           -6.11000681,  -7.20957756,  -7.78478622, -11.07736111,  -9.72049713]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05672598]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.00476182, -0.75079364,  ..., -0.68730158,
            -0.90952379, -1.62380958],
           [-0.44920623, -0.95714283, -0.67142856,  ..., -0.32222211,
            -0.65555555, -1.62380958],
           [-0.09999990, -0.92539680, -0.63968253,  ..., -0.22698402,
            -0.57619047, -1.63968253],
           ...,
           [-0.27460307, -0.29047608, -0.33809513,  ..., -0.87777776,
            -0.51269841, -0.48095238],
           [-0.30634910, -0.30634910, -0.33809513,  ..., -1.09999990,
            -0.65555555, -0.49682540],
           [-0.40158719, -0.40158719, -0.41746020,  ..., -1.29047608,
            -0.87777776, -0.62380952]],

          [[-1.62640905, -1.72302747, -1.65861523,  ..., -1.49758446,
            -1.57809973, -1.75523353],
           [-1.38486302, -1.77133656, -1.61030602,  ..., -1.35265696,
            -1.49758446, -1.75523353],
           [-1.09500802, -1.80354273, -1.62640905,  ..., -1.22383249,
            -1.40096617, -1.75523353],
           ...,
           [-1.25603855, -1.25603855, -1.28824472,  ..., -0.72463763,
            -0.43478248, -0.51529789],
           [-1.28824472, -1.25603855, -1.28824472,  ..., -0.88566822,
            -0.48309177, -0.45088565],
           [-1.33655393, -1.33655393, -1.33655393,  ..., -1.12721407,
            -0.67632848, -0.46698871]],

          [[-1.48275876, -1.52773619, -1.49775124,  ..., -1.28785622,
            -1.34782624, -1.42278874],
           [-1.15292358, -1.55772126, -1.54272878,  ..., -1.12293863,
            -1.19790113, -1.42278874],
           [-0.89805096, -1.54272878, -1.51274371,  ..., -1.06296861,
            -1.13793111, -1.43778121],
           ...,
           [-0.94302845, -0.94302845, -0.95802099,  ..., -0.61319339,
            -0.38830581, -0.52323836],
           [-0.94302845, -0.94302845, -0.94302845,  ..., -0.70314842,
            -0.34332830, -0.38830581],
           [-0.98800600, -1.00299859, -1.00299859,  ..., -0.89805096,
            -0.52323836, -0.31334329]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0665 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 114, vnnlib ID: 114 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.65542030, -10.12491035,  -9.28998947, -10.89940071,  -9.46046829,
         -11.02120876, -10.39476299, -11.24895477,  -7.53916931, -10.56444263]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 197, 1, 509] with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 509] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 196] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 196] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.85671949, 2.11677980, 3.61477733, 2.21671772, 3.72679424, 3.03720045,
         3.80708647, 0.44335449, 3.26269913]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0313 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 115, vnnlib ID: 115 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.92224836, -9.30357933, -4.86471462, -5.74703979, -3.76322746,
         -5.79184532, -4.91436577, -5.34334707, -8.45374775, -9.23935318]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 509] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 509] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 239] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.55012679, 4.69829416, 0.87078321, 1.70267868, 1.74382305, 0.83639115,
         1.21680450, 3.97037983, 4.71871328]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0371 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 116, vnnlib ID: 116 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.46497631, -11.33358383,  -8.85467815,  -7.44927025,  -9.22317123,
          -7.37944174,  -9.60250664,  -8.70856094, -10.32826042, -10.40810776]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 161, 1, 540] with unstable size 160 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 540] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [160]; unstable size 160; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 160] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.58313560, 3.18968081, 1.22978044, 0.05482835, 1.50812197, 1.89584780,
         0.94890070, 2.30877233, 2.35839391]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0519 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 117, vnnlib ID: 117 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.46045923, -4.62828922, -5.05963278, -6.18664169, -5.28851128,
         -6.36921692, -6.12083912, -6.04943180, -0.93621290, -3.70123649]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [537]; unstable size 537; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 537] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 537] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 537] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 159] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.17089832, 3.15421629, 3.54188681, 4.60494947, 3.75584602, 4.77829981,
         4.57753897, 4.42675829, 2.20462656]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0265 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 118, vnnlib ID: 118 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.41606951, -3.73614860, -5.60977221, -6.62537479, -6.33034801,
         -6.65032578, -8.53272724, -6.92770529, -4.97527218, -5.08467150]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [406]; unstable size 406; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 406] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 406] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 406] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.06374359, 1.19116235, 2.15339279, 1.93856001, 2.16962671, 4.05398178,
         2.44965196, 0.61252069, 1.12175798]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0342 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 119, vnnlib ID: 119 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.60672903, -5.77713490, -1.78710592, -1.64563823, -1.64935160,
         -1.71567798, -2.18223453, -2.02389979, -4.62978458, -4.60459995]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [778]; unstable size 778; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 219, 1, 778] with unstable size 218 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 778] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 778] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [218]; unstable size 218; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 218] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.25424361,  3.26128435, -0.22337782, -0.42366934,  0.04887801,
          0.13689756, -0.16968274,  2.10664487,  2.17941189]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.60672903, -5.77713490, -1.78710592, -1.64563823, -1.64935160,
         -1.71567798, -2.18223453, -2.02389979, -4.62978458, -4.60459995]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.61329794, -5.77425766, -1.79143727, -1.65318608, -1.64977872,
          -1.72312260, -2.18866110, -2.02094007, -4.63334703, -4.60565472],
         [-3.61329794, -5.77425766, -1.79143727, -1.65318608, -1.64977872,
          -1.72312260, -2.18866110, -2.02094007, -4.63334703, -4.60565472]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.13825119, -0.00340736,  0.36775398]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0157 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0789 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 120, vnnlib ID: 120 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -4.54532385, -11.30416203,  -4.10411549,  -4.39919186,  -6.40133953,
          -4.42965555,  -6.84690285,  -5.18702269, -10.52285004, -10.39758968]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [314]; unstable size 314; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 97, 1, 314] with unstable size 96 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 314] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 314] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [96]; unstable size 96; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 96] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 96] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 6.35177326, -0.66230369, -0.42160916,  1.53926945, -0.39580536,
          1.98930931,  0.27601612,  5.74486685,  5.50957298]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -4.54532385, -11.30416203,  -4.10411549,  -4.39919186,  -6.40133953,
          -4.42965555,  -6.84690285,  -5.18702269, -10.52285004, -10.39758968]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -4.54532337, -11.30416203,  -4.10411406,  -4.39919186,  -6.40133953,
           -4.42965508,  -6.84690189,  -5.18702173, -10.52284813, -10.39758873],
         [ -4.54532337, -11.30416203,  -4.10411406,  -4.39919186,  -6.40133953,
           -4.42965508,  -6.84690189,  -5.18702173, -10.52284813, -10.39758873]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44120932, -0.14613152, -0.11566830]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0753 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 121, vnnlib ID: 121 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.59993410, -4.38716555, -7.01152945, -7.42306519, -6.37219429,
         -7.47539234, -7.27996445, -6.98678732, -7.51602745, -5.72939539]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 202, 1, 503] with unstable size 201 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 503] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [201]; unstable size 201; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 201] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 201] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.36778975, 1.58436394, 2.04665709, 0.99501896, 2.08592606, 1.87148952,
         1.65961504, 2.34397459, 1.09861779]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0299 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 122, vnnlib ID: 122 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.81995726, -5.13494205, -8.06528854, -7.87783623, -8.02696037,
         -7.91830969, -8.81726456, -7.94001102, -5.16691113, -6.43881178]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [420]; unstable size 420; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 420] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 420] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 420] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 174] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08343577,  2.05495071,  1.84661865,  2.02149010,  1.87067604,
          2.72653341,  1.89364648, -0.51825714,  1.03387249]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.81995726, -5.13494205, -8.06528854, -7.87783623, -8.02696037,
         -7.91830969, -8.81726456, -7.94001102, -5.16691113, -6.43881178]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.81014204, -5.15443516, -8.05149078, -7.86225891, -8.01039028,
          -7.90261698, -8.80574799, -7.92409134, -5.15398884, -6.44848347]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00044632]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0042 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0669 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 123, vnnlib ID: 123 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
          -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [384]; unstable size 384; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 384] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 384] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 384] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 187] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.17096829,  3.39843321,  1.51453471,  2.57439876,  2.68033528,
          2.71090770,  2.60011578,  4.45497847,  4.01961613]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
          -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.81it/s]100%|██████████| 1/1 [00:00<00:00,  8.80it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.24572372, -10.14930725,  -8.09828663,  -9.24239445,  -9.37958050,
           -9.39315701,  -9.30120564, -11.22938156,  -6.21674156, -10.66067028]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02898216]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1162 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 23.990142822265625
alpha/beta optimization time: 1.2381360530853271
initial alpha-crown bounds: tensor([[-0.16154718,  3.43210196,  1.52814174,  2.59574938,  2.69813681,
          2.73191285,  2.61713934,  4.47211742,  4.07639122]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.16154718399047852
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6575 seconds.
lower bounds for all target labels: [-0.16155046224594116, 3.432102918624878, 1.5281410217285156, 2.5957510471343994, 2.6981377601623535, 2.731912136077881, 2.6171393394470215, 4.472116470336914, 4.076391220092773]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [0]
start creating model mps for candidates: ['lay/16_0']
parallel save mip model to /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 268358 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.4824960231781
Verifying property 0 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.4721174240112305.

Properties batch 1, size 1
Remaining timeout: 198.2781937122345
Verifying property 1 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.076391220092773.

Properties batch 2, size 1
Remaining timeout: 198.15844702720642
Verifying property 2 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.4321019649505615.

Properties batch 3, size 1
Remaining timeout: 198.04101943969727
Verifying property 3 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.731912851333618.

Properties batch 4, size 1
Remaining timeout: 197.92437767982483
Verifying property 4 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.698136806488037.

Properties batch 5, size 1
Remaining timeout: 197.80727624893188
Verifying property 5 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.6171393394470215.

Properties batch 6, size 1
Remaining timeout: 197.68773674964905
Verifying property 6 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5957493782043457.

Properties batch 7, size 1
Remaining timeout: 197.56026315689087
Verifying property 7 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.528141736984253.

Properties batch 8, size 1
Remaining timeout: 197.4289150238037
Verifying property 8 with 1 instances.
##### Instance 123 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16154718]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.01406145,  -9.83653736,  -7.83681726,  -8.95063114,  -9.15734291,
         -9.10310364,  -9.02663040, -11.03872871,  -5.68331051, -10.27965927],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16154718]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 384
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 185
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 574
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007581710815429688
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 10] 
split level 2: [/input-12, 50] 
split level 3: [/input-8, 1707] 
split level 4: [/input-8, 693] 
split level 5: [/input-8, 949] 
split level 6: [/input-8, 691] 
split level 7: [/input-8, 685] 
pruning_in_iteration open status: True
ratio of positive domain = 192 / 256 = 0.75
pruning-in-iteration extra time: 0.005385160446166992
Time: prepare 0.0032    bound 0.1366    transfer 0.0054    finalize 0.0028    func 0.1480    
Accumulated time: func 0.1480    prepare 0.0037    bound 0.1366    transfer 0.0054    finalize 0.0028    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03840 (8), -0.03768 (8), -0.03710 (8), -0.03681 (8), -0.03668 (8), -0.03652 (8), -0.03643 (8), -0.03601 (8), -0.03551 (8), -0.03519 (8), -0.03510 (8), -0.03485 (8), -0.03477 (8), -0.03456 (8), -0.03439 (8), -0.03418 (8), -0.03328 (8), -0.03322 (8), -0.03322 (8), -0.03298 (8), 
Length of domains: 64
Time: pickout 0.0005    decision 0.0256    set_bounds 0.0207    solve 0.1481    add 0.0638    
Accumulated time: pickout 0.0005    decision 0.0256    set_bounds 0.0207    solve 0.1481    add 0.0638    
Current (lb-rhs): -0.03840219974517822
64 domains visited
Cumulative time: 0.2710390090942383

BaB round 2
Fetch cut process: mps for current label is not ready yet
batch: 64
splitting decisions: 
split level 0: [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] 
split level 1: [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] 
pruning_in_iteration open status: True
ratio of positive domain = 144 / 256 = 0.5625
pruning-in-iteration extra time: 0.004120349884033203
Time: prepare 0.0051    bound 0.1677    transfer 0.0010    finalize 0.0018    func 0.1758    
Accumulated time: func 0.3238    prepare 0.0090    bound 0.3043    transfer 0.0064    finalize 0.0046    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03650 (10), -0.03580 (10), -0.03517 (10), -0.03496 (10), -0.03483 (10), -0.03467 (10), -0.03450 (10), -0.03418 (10), -0.03361 (10), -0.03333 (10), -0.03332 (10), -0.03308 (10), -0.03308 (10), -0.03273 (10), -0.03271 (10), -0.03217 (10), -0.03169 (10), -0.03164 (10), -0.03149 (10), -0.03124 (10), 
Length of domains: 112
Time: pickout 0.0055    decision 0.0155    set_bounds 0.0076    solve 0.1758    add 0.0722    
Accumulated time: pickout 0.0060    decision 0.0410    set_bounds 0.0282    solve 0.3240    add 0.1360    
Current (lb-rhs): -0.03649699687957764
176 domains visited
Cumulative time: 0.5562975406646729

BaB round 3
Fetch cut process: mps for current label is not ready yet
batch: 112
splitting decisions: 
split level 0: [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] 
pruning_in_iteration open status: True
ratio of positive domain = 67 / 224 = 0.2991071428571429
pruning-in-iteration extra time: 0.004878044128417969
Time: prepare 0.0047    bound 0.1477    transfer 0.0032    finalize 0.0014    func 0.1569    
Accumulated time: func 0.4807    prepare 0.0138    bound 0.4520    transfer 0.0096    finalize 0.0060    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03398 (11), -0.03329 (11), -0.03275 (11), -0.03246 (11), -0.03239 (11), -0.03211 (11), -0.03206 (11), -0.03171 (11), -0.03122 (11), -0.03090 (11), -0.03088 (11), -0.03073 (11), -0.03054 (11), -0.03036 (11), -0.03034 (11), -0.02992 (11), -0.02928 (11), -0.02926 (11), -0.02922 (11), -0.02920 (11), 
Length of domains: 157
Time: pickout 0.0154    decision 0.0224    set_bounds 0.0054    solve 0.1571    add 0.0752    
Accumulated time: pickout 0.0214    decision 0.0634    set_bounds 0.0337    solve 0.4810    add 0.2112    
Current (lb-rhs): -0.03398454189300537
333 domains visited
Cumulative time: 0.8391165733337402

BaB round 4
Fetch cut process: mps for current label is not ready yet
batch: 157
splitting decisions: 
split level 0: [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] [/input-8, 2004] 
pruning_in_iteration open status: False
ratio of positive domain = 46 / 314 = 0.14649681528662417
pruning-in-iteration extra time: 8.463859558105469e-05
Time: prepare 0.0063    bound 0.1051    transfer 0.0040    finalize 0.0021    func 0.1176    
Accumulated time: func 0.5984    prepare 0.0204    bound 0.5571    transfer 0.0136    finalize 0.0081    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03310 (12), -0.03241 (12), -0.03199 (12), -0.03153 (12), -0.03152 (12), -0.03131 (12), -0.03122 (12), -0.03086 (12), -0.03047 (12), -0.03011 (12), -0.03003 (12), -0.02994 (12), -0.02966 (12), -0.02958 (12), -0.02956 (12), -0.02907 (12), -0.02854 (12), -0.02848 (12), -0.02845 (12), -0.02811 (12), 
Length of domains: 265
Time: pickout 0.0161    decision 0.0217    set_bounds 0.0076    solve 0.1177    add 0.0762    
Accumulated time: pickout 0.0375    decision 0.0851    set_bounds 0.0413    solve 0.5988    add 0.2875    
Current (lb-rhs): -0.0331040620803833
598 domains visited
Cumulative time: 1.0857901573181152

BaB round 5
Fetch cut process: mps for current label is not ready yet
batch: 265
splitting decisions: 
split level 0: [/input-8, 948] [/input-8, 357] [/input-8, 948] [/input-8, 357] [/input-8, 948] [/input-8, 357] [/input-8, 948] [/input-8, 357] [/input-8, 948] [/input-8, 357] 
pruning_in_iteration open status: False
ratio of positive domain = 86 / 530 = 0.1622641509433962
pruning-in-iteration extra time: 8.130073547363281e-05
Time: prepare 0.0105    bound 0.1096    transfer 0.0074    finalize 0.0040    func 0.1316    
Accumulated time: func 0.7300    prepare 0.0311    bound 0.6667    transfer 0.0210    finalize 0.0121    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03090 (13), -0.03026 (13), -0.02988 (13), -0.02952 (13), -0.02936 (13), -0.02929 (13), -0.02924 (13), -0.02868 (13), -0.02855 (13), -0.02834 (13), -0.02796 (13), -0.02778 (13), -0.02767 (13), -0.02741 (13), -0.02739 (13), -0.02697 (13), -0.02651 (13), -0.02646 (13), -0.02623 (13), -0.02600 (13), 
Length of domains: 441
Time: pickout 0.0181    decision 0.0280    set_bounds 0.0132    solve 0.1317    add 0.0901    
Accumulated time: pickout 0.0555    decision 0.1130    set_bounds 0.0546    solve 0.7305    add 0.3776    
Current (lb-rhs): -0.030902981758117676
1039 domains visited
Cumulative time: 1.37587308883667

BaB round 6
Fetch cut process: mps for current label is not ready yet
batch: 441
splitting decisions: 
split level 0: [/input-8, 2011] [/input-8, 942] [/input-8, 2011] [/input-8, 942] [/input-8, 2011] [/input-8, 942] [/input-8, 2011] [/input-8, 942] [/input-8, 2011] [/input-8, 942] 
pruning_in_iteration open status: True
ratio of positive domain = 194 / 882 = 0.21995464852607705
pruning-in-iteration extra time: 0.004867076873779297
Time: prepare 0.0176    bound 0.1593    transfer 0.0140    finalize 0.0057    func 0.1968    
Accumulated time: func 0.9267    prepare 0.0489    bound 0.8260    transfer 0.0350    finalize 0.0178    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02896 (14), -0.02833 (14), -0.02794 (14), -0.02760 (14), -0.02743 (14), -0.02734 (14), -0.02731 (14), -0.02675 (14), -0.02660 (14), -0.02639 (14), -0.02601 (14), -0.02584 (14), -0.02574 (14), -0.02548 (14), -0.02545 (14), -0.02498 (14), -0.02477 (14), -0.02458 (14), -0.02454 (14), -0.02431 (14), 
Length of domains: 688
Time: pickout 0.0195    decision 0.0395    set_bounds 0.0218    solve 0.1970    add 0.0959    
Accumulated time: pickout 0.0751    decision 0.1526    set_bounds 0.0763    solve 0.9275    add 0.4735    
Current (lb-rhs): -0.028964638710021973
1727 domains visited
Cumulative time: 1.7581322193145752

BaB round 7
Fetch cut process: mps for current label is not ready yet
batch: 688
splitting decisions: 
split level 0: [/input-8, 692] [/input-8, 692] [/input-8, 692] [/input-8, 692] [/input-8, 2010] [/input-8, 692] [/input-8, 692] [/input-8, 2010] [/input-8, 692] [/input-8, 2010] 
pruning_in_iteration open status: True
ratio of positive domain = 560 / 1376 = 0.40697674418604646
pruning-in-iteration extra time: 0.004804849624633789
Time: prepare 0.0266    bound 0.1841    transfer 0.0242    finalize 0.0077    func 0.2428    
Accumulated time: func 1.1695    prepare 0.0758    bound 1.0101    transfer 0.0592    finalize 0.0255    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02656 (15), -0.02593 (15), -0.02554 (15), -0.02519 (15), -0.02502 (15), -0.02493 (15), -0.02491 (15), -0.02433 (15), -0.02415 (15), -0.02414 (15), -0.02398 (15), -0.02358 (15), -0.02344 (15), -0.02334 (15), -0.02309 (15), -0.02304 (15), -0.02298 (15), -0.02295 (15), -0.02263 (15), -0.02253 (15), 
Length of domains: 816
Time: pickout 0.0223    decision 0.0509    set_bounds 0.0308    solve 0.2438    add 0.0861    
Accumulated time: pickout 0.0973    decision 0.2035    set_bounds 0.1071    solve 1.1712    add 0.5596    
Current (lb-rhs): -0.026562929153442383
2543 domains visited
Cumulative time: 2.1959338188171387

BaB round 8
Fetch cut process: mps for current label is not ready yet
batch: 816
splitting decisions: 
split level 0: [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] 
pruning_in_iteration open status: False
ratio of positive domain = 314 / 1632 = 0.1924019607843137
pruning-in-iteration extra time: 5.841255187988281e-05
Time: prepare 0.0334    bound 0.1681    transfer 0.0237    finalize 0.0094    func 0.2359    
Accumulated time: func 1.4054    prepare 0.1094    bound 1.1782    transfer 0.0829    finalize 0.0349    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02495 (16), -0.02431 (16), -0.02366 (16), -0.02358 (16), -0.02346 (16), -0.02341 (16), -0.02303 (16), -0.02287 (16), -0.02226 (16), -0.02212 (16), -0.02209 (16), -0.02205 (16), -0.02197 (16), -0.02172 (16), -0.02145 (16), -0.02123 (16), -0.02113 (16), -0.02099 (16), -0.02095 (16), -0.02071 (16), 
Length of domains: 1312
Time: pickout 0.0257    decision 0.0568    set_bounds 0.0364    solve 0.2363    add 0.1883    
Accumulated time: pickout 0.1231    decision 0.2603    set_bounds 0.1435    solve 1.4076    add 0.7478    
Current (lb-rhs): -0.024948954582214355
3855 domains visited
Cumulative time: 2.7434449195861816

BaB round 9
Fetch cut process: mps for current label is not ready yet
batch: 1312
splitting decisions: 
split level 0: [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] 
pruning_in_iteration open status: True
ratio of positive domain = 604 / 2624 = 0.23018292682926833
pruning-in-iteration extra time: 0.005801200866699219
Time: prepare 0.0582    bound 0.2187    transfer 0.0335    finalize 0.2661    func 0.5770    
Accumulated time: func 1.9824    prepare 0.1679    bound 1.3970    transfer 0.1163    finalize 0.3010    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02266 (17), -0.02202 (17), -0.02137 (17), -0.02129 (17), -0.02128 (17), -0.02119 (17), -0.02117 (17), -0.02112 (17), -0.02074 (17), -0.02056 (17), -0.02024 (17), -0.01997 (17), -0.01990 (17), -0.01982 (17), -0.01982 (17), -0.01981 (17), -0.01970 (17), -0.01967 (17), -0.01966 (17), -0.01966 (17), 
Length of domains: 2020
Time: pickout 0.0258    decision 0.0828    set_bounds 0.0582    solve 0.5780    add 0.1216    
Accumulated time: pickout 0.1489    decision 0.3430    set_bounds 0.2017    solve 1.9856    add 0.8694    
Current (lb-rhs): -0.022655725479125977
5875 domains visited
Cumulative time: 3.6232240200042725

BaB round 10
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0017
batch: 2020
splitting decisions: 
split level 0: [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] [/input, 2250] 
pruning_in_iteration open status: True
ratio of positive domain = 1026 / 4040 = 0.25396039603960396
pruning-in-iteration extra time: 0.00485992431640625
Time: prepare 0.0871    bound 0.2497    transfer 0.0267    finalize 0.0271    func 0.3915    
Accumulated time: func 2.3738    prepare 0.2552    bound 1.6466    transfer 0.1431    finalize 0.3281    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.02104 (18), -0.02041 (18), -0.01975 (18), -0.01967 (18), -0.01961 (18), -0.01954 (18), -0.01950 (18), -0.01912 (18), -0.01900 (18), -0.01892 (18), -0.01854 (18), -0.01836 (18), -0.01826 (18), -0.01819 (18), -0.01818 (18), -0.01814 (18), -0.01812 (18), -0.01809 (18), -0.01803 (18), -0.01798 (18), 
Length of domains: 3014
Time: pickout 0.0419    decision 0.1213    set_bounds 0.0831    solve 0.3923    add 0.1494    
Accumulated time: pickout 0.1908    decision 0.4643    set_bounds 0.2848    solve 2.3779    add 1.0188    
Current (lb-rhs): -0.021042466163635254
8889 domains visited
Cumulative time: 4.425750494003296

BaB round 11
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0020
batch: 3014
splitting decisions: 
split level 0: [/input-8, 2011] [/input-8, 2011] [/input-8, 2011] [/input-8, 2011] [/input-8, 2011] [/input-8, 2011] [/input-8, 2011] [/input, 1240] [/input-8, 2011] [/input-8, 2011] 
pruning_in_iteration open status: True
ratio of positive domain = 1762 / 6028 = 0.2923025879230259
pruning-in-iteration extra time: 0.005563020706176758
Time: prepare 0.1462    bound 0.3044    transfer 0.0588    finalize 0.0533    func 0.5645    
Accumulated time: func 2.9384    prepare 0.4017    bound 1.9511    transfer 0.2019    finalize 0.3814    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01910 (19), -0.01846 (19), -0.01800 (19), -0.01779 (19), -0.01765 (19), -0.01762 (19), -0.01759 (19), -0.01745 (19), -0.01744 (19), -0.01739 (19), -0.01701 (19), -0.01698 (19), -0.01696 (19), -0.01678 (19), -0.01677 (19), -0.01654 (19), -0.01654 (19), -0.01649 (19), -0.01643 (19), -0.01638 (19), 
Length of domains: 4266
Time: pickout 0.0670    decision 0.1914    set_bounds 0.4145    solve 0.5668    add 0.1584    
Accumulated time: pickout 0.2578    decision 0.6557    set_bounds 0.6993    solve 2.9447    add 1.1773    
Current (lb-rhs): -0.019097208976745605
13155 domains visited
Cumulative time: 5.855196237564087

BaB round 12
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0041
batch: 4096
splitting decisions: 
split level 0: [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] 
pruning_in_iteration open status: True
ratio of positive domain = 2769 / 8192 = 0.3380126953125
pruning-in-iteration extra time: 0.005709648132324219
Time: prepare 0.1937    bound 0.3357    transfer 0.0626    finalize 0.0646    func 0.6579    
Accumulated time: func 3.5962    prepare 0.5957    bound 2.2868    transfer 0.2645    finalize 0.4460    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01807 (20), -0.01745 (20), -0.01698 (20), -0.01664 (20), -0.01663 (20), -0.01660 (20), -0.01657 (20), -0.01654 (19), -0.01642 (20), -0.01642 (20), -0.01637 (20), -0.01634 (19), -0.01599 (20), -0.01596 (20), -0.01581 (20), -0.01580 (20), -0.01576 (20), -0.01569 (20), -0.01563 (20), -0.01552 (20), 
Length of domains: 5593
Time: pickout 0.0844    decision 0.2412    set_bounds 0.3809    solve 0.6607    add 0.1711    
Accumulated time: pickout 0.3422    decision 0.8969    set_bounds 1.0802    solve 3.6054    add 1.3484    
Current (lb-rhs): -0.018074631690979004
18578 domains visited
current_vram/total_varm: 29.7GB/99.9GB, batch_size increase to 8192
Cumulative time: 7.436923027038574

BaB round 13
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0017
batch: 5593
splitting decisions: 
split level 0: [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input, 1240] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] [/input-8, 2034] 
pruning_in_iteration open status: True
ratio of positive domain = 4370 / 11186 = 0.3906669050598963
pruning-in-iteration extra time: 0.005849599838256836
Time: prepare 0.2829    bound 0.3933    transfer 0.0723    finalize 0.2512    func 1.0008    
Accumulated time: func 4.5970    prepare 0.8790    bound 2.6801    transfer 0.3368    finalize 0.6972    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01657 (21), -0.01615 (21), -0.01579 (21), -0.01564 (21), -0.01553 (21), -0.01547 (21), -0.01538 (20), -0.01527 (21), -0.01519 (20), -0.01509 (21), -0.01509 (21), -0.01508 (21), -0.01506 (21), -0.01492 (21), -0.01489 (21), -0.01484 (21), -0.01467 (21), -0.01465 (21), -0.01465 (21), -0.01464 (21), 
Length of domains: 6816
Time: pickout 0.1128    decision 0.5545    set_bounds 0.2689    solve 1.0032    add 0.1646    
Accumulated time: pickout 0.4550    decision 1.4514    set_bounds 1.3491    solve 4.6086    add 1.5130    
Current (lb-rhs): -0.016566872596740723
25394 domains visited
Cumulative time: 9.576395750045776

BaB round 14
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0047
batch: 6816
splitting decisions: 
split level 0: [/input, 1996] [/input, 1996] [/input-8, 947] [/input-8, 947] [/input, 1240] [/input-8, 947] [/input, 1996] [/input, 1996] [/input, 1996] [/input, 1996] 
pruning_in_iteration open status: True
ratio of positive domain = 5379 / 13632 = 0.39458626760563376
pruning-in-iteration extra time: 0.005645036697387695
Time: prepare 0.3657    bound 0.4463    transfer 0.0783    finalize 0.0994    func 0.9913    
Accumulated time: func 5.5883    prepare 1.2450    bound 3.1264    transfer 0.4151    finalize 0.7965    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01556 (22), -0.01549 (22), -0.01517 (21), -0.01495 (22), -0.01468 (22), -0.01449 (22), -0.01446 (22), -0.01435 (22), -0.01427 (21), -0.01425 (22), -0.01414 (21), -0.01408 (22), -0.01405 (22), -0.01405 (22), -0.01401 (22), -0.01397 (22), -0.01391 (22), -0.01388 (22), -0.01376 (22), -0.01373 (21), 
Length of domains: 8253
Time: pickout 0.1392    decision 0.4263    set_bounds 0.5503    solve 0.9950    add 0.1515    
Accumulated time: pickout 0.5942    decision 1.8776    set_bounds 1.8994    solve 5.6036    add 1.6645    
Current (lb-rhs): -0.015555858612060547
33647 domains visited
Cumulative time: 11.898603677749634

BaB round 15
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts: total 305 constraints, 25494 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.4073
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1709] [/input-8, 947] [/input-8, 947] [/input-8, 1709] [/input-8, 1709] [/input-8, 1709] [/input-8, 1709] [/input-8, 947] [/input-8, 947] [/input-8, 1709] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014913558959960938
10 lb beta sum: 6.74403190612793, worst -0.010682746767997742
pruning_in_iteration open status: True
ratio of positive domain = 16052 / 16384 = 0.979736328125
pruning-in-iteration extra time: 0.005717754364013672
Time: prepare 0.4276    bound 1.2694    transfer 0.0926    finalize 0.0998    func 2.2353    
Accumulated time: func 7.8236    prepare 1.6729    bound 4.3958    transfer 0.5076    finalize 0.8963    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01293 (21), -0.01242 (21), -0.00901 (21), -0.00824 (21), -0.00818 (21), -0.00786 (21), -0.00768 (21), -0.00730 (21), -0.00704 (21), -0.00689 (21), -0.00686 (21), -0.00665 (21), -0.00654 (21), -0.00651 (21), -0.00649 (21), -0.00647 (21), -0.00629 (21), -0.00627 (21), -0.00617 (21), -0.00600 (23), 
Length of domains: 393
Time: pickout 0.1611    decision 0.4935    set_bounds 0.6054    solve 2.2400    add 0.0922    
Accumulated time: pickout 0.7553    decision 2.3712    set_bounds 2.5048    solve 7.8437    add 1.7567    
Current (lb-rhs): -0.012926846742630005
33979 domains visited
current_vram/total_varm: 29.7GB/99.9GB, batch_size increase to 16384
Cumulative time: 16.0293972492218

BaB round 16
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts: total 632 constraints, 35856 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.3029
batch: 393
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 947] [/input-8, 947] [/input, 1240] [/input, 1240] [/input, 1240] [/input-8, 947] [/input, 1240] [/input, 1240] [/input, 1996] [/input, 1996] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014425396919250488
10 lb beta sum: 2.622614860534668, worst -0.011105641722679138
pruning_in_iteration open status: True
ratio of positive domain = 456 / 786 = 0.5801526717557253
pruning-in-iteration extra time: 0.003663301467895508
Time: prepare 0.0216    bound 0.3412    transfer 0.0102    finalize 0.0091    func 0.3877    
Accumulated time: func 8.2113    prepare 1.6949    bound 4.7370    transfer 0.5178    finalize 0.9055    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00447 (24), -0.00443 (24), -0.00411 (24), -0.00408 (23), -0.00402 (24), -0.00370 (24), -0.00369 (24), -0.00369 (24), -0.00367 (24), -0.00361 (24), -0.00355 (24), -0.00351 (24), -0.00344 (22), -0.00334 (24), -0.00331 (24), -0.00325 (24), -0.00313 (24), -0.00312 (24), -0.00309 (24), -0.00301 (24), 
Length of domains: 330
Time: pickout 0.0297    decision 0.0410    set_bounds 0.0230    solve 0.3879    add 0.0931    
Accumulated time: pickout 0.7851    decision 2.4122    set_bounds 2.5278    solve 8.2316    add 1.8497    
Current (lb-rhs): -0.004469133913516998
34309 domains visited
Cumulative time: 16.926862239837646

BaB round 17
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0019
batch: 330
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1709] [/input-8, 1709] [/input-8, 956] [/input-8, 956] [/input-8, 2044] [/input-8, 2044] [/input, 1996] [/input-8, 1451] [/input-8, 956] [/input-8, 956] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2831904888153076, worst -0.0060722678899765015
10 lb beta sum: 3.9561054706573486, worst -0.01664164662361145
pruning_in_iteration open status: True
ratio of positive domain = 380 / 660 = 0.5757575757575757
pruning-in-iteration extra time: 0.005106210708618164
Time: prepare 0.0326    bound 0.3013    transfer 0.0083    finalize 0.0046    func 0.3523    
Accumulated time: func 8.5636    prepare 1.7277    bound 5.0383    transfer 0.5261    finalize 0.9101    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00434 (25), -0.00408 (24), -0.00369 (25), -0.00369 (25), -0.00335 (25), -0.00334 (25), -0.00331 (25), -0.00321 (25), -0.00309 (25), -0.00306 (25), -0.00301 (25), -0.00300 (25), -0.00289 (25), -0.00285 (25), -0.00276 (23), -0.00270 (24), -0.00268 (25), -0.00262 (25), -0.00260 (24), -0.00260 (24), 
Length of domains: 280
Time: pickout 0.0191    decision 0.0308    set_bounds 0.0148    solve 0.3524    add 0.0756    
Accumulated time: pickout 0.8042    decision 2.4431    set_bounds 2.5427    solve 8.5840    add 1.9253    
Current (lb-rhs): -0.004343725740909576
34589 domains visited
Cumulative time: 17.430439949035645

BaB round 18
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0015
batch: 280
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 956] [/input-8, 1451] [/input-8, 1451] [/input, 1240] [/input-8, 1451] [/input-8, 1451] [/input-8, 1451] [/input-8, 1584] [/input-8, 2044] [/input-8, 1451] 
cut re-enabled after branching node selection
0 lb beta sum: 2.247931718826294, worst -0.0055438801646232605
10 lb beta sum: 3.7741799354553223, worst -0.01494702696800232
pruning_in_iteration open status: True
ratio of positive domain = 351 / 560 = 0.6267857142857143
pruning-in-iteration extra time: 0.005321502685546875
Time: prepare 0.0279    bound 0.3732    transfer 0.0017    finalize 0.0043    func 0.4106    
Accumulated time: func 8.9742    prepare 1.7558    bound 5.4114    transfer 0.5278    finalize 0.9143    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00393 (26), -0.00347 (26), -0.00347 (25), -0.00321 (26), -0.00317 (26), -0.00310 (26), -0.00303 (26), -0.00301 (26), -0.00296 (26), -0.00275 (24), -0.00268 (26), -0.00258 (25), -0.00257 (26), -0.00247 (26), -0.00244 (26), -0.00241 (26), -0.00238 (26), -0.00236 (25), -0.00235 (26), -0.00219 (26), 
Length of domains: 209
Time: pickout 0.0178    decision 0.0280    set_bounds 0.0126    solve 0.4108    add 0.0774    
Accumulated time: pickout 0.8220    decision 2.4711    set_bounds 2.5553    solve 8.9948    add 2.0027    
Current (lb-rhs): -0.003925032913684845
34798 domains visited
Cumulative time: 17.989548683166504

BaB round 19
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0013
batch: 209
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1451] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] [/input-8, 1723] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2342867851257324, worst -0.003828875720500946
10 lb beta sum: 3.5031931400299072, worst -0.015333421528339386
pruning_in_iteration open status: True
ratio of positive domain = 237 / 418 = 0.5669856459330144
pruning-in-iteration extra time: 0.005312442779541016
Time: prepare 0.0212    bound 0.3877    transfer 0.0026    finalize 0.0027    func 0.4170    
Accumulated time: func 9.3912    prepare 1.7773    bound 5.7991    transfer 0.5304    finalize 0.9170    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00383 (27), -0.00347 (27), -0.00347 (26), -0.00321 (27), -0.00302 (27), -0.00301 (27), -0.00284 (27), -0.00283 (27), -0.00282 (27), -0.00266 (27), -0.00266 (27), -0.00258 (25), -0.00251 (27), -0.00247 (27), -0.00239 (27), -0.00238 (27), -0.00235 (27), -0.00219 (27), -0.00217 (27), -0.00202 (27), 
Length of domains: 181
Time: pickout 0.0158    decision 0.0301    set_bounds 0.0096    solve 0.4179    add 0.0699    
Accumulated time: pickout 0.8378    decision 2.5012    set_bounds 2.5649    solve 9.4127    add 2.0726    
Current (lb-rhs): -0.003828875720500946
34979 domains visited
Cumulative time: 18.542417287826538

BaB round 20
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0025
batch: 181
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1723] [/input-8, 1584] [/input-8, 1584] [/input, 1240] [/input, 1240] [/input, 1240] [/input-8, 1584] [/input-8, 1584] [/input, 1240] [/input, 1240] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2192037105560303, worst -0.0038288459181785583
10 lb beta sum: 4.205094337463379, worst -0.016973532736301422
pruning_in_iteration open status: True
ratio of positive domain = 229 / 362 = 0.6325966850828729
pruning-in-iteration extra time: 0.0054090023040771484
Time: prepare 0.0186    bound 0.3673    transfer 0.0052    finalize 0.0025    func 0.3961    
Accumulated time: func 9.7873    prepare 1.7961    bound 6.1664    transfer 0.5357    finalize 0.9195    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00383 (28), -0.00347 (27), -0.00324 (27), -0.00321 (28), -0.00284 (28), -0.00283 (28), -0.00266 (28), -0.00266 (28), -0.00262 (28), -0.00251 (28), -0.00247 (28), -0.00243 (28), -0.00239 (28), -0.00232 (26), -0.00218 (28), -0.00214 (28), -0.00201 (28), -0.00200 (28), -0.00197 (28), -0.00188 (28), 
Length of domains: 133
Time: pickout 0.0151    decision 0.0278    set_bounds 0.0084    solve 0.3963    add 0.0718    
Accumulated time: pickout 0.8529    decision 2.5289    set_bounds 2.5733    solve 9.8090    add 2.1444    
Current (lb-rhs): -0.0038288459181785583
35112 domains visited
Cumulative time: 19.073179960250854

BaB round 21
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0015
batch: 133
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1240] [/input, 2168] [/input, 2168] [/input, 2168] [/input, 2168] [/input, 2168] [/input-8, 1584] [/input, 2168] [/input, 2168] [/input-8, 1584] 
cut re-enabled after branching node selection
0 lb beta sum: 2.1909847259521484, worst -0.00297652930021286
10 lb beta sum: 5.635045051574707, worst -0.013026893138885498
pruning_in_iteration open status: True
ratio of positive domain = 187 / 266 = 0.7030075187969924
pruning-in-iteration extra time: 0.005795478820800781
Time: prepare 0.0138    bound 0.3516    transfer 0.0041    finalize 0.0023    func 0.3738    
Accumulated time: func 10.1611    prepare 1.8102    bound 6.5180    transfer 0.5398    finalize 0.9219    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00298 (29), -0.00256 (29), -0.00247 (29), -0.00246 (28), -0.00237 (29), -0.00214 (29), -0.00200 (29), -0.00198 (29), -0.00185 (29), -0.00176 (29), -0.00171 (29), -0.00169 (29), -0.00157 (28), -0.00152 (29), -0.00151 (29), -0.00151 (29), -0.00150 (29), -0.00141 (28), -0.00137 (29), -0.00127 (27), 
Length of domains: 79
Time: pickout 0.0182    decision 0.0259    set_bounds 0.0063    solve 0.3739    add 0.0656    
Accumulated time: pickout 0.8712    decision 2.5548    set_bounds 2.5796    solve 10.1828    add 2.2101    
Current (lb-rhs): -0.00297652930021286
35191 domains visited
Cumulative time: 19.576146125793457

BaB round 22
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0013
batch: 79
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input, 2168] [/input-8, 2044] [/input-8, 1099] [/input-8, 2044] 
split level 1: [/input-8, 1825] [/input-8, 1825] [/input-8, 1825] [/input-8, 1825] [/input-8, 1825] [/input-8, 1825] [/input-8, 2044] [/input-8, 1825] [/input-8, 1825] [/input-8, 1825] 
cut re-enabled after branching node selection
0 lb beta sum: 2.1778390407562256, worst -0.0043092332780361176
10 lb beta sum: 5.079290390014648, worst -0.015449568629264832
pruning_in_iteration open status: True
ratio of positive domain = 254 / 316 = 0.8037974683544304
pruning-in-iteration extra time: 0.005466938018798828
Time: prepare 0.0161    bound 0.3437    transfer 0.0053    finalize 0.0024    func 0.3698    
Accumulated time: func 10.5308    prepare 1.8265    bound 6.8618    transfer 0.5451    finalize 0.9243    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00247 (31), -0.00235 (31), -0.00207 (31), -0.00197 (31), -0.00185 (31), -0.00183 (31), -0.00175 (31), -0.00170 (31), -0.00150 (31), -0.00149 (31), -0.00145 (31), -0.00113 (31), -0.00109 (31), -0.00109 (30), -0.00106 (31), -0.00105 (31), -0.00105 (31), -0.00098 (30), -0.00092 (31), -0.00090 (31), 
Length of domains: 62
Time: pickout 0.0060    decision 0.0242    set_bounds 0.0110    solve 0.3699    add 0.0612    
Accumulated time: pickout 0.8771    decision 2.5790    set_bounds 2.5905    solve 10.5527    add 2.2713    
Current (lb-rhs): -0.002470690757036209
35253 domains visited
Cumulative time: 20.05782651901245

BaB round 23
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0011
batch: 62
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input, 2168] [/input-8, 1099] [/input, 3765] [/input-8, 1099] [/input-8, 1099] 
split level 1: [/input, 2663] [/input, 2663] [/input, 2663] [/input-8, 2045] [/input, 2663] [/input-8, 1825] [/input, 2663] [/input, 2663] [/input-8, 2045] [/input-8, 2045] 
cut re-enabled after branching node selection
0 lb beta sum: 2.1659996509552, worst -0.000830773264169693
10 lb beta sum: 29.844995498657227, worst -0.009987324476242065
pruning_in_iteration open status: True
ratio of positive domain = 240 / 248 = 0.967741935483871
pruning-in-iteration extra time: 0.0053751468658447266
Time: prepare 0.0128    bound 0.2960    transfer 0.0033    finalize 0.0018    func 0.3157    
Accumulated time: func 10.8465    prepare 1.8396    bound 7.1578    transfer 0.5485    finalize 0.9261    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00040 (33), -0.00030 (32), -0.00020 (33), -0.00018 (33), -0.00015 (33), -0.00007 (33), -0.00003 (33), -0.00002 (33), 
Length of domains: 8
Time: pickout 0.0066    decision 0.0155    set_bounds 0.0076    solve 0.3158    add 0.0290    
Accumulated time: pickout 0.8837    decision 2.5945    set_bounds 2.5981    solve 10.8685    add 2.3003    
Current (lb-rhs): -0.00039693713188171387
35261 domains visited
Cumulative time: 20.441773891448975

BaB round 24
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts: total 696 constraints, 37460 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.3204
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3765] [/input, 3765] [/input, 3765] [/input, 3765] [/input, 3765] [/input-8, 567] [/input-8, 567] [/input, 3765] 
split level 1: [/input, 1240] [/input-8, 1840] [/input-8, 1840] [/input-8, 1840] [/input-8, 1840] [/input-8, 1840] [/input-8, 1840] [/input-8, 1840] 
split level 2: [/input-8, 2045] [/input, 2663] [/input, 2663] [/input, 2663] [/input, 2663] [/input-8, 2045] [/input, 2663] [/input-8, 2045] 
split level 3: [/input, 2663] [/input-8, 2045] [/input-8, 2045] [/input-8, 2045] [/input-8, 2045] [/input, 2663] [/input-8, 2045] [/input, 2663] 
split level 4: [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] [/input-8, 662] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0043930113315582275
10 lb beta sum: 5.167954444885254, worst -0.0027508698403835297

all verified at 13th iter
pruning_in_iteration open status: True
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 0.0037841796875
Time: prepare 0.0066    bound 0.2389    transfer 0.0046    finalize 0.0017    func 0.2535    
Accumulated time: func 11.1000    prepare 1.8465    bound 7.3967    transfer 0.5531    finalize 0.9278    
all_split False
Length of domains: 0
Time: pickout 0.0010    decision 0.0239    set_bounds 0.0146    solve 0.2536    add 0.0001    
Accumulated time: pickout 0.8848    decision 2.6185    set_bounds 2.6127    solve 11.1221    add 2.3004    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
35261 domains visited
Cumulative time: 21.056913137435913

found process to kill: terminal indx = 0
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.mps
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.cuts
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.indx
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=123_spec=0_30486103.log
found process for pidx=0
kill process for pidx=0
Result: safe in 24.0327 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 124, vnnlib ID: 124 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.69559193, -7.96780491, -6.96483183, -7.45871067, -6.68889904,
         -7.58828831, -6.67497444, -6.98177767, -8.06610775, -8.63962460]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [547]; unstable size 547; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 228, 1, 547] with unstable size 227 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 547] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 547] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [227]; unstable size 227; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 227] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 227] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.58523273, -0.92486894, -2.40603924, -1.88837290, -2.64663792,
         -1.76642704, -2.72795200, -2.38057590, -1.24313211]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.69559193, -7.96780491, -6.96483183, -7.45871067, -6.68889904,
         -7.58828831, -6.67497444, -6.98177767, -8.06610775, -8.63962460]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.69559193, -7.96780586, -6.96483278, -7.45871067, -6.68889999,
          -7.58828878, -6.67497540, -6.98177910, -8.06610775, -8.63962555],
         [-7.69559193, -7.96780586, -6.96483278, -7.45871067, -6.68889999,
          -7.58828878, -6.67497540, -6.98177910, -8.06610775, -8.63962555]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.94403362, -0.67181969, -1.67479277, -1.18091488, -1.95072556,
          -1.05133677, -1.96465015, -1.65784645, -0.57351780]]],
       device='cuda:0')
number of violation:  9
clean attack image tensor([[[[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         ...,


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0946 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 125, vnnlib ID: 125 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.45314455,  -7.18863773,  -8.37823200,  -9.04793167,  -9.03023815,
          -9.23170471, -10.10972786, -10.12581825,  -6.64005661,  -7.36846209]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [564]; unstable size 564; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 564] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 2, 1, 564] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 564] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 2, 1, 148] with unstable size 1 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [1]; unstable size 1; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 1] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.44336748, -0.41944861,  0.41273689,  1.05374670,  1.06570005,
          1.21813250,  2.11687565,  2.11616468, -1.28266525]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.45314455,  -7.18863773,  -8.37823200,  -9.04793167,  -9.03023815,
          -9.23170471, -10.10972786, -10.12581825,  -6.64005661,  -7.36846209]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.45314312,  -7.18863678,  -8.37823296,  -9.04792976,  -9.03023720,
           -9.23170471, -10.10972786, -10.12581825,  -6.64005566,  -7.36846113],
         [ -7.45314312,  -7.18863678,  -8.37823296,  -9.04792976,  -9.03023720,
           -9.23170471, -10.10972786, -10.12581825,  -6.64005566,  -7.36846113]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.08468199, -0.17982435, -0.72840548]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0755 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 126, vnnlib ID: 126 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.54385185, -7.41220284, -2.34506559, -2.95553207, -2.41963601,
         -3.01310992, -2.81382346, -2.59146428, -7.24296570, -5.83741570]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [396]; unstable size 396; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 396] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 396] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 396] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 177] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.65073228,  4.21796703, -0.26915115,  0.22882640,  0.28623378,
         -0.01064356, -0.09029388,  4.20063686,  2.69216013]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.54385185, -7.41220284, -2.34506559, -2.95553207, -2.41963601,
         -3.01310992, -2.81382346, -2.59146428, -7.24296570, -5.83741570]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.54385185, -7.41220379, -2.34506559, -2.95553231, -2.41963625,
          -3.01311040, -2.81382322, -2.59146428, -7.24296570, -5.83741570],
         [-5.54385185, -7.41220379, -2.34506559, -2.95553231, -2.41963625,
          -3.01311040, -2.81382322, -2.59146428, -7.24296570, -5.83741570]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07457066,  0.39418697,  0.17182803]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0426 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 127, vnnlib ID: 127 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.39800262, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
         -5.32085514, -5.70522690, -5.39239740, -4.68354988, -5.44279432]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [602]; unstable size 602; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 137, 1, 602] with unstable size 136 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 602] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 602] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [136]; unstable size 136; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 136] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 136] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.73008406,  1.05035090, -0.48766088, -0.22834921, -0.77157831,
         -0.10954207,  0.24981618, -0.21459568,  0.21009302]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.39800262, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
         -5.32085514, -5.70522690, -5.39239740, -4.68354988, -5.44279432]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.39800215, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
          -5.32085562, -5.70522690, -5.39239693, -4.68354988, -5.44279432],
         [-4.39800215, -6.31908512, -4.91008711, -5.19226837, -4.68141794,
          -5.32085562, -5.70522690, -5.39239693, -4.68354988, -5.44279432]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.28554773,  0.22653723,  0.50871849, -0.00213194,  0.63730574,
           0.70884705]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 128, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
          -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [471]; unstable size 471; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 210, 1, 471] with unstable size 209 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 471] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 471] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [209]; unstable size 209; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 209] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 209] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17617595,  2.53004336,  0.03650165,  0.78286892, -0.09084666,
          0.84507620,  0.92964888,  2.50925684,  1.68634796]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
          -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.66it/s]100%|██████████| 1/1 [00:00<00:00,  8.65it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.12287617, -9.92002869, -6.60754442, -7.37705517, -6.42930222,
          -7.44449568, -6.38382149, -7.65928459, -9.62154961, -8.92986012]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04548073]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1186 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.553853988647461
alpha/beta optimization time: 1.237255573272705
initial alpha-crown bounds: tensor([[ 1.19834352,  2.55369568,  0.05347472,  0.79098034, -0.08158469,
          0.85336858,  0.94275784,  2.53685737,  1.70595980]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08158469200134277
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.8063 seconds.
lower bounds for all target labels: [1.1983447074890137, 2.553694248199463, 0.05347341299057007, 0.7909782528877258, -0.08158445358276367, 0.8533689975738525, 0.9427576661109924, 2.5368552207946777, 1.7059569358825684]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [4]
start creating model mps for candidates: ['lay/16_4']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.48203229904175
Verifying property 0 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5536956787109375.

Properties batch 1, size 1
Remaining timeout: 198.2579321861267
Verifying property 1 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5368573665618896.

Properties batch 2, size 1
Remaining timeout: 198.14160013198853
Verifying property 2 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.7059597969055176.

Properties batch 3, size 1
Remaining timeout: 198.02074909210205
Verifying property 3 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1983435153961182.

Properties batch 4, size 1
Remaining timeout: 197.90772986412048
Verifying property 4 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9427578449249268.

Properties batch 5, size 1
Remaining timeout: 197.79736018180847
Verifying property 5 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.8533685803413391.

Properties batch 6, size 1
Remaining timeout: 197.68780064582825
Verifying property 6 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.790980339050293.

Properties batch 7, size 1
Remaining timeout: 197.5772578716278
Verifying property 7 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.05347472429275513.

Properties batch 8, size 1
Remaining timeout: 197.45874214172363
Verifying property 8 with 1 instances.
##### Instance 128 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08158469]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.41261196, -10.11622715,  -6.97528791,  -7.70427608,  -6.80372143,
         -7.77790976,  -6.57194042,  -8.02606297,  -9.93407154,  -9.15845585],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08158469]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 471
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 206
Node /15 input 0: size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 681
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0005548000335693359
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-12, 50] 
split level 1: [/input-12, 5] 
split level 2: [/input-8, 555] 
split level 3: [/input-8, 1457] 
split level 4: [/input-8, 28] 
split level 5: [/input-8, 1451] 
split level 6: [/input-8, 1437] 
split level 7: [/input-8, 313] 
pruning_in_iteration open status: True
ratio of positive domain = 162 / 256 = 0.6328125
pruning-in-iteration extra time: 0.005497455596923828
Time: prepare 0.0033    bound 0.2314    transfer 0.0047    finalize 0.0024    func 0.2419    
Accumulated time: func 0.2419    prepare 0.0037    bound 0.2314    transfer 0.0047    finalize 0.0024    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00922 (8), -0.00839 (8), -0.00819 (8), -0.00795 (8), -0.00781 (8), -0.00756 (8), -0.00754 (8), -0.00739 (8), -0.00739 (8), -0.00713 (8), -0.00693 (8), -0.00689 (8), -0.00666 (8), -0.00662 (8), -0.00649 (8), -0.00613 (8), -0.00592 (8), -0.00575 (8), -0.00556 (8), -0.00552 (8), 
Length of domains: 94
Time: pickout 0.0005    decision 0.0262    set_bounds 0.0208    solve 0.2420    add 0.0705    
Accumulated time: pickout 0.0005    decision 0.0262    set_bounds 0.0208    solve 0.2420    add 0.0705    
Current (lb-rhs): -0.009217381477355957
94 domains visited
Cumulative time: 0.37288618087768555

BaB round 2
Fetch cut process: mps for current label is not ready yet
batch: 94
splitting decisions: 
split level 0: [/input-8, 1628] [/input-8, 1458] [/input-8, 19] [/input-8, 796] [/input-8, 1628] [/input-8, 1458] [/input-8, 19] [/input-8, 796] [/input-8, 1628] [/input-8, 1458] 
split level 1: [/input-8, 19] [/input-8, 19] [/input-8, 1134] [/input-8, 1458] [/input-8, 19] [/input-8, 19] [/input-8, 1134] [/input-8, 1458] [/input-8, 19] [/input-8, 19] 
pruning_in_iteration open status: True
ratio of positive domain = 270 / 376 = 0.7180851063829787
pruning-in-iteration extra time: 0.004891633987426758
Time: prepare 0.0073    bound 0.1834    transfer 0.0076    finalize 0.0035    func 0.2019    
Accumulated time: func 0.4438    prepare 0.0112    bound 0.4148    transfer 0.0123    finalize 0.0059    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00608 (10), -0.00530 (10), -0.00491 (10), -0.00488 (10), -0.00470 (10), -0.00438 (10), -0.00411 (10), -0.00407 (10), -0.00405 (10), -0.00404 (10), -0.00382 (10), -0.00382 (10), -0.00371 (10), -0.00369 (10), -0.00363 (10), -0.00363 (10), -0.00349 (10), -0.00324 (10), -0.00320 (10), -0.00306 (10), 
Length of domains: 106
Time: pickout 0.0148    decision 0.0183    set_bounds 0.0114    solve 0.2020    add 0.0256    
Accumulated time: pickout 0.0154    decision 0.0445    set_bounds 0.0322    solve 0.4440    add 0.0961    
Current (lb-rhs): -0.006075263023376465
200 domains visited
Cumulative time: 0.6533694267272949

BaB round 3
Fetch cut process: mps for current label is not ready yet
batch: 106
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 148] [/input-8, 19] [/input-8, 1134] [/input-8, 1134] [/input-8, 148] [/input-8, 19] [/input-8, 1134] [/input-8, 148] [/input-8, 19] 
pruning_in_iteration open status: True
ratio of positive domain = 144 / 212 = 0.679245283018868
pruning-in-iteration extra time: 0.00507664680480957
Time: prepare 0.0044    bound 0.2309    transfer 0.0034    finalize 0.0019    func 0.2406    
Accumulated time: func 0.6844    prepare 0.0158    bound 0.6457    transfer 0.0157    finalize 0.0078    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00449 (11), -0.00371 (11), -0.00369 (11), -0.00333 (11), -0.00332 (11), -0.00310 (11), -0.00296 (11), -0.00278 (11), -0.00255 (11), -0.00255 (11), -0.00253 (11), -0.00242 (11), -0.00241 (11), -0.00231 (11), -0.00230 (11), -0.00216 (11), -0.00207 (11), -0.00207 (11), -0.00202 (11), -0.00201 (11), 
Length of domains: 68
Time: pickout 0.0143    decision 0.0236    set_bounds 0.0051    solve 0.2408    add 0.0691    
Accumulated time: pickout 0.0297    decision 0.0682    set_bounds 0.0373    solve 0.6847    add 0.1651    
Current (lb-rhs): -0.0044852495193481445
268 domains visited
Cumulative time: 1.0144610404968262

BaB round 4
Fetch cut process: mps for current label is not ready yet
batch: 68
splitting decisions: 
split level 0: [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 52] [/input-8, 757] [/input-8, 52] [/input-8, 52] [/input-8, 757] [/input-8, 52] [/input-8, 52] 
split level 1: [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1195] [/input-8, 1674] [/input-8, 1674] [/input-8, 1195] [/input-8, 1674] [/input-8, 1674] 
pruning_in_iteration open status: True
ratio of positive domain = 258 / 272 = 0.9485294117647058
pruning-in-iteration extra time: 0.004785299301147461
Time: prepare 0.0053    bound 0.1165    transfer 0.0050    finalize 0.0021    func 0.1290    
Accumulated time: func 0.8134    prepare 0.0213    bound 0.7622    transfer 0.0208    finalize 0.0099    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00123 (13), -0.00111 (13), -0.00095 (13), -0.00076 (13), -0.00050 (13), -0.00043 (13), -0.00037 (13), -0.00031 (13), -0.00021 (13), -0.00015 (13), -0.00011 (13), -0.00006 (13), -0.00002 (13), -0.00001 (13), 
Length of domains: 14
Time: pickout 0.0075    decision 0.0234    set_bounds 0.0079    solve 0.1291    add 0.0445    
Accumulated time: pickout 0.0372    decision 0.0915    set_bounds 0.0452    solve 0.8138    add 0.2097    
Current (lb-rhs): -0.0012319087982177734
282 domains visited
Cumulative time: 1.232323169708252

BaB round 5
Fetch cut process: mps for current label is not ready yet
batch: 14
splitting decisions: 
split level 0: [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] [/input-8, 1443] 
split level 1: [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] 
split level 2: [/input-8, 1458] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] [/input-8, 1458] [/input-8, 1674] [/input-8, 1674] [/input-8, 1674] 
split level 3: [/input-8, 148] [/input-8, 148] [/input-8, 148] [/input-8, 148] [/input-8, 148] [/input-8, 148] [/input-8, 148] [/input-8, 148] [/input-8, 148] [/input-8, 148] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 224 / 224 = 1.0
pruning-in-iteration extra time: 4.673004150390625e-05
Time: prepare 0.0045    bound 0.0042    transfer 0.0025    finalize 0.0014    func 0.0126    
Accumulated time: func 0.8260    prepare 0.0261    bound 0.7664    transfer 0.0233    finalize 0.0113    
all_split False
Length of domains: 0
Time: pickout 0.0012    decision 0.0151    set_bounds 0.0094    solve 0.0127    add 0.0001    
Accumulated time: pickout 0.0384    decision 0.1066    set_bounds 0.0546    solve 0.8265    add 0.2097    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
282 domains visited
Cumulative time: 1.271941900253296

the mip building process is not terminated yet, kill it
Result: safe in 4.2128 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 129, vnnlib ID: 129 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.83963740, -5.78964806, -1.83691561, -1.95573735, -1.63162184,
         -2.07016230, -3.15051937, -3.26623225, -1.61969507, -4.62280273]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [452]; unstable size 452; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 452] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 452] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 452] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 203] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.03636277,  2.65717649, -0.59098852, -0.13531050, -0.81601834,
          0.63781679,  0.66199285, -1.23648858,  1.56749082]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.83963740, -5.78964806, -1.83691561, -1.95573735, -1.63162184,
         -2.07016230, -3.15051937, -3.26623225, -1.61969507, -4.62280273]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.83963752, -5.78964806, -1.83691537, -1.95573735, -1.63162184,
          -2.07016230, -3.15051913, -3.26623249, -1.61969483, -4.62280178],
         [-1.83963752, -5.78964806, -1.83691537, -1.95573735, -1.63162184,
          -2.07016230, -3.15051913, -3.26623249, -1.61969483, -4.62280178]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.23052478, -0.23324692, -0.11442494, -0.43854046, -0.45046747]]],
       device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1246 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 130, vnnlib ID: 130 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.94819498, -10.50515652,  -5.49739599,  -6.42426491,  -5.53212261,
          -6.49647903,  -6.45488739,  -5.53136778, -11.77412796,  -9.99837017]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [381]; unstable size 381; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 381] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 381] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 381] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.93346727,  3.23019981, -1.30597448, -0.08756115, -1.34070396,
         -0.31846684, -1.51010025,  4.62571096,  2.77353883]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.94819498, -10.50515652,  -5.49739599,  -6.42426491,  -5.53212261,
          -6.49647903,  -6.45488739,  -5.53136778, -11.77412796,  -9.99837017]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.94819546, -10.50515652,  -5.49739647,  -6.42426586,  -5.53212261,
           -6.49647903,  -6.45488739,  -5.53136826, -11.77412796,  -9.99836922],
         [ -7.94819546, -10.50515652,  -5.49739647,  -6.42426586,  -5.53212261,
           -6.49647903,  -6.45488739,  -5.53136826, -11.77412796,  -9.99836922]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.99908257, -0.07221317, -0.96435642, -0.04159164, -0.96511078]]],
       device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0983 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 131, vnnlib ID: 131 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.40095615,  -9.83375263,  -7.76689386,  -9.66946220,  -8.91213799,
          -9.84124184, -11.04437828, -10.26787376,  -3.98419762,  -9.49902916]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [464]; unstable size 464; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 155, 1, 464] with unstable size 154 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 464] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 464] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [154]; unstable size 154; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 154] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 154] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.04108179, 5.15906715, 3.08301497, 4.88842535, 4.12479210, 5.03533173,
         6.29986477, 5.32776594, 4.85973024]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0756 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 132, vnnlib ID: 132 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.95324135, -15.74180508, -20.80966187, -22.22572708, -21.19065666,
         -22.59031105, -22.29429626, -21.67894745, -16.55251884, -15.91638851]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [432]; unstable size 432; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 132, 1, 432] with unstable size 131 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 432] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 432] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [131]; unstable size 131; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 131] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 131] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.68451309,  4.31257391,  5.69330502,  4.56155491,  6.04201698,
          5.73533583,  5.05597782,  0.24247551, -0.06809056]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.95324135, -15.74180508, -20.80966187, -22.22572708, -21.19065666,
         -22.59031105, -22.29429626, -21.67894745, -16.55251884, -15.91638851]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.31996536, -15.27309704, -20.08948708, -21.46234131, -20.40325928,
          -21.81718063, -21.57792282, -20.87321854, -15.90462685, -15.27287483]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00022221]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0073 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0548 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 133, vnnlib ID: 133 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -3.23170614, -10.46739864,  -2.10017300,  -3.30273414,  -5.96899986,
          -3.33501148,  -5.76224136,  -4.57778931,  -9.25406361,  -8.82499790]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [286]; unstable size 286; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 61, 1, 286] with unstable size 60 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 286] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [60]; unstable size 60; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 60] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 60] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93707120, 8.02992725, 1.03405452, 3.70453048, 1.06637466, 3.43099546,
         2.30599809, 6.81840992, 6.35690308]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0738 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 134, vnnlib ID: 134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
         -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 164, 1, 608] with unstable size 163 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 608] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [163]; unstable size 163; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 163] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 163] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.48984313,  1.58062875,  3.18308473,  1.96417892,  3.38943863,
          2.37361097,  3.29370761, -0.33310568,  2.16880131]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
         -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.79958057, -6.86547184, -6.03746557, -7.86904621, -6.47844791,
          -8.08712673, -6.96507740, -7.95197964, -3.79648733, -6.57416487]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00309324]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.15396857,  1.01111114,  1.01111114,  ...,  1.02698421,
             1.04285717,  1.10634947],
           [ 1.02698421,  0.94761908,  0.94761908,  ...,  1.12222254,
             1.12222254,  1.16984153],
           [ 0.99523818,  0.91587305,  0.86825401,  ...,  1.12222254,
             1.13809550,  1.16984153],
           ...,
           [-0.14761895, -0.41746020, -0.43333322,  ..., -0.36984116,
            -0.33809513, -0.41746020],
           [-0.30634910, -0.56031746, -0.57619047,  ..., -0.68730158,
            -0.54444444, -0.36984116],
           [-0.22698402, -0.33809513, -0.40158719,  ..., -0.59206349,
            -0.32222211, -0.14761895]],

          [[ 1.20772982,  1.06280196,  1.06280196,  ...,  1.07890511,
             1.09500813,  1.15942061],
           [ 1.07890511,  0.99838978,  0.99838978,  ...,  1.17552364,
             1.17552364,  1.22383285],
           [ 1.04669893,  0.96618366,  0.91787446,  ...,  1.17552364,
             1.19162667,  1.22383285],
           ...,
           [-0.11272129, -0.38647330, -0.40257636,  ..., -0.33816412,
            -0.30595800, -0.38647330],
           [-0.27375188, -0.53140092, -0.54750401,  ..., -0.66022539,
            -0.51529789, -0.33816412],
           [-0.19323659, -0.30595800, -0.37037024,  ..., -0.56360704,
            -0.28985494, -0.11272129]],

          [[ 1.26086998,  1.12593722,  1.12593722,  ...,  1.14092970,
             1.15592217,  1.21589243],
           [ 1.14092970,  1.06596720,  1.06596720,  ...,  1.23088503,
             1.23088503,  1.27586246],
           [ 1.11094475,  1.03598225,  0.99100471,  ...,  1.23088503,
             1.24587750,  1.27586246],
           ...,
           [ 0.03148442, -0.22338814, -0.23838064,  ..., -0.17841063,
            -0.14842562, -0.22338814],
           [-0.11844061, -0.35832080, -0.37331331,  ..., -0.47826082,
            -0.34332830, -0.17841063],
           [-0.04347810, -0.14842562, -0.20839565,  ..., -0.38830581,
            -0.13343313,  0.03148442]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0742 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 135, vnnlib ID: 135 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.85584545,  -6.89210796, -11.20330238, -10.48305511, -10.31528664,
         -10.58248711, -11.25512695, -10.38301277,  -8.54595566,  -7.81960535]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [417]; unstable size 417; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 417] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 417] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 417] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 171] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.35080290, 3.51902580, 2.76685762, 2.67035389, 2.85706806, 3.53440428,
         2.64734840, 1.17310023, 0.69272709]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0483 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 136, vnnlib ID: 136 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.31404114, -11.99935341,  -8.52472019,  -9.11652184,  -8.93289280,
          -9.32760048, -10.07054329, -10.77766991,  -8.21101475, -11.86982346]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [351]; unstable size 351; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 351] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 351] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 351] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.09101200, 0.87874770, 1.34494710, 1.28547025, 1.54521215, 2.33845377,
         2.98431873, 0.63081121, 3.98045540]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0700 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 137, vnnlib ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
          -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [390]; unstable size 390; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 390] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 390] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 390] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 239] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.07701063,  3.63565087, -0.04559040,  0.64380205, -0.00980759,
          0.65270013,  1.48101175,  3.16953468,  3.15534353]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
          -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.56it/s]100%|██████████| 1/1 [00:00<00:00,  8.55it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.36132240, -11.14967251,  -6.83248758,  -7.53480721,  -6.91983700,
           -7.54735374,  -6.71112919,  -8.56491947, -10.71888256, -10.59876251],
         [ -9.36132240, -11.14967251,  -6.83248758,  -7.53480721,  -6.91983700,
           -7.54735374,  -6.71112919,  -8.56491947, -10.71888256, -10.59876251]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.12135839, 0.20870781]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1198 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.945512771606445
alpha/beta optimization time: 1.223520040512085
initial alpha-crown bounds: tensor([[ 2.10259390,  3.66781664, -0.03308088,  0.65345085,  0.00669563,
          0.66249561,  1.49558294,  3.20632243,  3.18363619]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.033080875873565674
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6284 seconds.
lower bounds for all target labels: [2.1025938987731934, 3.667816638946533, -0.033080875873565674, 0.6534508466720581, 0.0066956281661987305, 0.6624956130981445, 1.4955826997756958, 3.206322431564331, 3.18363618850708]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [2]
start creating model mps for candidates: ['lay/16_2']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.50095129013062
Verifying property 0 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.667816638946533.

Properties batch 1, size 1
Remaining timeout: 198.2246322631836
Verifying property 1 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.206322431564331.

Properties batch 2, size 1
Remaining timeout: 198.11126160621643
Verifying property 2 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.18363618850708.

Properties batch 3, size 1
Remaining timeout: 198.0069236755371
Verifying property 3 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.1025938987731934.

Properties batch 4, size 1
Remaining timeout: 197.9038016796112
Verifying property 4 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.495582938194275.

Properties batch 5, size 1
Remaining timeout: 197.79870057106018
Verifying property 5 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6624956130981445.

Properties batch 6, size 1
Remaining timeout: 197.68846940994263
Verifying property 6 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6534508466720581.

Properties batch 7, size 1
Remaining timeout: 197.56601643562317
Verifying property 7 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0066956281661987305.

Properties batch 8, size 1
Remaining timeout: 197.45159888267517
Verifying property 8 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03308088]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.67846966, -11.31667233,  -7.14757013,  -7.76657391,  -7.15691566,
         -7.78410292,  -6.75477409,  -8.83060551, -11.06530190, -10.73754597],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03308088]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 390
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 237
Node /15 input 0: size torch.Size([100]) unstable 9
-----------------
# of unstable neurons: 636
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0005662441253662109
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 62] 
split level 2: [/input-12, 5] 
split level 3: [/input-12, 61] 
split level 4: [/input-8, 20] 
split level 5: [/input-12, 27] 
split level 6: [/input-8, 1114] 
split level 7: [/input-8, 310] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 4.863739013671875e-05
Time: prepare 0.0032    bound 0.0046    transfer 0.0044    finalize 0.0021    func 0.0145    
Accumulated time: func 0.0145    prepare 0.0036    bound 0.0046    transfer 0.0044    finalize 0.0021    
all_split False
Length of domains: 0
Time: pickout 0.0005    decision 0.0254    set_bounds 0.0197    solve 0.0145    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0254    set_bounds 0.0197    solve 0.0145    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.06567573547363281

the mip building process is not terminated yet, kill it
Result: safe in 3.0059 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 138, vnnlib ID: 138 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.78461742, -7.78471851, -6.68574715, -7.54008961, -6.71664238,
         -7.68185663, -7.60335922, -7.74536133, -7.44903946, -7.66552782]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [390]; unstable size 390; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 390] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 390] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 390] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 164] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.46082926, 0.41245526, 1.06713581, 0.36195052, 1.19837439, 1.11187375,
         1.25493622, 1.29937804, 1.30356193]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0785 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 139, vnnlib ID: 139 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.36590004, -7.92974758, -3.18712282, -4.35600662, -3.02723885,
         -4.45325327, -2.34703112, -4.90892315, -8.33985519, -7.64006281]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [432]; unstable size 432; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 432] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 432] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 432] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 188] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.30574846, 4.53140736, 0.46472621, 1.64646149, 0.30628824, 1.73555934,
         2.01324773, 5.01047850, 4.32014847]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0517 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 140, vnnlib ID: 140 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.67068291,  -8.63208675, -12.35949326, -11.84118938, -12.90088081,
         -12.06089878, -11.65532017, -11.34745598, -11.09524727,  -7.12381601]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [439]; unstable size 439; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 167, 1, 439] with unstable size 166 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 1, 1, 439] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 439] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 1, 1, 166] with unstable size 0 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [0]; unstable size 0; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 0] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.93782830, 1.22470033, 4.46517467, 4.00368023, 4.95243645, 4.21050739,
         3.68815422, 3.40154791, 3.39086008]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0491 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 141, vnnlib ID: 141 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.23027992, -5.59671307, -8.10045242, -8.03788757, -7.89279747,
         -8.14015102, -7.49874401, -7.77289391, -6.25006390, -5.63300037]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [449]; unstable size 449; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 164, 1, 449] with unstable size 163 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 449] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 449] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [163]; unstable size 163; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 163] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 163] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.13565826,  1.81420493,  1.73954344,  1.59858179,  1.83115482,
          1.20980716,  1.41279888,  0.24144995, -0.16323665]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.23027992, -5.59671307, -8.10045242, -8.03788757, -7.89279747,
         -8.14015102, -7.49874401, -7.77289391, -6.25006390, -5.63300037]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.93233824, -5.38019562, -7.65612125, -7.53466606, -7.42454910,
          -7.63522720, -7.07436752, -7.25748777, -5.98633766, -5.26369810]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11649752]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0067 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0545 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 142, vnnlib ID: 142 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.83678341, -8.62305260, -5.57152319, -6.19232559, -5.90445709,
         -6.32129097, -3.83951640, -7.52650928, -9.32637024, -8.57943630]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [435]; unstable size 435; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 435] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 435] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 435] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 216] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.17719841, 3.78496885, 1.30179667, 1.96983409, 1.59501207, 2.08713460,
         2.99926043, 4.44833326, 3.73394656]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0661 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 143, vnnlib ID: 143 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
          -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 145, 1, 527] with unstable size 144 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 527] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [144]; unstable size 144; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 144] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 144] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.59060526,  6.26868534, -0.24463530,  1.11096728,  1.21317482,
          0.31436086,  1.29949212,  6.03089809,  5.42754269]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
          -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.34092617, -10.46391487,  -3.21198559,  -4.69258404,  -3.26048160,
           -4.79305887,  -3.97019267,  -4.88587332,  -9.88317490,  -9.55619907]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04849601]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.31269872e+00,  1.32857168e+00,  5.98412752e-01,  ...,
             5.03174663e-01,  8.68254006e-01,  1.13809550e+00],
           [ 1.40793681e+00,  1.28095269e+00,  1.13809550e+00,  ...,
             1.26507962e+00,  1.42380977e+00,  1.23333359e+00],
           [ 1.10634947e+00,  1.47142887e+00,  1.47142887e+00,  ...,
             1.39206374e+00,  1.40793681e+00,  1.37619078e+00],
           ...,
           [ 1.42380977e+00,  1.09047651e+00,  9.79365110e-01,  ...,
             1.26507962e+00,  1.28095269e+00,  1.21746063e+00],
           [ 1.29682565e+00,  1.04285717e+00,  1.20158756e+00,  ...,
             9.63492095e-01,  8.68254006e-01,  8.20634961e-01],
           [ 1.10634947e+00,  1.36031771e+00,  1.32857168e+00,  ...,
             9.15873051e-01,  6.14285767e-01,  6.46031797e-01]],

          [[ 9.33977544e-01,  1.17552364e+00,  5.79710245e-01,  ...,
             4.34782714e-01,  7.89049983e-01,  9.66183662e-01],
           [ 1.40096653e+00,  1.27214205e+00,  1.06280196e+00,  ...,
             1.14331758e+00,  1.28824508e+00,  1.09500813e+00],
           [ 1.28824508e+00,  1.56199706e+00,  1.44927561e+00,  ...,
             1.09500813e+00,  1.17552364e+00,  1.28824508e+00],
           ...,
           [ 1.17552364e+00,  9.82286692e-01,  8.85668337e-01,  ...,
             1.30434811e+00,  1.33655429e+00,  1.28824508e+00],
           [ 1.06280196e+00,  8.21256101e-01,  9.01771426e-01,  ...,
             1.12721443e+00,  1.04669893e+00,  1.03059590e+00],
           [ 8.69565308e-01,  1.12721443e+00,  9.98389781e-01,  ...,
             1.09500813e+00,  8.21256101e-01,  9.01771426e-01]],

          [[ 3.14844176e-02,  3.01349491e-01,  1.06446937e-01,  ...,
             9.14544314e-02,  1.21439442e-01,  1.51424453e-01],
           [ 1.36431947e-01,  1.64919142e-02,  1.81409463e-01,  ...,
             5.11244535e-01,  4.51274544e-01,  1.21439442e-01],
           [-1.48425624e-01,  1.51424453e-01,  2.26386964e-01,  ...,
             2.56371975e-01,  1.51424453e-01,  6.14694245e-02],
           ...,
           [ 3.16341996e-01,  1.49940979e-03, -1.33433133e-01,  ...,
            -2.84855980e-02,  1.64919142e-02, -2.84855980e-02],
           [ 1.36431947e-01, -1.18440613e-01,  1.49940979e-03,  ...,
            -2.83358276e-01, -3.28335792e-01, -3.58320802e-01],
           [ 1.64919142e-02,  2.26386964e-01,  1.51424453e-01,  ...,
            -2.38380641e-01, -5.23238361e-01, -5.23238361e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0636 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 144, vnnlib ID: 144 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.79352665, -12.23771381,  -9.42079353,  -8.18088913,  -9.67141724,
          -8.12612629,  -9.56548309,  -9.96920204, -11.10543823, -11.25221634]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 427] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 427] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 169] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.20623159, 3.44203925, 1.05065632, 0.04120036, 1.25533807, 1.08397412,
         1.56545269, 2.38391042, 2.54189825]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0434 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 145, vnnlib ID: 145 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.00209332, -8.59088707, -2.82365561, -3.22743535, -3.59733486,
         -3.29684186, -4.70374870, -4.82936382, -7.53730106, -8.04424858]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [667]; unstable size 667; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 667] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 667] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 667] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 174] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.19111562,  4.58325672, -0.76220047, -0.08250546, -0.05808830,
          1.11135769,  1.00770724,  3.64658070,  4.12331247]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.00209332, -8.59088707, -2.82365561, -3.22743535, -3.59733486,
         -3.29684186, -4.70374870, -4.82936382, -7.53730106, -8.04424858]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.00209332, -8.59088707, -2.82365608, -3.22743607, -3.59733486,
          -3.29684305, -4.70374966, -4.82936430, -7.53730202, -8.04424763],
         [-5.00209332, -8.59088707, -2.82365608, -3.22743607, -3.59733486,
          -3.29684305, -4.70374966, -4.82936430, -7.53730202, -8.04424763]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.47318697, -0.06940699,  0.30049181]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]],


         [[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]],


         [[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1041 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 146, vnnlib ID: 146 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.50118589,  -9.62631321, -11.06040764, -11.60052204, -11.25030899,
         -11.77759075, -11.48435974, -10.44144726,  -6.63968658,  -9.16156864]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [439]; unstable size 439; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 439] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 439] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 439] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 153] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.49919498, 2.48104477, 3.67119646, 4.11645222, 3.79514456, 4.28060246,
         4.02054405, 2.84020495, 1.95948505]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0409 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 147, vnnlib ID: 147 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.61050510, -18.19259834, -14.86876678, -16.21520042, -15.81747723,
         -16.15572166, -15.55497742, -15.71164322, -17.60300827, -19.53060722]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 540] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 540] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 185] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.21178198, 2.48818970, 0.96625048, 0.66403455, 0.90339833, 0.26163790,
         0.41980028, 1.96595526, 3.83946896]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0512 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 148, vnnlib ID: 148 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.16096544, -5.40149117, -3.63111496, -3.02717566, -3.77620387,
         -3.01623964, -4.59425926, -2.84824109, -5.91380119, -4.83607054]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [455]; unstable size 455; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 145, 1, 455] with unstable size 144 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 455] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 455] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [144]; unstable size 144; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 144] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 144] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.78772736,  1.81875539,  0.45767832, -0.11035323,  0.65982604,
         -0.12342572,  1.28189731,  2.28518844,  1.34910381]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.16096544, -5.40149117, -3.63111496, -3.02717566, -3.77620387,
         -3.01623964, -4.59425926, -2.84824109, -5.91380119, -4.83607054]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.40923071, -5.67548466, -3.81281948, -3.15027142, -4.00697517,
          -3.13820839, -4.74294853, -3.15190148, -6.05144215, -5.10408592],
         [-6.40923071, -5.67548466, -3.81281948, -3.15027142, -4.00697517,
          -3.13820839, -4.74294853, -3.15190148, -6.05144215, -5.10408592]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00163007, -0.01369309]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0073 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0624 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 149, vnnlib ID: 149 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.46979618, -12.58957005,  -7.37592888,  -8.55527401,  -7.20859337,
          -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046116]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 527] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 527] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 256] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.46516299,  4.14436626,  0.83085936, -0.49284095,  0.88343489,
         -0.76752138,  1.28632283,  3.93838716,  3.79598069]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.46979618, -12.58957005,  -7.37592888,  -8.55527401,  -7.20859337,
          -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046116]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.46979618, -12.58956909,  -7.37592793,  -8.55527496,  -7.20859337,
           -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046211],
         [-10.46979618, -12.58956909,  -7.37592793,  -8.55527496,  -7.20859337,
           -8.61386204,  -6.98575497,  -9.30835915, -12.31583118, -12.19046211]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16733456, -0.39017296]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.32222211, -1.13174593, -1.17936504,  ..., -0.68730158,
            -0.81428570, -0.54444444],
           [-1.24285710, -1.09999990, -1.38571417,  ..., -0.68730158,
            -0.78253967, -0.79841268],
           [-1.08412695, -0.90952379, -1.13174593,  ..., -0.49682540,
            -0.84603173, -0.87777776],
           ...,
           [-0.19523799,  1.31269872,  0.43968260,  ..., -0.95714283,
            -0.84603173, -0.68730158],
           [ 0.07460327,  1.37619078,  0.90000004,  ..., -0.95714283,
            -0.75079364, -0.84603173],
           [ 0.26507944,  0.78888893,  0.43968260,  ..., -0.97301590,
            -0.92539680, -0.97301590]],

          [[-1.30434775, -1.01449275, -0.98228657,  ..., -0.51529789,
            -0.45088565, -0.25764883],
           [-1.06280184, -0.83735907, -1.19162631,  ..., -0.43478248,
            -0.41867942, -0.30595800],
           [-0.93397743, -0.67632848, -0.93397743,  ..., -0.35426718,
            -0.38647330, -0.41867942],
           ...,
           [-0.24154577,  0.62801939,  0.12882459,  ..., -0.98228657,
            -0.85346210, -0.70853460],
           [-0.09661824,  0.70853472,  0.43478271,  ..., -0.99838966,
            -0.78904986, -0.91787434],
           [ 0.04830930,  0.51529801,  0.28985518,  ..., -0.95008045,
            -0.90177131, -0.98228657]],

          [[-1.16791618, -0.98800600, -1.03298354,  ..., -0.70314842,
            -0.65817088, -0.28335828],
           [-1.00299859, -0.92803597, -1.16791618,  ..., -0.58320838,
            -0.53823084, -0.49325335],
           [-0.92803597, -0.86806595, -1.06296861,  ..., -0.26836565,
            -0.53823084, -0.55322337],
           ...,
           [-0.35832080,  0.45127454, -0.05847061,  ..., -0.85307342,
            -0.74812591, -0.56821585],
           [-0.26836565,  0.48125952,  0.33133450,  ..., -0.85307342,
            -0.70314842, -0.76311839],
           [ 0.03148442,  0.51124454,  0.42128953,  ..., -0.83808094,
            -0.79310340, -0.82308841]]],


         [[[-1.32222211, -1.13174593, -1.17936504,  ..., -0.68730158,
            -0.81428570, -0.54444444],
           [-1.24285710, -1.09999990, -1.38571417,  ..., -0.68730158,
            -0.78253967, -0.79841268],
           [-1.08412695, -0.90952379, -1.13174593,  ..., -0.49682540,
            -0.84603173, -0.87777776],
           ...,
           [-0.19523799,  1.31269872,  0.43968260,  ..., -0.95714283,
            -0.84603173, -0.68730158],
           [ 0.07460327,  1.37619078,  0.90000004,  ..., -0.95714283,
            -0.75079364, -0.84603173],
           [ 0.26507944,  0.78888893,  0.43968260,  ..., -0.97301590,
            -0.92539680, -0.97301590]],

          [[-1.30434775, -1.01449275, -0.98228657,  ..., -0.51529789,
            -0.45088565, -0.25764883],
           [-1.06280184, -0.83735907, -1.19162631,  ..., -0.43478248,
            -0.41867942, -0.30595800],
           [-0.93397743, -0.67632848, -0.93397743,  ..., -0.35426718,
            -0.38647330, -0.41867942],
           ...,
           [-0.24154577,  0.62801939,  0.12882459,  ..., -0.98228657,
            -0.85346210, -0.70853460],
           [-0.09661824,  0.70853472,  0.43478271,  ..., -0.99838966,
            -0.78904986, -0.91787434],
           [ 0.04830930,  0.51529801,  0.28985518,  ..., -0.95008045,
            -0.90177131, -0.98228657]],

          [[-1.16791618, -0.98800600, -1.03298354,  ..., -0.70314842,
            -0.65817088, -0.28335828],
           [-1.00299859, -0.92803597, -1.16791618,  ..., -0.58320838,
            -0.53823084, -0.49325335],
           [-0.92803597, -0.86806595, -1.06296861,  ..., -0.26836565,
            -0.53823084, -0.55322337],
           ...,
           [-0.35832080,  0.45127454, -0.05847061,  ..., -0.85307342,
            -0.74812591, -0.56821585],
           [-0.26836565,  0.48125952,  0.33133450,  ..., -0.85307342,
            -0.70314842, -0.76311839],
           [ 0.03148442,  0.51124454,  0.42128953,  ..., -0.83808094,
            -0.79310340, -0.82308841]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0938 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 150, vnnlib ID: 150 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.71911144, -10.78857327, -13.80652714, -15.57193089, -13.78481674,
         -15.82200527, -15.45771599, -13.88326550,  -9.93582153, -10.41513634]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [582]; unstable size 582; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 582] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 582] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 582] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 186] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.74895859,  1.97158432,  3.71107578,  1.79468870,  3.93884802,
          3.53552580,  1.82552481, -1.48514724, -0.67360950]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.71911144, -10.78857327, -13.80652714, -15.57193089, -13.78481674,
         -15.82200527, -15.45771599, -13.88326550,  -9.93582153, -10.41513634]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.71911335, -10.78857327, -13.80652618, -15.57193279, -13.78481674,
          -15.82200718, -15.45771790, -13.88326550,  -9.93582153, -10.41513634],
         [ -9.71911335, -10.78857327, -13.80652618, -15.57193279, -13.78481674,
          -15.82200718, -15.45771790, -13.88326550,  -9.93582153, -10.41513634]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.06945992, -0.85275173, -0.37343693]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0772 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 151, vnnlib ID: 151 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
          -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [436]; unstable size 436; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 436] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 436] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 436] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 170] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.49995494,  4.81325483,  0.79489255, -0.03725127,  0.90810907,
          1.23507929,  0.64367217,  4.26866531,  4.34728575]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
          -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.55974388, -10.00794888,  -5.61042452,  -4.45638180,  -5.72507191,
           -4.47629452,  -6.00398064,  -5.42168999,  -9.52786255,  -9.51117516]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01991272]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0756 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 152, vnnlib ID: 152 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.10573387, -12.44030190,  -8.55103970,  -9.26790047,  -7.95741177,
          -9.40282917,  -8.36335182, -10.19440269, -12.55924797, -12.84323978]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [434]; unstable size 434; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 157, 1, 434] with unstable size 156 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 434] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 434] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [156]; unstable size 156; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 156] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 156] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.99604273,  3.13732719,  0.34504730, -0.83755273,  0.47180045,
         -0.58407068,  1.10311317,  3.33464861,  3.55361891]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.10573387, -12.44030190,  -8.55103970,  -9.26790047,  -7.95741177,
          -9.40282917,  -8.36335182, -10.19440269, -12.55924797, -12.84323978]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.10573483, -12.44030285,  -8.55103970,  -9.26790047,  -7.95741272,
           -9.40283012,  -8.36335182, -10.19440365, -12.55924892, -12.84324265],
         [-10.10573483, -12.44030285,  -8.55103970,  -9.26790047,  -7.95741272,
           -9.40283012,  -8.36335182, -10.19440365, -12.55924892, -12.84324265]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.59362698, -0.18768787]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-9.41269815e-01, -9.09523785e-01, -1.33809519e+00,  ...,
            -6.39682531e-01,  7.46032670e-02,  1.85714364e-01],
           [-5.28571427e-01, -7.98412681e-01, -1.25873005e+00,  ...,
            -5.76190472e-01, -2.42857039e-01,  1.06349289e-01],
           [-4.65079248e-01, -4.01587188e-01, -7.66666651e-01,  ...,
            -3.85714173e-01, -3.53968143e-01, -1.63491964e-01],
           ...,
           [ 1.97936535e+00,  1.10634947e+00,  1.42380977e+00,  ...,
             1.94761932e+00,  1.94761932e+00,  1.97936535e+00],
           [ 1.94761932e+00,  1.47142887e+00,  1.37619078e+00,  ...,
             1.96349227e+00,  1.82063520e+00,  1.80476213e+00],
           [ 1.99523830e+00,  1.78888917e+00,  1.85238123e+00,  ...,
             1.99523830e+00,  1.99523830e+00,  1.94761932e+00]],

          [[-1.12721294e-01, -1.44927412e-01, -6.28019273e-01,  ...,
            -2.25442708e-01,  3.54267418e-01,  6.28019392e-01],
           [ 2.09339887e-01, -1.12721294e-01, -5.47504008e-01,  ...,
            -2.89854944e-01,  1.22934580e-07,  5.47504127e-01],
           [ 1.93236828e-01,  2.25442946e-01, -1.61029361e-02,  ...,
            -8.05151686e-02, -8.05151686e-02,  2.89855182e-01],
           ...,
           [ 1.70692456e+00,  8.37359190e-01,  1.14331758e+00,  ...,
             1.75523376e+00,  1.73913074e+00,  1.78743994e+00],
           [ 1.73913074e+00,  1.20772982e+00,  1.04669893e+00,  ...,
             1.72302771e+00,  1.57810009e+00,  1.61030626e+00],
           [ 1.85185218e+00,  1.57810009e+00,  1.56199706e+00,  ...,
             1.75523376e+00,  1.75523376e+00,  1.73913074e+00]],

          [[-1.39280367e+00, -1.30284870e+00, -1.61769128e+00,  ...,
            -1.27286363e+00, -7.48125911e-01, -3.73313308e-01],
           [-1.19790113e+00, -1.39280367e+00, -1.60269880e+00,  ...,
            -1.25787115e+00, -1.03298354e+00, -4.33283329e-01],
           [-1.13793111e+00, -1.21289361e+00, -1.45277369e+00,  ...,
            -1.18290865e+00, -1.03298354e+00, -7.18140900e-01],
           ...,
           [ 1.84557760e+00,  9.76012170e-01,  1.24587750e+00,  ...,
             1.87556267e+00,  1.84557760e+00,  1.87556267e+00],
           [ 1.87556267e+00,  1.33583248e+00,  1.15592217e+00,  ...,
             1.83058512e+00,  1.69565260e+00,  1.69565260e+00],
           [ 1.96551764e+00,  1.69565260e+00,  1.68066013e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.84557760e+00]]],


         [[[-9.41269815e-01, -9.09523785e-01, -1.33809519e+00,  ...,
            -6.39682531e-01,  7.46032670e-02,  1.85714364e-01],
           [-5.28571427e-01, -7.98412681e-01, -1.25873005e+00,  ...,
            -5.76190472e-01, -2.42857039e-01,  1.06349289e-01],
           [-4.65079248e-01, -4.01587188e-01, -7.66666651e-01,  ...,
            -3.85714173e-01, -3.53968143e-01, -1.63491964e-01],
           ...,
           [ 1.97936535e+00,  1.10634947e+00,  1.42380977e+00,  ...,
             1.94761932e+00,  1.94761932e+00,  1.97936535e+00],
           [ 1.94761932e+00,  1.47142887e+00,  1.37619078e+00,  ...,
             1.96349227e+00,  1.82063520e+00,  1.80476213e+00],
           [ 1.99523830e+00,  1.78888917e+00,  1.85238123e+00,  ...,
             1.99523830e+00,  1.99523830e+00,  1.94761932e+00]],

          [[-1.12721294e-01, -1.44927412e-01, -6.28019273e-01,  ...,
            -2.25442708e-01,  3.54267418e-01,  6.28019392e-01],
           [ 2.09339887e-01, -1.12721294e-01, -5.47504008e-01,  ...,
            -2.89854944e-01,  1.22934580e-07,  5.47504127e-01],
           [ 1.93236828e-01,  2.25442946e-01, -1.61029361e-02,  ...,
            -8.05151686e-02, -8.05151686e-02,  2.89855182e-01],
           ...,
           [ 1.70692456e+00,  8.37359190e-01,  1.14331758e+00,  ...,
             1.75523376e+00,  1.73913074e+00,  1.78743994e+00],
           [ 1.73913074e+00,  1.20772982e+00,  1.04669893e+00,  ...,
             1.72302771e+00,  1.57810009e+00,  1.61030626e+00],
           [ 1.85185218e+00,  1.57810009e+00,  1.56199706e+00,  ...,
             1.75523376e+00,  1.75523376e+00,  1.73913074e+00]],

          [[-1.39280367e+00, -1.30284870e+00, -1.61769128e+00,  ...,
            -1.27286363e+00, -7.48125911e-01, -3.73313308e-01],
           [-1.19790113e+00, -1.39280367e+00, -1.60269880e+00,  ...,
            -1.25787115e+00, -1.03298354e+00, -4.33283329e-01],
           [-1.13793111e+00, -1.21289361e+00, -1.45277369e+00,  ...,
            -1.18290865e+00, -1.03298354e+00, -7.18140900e-01],
           ...,
           [ 1.84557760e+00,  9.76012170e-01,  1.24587750e+00,  ...,
             1.87556267e+00,  1.84557760e+00,  1.87556267e+00],
           [ 1.87556267e+00,  1.33583248e+00,  1.15592217e+00,  ...,
             1.83058512e+00,  1.69565260e+00,  1.69565260e+00],
           [ 1.96551764e+00,  1.69565260e+00,  1.68066013e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.84557760e+00]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0728 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 153, vnnlib ID: 153 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.04411221,  -6.56294537, -10.49686623, -10.71459293, -10.65121841,
         -10.91873455, -10.75874615, -10.58030510,  -7.05852127,  -5.32773304]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [560]; unstable size 560; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 560] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 560] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 560] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 159] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.93047810, 0.90146828, 4.35855293, 4.67746639, 4.44866705, 4.86577225,
         4.63573074, 4.36071730, 1.07372689]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0679 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 154, vnnlib ID: 154 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.33148384, -10.59604359,  -6.13104391,  -5.15102005,  -5.68771362,
          -5.06781912,  -6.22119141,  -6.70600891,  -8.64515400, -10.90875530]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [554]; unstable size 554; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 554] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 554] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 554] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 149] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.75479221, 4.87106228, 0.82534444, 0.06818698, 0.31933570, 0.85642600,
         1.17236507, 2.96178937, 5.26937962]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0490 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 155, vnnlib ID: 155 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.94084406, -4.36918736, -2.39931107, -2.66348886, -2.53788948,
         -2.76773334, -2.43246198, -3.65804195, -1.78550899, -3.21363306]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 225, 1, 458] with unstable size 224 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 458] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [224]; unstable size 224; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 224] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 224] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.23604941,  1.11150885, -0.46573162, -0.15052682, -0.32735431,
         -0.05409917,  0.68027079, -1.50479579, -0.02969646]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.94084406, -4.36918736, -2.39931107, -2.66348886, -2.53788948,
         -2.76773334, -2.43246198, -3.65804195, -1.78550899, -3.21363306]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.94084358, -4.36918688, -2.39931107, -2.66348863, -2.53788924,
          -2.76773310, -2.43246150, -3.65804195, -1.78550875, -3.21363282],
         [-2.94084358, -4.36918688, -2.39931107, -2.66348863, -2.53788924,
          -2.76773310, -2.43246150, -3.65804195, -1.78550875, -3.21363282]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.50838208, -0.03315043,  0.23102713,  0.10542774,  0.33527160,
          -0.64695275,  0.78117132]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         ...,


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]],


         [[[ 1.55079389,  1.82063520,  1.80476213,  ...,  0.63015878,
             0.53492069,  0.29682547],
           [ 1.47142887,  1.69365108,  1.67777801,  ...,  0.74126989,
             0.80476195,  0.48730165],
           [ 1.24920666,  1.40793681,  1.20158756,  ...,  0.63015878,
             0.51904768,  0.21746039],
           ...,
           [-1.13174593, -1.19523799, -1.48095226,  ...,  1.04285717,
             0.23333341, -0.08412688],
           [-1.30634916, -1.38571417, -1.54444432,  ...,  1.37619078,
             0.56666672,  0.18571436],
           [-0.97301590, -1.24285710, -1.49682534,  ...,  0.86825401,
             0.18571436, -0.09999990]],

          [[ 1.48148179,  1.61030626,  1.52979100,  ...,  0.41867965,
             0.17713377, -0.11272129],
           [ 1.52979100,  1.62640929,  1.61030626,  ...,  0.37037048,
             0.46698883,  0.25764906],
           [ 1.32045114,  1.38486338,  1.19162667,  ...,  0.40257660,
             0.32206130, -0.01610294],
           ...,
           [-1.03059578, -1.07890499, -1.35265696,  ...,  0.74074084,
             1.07890511,  0.99838978],
           [-1.12721407, -1.23993552, -1.43317223,  ...,  0.75684386,
             1.17552364,  1.15942061],
           [-0.82125598, -1.09500802, -1.38486302,  ...,  0.48309189,
             0.93397754,  0.83735919]],

          [[ 1.36581755,  1.57571256,  1.65067506,  ...,  0.78110963,
             0.55622208,  0.27136448],
           [ 1.66566753,  1.87556267,  1.89055514,  ...,  0.66116959,
             0.79610211,  0.63118458],
           [ 1.60569763,  1.80060017,  1.68066013,  ...,  0.76611710,
             0.69115460,  0.37631202],
           ...,
           [-0.62818587, -0.73313338, -1.06296861,  ...,  0.39130452,
             0.52623707,  0.51124454],
           [-0.56821585, -0.67316341, -0.98800600,  ...,  0.39130452,
             0.70614707,  0.70614707],
           [-0.25337315, -0.58320838, -0.94302845,  ...,  0.24137947,
             0.57121456,  0.48125952]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0644 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 156, vnnlib ID: 156 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-9.18817234, -8.52420235, -6.17824697, -5.90761089, -6.00881290,
         -5.93657160, -5.09397602, -7.20189238, -9.47287750, -8.95226574]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [492]; unstable size 492; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 492] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 492] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 492] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 177] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.78877163e+00,  1.95449376e+00,  8.94069672e-04, -4.40961272e-02,
         -1.61327600e-01, -1.15325058e+00,  1.05116034e+00,  3.01431751e+00,
          2.46340609e+00]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-9.18817234, -8.52420235, -6.17824697, -5.90761089, -6.00881290,
         -5.93657160, -5.09397602, -7.20189238, -9.47287750, -8.95226574]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-9.18817234, -8.52420330, -6.17824793, -5.90761185, -6.00881290,
          -5.93657255, -5.09397602, -7.20189381, -9.47287750, -8.95226765],
         [-9.18817234, -8.52420330, -6.17824793, -5.90761185, -6.00881290,
          -5.93657255, -5.09397602, -7.20189381, -9.47287750, -8.95226765]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02896070,  0.07224035, -0.84259653]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0694 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 157, vnnlib ID: 157 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.42523384, -13.67537022, -17.12404442, -17.76034546, -18.02211761,
         -18.14136124, -17.20537567, -17.92313957, -14.93622971, -12.06187916]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 118, 1, 403] with unstable size 117 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 403] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [117]; unstable size 117; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 117] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.82648778, 1.30361056, 4.42907524, 5.04763603, 5.31513500, 5.40978765,
         4.49749660, 5.15742779, 2.39878845]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0676 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 158, vnnlib ID: 158 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.89985514, -8.20181656, -7.95871973, -6.18419170, -7.78199673,
         -6.14752007, -7.65328979, -6.98220968, -6.28924084, -8.29117870]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 171, 1, 445] with unstable size 170 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 445] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [170]; unstable size 170; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 170] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.18119669,  1.26755655,  0.96031809, -0.95989799,  0.70831013,
         -1.01292515,  0.53413916, -0.22250211,  1.41924679]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.89985514, -8.20181656, -7.95871973, -6.18419170, -7.78199673,
         -6.14752007, -7.65328979, -6.98220968, -6.28924084, -8.29117870]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.89985371, -8.20181370, -7.95871830, -6.18419075, -7.78199673,
          -6.14751959, -7.65328884, -6.98220921, -6.28923941, -8.29117870],
         [-7.89985371, -8.20181370, -7.95871830, -6.18419075, -7.78199673,
          -6.14751959, -7.65328884, -6.98220921, -6.28923941, -8.29117870]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.10504866, -0.14171982,  0.69296980]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]],


         [[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]],


         [[[ 6.46031797e-01,  5.82539737e-01,  6.30158782e-01,  ...,
             9.15873051e-01,  8.84127021e-01,  8.68254006e-01],
           [ 8.52380991e-01,  8.36507976e-01,  8.04761946e-01,  ...,
             4.71428633e-01,  3.60317528e-01,  3.28571498e-01],
           [ 7.41269886e-01,  5.19047678e-01,  6.93650842e-01,  ...,
            -6.55555546e-01, -7.98412681e-01, -7.98412681e-01],
           ...,
           [ 1.48730183e+00,  1.36031771e+00,  1.21746063e+00,  ...,
            -1.25873005e+00, -1.24285710e+00, -1.25873005e+00],
           [ 1.12222254e+00,  1.07460344e+00,  9.63492095e-01,  ...,
            -1.27460313e+00, -1.25873005e+00, -1.29047608e+00],
           [ 6.30158782e-01,  5.66666722e-01,  5.19047678e-01,  ...,
            -1.40158725e+00, -1.40158725e+00, -1.41746020e+00]],

          [[ 2.41546005e-01,  1.61030710e-01,  2.09339887e-01,  ...,
             6.44122481e-01,  5.79710245e-01,  5.63607156e-01],
           [ 4.18679655e-01,  4.02576596e-01,  3.70370477e-01,  ...,
             2.09339887e-01,  3.22062373e-02,  1.22934580e-07],
           [ 2.57649064e-01,  1.61031820e-02,  2.09339887e-01,  ...,
            -1.07890499e+00, -1.27214170e+00, -1.27214170e+00],
           ...,
           [ 1.07890511e+00,  9.50080574e-01,  8.05153072e-01,  ...,
            -1.33655393e+00, -1.32045078e+00, -1.33655393e+00],
           [ 7.40740836e-01,  6.92431629e-01,  5.79710245e-01,  ...,
            -1.35265696e+00, -1.33655393e+00, -1.36875999e+00],
           [ 2.89855182e-01,  2.25442946e-01,  1.93236828e-01,  ...,
            -1.48148143e+00, -1.48148143e+00, -1.49758446e+00]],

          [[ 6.01199567e-01,  5.26237071e-01,  5.71214557e-01,  ...,
             9.01049674e-01,  7.96102107e-01,  7.66117096e-01],
           [ 7.36132085e-01,  7.21139610e-01,  6.91154599e-01,  ...,
             5.11244535e-01,  3.61319512e-01,  3.16341996e-01],
           [ 5.41229546e-01,  3.16341996e-01,  4.96252000e-01,  ...,
            -7.33133376e-01, -8.83058429e-01, -8.83058429e-01],
           ...,
           [ 1.41079497e+00,  1.29085493e+00,  1.15592217e+00,  ...,
            -9.28035975e-01, -9.13043439e-01, -9.28035975e-01],
           [ 1.08095968e+00,  1.03598225e+00,  9.31034684e-01,  ...,
            -9.43028450e-01, -9.28035975e-01, -9.58020985e-01],
           [ 6.46177113e-01,  5.86207092e-01,  5.41229546e-01,  ...,
            -1.06296861e+00, -1.06296861e+00, -1.07796109e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0629 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 159, vnnlib ID: 159 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
         -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [381]; unstable size 381; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 146, 1, 381] with unstable size 145 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 381] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 381] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [145]; unstable size 145; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 145] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 145] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.04605198,  1.32969499,  1.10167634,  0.96962857,  2.23392892,
          1.26165533,  3.33647394,  1.48339975,  1.25178480]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
         -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.51it/s]100%|██████████| 1/1 [00:00<00:00,  8.50it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.66336918, -16.24439430, -15.76870918, -15.69548130, -16.94470787,
          -16.00302887, -14.51145744, -18.16604233, -16.27715111, -16.16013527]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.15191174]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1204 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.085124969482422
alpha/beta optimization time: 1.2574903964996338
initial alpha-crown bounds: tensor([[-0.02563953,  1.36090040,  1.10909176,  0.97797716,  2.24304676,
          1.27068949,  3.34929585,  1.51245928,  1.28730297]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.02563953399658203
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6158 seconds.
lower bounds for all target labels: [-0.02563995122909546, 1.3608994483947754, 1.109090805053711, 0.97797691822052, 2.243046760559082, 1.2706894874572754, 3.3492960929870605, 1.5124585628509521, 1.2873010635375977]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [0]
start creating model mps for candidates: ['lay/16_0']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.4774329662323
Verifying property 0 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.3492958545684814.

Properties batch 1, size 1
Remaining timeout: 198.26481413841248
Verifying property 1 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.243046760559082.

Properties batch 2, size 1
Remaining timeout: 198.15268468856812
Verifying property 2 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.5124592781066895.

Properties batch 3, size 1
Remaining timeout: 198.04827666282654
Verifying property 3 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3609004020690918.

Properties batch 4, size 1
Remaining timeout: 197.94436860084534
Verifying property 4 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2873029708862305.

Properties batch 5, size 1
Remaining timeout: 197.8396565914154
Verifying property 5 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2706894874572754.

Properties batch 6, size 1
Remaining timeout: 197.73188376426697
Verifying property 6 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1090917587280273.

Properties batch 7, size 1
Remaining timeout: 197.6182599067688
Verifying property 7 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9779771566390991.

Properties batch 8, size 1
Remaining timeout: 197.50307655334473
Verifying property 8 with 1 instances.
##### Instance 159 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02563953]], device='cuda:0') need to verify.
Model prediction is: tensor([-14.52948380, -15.95086575, -15.35674667, -15.15391731, -16.55455399,
        -15.45511055, -13.96408749, -17.77251816, -16.15048790, -15.88832951],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02563953]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 381
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 144
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 531
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0005984306335449219
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-12, 27] 
split level 1: [/input-12, 33] 
split level 2: [/input-8, 988] 
split level 3: [/input-8, 989] 
split level 4: [/input-8, 987] 
split level 5: [/input-8, 997] 
split level 6: [/input-8, 738] 
split level 7: [/input-8, 731] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 4.8160552978515625e-05
Time: prepare 0.0032    bound 0.0058    transfer 0.0046    finalize 0.0022    func 0.0159    
Accumulated time: func 0.0159    prepare 0.0037    bound 0.0058    transfer 0.0046    finalize 0.0022    
all_split False
Length of domains: 0
Time: pickout 0.0006    decision 0.0258    set_bounds 0.0210    solve 0.0160    add 0.0001    
Accumulated time: pickout 0.0006    decision 0.0258    set_bounds 0.0210    solve 0.0160    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.06904268264770508

the mip building process is not terminated yet, kill it
Result: safe in 2.9590 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 160, vnnlib ID: 160 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.49879074, -9.55830097, -5.11135626, -6.59453297, -4.63026714,
         -6.67742062, -5.16739082, -6.71435833, -9.42285538, -9.37638187]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [669]; unstable size 669; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 669] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 669] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 669] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 192] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.34096289, 4.10190439, 0.30777788, 1.68400681, 1.76496494, 0.30022144,
         1.81714153, 4.01539230, 3.94053745]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0450 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 161, vnnlib ID: 161 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.87970066, -14.66562939,  -9.85256958,  -8.82474613, -10.40148449,
          -8.68280125,  -9.99558353, -10.62414360, -13.25842571, -14.81057453]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [425]; unstable size 425; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 169, 1, 425] with unstable size 168 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 425] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 425] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [168]; unstable size 168; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 168] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 168] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.58588171, 5.25564861, 0.84904134, 0.12145445, 1.39071870, 0.90202570,
         1.64734638, 3.90297675, 5.47198534]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0783 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 162, vnnlib ID: 162 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.87640285, -12.87582302,  -8.50058079, -10.47419071,  -8.70230770,
         -10.56670856,  -8.81984520, -11.36477280, -11.69618988, -13.20551491]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [477]; unstable size 477; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 477] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 477] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 477] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 161] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86706138,  3.64629698,  1.61399460, -0.01080489,  1.69744265,
          0.02841228,  2.42314363,  2.43144679,  3.97708631]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.87640285, -12.87582302,  -8.50058079, -10.47419071,  -8.70230770,
         -10.56670856,  -8.81984520, -11.36477280, -11.69618988, -13.20551491]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.49it/s]100%|██████████| 1/1 [00:00<00:00,  8.48it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.73246670, -12.68345451,  -8.39245701, -10.23877811,  -8.46293736,
          -10.33113194,  -8.62541771, -11.11933708, -11.50778389, -12.95249939]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07048035]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1207 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 12th iter
best_l after optimization: 16.79953956604004
alpha/beta optimization time: 0.16603302955627441
initial alpha-crown bounds: tensor([[8.82856965e-01, 3.66166115e+00, 1.62423432e+00, 3.00407410e-05,
         1.70782304e+00, 3.46809030e-02, 2.44014668e+00, 2.45263124e+00,
         3.99547553e+00]], device='cuda:0')
Number of class (without rhs): 0 ; Worst class: (+ rhs) 3.0040740966796875e-05
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
verified with init bound!
Result: safe-incomplete in 0.4407 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 163, vnnlib ID: 163 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.01543331,  -8.50793934,  -8.28173351,  -8.84521961,  -8.12535572,
          -8.88524437,  -8.74754906,  -8.41619205, -10.82264996,  -8.60353184]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [616]; unstable size 616; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 160, 1, 616] with unstable size 159 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 616] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 616] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [159]; unstable size 159; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 159] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-8.43452811e-02, -8.76670837e-01, -5.83441019e-01, -4.16055918e-02,
         -5.99727631e-01,  1.43575668e-03, -2.22274303e-01,  1.54696417e+00,
         -7.14367151e-01]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.01543331,  -8.50793934,  -8.28173351,  -8.84521961,  -8.12535572,
          -8.88524437,  -8.74754906,  -8.41619205, -10.82264996,  -8.60353184]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.01543331,  -8.50793839,  -8.28173351,  -8.84521961,  -8.12535477,
           -8.88524532,  -8.74754715,  -8.41619205, -10.82264996,  -8.60353088],
         [ -9.01543331,  -8.50793839,  -8.28173351,  -8.84521961,  -8.12535477,
           -8.88524532,  -8.74754715,  -8.41619205, -10.82264996,  -8.60353088]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.59924126,  0.09174633, -0.13445854,  0.42902756, -0.29083729,
           0.33135509,  0.18733883]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         ...,


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1107 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 164, vnnlib ID: 164 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.65704536, -8.06795883, -5.25074387, -4.81809998, -5.40738297,
         -4.78305626, -5.53884125, -6.33654642, -8.16578388, -7.93662977]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 177, 1, 599] with unstable size 176 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 599] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [176]; unstable size 176; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 176] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 176] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.34938407, 2.50165486, 0.22862637, 0.01722103, 0.35063815, 0.36827111,
         1.27956533, 2.61070561, 2.51747751]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0635 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 165, vnnlib ID: 165 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.43569374, -7.82689762, -6.75649071, -7.24614143, -7.06519032,
         -7.31342793, -8.26335907, -8.11638641, -7.34807396, -7.95840502]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [552]; unstable size 552; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 552] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 552] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 552] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 203] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.37668705, -1.05399323, -1.66841137, -1.10696745, -1.28876460,
         -1.03613186, -0.23888946, -1.47692060, -0.85666394]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.43569374, -7.82689762, -6.75649071, -7.24614143, -7.06519032,
         -7.31342793, -8.26335907, -8.11638641, -7.34807396, -7.95840502]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.43569374, -7.82689667, -6.75648975, -7.24613953, -7.06518936,
          -7.31342697, -8.26335716, -8.11638546, -7.34807396, -7.95840406],
         [-7.43569374, -7.82689667, -6.75648975, -7.24613953, -7.06518936,
          -7.31342697, -8.26335716, -8.11638546, -7.34807396, -7.95840406]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.68069172, -0.28948879, -1.35989571, -0.87024593, -1.05119610,
          -0.80295849,  0.14697170, -0.76831150, -0.15798140]]],
       device='cuda:0')
number of violation:  8
clean attack image tensor([[[[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         ...,


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0895 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 166, vnnlib ID: 166 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.11932993, -4.82532978, -2.47477031, -2.84284973, -2.40484571,
         -3.00597310, -1.59280419, -3.88199234, -4.35127544, -4.01034117]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [458]; unstable size 458; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 458] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 458] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 458] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 243] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.65978765, 2.30001354, 0.46589649, 0.87081158, 0.39240396, 1.02510440,
         1.69761920, 1.67752409, 1.51655388]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0901 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 167, vnnlib ID: 167 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
         -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [510]; unstable size 510; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 213, 1, 510] with unstable size 212 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 510] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 510] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [212]; unstable size 212; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 212] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 212] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.16538978,  0.02639830,  1.23263657,  1.06774712,  1.37462711,
          1.93852592,  2.49895358, -0.35096419,  2.43112779]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
         -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.35463643, -5.18449020, -1.74321675, -3.12308002, -2.89075232,
          -3.26917696, -3.89859080, -4.40411377, -1.31181729, -4.41958570]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04281914]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[1.90000021, 1.80476213, 1.74127007,  ..., 1.40793681,
            1.55079389, 1.55079389],
           [1.96349227, 1.85238123, 1.85238123,  ..., 1.09047651,
            1.39206374, 1.45555580],
           [1.88412726, 1.80476213, 1.80476213,  ..., 0.64603180,
            1.07460344, 1.18571460],
           ...,
           [1.64603198, 1.47142887, 1.34444475,  ..., 0.42380959,
            0.55079371, 0.64603180],
           [1.67777801, 1.53492093, 1.26507962,  ..., 0.47142863,
            0.59841275, 0.72539687],
           [1.59841299, 1.26507962, 0.88412702,  ..., 0.63015878,
            0.77301592, 0.86825401]],

          [[1.99677968, 1.85185218, 1.73913074,  ..., 1.20772982,
            1.23993587, 1.22383285],
           [2.04508877, 1.88405824, 1.81964600,  ..., 0.93397754,
            1.14331758, 1.17552364],
           [1.94847047, 1.83574903, 1.75523376,  ..., 0.51529801,
            0.88566834, 0.96618366],
           ...,
           [1.65861547, 1.41706955, 1.28824508,  ..., 0.28985518,
            0.30595824, 0.35426742],
           [1.67471850, 1.44927561, 1.25603890,  ..., 0.28985518,
            0.35426742, 0.43478271],
           [1.65861547, 1.30434811, 0.98228669,  ..., 0.38647354,
            0.48309189, 0.53140104]],

          [[2.02548766, 1.89055514, 1.81559265,  ..., 1.29085493,
            1.38081002, 1.42578757],
           [2.07046509, 1.93553269, 1.87556267,  ..., 1.12593722,
            1.35082495, 1.42578757],
           [1.98051023, 1.87556267, 1.80060017,  ..., 0.84107965,
            1.18590748, 1.27586246],
           ...,
           [1.60569763, 1.41079497, 1.35082495,  ..., 0.58620709,
            0.63118458, 0.67616212],
           [1.65067506, 1.48575759, 1.23088503,  ..., 0.57121456,
            0.63118458, 0.70614707],
           [1.68066013, 1.39580250, 0.94602716,  ..., 0.64617711,
            0.72113961, 0.76611710]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0867 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 168, vnnlib ID: 168 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.77010298, -9.56792831, -3.51737452, -7.98014259, -4.43413353,
         -8.13228130, -7.63488007, -7.35559034, -9.32965469, -9.84434509]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 93, 1, 608] with unstable size 92 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 608] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [92]; unstable size 92; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 92] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 92] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.91945148, 5.40677595, 4.21947575, 0.74099821, 4.36890173, 3.83588839,
         3.49529529, 5.35575104, 5.79974079]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0725 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 169, vnnlib ID: 169 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
          -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [442]; unstable size 442; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 152, 1, 442] with unstable size 151 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 442] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 442] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [151]; unstable size 151; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 151] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.31049466,  1.82715464, -0.04293865,  1.07361531,  1.18260849,
          0.86679053,  0.03638697,  1.20158589,  1.79956198]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
          -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6183 seconds.
lower bounds for all target labels: [0.8828569650650024, 3.661661148071289, 1.6242343187332153, 3.0040740966796875e-05, 1.7078230381011963, 0.03468090295791626, 2.4401466846466064, 2.4526312351226807, 3.9954755306243896]
Number of cpus: 96  Number of subproblems: 0
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: []
start creating model mps for candidates: []
100%|██████████| 1/1 [00:00<00:00,  8.43it/s]100%|██████████| 1/1 [00:00<00:00,  8.42it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.67833710, -10.47902393,  -8.10711384,  -9.37081242,  -8.07628441,
           -9.48413372,  -9.13742447,  -8.56529427,  -9.67664242, -10.46873760]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.03082943]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1218 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 8.407693862915039
alpha/beta optimization time: 1.2795970439910889
initial alpha-crown bounds: tensor([[ 0.32534027,  1.84551048, -0.02267286,  1.09125686,  1.19872820,
          0.89233637,  0.04136038,  1.21694827,  1.81888604]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0226728618144989
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6738 seconds.
lower bounds for all target labels: [0.32533979415893555, 1.8455088138580322, -0.022672265768051147, 1.0912566184997559, 1.1987296342849731, 0.892336368560791, 0.04136013984680176, 1.216949462890625, 1.8188838958740234]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [2]
start creating model mps for candidates: ['lay/16_2']
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.43701553344727
Verifying property 0 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.845510482788086.

Properties batch 1, size 1
Remaining timeout: 198.1915898323059
Verifying property 1 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.8188860416412354.

Properties batch 2, size 1
Remaining timeout: 198.03570461273193
Verifying property 2 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2169482707977295.

Properties batch 3, size 1
Remaining timeout: 197.9188838005066
Verifying property 3 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1987282037734985.

Properties batch 4, size 1
Remaining timeout: 197.79913473129272
Verifying property 4 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.091256856918335.

Properties batch 5, size 1
Remaining timeout: 197.67089796066284
Verifying property 5 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.892336368560791.

Properties batch 6, size 1
Remaining timeout: 197.5160937309265
Verifying property 6 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.32534027099609375.

Properties batch 7, size 1
Remaining timeout: 197.33031249046326
Verifying property 7 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.04136037826538086.

Properties batch 8, size 1
Remaining timeout: 197.18067598342896
Verifying property 8 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02267286]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.65607166, -10.35036945,  -8.06762981,  -9.21998215,  -7.83191204,
         -9.32909298,  -9.04870224,  -8.23802948,  -9.66316414, -10.29120541],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02267286]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 442
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 149
Node /15 input 0: size torch.Size([100]) unstable 2
-----------------
# of unstable neurons: 593
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007727146148681641
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-12, 57] 
split level 1: [/input-8, 1835] 
split level 2: [/input-8, 1877] 
split level 3: [/input-8, 1898] 
split level 4: [/input-8, 1843] 
split level 5: [/input-8, 1842] 
split level 6: [/input, 2455] 
split level 7: [/input-8, 1148] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 4.863739013671875e-05
Time: prepare 0.0048    bound 0.0050    transfer 0.0038    finalize 0.0030    func 0.0167    
Accumulated time: func 0.0167    prepare 0.0053    bound 0.0050    transfer 0.0038    finalize 0.0030    
all_split False
Length of domains: 0
Time: pickout 0.0008    decision 0.0278    set_bounds 0.0262    solve 0.0168    add 0.0001    
Accumulated time: pickout 0.0008    decision 0.0278    set_bounds 0.0262    solve 0.0168    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.07840442657470703

the mip building process is not terminated yet, kill it
Result: safe in 3.2859 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 170, vnnlib ID: 170 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
          -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [631]; unstable size 631; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 139, 1, 631] with unstable size 138 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 631] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 631] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 138] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.05669761,  7.12348557, -0.81237477,  2.57512474,  2.65363836,
          2.42923689,  1.37826777,  5.74696732,  6.64974642]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
          -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.08461761, -10.51277637,  -1.99679935,  -5.48344898,  -2.58635473,
           -5.56198025,  -5.39356422,  -4.27136040,  -8.85855103,  -9.92981434]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.58955538]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.84603173, -0.94126981, -0.86190474,  ..., -0.33809513,
            -0.48095238, -0.51269841],
           [-0.25873005, -0.30634910, -0.27460307,  ..., -0.29047608,
            -0.33809513, -0.43333322],
           [ 0.42380959,  0.36031753,  0.39206356,  ..., -0.08412688,
            -0.14761895, -0.32222211],
           ...,
           [ 0.47142863,  0.48730165,  0.55079371,  ...,  0.05873025,
             0.01111121,  0.12222230],
           [ 0.12222230,  0.10634929,  0.23333341,  ..., -0.02063482,
            -0.02063482,  0.16984135],
           [-0.19523799, -0.41746020, -0.29047608,  ...,  0.16984135,
             0.31269848,  0.58253974]],

          [[-0.67632848, -0.78904986, -0.72463763,  ..., -0.03220600,
            -0.17713353, -0.20933965],
           [ 0.04830930, -0.01610294,  0.01610318,  ...,  0.03220624,
            -0.01610294, -0.11272129],
           [ 0.88566834,  0.82125610,  0.85346222,  ...,  0.24154601,
             0.19323683, -0.01610294],
           ...,
           [ 0.95008057,  0.98228669,  1.03059590,  ...,  0.62801939,
             0.56360716,  0.61191636],
           [ 0.70853472,  0.72463775,  0.85346222,  ...,  0.66022551,
             0.62801939,  0.77294695],
           [ 0.46698883,  0.22544295,  0.40257660,  ...,  0.77294695,
             0.85346222,  1.14331758]],

          [[-0.01349309, -0.07346311,  0.03148442,  ...,  0.76611710,
             0.66116959,  0.64617711],
           [-0.02848560, -0.04347810,  0.00149941,  ...,  0.78110963,
             0.78110963,  0.78110963],
           [-0.14842562, -0.19340314, -0.14842562,  ...,  0.81109464,
             0.81109464,  0.76611710],
           ...,
           [-0.53823084, -0.56821585, -0.50824583,  ..., -0.68815589,
            -0.65817088, -0.49325335],
           [-0.58320838, -0.73313338, -0.61319339,  ..., -0.83808094,
            -0.83808094, -0.65817088],
           [-0.80809593, -1.04797614, -0.85307342,  ..., -0.74812591,
            -0.67316341, -0.43328333]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0732 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 171, vnnlib ID: 171 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.63988018, -11.70766258, -10.72140884, -10.78502178, -10.30626678,
         -10.96242046,  -9.89720917, -10.94630241, -13.04552364, -11.00957012]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [493]; unstable size 493; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 493] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 493] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 493] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 177] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.11123228, 1.11106300, 0.48803008, 0.63042784, 0.00368500, 0.79707956,
         0.55721855, 2.39154410, 0.42870808]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0356 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 172, vnnlib ID: 172 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.49745131, -8.20798206, -6.12458706, -8.36979198, -6.27434921,
         -8.58381653, -8.11138153, -7.94669247, -4.75123119, -7.89815950]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 561] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 561] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 147] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.08015418,  1.10043240,  3.16933227,  1.15053535,  3.37255001,
          2.91000962,  2.77714443, -0.19217908,  2.78871417]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.49745131, -8.20798206, -6.12458706, -8.36979198, -6.27434921,
         -8.58381653, -8.11138153, -7.94669247, -4.75123119, -7.89815950]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.70938110, -8.28709698, -6.37382412, -8.52355671, -6.53355598,
          -8.73983860, -8.32157516, -8.20209694, -4.68664932, -7.95726824]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02273178]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0074 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0644 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 173, vnnlib ID: 173 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.48213387, -8.01494122, -6.49922419, -6.44987583, -6.58213425,
         -6.60465574, -5.89261341, -7.75944138, -8.76826668, -7.64277458]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [608]; unstable size 608; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 608] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 608] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 608] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 216] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.16914690,  0.51496053, -0.35071123, -0.32186127,  0.12535101,
         -1.02238882,  0.66660738,  1.28926682,  0.21741581]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.48213387, -8.01494122, -6.49922419, -6.44987583, -6.58213425,
         -6.60465574, -5.89261341, -7.75944138, -8.76826668, -7.64277458]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.48213339, -8.01494217, -6.49922466, -6.44987679, -6.58213520,
          -6.60465670, -5.89261341, -7.75944233, -8.76826763, -7.64277506],
         [-7.48213339, -8.01494217, -6.49922466, -6.44987679, -6.58213520,
          -6.60465670, -5.89261341, -7.75944233, -8.76826763, -7.64277506]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.04934788,  0.13225842, -0.55726337]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0812 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 174, vnnlib ID: 174 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
         -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [588]; unstable size 588; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 199, 1, 588] with unstable size 198 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 588] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 588] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [198]; unstable size 198; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 198] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 198] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.61178482,  4.32749891, -0.36567217,  0.41240406,  0.48770022,
          0.50044870,  0.68070054,  2.37939548,  3.58202219]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
         -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.71844196, -6.83214664, -1.22474170, -2.20203090, -1.30234599,
          -2.27594328, -2.31035209, -2.35291529, -4.83945274, -6.00620031]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07760429]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.32222211, -0.29047608, -0.17936498,  ...,  0.67777783,
             0.83650798,  1.15396857],
           [-0.33809513, -0.08412688,  0.16984135,  ...,  0.70952386,
             0.94761908,  1.29682565],
           [-0.13174593,  0.16984135,  0.39206356,  ...,  0.70952386,
             0.94761908,  1.45555580],
           ...,
           [-0.06825387, -0.08412688, -0.08412688,  ..., -0.14761895,
            -0.09999990, -0.02063482],
           [-0.05238085, -0.09999990, -0.06825387,  ..., -0.13174593,
            -0.02063482,  0.10634929],
           [-0.13174593, -0.17936498, -0.09999990,  ...,  0.07460327,
             0.16984135,  0.23333341]],

          [[-0.45088565, -0.43478248, -0.38647330,  ...,  0.48309189,
             0.62801939,  0.93397754],
           [-0.48309177, -0.25764883, -0.06441211,  ...,  0.49919492,
             0.70853472,  1.01449287],
           [-0.28985494, -0.03220600,  0.16103071,  ...,  0.48309189,
             0.67632860,  1.12721443],
           ...,
           [-0.22544271, -0.24154577, -0.24154577,  ..., -0.30595800,
            -0.27375188, -0.17713353],
           [-0.20933965, -0.24154577, -0.22544271,  ..., -0.32206106,
            -0.19323659, -0.03220600],
           [-0.28985494, -0.33816412, -0.25764883,  ..., -0.12882435,
            -0.03220600,  0.08051541]],

          [[-0.55322337, -0.52323836, -0.46326834,  ...,  0.25637197,
             0.45127454,  0.79610211],
           [-0.59820086, -0.37331331, -0.17841063,  ...,  0.19640197,
             0.43628204,  0.76611710],
           [-0.43328333, -0.17841063,  0.00149941,  ...,  0.13643195,
             0.34632701,  0.79610211],
           ...,
           [-0.29835078, -0.31334329, -0.31334329,  ..., -0.32833579,
            -0.29835078, -0.20839565],
           [-0.26836565, -0.31334329, -0.28335828,  ..., -0.32833579,
            -0.22338814, -0.08845562],
           [-0.32833579, -0.35832080, -0.29835078,  ..., -0.14842562,
            -0.05847061,  0.04647692]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0751 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 175, vnnlib ID: 175 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.66825104, -7.97197151, -6.85186052, -7.69482708, -6.41166210,
         -7.79411554, -7.01330566, -7.14677095, -7.18919182, -7.63720417]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [604]; unstable size 604; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 604] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 604] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 604] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 186] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.53241467, 0.56145525, 1.23012352, 0.07895291, 1.31490326, 0.48338461,
         0.64640123, 1.02218056, 1.28158712]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0716 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 176, vnnlib ID: 176 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.87314558, -8.19042587, -4.13985491, -4.64103413, -4.94530869,
         -4.76780462, -4.91272449, -6.20926189, -6.63870811, -7.66739511]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [597]; unstable size 597; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 597] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 597] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 597] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 153] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.23613951,  2.79050159, -0.77878714, -0.04329729,  0.11112864,
          0.04540646,  1.03803027,  1.36925054,  2.36230230]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.87314558, -8.19042587, -4.13985491, -4.64103413, -4.94530869,
         -4.76780462, -4.91272449, -6.20926189, -6.63870811, -7.66739511]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.87314510, -8.19042587, -4.13985491, -4.64103413, -4.94530916,
          -4.76780462, -4.91272354, -6.20926237, -6.63870811, -7.66739511],
         [-4.87314510, -8.19042587, -4.13985491, -4.64103413, -4.94530916,
          -4.76780462, -4.91272354, -6.20926237, -6.63870811, -7.66739511]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.23211098, -0.50117922,  0.30427504]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0780 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 177, vnnlib ID: 177 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.53732777, -16.52824783, -10.35078621, -13.07399178, -13.29616356,
         -13.26419640, -14.66434383, -13.61211491, -15.27535629, -16.57476234]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [276]; unstable size 276; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 76, 1, 276] with unstable size 75 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 276] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 276] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [75]; unstable size 75; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 75] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 75] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.01606524, 5.64310694, 2.54551029, 2.74233055, 2.73602724, 4.06365871,
         3.03769207, 4.63138247, 5.85097408]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0337 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 178, vnnlib ID: 178 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
         -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [453]; unstable size 453; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 141, 1, 453] with unstable size 140 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 453] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 453] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [140]; unstable size 140; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 140] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 5.29551125, -0.05402613,  1.48138261,  0.06260347,  1.59185386,
          1.62150764,  0.04656303,  4.47954416,  4.37859154]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
         -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.54it/s]100%|██████████| 1/1 [00:00<00:00,  8.53it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -4.25827217, -10.05697727,  -4.28648949,  -5.97811222,  -4.47851419,
           -6.09019661,  -6.11976624,  -4.58179903,  -9.12149048,  -9.06482506]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02821732]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1198 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.004985809326172
alpha/beta optimization time: 1.2633931636810303
initial alpha-crown bounds: tensor([[ 5.31581020, -0.04664254,  1.49123073,  0.07164574,  1.60214102,
          1.62857962,  0.05959082,  4.48958206,  4.39304781]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.04664254188537598
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6217 seconds.
lower bounds for all target labels: [5.315810203552246, -0.04664325714111328, 1.4912292957305908, 0.07164502143859863, 1.6021392345428467, 1.6285796165466309, 0.059590816497802734, 4.48958158493042, 4.39304780960083]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [1]
start creating model mps for candidates: ['lay/16_1']
parallel save mip model to /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=178_spec=1_30490271.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=178_spec=1_30490271.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 271495 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.4683554172516
Verifying property 0 with 1 instances.
##### Instance 178 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.315810203552246.

Properties batch 1, size 1
Remaining timeout: 198.24172568321228
Verifying property 1 with 1 instances.
##### Instance 178 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.489582061767578.

Properties batch 2, size 1
Remaining timeout: 198.1300184726715
Verifying property 2 with 1 instances.
##### Instance 178 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.39304780960083.

Properties batch 3, size 1
Remaining timeout: 198.02558374404907
Verifying property 3 with 1 instances.
##### Instance 178 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6285796165466309.

Properties batch 4, size 1
Remaining timeout: 197.92276787757874
Verifying property 4 with 1 instances.
##### Instance 178 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.60214102268219.

Properties batch 5, size 1
Remaining timeout: 197.81779980659485
Verifying property 5 with 1 instances.
##### Instance 178 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4912307262420654.

Properties batch 6, size 1
Remaining timeout: 197.71146368980408
Verifying property 6 with 1 instances.
##### Instance 178 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.07164573669433594.

Properties batch 7, size 1
Remaining timeout: 197.58727765083313
Verifying property 7 with 1 instances.
##### Instance 178 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.059590816497802734.

Properties batch 8, size 1
Remaining timeout: 197.47235751152039
Verifying property 8 with 1 instances.
##### Instance 178 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04664254]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.18358374, -9.98720455, -4.51179361, -6.18973541, -4.68899345,
        -6.30690002, -6.33994198, -4.82446098, -9.05756760, -9.00955582],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04664254]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 453
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 138
Node /15 input 0: size torch.Size([100]) unstable 3
-----------------
# of unstable neurons: 594
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0005891323089599609
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-8, 653] 
split level 1: [/input-8, 1102] 
split level 2: [/input-8, 61] 
split level 3: [/input-8, 956] 
split level 4: [/input-8, 1525] 
split level 5: [/input-8, 1139] 
split level 6: [/input-8, 1116] 
split level 7: [/input-8, 213] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 7.295608520507812e-05
Time: prepare 0.0019    bound 0.1003    transfer 0.0045    finalize 0.0021    func 0.1088    
Accumulated time: func 0.1088    prepare 0.0023    bound 0.1003    transfer 0.0045    finalize 0.0021    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03427 (8), -0.03425 (8), -0.03396 (8), -0.03393 (8), -0.03390 (8), -0.03388 (8), -0.03359 (8), -0.03356 (8), -0.03347 (8), -0.03345 (8), -0.03317 (8), -0.03312 (8), -0.03311 (8), -0.03309 (8), -0.03281 (8), -0.03277 (8), -0.03246 (8), -0.03244 (8), -0.03216 (8), -0.03214 (8), 
Length of domains: 256
Time: pickout 0.0005    decision 0.0254    set_bounds 0.0190    solve 0.1089    add 0.0585    
Accumulated time: pickout 0.0005    decision 0.0254    set_bounds 0.0190    solve 0.1089    add 0.0585    
Current (lb-rhs): -0.03426957130432129
256 domains visited
Cumulative time: 0.21715998649597168

BaB round 2
Fetch cut process: mps for current label is not ready yet
batch: 256
splitting decisions: 
split level 0: [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] [/input-8, 226] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 8.0108642578125e-05
Time: prepare 0.0076    bound 0.1000    transfer 0.0140    finalize 0.0045    func 0.1262    
Accumulated time: func 0.2351    prepare 0.0102    bound 0.2003    transfer 0.0185    finalize 0.0065    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03300 (9), -0.03298 (9), -0.03268 (9), -0.03266 (9), -0.03262 (9), -0.03260 (9), -0.03231 (9), -0.03229 (9), -0.03219 (9), -0.03217 (9), -0.03189 (9), -0.03185 (9), -0.03183 (9), -0.03181 (9), -0.03152 (9), -0.03149 (9), -0.03118 (9), -0.03116 (9), -0.03086 (9), -0.03085 (9), 
Length of domains: 512
Time: pickout 0.0061    decision 0.0275    set_bounds 0.0144    solve 0.1264    add 0.0875    
Accumulated time: pickout 0.0066    decision 0.0530    set_bounds 0.0334    solve 0.2353    add 0.1460    
Current (lb-rhs): -0.03299713134765625
768 domains visited
Cumulative time: 0.48405027389526367

BaB round 3
Fetch cut process: mps for current label is not ready yet
batch: 512
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 9] [/input-8, 9] [/input-8, 9] [/input-8, 9] [/input-8, 1099] [/input-8, 1099] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1024 = 0.0
pruning-in-iteration extra time: 5.316734313964844e-05
Time: prepare 0.0145    bound 0.1022    transfer 0.0141    finalize 0.0084    func 0.1393    
Accumulated time: func 0.3744    prepare 0.0249    bound 0.3025    transfer 0.0326    finalize 0.0149    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03246 (10), -0.03244 (10), -0.03215 (10), -0.03212 (10), -0.03208 (10), -0.03206 (10), -0.03177 (10), -0.03174 (10), -0.03166 (10), -0.03164 (10), -0.03136 (10), -0.03131 (10), -0.03129 (10), -0.03128 (10), -0.03099 (10), -0.03095 (10), -0.03011 (10), -0.03009 (10), -0.02989 (10), -0.02986 (10), 
Length of domains: 1024
Time: pickout 0.0187    decision 0.0387    set_bounds 0.0256    solve 0.1396    add 0.1034    
Accumulated time: pickout 0.0254    decision 0.0916    set_bounds 0.0590    solve 0.3749    add 0.2494    
Current (lb-rhs): -0.03245997428894043
1792 domains visited
Cumulative time: 0.8185739517211914

BaB round 4
Fetch cut process: mps for current label is not ready yet
batch: 1024
splitting decisions: 
split level 0: [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1099] [/input-8, 1325] [/input-8, 1325] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 5.221366882324219e-05
Time: prepare 0.0305    bound 0.1225    transfer 0.0435    finalize 0.0200    func 0.2177    
Accumulated time: func 0.5921    prepare 0.0556    bound 0.4250    transfer 0.0761    finalize 0.0348    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03156 (11), -0.03154 (11), -0.03139 (11), -0.03137 (11), -0.03125 (11), -0.03122 (11), -0.03108 (11), -0.03105 (11), -0.03081 (11), -0.03079 (11), -0.03059 (11), -0.03057 (11), -0.03051 (11), -0.03047 (11), -0.03030 (11), -0.03024 (11), -0.03012 (11), -0.03011 (11), -0.02984 (11), -0.02979 (11), 
Length of domains: 2048
Time: pickout 0.0109    decision 0.0687    set_bounds 0.0551    solve 0.2182    add 0.1130    
Accumulated time: pickout 0.0363    decision 0.1603    set_bounds 0.1141    solve 0.5931    add 0.3624    
Current (lb-rhs): -0.03156018257141113
3840 domains visited
Cumulative time: 1.2932541370391846

BaB round 5
Fetch cut process: mps for current label is not ready yet
batch: 2048
splitting decisions: 
split level 0: [/input, 547] [/input, 547] [/input, 547] [/input, 547] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input, 547] [/input, 547] 
pruning_in_iteration open status: False
ratio of positive domain = 21 / 4096 = 0.005126953125
pruning-in-iteration extra time: 6.008148193359375e-05
Time: prepare 0.0731    bound 0.2053    transfer 0.1643    finalize 0.0574    func 0.5012    
Accumulated time: func 1.0933    prepare 0.1289    bound 0.6303    transfer 0.2404    finalize 0.0922    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03141 (12), -0.03139 (12), -0.03109 (12), -0.03107 (12), -0.03086 (12), -0.03084 (12), -0.03066 (12), -0.03064 (12), -0.03055 (12), -0.03053 (12), -0.03035 (12), -0.03032 (12), -0.03010 (12), -0.03008 (12), -0.02979 (12), -0.02976 (12), -0.02960 (12), -0.02958 (12), -0.02928 (12), -0.02926 (12), 
Length of domains: 4072
Time: pickout 0.0190    decision 0.3221    set_bounds 0.1030    solve 0.5020    add 0.2964    
Accumulated time: pickout 0.0553    decision 0.4823    set_bounds 0.2171    solve 1.0951    add 0.6588    
Current (lb-rhs): -0.03140616416931152
7912 domains visited
Cumulative time: 2.5501911640167236

BaB round 6
Fetch cut process: mps for current label is not ready yet
batch: 4072
splitting decisions: 
split level 0: [/input-8, 9] [/input-8, 9] [/input-8, 9] [/input-8, 9] [/input, 547] [/input, 547] [/input, 547] [/input, 547] [/input-8, 9] [/input-8, 9] 
pruning_in_iteration open status: False
ratio of positive domain = 254 / 8144 = 0.03118860510805499
pruning-in-iteration extra time: 7.867813110351562e-05
Time: prepare 0.1790    bound 0.3691    transfer 0.0508    finalize 0.2267    func 0.8270    
Accumulated time: func 1.9202    prepare 0.3082    bound 0.9994    transfer 0.2912    finalize 0.3189    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03069 (13), -0.03067 (13), -0.03038 (13), -0.03036 (13), -0.03032 (13), -0.03030 (13), -0.03001 (13), -0.02998 (13), -0.02993 (13), -0.02991 (13), -0.02962 (13), -0.02959 (13), -0.02958 (13), -0.02955 (13), -0.02953 (13), -0.02951 (13), -0.02928 (13), -0.02924 (13), -0.02923 (13), -0.02918 (13), 
Length of domains: 7862
Time: pickout 0.0877    decision 0.4032    set_bounds 0.1436    solve 0.8284    add 0.1644    
Accumulated time: pickout 0.1430    decision 0.8856    set_bounds 0.3607    solve 1.9235    add 0.8232    
Current (lb-rhs): -0.030694007873535156
15774 domains visited
Cumulative time: 4.201015949249268

BaB round 7
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=178_spec=1_30490271.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0026
batch: 4096
splitting decisions: 
split level 0: [/input-8, 1] [/input-8, 1] [/input-8, 1] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] 
pruning_in_iteration open status: False
ratio of positive domain = 688 / 8192 = 0.083984375
pruning-in-iteration extra time: 6.604194641113281e-05
Time: prepare 0.1821    bound 0.3656    transfer 0.0493    finalize 0.0445    func 0.6430    
Accumulated time: func 2.5632    prepare 0.4906    bound 1.3651    transfer 0.3405    finalize 0.3633    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03069 (13), -0.03067 (13), -0.03038 (13), -0.03036 (13), -0.03032 (13), -0.03030 (13), -0.03001 (13), -0.02998 (13), -0.02993 (13), -0.02991 (13), -0.02962 (13), -0.02959 (13), -0.02958 (13), -0.02955 (13), -0.02953 (13), -0.02951 (13), -0.02928 (13), -0.02924 (13), -0.02923 (13), -0.02918 (13), 
Length of domains: 11230
Time: pickout 0.0643    decision 0.2554    set_bounds 0.3457    solve 0.6442    add 0.2251    
Accumulated time: pickout 0.2073    decision 1.1409    set_bounds 0.7064    solve 2.5677    add 1.0483    
Current (lb-rhs): -0.030694007873535156
23238 domains visited
current_vram/total_varm: 12.1GB/99.9GB, batch_size increase to 8192
Cumulative time: 5.752217769622803

BaB round 8
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=178_spec=1_30490271.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
batch: 8192
splitting decisions: 
split level 0: [/input-8, 698] [/input-8, 698] [/input-8, 1] [/input-8, 1] [/input-8, 1] [/input-8, 1] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] 
pruning_in_iteration open status: False
ratio of positive domain = 1480 / 16384 = 0.09033203125
pruning-in-iteration extra time: 5.984306335449219e-05
Time: prepare 0.3686    bound 0.6728    transfer 0.0928    finalize 0.1038    func 1.2388    
Accumulated time: func 3.8021    prepare 0.8595    bound 2.0378    transfer 0.4333    finalize 0.4671    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03069 (13), -0.03067 (13), -0.03038 (13), -0.03036 (13), -0.03032 (13), -0.03030 (13), -0.03001 (13), -0.02998 (13), -0.02993 (13), -0.02991 (13), -0.02962 (13), -0.02959 (13), -0.02958 (13), -0.02955 (13), -0.02953 (13), -0.02951 (13), -0.02928 (13), -0.02924 (13), -0.02923 (13), -0.02918 (13), 
Length of domains: 17882
Time: pickout 0.1200    decision 0.7072    set_bounds 0.6195    solve 1.2416    add 0.2300    
Accumulated time: pickout 0.3273    decision 1.8482    set_bounds 1.3259    solve 3.8093    add 1.2783    
Current (lb-rhs): -0.030694007873535156
38082 domains visited
current_vram/total_varm: 17.8GB/99.9GB, batch_size increase to 16384
Cumulative time: 8.704569101333618

BaB round 9
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=178_spec=1_30490271.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=178_spec=1_30490271.cuts: total 511 constraints, 28884 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.2404
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 1] [/input-8, 1] [/input-8, 1] [/input-8, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028452634811401367
10 lb beta sum: 49.30228805541992, worst -0.008424699306488037
pruning_in_iteration open status: True
ratio of positive domain = 32725 / 32768 = 0.998687744140625
pruning-in-iteration extra time: 0.0050580501556396484
Time: prepare 0.7026    bound 3.6192    transfer 0.2307    finalize 0.2107    func 4.9760    
Accumulated time: func 8.7781    prepare 1.5626    bound 5.6570    transfer 0.6640    finalize 0.6778    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.03069 (13), -0.03067 (13), -0.03038 (13), -0.03036 (13), -0.03032 (13), -0.03030 (13), -0.03001 (13), -0.02998 (13), -0.02993 (13), -0.02991 (13), -0.02962 (13), -0.02959 (13), -0.02958 (13), -0.02955 (13), -0.02951 (13), -0.02928 (13), -0.02924 (13), -0.02923 (13), -0.02918 (13), -0.02876 (13), 
Length of domains: 1541
Time: pickout 0.2157    decision 1.6555    set_bounds 1.2329    solve 4.9821    add 0.0728    
Accumulated time: pickout 0.5429    decision 3.5036    set_bounds 2.5588    solve 8.7914    add 1.3511    
Current (lb-rhs): -0.030694007873535156
38125 domains visited
Cumulative time: 17.276097774505615

BaB round 10
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=178_spec=1_30490271.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=178_spec=1_30490271.cuts: total 817 constraints, 40727 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.4977
batch: 1541
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1] [/input-8, 1] [/input-8, 1] [/input-8, 1] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] [/input-8, 698] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02959918975830078
10 lb beta sum: 4.239779472351074, worst -0.022418320178985596
pruning_in_iteration open status: True
ratio of positive domain = 3079 / 3082 = 0.9990266060999351
pruning-in-iteration extra time: 0.00257110595703125
Time: prepare 0.0666    bound 0.6965    transfer 0.0497    finalize 0.0230    func 0.8565    
Accumulated time: func 9.6345    prepare 1.6294    bound 6.3535    transfer 0.7137    finalize 0.7008    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00090 (14), -0.00028 (14), -0.00009 (14), 
Length of domains: 3
Time: pickout 0.0347    decision 0.1048    set_bounds 0.0648    solve 0.8572    add 0.0217    
Accumulated time: pickout 0.5776    decision 3.6084    set_bounds 2.6236    solve 9.6486    add 1.3728    
Current (lb-rhs): -0.000897526741027832
38128 domains visited
Cumulative time: 18.878318071365356

BaB round 11
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=178_spec=1_30490271.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=178_spec=1_30490271.cuts: total 877 constraints, 41843 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.3469
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1] [/input-8, 1] [/input-8, 1] 
split level 1: [/input-8, 54] [/input-8, 54] [/input-8, 54] 
split level 2: [/input-8, 1670] [/input-8, 1670] [/input-8, 1670] 
split level 3: [/input-8, 62] [/input-8, 62] [/input-8, 62] 
split level 4: [/input-8, 1829] [/input-8, 1829] [/input-8, 1829] 
split level 5: [/input, 3815] [/input, 3815] [/input, 3815] 
split level 6: [/input-8, 838] [/input-8, 838] [/input-8, 838] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023800373077392578
10 lb beta sum: 13.885388374328613, worst -0.0017188787460327148

all verified at 14th iter
pruning_in_iteration open status: True
ratio of positive domain = 384 / 384 = 1.0
pruning-in-iteration extra time: 0.0019669532775878906
Time: prepare 0.0075    bound 0.2022    transfer 0.0052    finalize 0.0027    func 0.2203    
Accumulated time: func 9.8548    prepare 1.6374    bound 6.5556    transfer 0.7189    finalize 0.7035    
all_split False
Length of domains: 0
Time: pickout 0.0009    decision 0.0210    set_bounds 0.0263    solve 0.2204    add 0.0001    
Accumulated time: pickout 0.5785    decision 3.6294    set_bounds 2.6499    solve 9.8690    add 1.3729    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
38128 domains visited
Cumulative time: 19.496508359909058

found process to kill: terminal indx = 1
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=178_spec=1_30490271.mps
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=178_spec=1_30490271.cuts
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=178_spec=1_30490271.indx
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=178_spec=1_30490271.log
found process for pidx=1
kill process for pidx=1
Result: safe in 22.4324 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 179, vnnlib ID: 179 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.81497240, -9.61914158, -4.37678957, -7.16895294, -6.05048847,
         -7.32035542, -8.58375645, -7.87642765, -5.33914280, -9.25911236]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [423]; unstable size 423; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 423] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 423] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 423] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 139] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.06378555, 1.32269323, 4.03046036, 2.94304752, 4.17913628, 5.32646513,
         4.62639809, 2.15443444, 5.73307467]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0682 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 180, vnnlib ID: 180 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.18043327, -9.67250061, -4.03554153, -4.66885376, -3.01946378,
         -4.69520569, -4.94520855, -1.53955245, -9.21621990, -7.85623407]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 585] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 585] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 188] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.87333965, 7.17064428, 1.94768214, 2.44880009, 1.09218788, 2.47986364,
         2.62327337, 6.51520348, 5.40360308]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0284 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 181, vnnlib ID: 181 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
         -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [497]; unstable size 497; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 497] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 497] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 497] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 148] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.14809823,  2.07557440,  0.01328355,  1.37565887, -0.08653331,
          1.50969958,  1.94958806,  1.83056521,  2.30023432]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
         -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.43it/s]100%|██████████| 1/1 [00:00<00:00,  7.42it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.12310123, -6.43147659, -3.69320679, -5.09748745, -3.54227424,
          -5.23913240, -3.53681922, -5.74136019, -5.95448112, -6.58602953]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00545502]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1381 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.484099388122559
alpha/beta optimization time: 1.4220044612884521
initial alpha-crown bounds: tensor([[ 2.17381597,  2.11342907,  0.04474878,  1.40611720, -0.02632570,
          1.54144180,  2.00770783,  1.88426328,  2.33890128]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.026325702667236328
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.8059 seconds.
lower bounds for all target labels: [2.1738152503967285, 2.1134281158447266, 0.044747114181518555, 1.4061155319213867, -0.02632617950439453, 1.5414421558380127, 2.007707357406616, 1.8842592239379883, 2.3388986587524414]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [4]
start creating model mps for candidates: ['lay/16_4']
parallel save mip model to /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 272155 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.2515926361084
Verifying property 0 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.3389012813568115.

Properties batch 1, size 1
Remaining timeout: 198.0527732372284
Verifying property 1 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.173815965652466.

Properties batch 2, size 1
Remaining timeout: 197.92981553077698
Verifying property 2 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.113429069519043.

Properties batch 3, size 1
Remaining timeout: 197.81019830703735
Verifying property 3 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.0077078342437744.

Properties batch 4, size 1
Remaining timeout: 197.6972849369049
Verifying property 4 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.884263277053833.

Properties batch 5, size 1
Remaining timeout: 197.5855050086975
Verifying property 5 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.541441798210144.

Properties batch 6, size 1
Remaining timeout: 197.4739797115326
Verifying property 6 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4061172008514404.

Properties batch 7, size 1
Remaining timeout: 197.36199712753296
Verifying property 7 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.044748783111572266.

Properties batch 8, size 1
Remaining timeout: 197.24056601524353
Verifying property 8 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02632570]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.40926981, -6.67170429, -3.99747753, -5.40308666, -3.89843845,
        -5.54740763, -3.71680188, -6.10181046, -6.27677917, -6.86830425],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02632570]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 497
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 146
Node /15 input 0: size torch.Size([100]) unstable 5
-----------------
# of unstable neurons: 648
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006976127624511719
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-8, 1445] 
split level 2: [/input-8, 1241] 
split level 3: [/input-8, 1170] 
split level 4: [/input-8, 918] 
split level 5: [/input-8, 1249] 
split level 6: [/input-8, 113] 
split level 7: [/input-8, 1098] 
pruning_in_iteration open status: True
ratio of positive domain = 128 / 256 = 0.5
pruning-in-iteration extra time: 0.010903596878051758
Time: prepare 0.0032    bound 0.1234    transfer 0.0045    finalize 0.0023    func 0.1335    
Accumulated time: func 0.1335    prepare 0.0037    bound 0.1234    transfer 0.0045    finalize 0.0023    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01664 (8), -0.01654 (8), -0.01639 (8), -0.01629 (8), -0.01625 (8), -0.01615 (8), -0.01601 (8), -0.01600 (8), -0.01590 (8), -0.01589 (8), -0.01576 (8), -0.01566 (8), -0.01562 (8), -0.01552 (8), -0.01537 (8), -0.01527 (8), -0.01498 (8), -0.01488 (8), -0.01464 (8), -0.01458 (8), 
Length of domains: 128
Time: pickout 0.0006    decision 0.0257    set_bounds 0.0202    solve 0.1336    add 0.0719    
Accumulated time: pickout 0.0006    decision 0.0257    set_bounds 0.0202    solve 0.1336    add 0.0719    
Current (lb-rhs): -0.01663827896118164
128 domains visited
Cumulative time: 0.2641613483428955

BaB round 2
Fetch cut process: mps for current label is not ready yet
batch: 128
splitting decisions: 
split level 0: [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 7.891654968261719e-05
Time: prepare 0.0052    bound 0.0976    transfer 0.0008    finalize 0.0019    func 0.1056    
Accumulated time: func 0.2391    prepare 0.0091    bound 0.2210    transfer 0.0053    finalize 0.0042    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01595 (9), -0.01588 (9), -0.01570 (9), -0.01563 (9), -0.01558 (9), -0.01550 (9), -0.01533 (9), -0.01530 (9), -0.01525 (9), -0.01524 (9), -0.01523 (9), -0.01506 (9), -0.01499 (9), -0.01499 (9), -0.01493 (9), -0.01488 (9), -0.01486 (9), -0.01486 (9), -0.01468 (9), -0.01463 (9), 
Length of domains: 256
Time: pickout 0.0152    decision 0.0182    set_bounds 0.0066    solve 0.1057    add 0.0729    
Accumulated time: pickout 0.0158    decision 0.0440    set_bounds 0.0268    solve 0.2393    add 0.1449    
Current (lb-rhs): -0.015951156616210938
384 domains visited
Cumulative time: 0.4898383617401123

BaB round 3
Fetch cut process: mps for current label is not ready yet
batch: 256
splitting decisions: 
split level 0: [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] [/input-8, 317] [/input-8, 1106] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 5.078315734863281e-05
Time: prepare 0.0098    bound 0.0987    transfer 0.0099    finalize 0.0036    func 0.1221    
Accumulated time: func 0.3613    prepare 0.0191    bound 0.3197    transfer 0.0151    finalize 0.0079    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01547 (10), -0.01539 (10), -0.01521 (10), -0.01514 (10), -0.01509 (10), -0.01501 (10), -0.01484 (10), -0.01481 (10), -0.01476 (10), -0.01473 (10), -0.01471 (10), -0.01456 (10), -0.01448 (10), -0.01447 (10), -0.01444 (10), -0.01435 (10), -0.01434 (10), -0.01428 (10), -0.01418 (10), -0.01410 (10), 
Length of domains: 512
Time: pickout 0.0121    decision 0.0238    set_bounds 0.0134    solve 0.1222    add 0.0910    
Accumulated time: pickout 0.0279    decision 0.0677    set_bounds 0.0402    solve 0.3615    add 0.2358    
Current (lb-rhs): -0.015466570854187012
896 domains visited
Cumulative time: 0.7596321105957031

BaB round 4
Fetch cut process: mps for current label is not ready yet
batch: 512
splitting decisions: 
split level 0: [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] [/input-8, 83] 
pruning_in_iteration open status: False
ratio of positive domain = 12 / 1024 = 0.01171875
pruning-in-iteration extra time: 7.534027099609375e-05
Time: prepare 0.0212    bound 0.1016    transfer 0.0259    finalize 0.0072    func 0.1561    
Accumulated time: func 0.5173    prepare 0.0406    bound 0.4212    transfer 0.0411    finalize 0.0151    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01493 (11), -0.01484 (11), -0.01467 (11), -0.01459 (11), -0.01455 (11), -0.01447 (11), -0.01431 (11), -0.01426 (11), -0.01422 (11), -0.01420 (11), -0.01416 (11), -0.01400 (11), -0.01394 (11), -0.01391 (11), -0.01388 (11), -0.01383 (11), -0.01380 (11), -0.01371 (11), -0.01364 (11), -0.01358 (11), 
Length of domains: 1008
Time: pickout 0.0232    decision 0.0390    set_bounds 0.0213    solve 0.1572    add 0.0936    
Accumulated time: pickout 0.0510    decision 0.1067    set_bounds 0.0615    solve 0.5187    add 0.3295    
Current (lb-rhs): -0.014927506446838379
1904 domains visited
Cumulative time: 1.102116584777832

BaB round 5
Fetch cut process: mps for current label is not ready yet
batch: 1008
splitting decisions: 
split level 0: [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] [/input, 2216] 
pruning_in_iteration open status: False
ratio of positive domain = 109 / 2016 = 0.05406746031746035
pruning-in-iteration extra time: 5.6743621826171875e-05
Time: prepare 0.0497    bound 0.1343    transfer 0.0471    finalize 0.0147    func 0.2460    
Accumulated time: func 0.7634    prepare 0.0905    bound 0.5556    transfer 0.0881    finalize 0.0298    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01456 (12), -0.01447 (12), -0.01431 (12), -0.01421 (12), -0.01419 (12), -0.01410 (12), -0.01394 (12), -0.01389 (12), -0.01385 (12), -0.01383 (12), -0.01379 (12), -0.01363 (12), -0.01356 (12), -0.01354 (12), -0.01353 (12), -0.01347 (12), -0.01344 (12), -0.01332 (12), -0.01327 (12), -0.01321 (12), 
Length of domains: 1898
Time: pickout 0.0298    decision 0.0724    set_bounds 0.0246    solve 0.2464    add 0.1097    
Accumulated time: pickout 0.0808    decision 0.1791    set_bounds 0.0861    solve 0.7651    add 0.4392    
Current (lb-rhs): -0.014562368392944336
3802 domains visited
Cumulative time: 1.5959136486053467

BaB round 6
Fetch cut process: mps for current label is not ready yet
batch: 1898
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1438] [/input-8, 1099] [/input-8, 1438] [/input-8, 1099] [/input-8, 1438] [/input-8, 1099] [/input-8, 1438] [/input-8, 1099] [/input-8, 1438] 
pruning_in_iteration open status: False
ratio of positive domain = 617 / 3796 = 0.16253951527924126
pruning-in-iteration extra time: 5.6743621826171875e-05
Time: prepare 0.0995    bound 0.1992    transfer 0.0793    finalize 0.0306    func 0.4102    
Accumulated time: func 1.1736    prepare 0.1902    bound 0.7548    transfer 0.1675    finalize 0.0604    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01424 (13), -0.01416 (13), -0.01398 (13), -0.01391 (13), -0.01387 (13), -0.01380 (13), -0.01361 (13), -0.01357 (13), -0.01354 (13), -0.01349 (13), -0.01345 (13), -0.01331 (13), -0.01324 (13), -0.01320 (13), -0.01319 (13), -0.01312 (13), -0.01308 (13), -0.01300 (13), -0.01295 (13), -0.01288 (13), 
Length of domains: 3148
Time: pickout 0.0425    decision 0.1227    set_bounds 0.0826    solve 0.4111    add 0.2897    
Accumulated time: pickout 0.1233    decision 0.3018    set_bounds 0.1687    solve 1.1763    add 0.7289    
Current (lb-rhs): -0.014235138893127441
6950 domains visited
Cumulative time: 2.5697286128997803

BaB round 7
Fetch cut process: mps for current label is not ready yet
batch: 3148
splitting decisions: 
split level 0: [/input-8, 1233] [/input-8, 1180] [/input-8, 1233] [/input-8, 1099] [/input-8, 1236] [/input-8, 1180] [/input-8, 1236] [/input-8, 1099] [/input-8, 1233] [/input-8, 1180] 
pruning_in_iteration open status: True
ratio of positive domain = 1547 / 6296 = 0.24571156289707752
pruning-in-iteration extra time: 0.005068302154541016
Time: prepare 0.1764    bound 0.3971    transfer 0.0984    finalize 0.0443    func 0.7176    
Accumulated time: func 1.8912    prepare 0.3669    bound 1.1519    transfer 0.2659    finalize 0.1047    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01389 (14), -0.01381 (14), -0.01369 (14), -0.01362 (14), -0.01352 (14), -0.01345 (14), -0.01333 (14), -0.01326 (14), -0.01322 (14), -0.01314 (14), -0.01311 (14), -0.01302 (14), -0.01295 (14), -0.01291 (14), -0.01285 (14), -0.01278 (14), -0.01274 (14), -0.01268 (14), -0.01260 (14), -0.01259 (14), 
Length of domains: 4749
Time: pickout 0.0933    decision 0.4733    set_bounds 0.1405    solve 0.7189    add 0.1623    
Accumulated time: pickout 0.2166    decision 0.7751    set_bounds 0.3092    solve 1.8951    add 0.8912    
Current (lb-rhs): -0.013887882232666016
11699 domains visited
Cumulative time: 4.177115201950073

BaB round 8
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0036
batch: 4096
splitting decisions: 
split level 0: [/input-8, 1438] [/input-8, 1236] [/input-8, 1180] [/input-8, 1236] [/input-8, 1236] [/input-8, 1180] [/input-8, 1233] [/input-8, 1236] [/input-8, 1180] [/input-8, 1180] 
pruning_in_iteration open status: True
ratio of positive domain = 2596 / 8192 = 0.31689453125
pruning-in-iteration extra time: 0.0046389102935791016
Time: prepare 0.2184    bound 0.3828    transfer 0.0489    finalize 0.0544    func 0.7059    
Accumulated time: func 2.5971    prepare 0.5856    bound 1.5347    transfer 0.3147    finalize 0.1591    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01389 (14), -0.01381 (14), -0.01369 (14), -0.01362 (14), -0.01352 (14), -0.01345 (14), -0.01333 (14), -0.01326 (14), -0.01322 (14), -0.01314 (14), -0.01311 (14), -0.01302 (14), -0.01295 (14), -0.01291 (14), -0.01285 (14), -0.01278 (14), -0.01274 (14), -0.01268 (14), -0.01259 (14), -0.01255 (14), 
Length of domains: 6249
Time: pickout 0.0752    decision 0.3907    set_bounds 0.1850    solve 0.7075    add 0.1580    
Accumulated time: pickout 0.2918    decision 1.1658    set_bounds 0.4942    solve 2.6026    add 1.0492    
Current (lb-rhs): -0.013887882232666016
17295 domains visited
current_vram/total_varm: 10.6GB/99.9GB, batch_size increase to 8192
Cumulative time: 5.720837831497192

BaB round 9
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
batch: 6249
splitting decisions: 
split level 0: [/input-8, 1099] [/input-8, 1438] [/input-8, 1233] [/input-8, 1233] [/input-8, 1233] [/input-8, 1180] [/input-8, 1099] [/input-8, 1438] [/input-8, 1180] [/input-8, 1233] 
pruning_in_iteration open status: True
ratio of positive domain = 4388 / 12498 = 0.35109617538806204
pruning-in-iteration extra time: 0.0049457550048828125
Time: prepare 0.3281    bound 0.4775    transfer 0.0677    finalize 0.2410    func 1.1158    
Accumulated time: func 3.7129    prepare 0.9140    bound 2.0122    transfer 0.3825    finalize 0.4001    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01352 (15), -0.01343 (15), -0.01333 (15), -0.01324 (15), -0.01316 (15), -0.01308 (15), -0.01296 (15), -0.01288 (15), -0.01284 (15), -0.01276 (15), -0.01273 (15), -0.01265 (15), -0.01256 (15), -0.01253 (15), -0.01249 (15), -0.01241 (15), -0.01237 (15), -0.01230 (15), -0.01222 (15), -0.01217 (15), 
Length of domains: 8110
Time: pickout 0.1063    decision 0.5191    set_bounds 0.2707    solve 1.1184    add 0.1661    
Accumulated time: pickout 0.3981    decision 1.6849    set_bounds 0.7649    solve 3.7210    add 1.2152    
Current (lb-rhs): -0.013517498970031738
25405 domains visited
Cumulative time: 7.939152717590332

BaB round 10
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0029
batch: 8110
splitting decisions: 
split level 0: [/input-8, 1233] [/input-8, 1236] [/input-8, 1180] [/input-8, 1233] [/input-8, 1233] [/input-8, 1236] [/input-8, 1233] [/input-8, 1233] [/input-8, 1180] [/input-8, 1233] 
pruning_in_iteration open status: True
ratio of positive domain = 5386 / 16220 = 0.33205918618988906
pruning-in-iteration extra time: 0.004931211471557617
Time: prepare 0.4266    bound 0.6014    transfer 0.0919    finalize 0.1081    func 1.2292    
Accumulated time: func 4.9421    prepare 1.3410    bound 2.6136    transfer 0.4744    finalize 0.5081    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01301 (16), -0.01292 (16), -0.01284 (16), -0.01283 (16), -0.01275 (16), -0.01275 (16), -0.01264 (16), -0.01256 (16), -0.01233 (16), -0.01224 (16), -0.01221 (16), -0.01221 (16), -0.01215 (16), -0.01206 (16), -0.01203 (16), -0.01203 (16), -0.01190 (16), -0.01187 (16), -0.01185 (16), -0.01181 (16), 
Length of domains: 10834
Time: pickout 0.1209    decision 0.4653    set_bounds 0.5287    solve 1.4037    add 0.1805    
Accumulated time: pickout 0.5190    decision 2.1502    set_bounds 1.2936    solve 5.1247    add 1.3957    
Current (lb-rhs): -0.013007640838623047
36239 domains visited
Cumulative time: 10.681995868682861

BaB round 11
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts: total 270 constraints, 18857 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.1573
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 354] [/input, 2641] [/input-8, 354] [/input-8, 1233] [/input, 2641] [/input-8, 1233] [/input-8, 1180] [/input-8, 930] [/input-8, 147] [/input-8, 930] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012717127799987793
10 lb beta sum: 1.3767132759094238, worst -0.011572837829589844
pruning_in_iteration open status: True
ratio of positive domain = 11839 / 16384 = 0.72259521484375
pruning-in-iteration extra time: 0.0044651031494140625
Time: prepare 0.4310    bound 1.6448    transfer 0.0932    finalize 0.1145    func 2.3892    
Accumulated time: func 7.3313    prepare 1.7723    bound 4.2584    transfer 0.5676    finalize 0.6226    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01187 (16), -0.01178 (16), -0.01160 (16), -0.01151 (16), -0.01120 (16), -0.01113 (16), -0.01112 (16), -0.01094 (16), -0.01084 (16), -0.01081 (16), -0.01081 (16), -0.01061 (16), -0.01052 (16), -0.01043 (16), -0.00963 (16), -0.00962 (16), -0.00957 (16), -0.00954 (16), -0.00950 (17), -0.00943 (16), 
Length of domains: 7187
Time: pickout 0.1216    decision 0.4581    set_bounds 0.5644    solve 2.3927    add 0.1547    
Accumulated time: pickout 0.6406    decision 2.6083    set_bounds 1.8580    solve 7.5174    add 1.5504    
Current (lb-rhs): -0.011873841285705566
40784 domains visited
current_vram/total_varm: 26.5GB/99.9GB, batch_size increase to 16384
Cumulative time: 14.601160049438477

BaB round 12
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts: total 600 constraints, 32183 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.4380
batch: 7187
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1180] [/input, 2641] [/input-8, 1180] [/input-8, 1236] [/input-8, 1233] [/input-8, 1180] [/input-8, 1236] [/input-8, 1180] [/input-8, 1236] [/input-8, 1233] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012492060661315918
10 lb beta sum: 1.0881948471069336, worst -0.018341273069381714
pruning_in_iteration open status: False
ratio of positive domain = 2628 / 14374 = 0.18283010992069015
pruning-in-iteration extra time: 0.000141143798828125
Time: prepare 0.3791    bound 2.5176    transfer 0.0826    finalize 0.0951    func 3.1692    
Accumulated time: func 10.5004    prepare 2.1517    bound 6.7760    transfer 0.6502    finalize 0.7177    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01045 (17), -0.01023 (17), -0.00995 (17), -0.00950 (18), -0.00950 (17), -0.00938 (18), -0.00934 (18), -0.00934 (17), -0.00930 (17), -0.00921 (17), -0.00901 (18), -0.00900 (17), -0.00899 (18), -0.00898 (17), -0.00898 (17), -0.00894 (18), -0.00890 (17), -0.00878 (18), -0.00878 (18), -0.00878 (18), 
Length of domains: 9472
Time: pickout 0.1182    decision 0.4083    set_bounds 0.4864    solve 3.1732    add 0.1749    
Accumulated time: pickout 0.7588    decision 3.0166    set_bounds 2.3444    solve 10.6907    add 1.7253    
Current (lb-rhs): -0.010452985763549805
50256 domains visited
Cumulative time: 19.450485944747925

BaB round 13
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts: total 754 constraints, 36960 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.4711
batch: 9472
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 354] [/input-8, 1236] [/input-8, 354] [/input, 2641] [/input-8, 354] [/input, 2641] [/input-8, 354] [/input, 2641] [/input-8, 354] [/input, 2641] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012273311614990234
10 lb beta sum: 1.182163953781128, worst -0.02146071195602417
pruning_in_iteration open status: False
ratio of positive domain = 2404 / 18944 = 0.12690033783783783
pruning-in-iteration extra time: 0.00024390220642089844
Time: prepare 0.4909    bound 3.6675    transfer 0.1019    finalize 0.3258    func 4.7067    
Accumulated time: func 15.2071    prepare 2.6430    bound 10.4435    transfer 0.7521    finalize 1.0435    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01036 (18), -0.00950 (19), -0.00938 (19), -0.00922 (18), -0.00921 (18), -0.00901 (19), -0.00901 (19), -0.00900 (18), -0.00899 (19), -0.00898 (18), -0.00898 (18), -0.00894 (19), -0.00890 (18), -0.00889 (18), -0.00878 (19), -0.00878 (19), -0.00872 (19), -0.00870 (19), -0.00869 (19), -0.00869 (19), 
Length of domains: 13032
Time: pickout 0.1477    decision 0.5385    set_bounds 0.5933    solve 4.7105    add 0.1708    
Accumulated time: pickout 0.9065    decision 3.5551    set_bounds 2.9378    solve 15.4011    add 1.8961    
Current (lb-rhs): -0.01036006212234497
63288 domains visited
Cumulative time: 26.136899709701538

BaB round 14
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts: total 785 constraints, 36490 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.3073
batch: 13032
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 147] [/input-8, 147] [/input-8, 147] [/input-8, 147] [/input-8, 147] [/input-8, 147] [/input-8, 147] [/input-8, 147] [/input-8, 147] [/input-8, 147] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.011590123176574707
10 lb beta sum: 1.171562910079956, worst -0.02553573250770569
pruning_in_iteration open status: False
ratio of positive domain = 3100 / 26064 = 0.11893799877225286
pruning-in-iteration extra time: 0.000377655029296875
Time: prepare 0.6779    bound 5.1926    transfer 0.1474    finalize 0.1670    func 6.3533    
Accumulated time: func 21.5603    prepare 3.3213    bound 15.6361    transfer 0.8994    finalize 1.2105    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.01018 (19), -0.01003 (19), -0.00950 (20), -0.00939 (20), -0.00938 (20), -0.00922 (19), -0.00921 (19), -0.00901 (20), -0.00901 (20), -0.00901 (20), -0.00900 (19), -0.00900 (19), -0.00899 (20), -0.00899 (20), -0.00898 (19), -0.00896 (20), -0.00894 (20), -0.00894 (20), -0.00890 (19), -0.00890 (19), 
Length of domains: 19154
Time: pickout 0.1948    decision 0.9576    set_bounds 0.7849    solve 6.6089    add 0.1952    
Accumulated time: pickout 1.1014    decision 4.5127    set_bounds 3.7226    solve 22.0101    add 2.0913    
Current (lb-rhs): -0.010182976722717285
82442 domains visited
Cumulative time: 35.24255156517029

BaB round 15
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts: total 709 constraints, 41742 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.3495
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 817] [/input-8, 229] [/input-8, 817] [/input-8, 229] [/input-8, 147] [/input-8, 147] [/input-8, 147] [/input-8, 229] [/input-8, 147] [/input-8, 147] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01063394546508789
10 lb beta sum: 1.1970529556274414, worst -0.023778080940246582
pruning_in_iteration open status: False
ratio of positive domain = 4727 / 32768 = 0.144256591796875
pruning-in-iteration extra time: 0.0005011558532714844
Time: prepare 0.8459    bound 6.8907    transfer 0.2121    finalize 0.2181    func 8.3766    
Accumulated time: func 29.9369    prepare 4.1676    bound 22.5268    transfer 1.1115    finalize 1.4285    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00950 (20), -0.00938 (20), -0.00933 (21), -0.00927 (21), -0.00901 (20), -0.00901 (21), -0.00901 (21), -0.00901 (20), -0.00899 (20), -0.00899 (21), -0.00896 (21), -0.00896 (21), -0.00894 (20), -0.00890 (20), -0.00889 (21), -0.00889 (21), -0.00878 (20), -0.00878 (21), -0.00878 (20), -0.00878 (21), 
Length of domains: 23414
Time: pickout 0.2437    decision 1.6867    set_bounds 0.9567    solve 8.6656    add 0.2038    
Accumulated time: pickout 1.3451    decision 6.1993    set_bounds 4.6793    solve 30.6757    add 2.2951    
Current (lb-rhs): -0.009504497051239014
103086 domains visited
current_vram/total_varm: 42.0GB/99.9GB, batch_size increase to 32768
Cumulative time: 47.430612087249756

BaB round 16
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts: total 765 constraints, 47678 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.3963
batch: 23414
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 930] [/input-8, 930] [/input-8, 930] [/input-8, 930] [/input-8, 930] [/input-8, 930] [/input-8, 930] [/input-8, 930] [/input-8, 930] [/input-8, 930] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.011076927185058594
10 lb beta sum: 1.3226948976516724, worst -0.02268838882446289
pruning_in_iteration open status: False
ratio of positive domain = 5346 / 46828 = 0.1141624669001452
pruning-in-iteration extra time: 0.0007710456848144531
Time: prepare 1.2023    bound 9.9231    transfer 0.3718    finalize 0.6732    func 12.4696    
Accumulated time: func 42.4065    prepare 5.3702    bound 32.4499    transfer 1.4833    finalize 2.1017    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00950 (21), -0.00927 (22), -0.00918 (21), -0.00901 (21), -0.00901 (21), -0.00901 (21), -0.00901 (21), -0.00901 (22), -0.00899 (21), -0.00896 (22), -0.00896 (22), -0.00896 (22), -0.00894 (21), -0.00890 (21), -0.00882 (21), -0.00880 (22), -0.00879 (22), -0.00878 (21), -0.00878 (21), -0.00872 (21), 
Length of domains: 33278
Time: pickout 0.3516    decision 2.3933    set_bounds 1.2950    solve 12.4786    add 0.3981    
Accumulated time: pickout 1.6966    decision 8.5927    set_bounds 5.9743    solve 43.1543    add 2.6932    
Current (lb-rhs): -0.009504497051239014
136364 domains visited
Cumulative time: 64.89798736572266

BaB round 17
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts: total 699 constraints, 56734 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.4744
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 754] [/input-8, 147] [/input-8, 754] [/input-8, 819] [/input-8, 754] [/input-8, 819] [/input-8, 229] [/input-8, 229] [/input-8, 147] [/input-8, 147] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01062774658203125
10 lb beta sum: 1.5099968910217285, worst -0.017502188682556152
pruning_in_iteration open status: True
ratio of positive domain = 37738 / 65536 = 0.575836181640625
pruning-in-iteration extra time: 0.0009818077087402344
Time: prepare 1.7015    bound 18.2618    transfer 0.5599    finalize 0.8629    func 21.8078    
Accumulated time: func 64.2144    prepare 7.0720    bound 50.7117    transfer 2.0432    finalize 2.9646    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00840 (22), -0.00829 (22), -0.00816 (22), -0.00816 (22), -0.00810 (22), -0.00808 (21), -0.00808 (22), -0.00799 (21), -0.00799 (22), -0.00797 (22), -0.00791 (22), -0.00784 (22), -0.00781 (22), -0.00781 (22), -0.00780 (21), -0.00779 (23), -0.00770 (22), -0.00767 (22), -0.00764 (22), -0.00763 (23), 
Length of domains: 28308
Time: pickout 0.4965    decision 3.6264    set_bounds 1.7639    solve 22.1978    add 0.2647    
Accumulated time: pickout 2.1931    decision 12.2191    set_bounds 7.7382    solve 65.3521    add 2.9578    
Current (lb-rhs): -0.008397173136472702
164162 domains visited
Cumulative time: 93.97490501403809

BaB round 18
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts: total 772 constraints, 57840 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.5106
batch: 28308
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 354] [/input-8, 354] [/input-8, 354] [/input-8, 354] [/input-8, 354] [/input-8, 354] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] [/input-8, 2000] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.010157942771911621
10 lb beta sum: 1.5031952857971191, worst -0.021318435668945312
pruning_in_iteration open status: False
ratio of positive domain = 7413 / 56616 = 0.1309347181008902
pruning-in-iteration extra time: 0.0008578300476074219
Time: prepare 1.5228    bound 12.2230    transfer 0.4680    finalize 0.7901    func 15.3719    
Accumulated time: func 79.5863    prepare 8.5953    bound 62.9347    transfer 2.5112    finalize 3.7547    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00810 (23), -0.00781 (23), -0.00756 (23), -0.00735 (23), -0.00730 (23), -0.00725 (23), -0.00722 (23), -0.00719 (23), -0.00719 (24), -0.00719 (23), -0.00714 (23), -0.00712 (23), -0.00711 (23), -0.00699 (24), -0.00696 (23), -0.00692 (23), -0.00690 (23), -0.00682 (23), -0.00682 (23), -0.00682 (23), 
Length of domains: 37967
Time: pickout 0.4602    decision 2.9419    set_bounds 1.6663    solve 15.3837    add 0.1964    
Accumulated time: pickout 2.6534    decision 15.1610    set_bounds 9.4046    solve 80.7358    add 3.1542    
Current (lb-rhs): -0.008101075887680054
202129 domains visited
Cumulative time: 115.30412530899048

BaB round 19
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
cut /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts: total 773 constraints, 57829 nonzero elements
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
cuts preparing time: 0.4929
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 754] [/input-8, 754] [/input-8, 789] [/input-8, 754] [/input-8, 789] [/input-8, 789] [/input-8, 789] [/input-8, 754] [/input-8, 789] [/input-8, 819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.009727001190185547
10 lb beta sum: 1.4685174226760864, worst -0.019594252109527588
pruning_in_iteration open status: False
ratio of positive domain = 7685 / 65536 = 0.1172637939453125
pruning-in-iteration extra time: 0.0009946823120117188
Time: prepare 1.7672    bound 19.2867    transfer 0.5619    finalize 0.8922    func 22.9284    
Accumulated time: func 102.5147    prepare 10.3629    bound 82.2214    transfer 3.0730    finalize 4.6469    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00757 (24), -0.00720 (24), -0.00714 (23), -0.00712 (24), -0.00697 (25), -0.00692 (23), -0.00690 (23), -0.00690 (24), -0.00682 (24), -0.00682 (23), -0.00678 (24), -0.00677 (24), -0.00674 (24), -0.00672 (24), -0.00672 (24), -0.00668 (24), -0.00667 (24), -0.00666 (23), -0.00660 (24), -0.00659 (24), 
Length of domains: 52505
Time: pickout 0.5274    decision 3.6943    set_bounds 1.8528    solve 23.3910    add 0.1653    
Accumulated time: pickout 3.1808    decision 18.8553    set_bounds 11.2574    solve 104.1268    add 3.3195    
Current (lb-rhs): -0.007574200630187988
249435 domains visited
Cumulative time: 145.61114311218262

BaB round 20
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0051
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] [/input-8, 1331] 
cut re-enabled after branching node selection
0 lb beta sum: 1.3027267456054688, worst -0.00833943486213684
10 lb beta sum: 1.8081412315368652, worst -0.0289686918258667
pruning_in_iteration open status: True
ratio of positive domain = 23790 / 65536 = 0.363006591796875
pruning-in-iteration extra time: 0.006804704666137695
Time: prepare 3.3357    bound 13.4756    transfer 0.5784    finalize 0.4750    func 18.8471    
Accumulated time: func 121.3617    prepare 13.6990    bound 95.6969    transfer 3.6514    finalize 5.1219    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00741 (25), -0.00714 (23), -0.00692 (25), -0.00692 (23), -0.00691 (25), -0.00690 (23), -0.00690 (24), -0.00682 (23), -0.00677 (24), -0.00676 (25), -0.00675 (25), -0.00672 (24), -0.00671 (25), -0.00671 (25), -0.00666 (23), -0.00665 (25), -0.00663 (25), -0.00661 (25), -0.00660 (25), -0.00660 (25), 
Length of domains: 61483
Time: pickout 0.5763    decision 3.3879    set_bounds 1.9861    solve 18.8603    add 0.1821    
Accumulated time: pickout 3.7571    decision 22.2432    set_bounds 13.2435    solve 122.9871    add 3.5016    
Current (lb-rhs): -0.007413268089294434
291181 domains visited
Cumulative time: 170.8308231830597

BaB round 21
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0050
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2238] [/input, 2238] [/input, 2238] [/input, 2238] [/input, 2238] [/input, 2238] [/input-8, 812] [/input, 2238] [/input-8, 1331] [/input-8, 1331] 
cut re-enabled after branching node selection
0 lb beta sum: 1.3182275295257568, worst -0.00819486379623413
10 lb beta sum: 1.7885195016860962, worst -0.028203368186950684
pruning_in_iteration open status: True
ratio of positive domain = 20853 / 65536 = 0.3181915283203125
pruning-in-iteration extra time: 0.006654262542724609
Time: prepare 3.3410    bound 13.5779    transfer 0.5730    finalize 0.4745    func 19.0322    
Accumulated time: func 140.3939    prepare 17.0403    bound 109.2748    transfer 4.2244    finalize 5.5964    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00741 (26), -0.00714 (23), -0.00692 (23), -0.00691 (25), -0.00690 (23), -0.00690 (24), -0.00682 (23), -0.00677 (26), -0.00677 (24), -0.00675 (26), -0.00674 (26), -0.00672 (24), -0.00671 (25), -0.00671 (25), -0.00666 (23), -0.00663 (25), -0.00660 (25), -0.00660 (26), -0.00660 (26), -0.00658 (23), 
Length of domains: 73398
Time: pickout 0.5486    decision 3.4641    set_bounds 2.0287    solve 19.0451    add 0.2652    
Accumulated time: pickout 4.3057    decision 25.7073    set_bounds 15.2722    solve 142.0322    add 3.7668    
Current (lb-rhs): -0.007413268089294434
335864 domains visited
Cumulative time: 196.40326499938965

BaB round 22
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0067
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1573] [/input, 2238] [/input, 2238] [/input, 2253] [/input-8, 1573] [/input, 2253] [/input, 2238] [/input, 2253] [/input, 2253] [/input-8, 1573] 
cut re-enabled after branching node selection
0 lb beta sum: 1.3202011585235596, worst -0.007384538650512695
10 lb beta sum: 1.8595043420791626, worst -0.02591383457183838
pruning_in_iteration open status: True
ratio of positive domain = 23847 / 65536 = 0.3638763427734375
pruning-in-iteration extra time: 0.006654500961303711
Time: prepare 3.3640    bound 13.2816    transfer 0.5843    finalize 1.1906    func 18.8461    
Accumulated time: func 159.2400    prepare 20.4048    bound 122.5564    transfer 4.8086    finalize 6.7870    
all_split False
Current worst splitting domains lb-rhs (depth):
-0.00714 (23), -0.00692 (23), -0.00691 (25), -0.00690 (23), -0.00690 (24), -0.00682 (23), -0.00677 (24), -0.00676 (27), -0.00672 (24), -0.00671 (25), -0.00671 (27), -0.00671 (25), -0.00666 (23), -0.00663 (25), -0.00660 (25), -0.00660 (27), -0.00658 (23), -0.00658 (24), -0.00654 (27), -0.00654 (24), 
Length of domains: 82319
Time: pickout 0.6097    decision 4.0337    set_bounds 1.4977    solve 18.8591    add 0.1706    
Accumulated time: pickout 4.9155    decision 29.7411    set_bounds 16.7699    solve 160.8913    add 3.9374    
Current (lb-rhs): -0.0071427226066589355
377553 domains visited
Time out!!!!!!!!
found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.mps
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.cuts
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.indx
removing /tmp/abcrown_cuts_31948/cplexmip_lay-16_starttime=1730304333_idx=181_spec=4_30492564.log
found process for pidx=4
Result: unknown in 225.4445 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 182, vnnlib ID: 182 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.81517506, -16.44219780, -14.93947697, -17.08555794, -16.53348160,
         -17.39346313, -16.71439552, -17.35387802, -14.78421783, -16.59263992]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [413]; unstable size 413; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 111, 1, 413] with unstable size 110 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 413] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 413] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [110]; unstable size 110; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 110] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 110] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.18601298, 1.75380206, 3.75133443, 3.26349258, 4.05069065, 3.40995359,
         3.94186664, 1.68227017, 3.44086933]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0570 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 183, vnnlib ID: 183 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
         -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [769]; unstable size 769; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 283, 1, 769] with unstable size 282 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 769] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 769] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [282]; unstable size 282; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 282] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 282] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.60268450,  4.07875872,  0.22120127,  1.13343310,  1.18244100,
         -0.09481192,  1.85378695,  3.72636414,  4.09831953]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
         -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.34it/s]100%|██████████| 1/1 [00:00<00:00,  8.33it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.32266092, -9.32172298, -4.42147398, -5.43138981, -3.97195244,
          -5.48412561, -4.08728886, -6.25158787, -8.70373154, -9.29818153]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.11533642]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1249 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.092309951782227
alpha/beta optimization time: 1.2260706424713135
initial alpha-crown bounds: tensor([[ 2.64488912,  4.13461876,  0.23508084,  1.15149307,  1.20023537,
         -0.07920086,  1.87038028,  3.78053117,  4.15428257]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0792008638381958
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6811 seconds.
lower bounds for all target labels: [2.6448888778686523, 4.134618282318115, 0.23508107662200928, 1.1514928340911865, 1.20023512840271, -0.0792011022567749, 1.87037992477417, 3.7805285453796387, 4.1542816162109375]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [5]
start creating model mps for candidates: ['lay/16_5']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.48751211166382
Verifying property 0 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.154282569885254.

Properties batch 1, size 1
Remaining timeout: 198.2829236984253
Verifying property 1 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.134618759155273.

Properties batch 2, size 1
Remaining timeout: 198.1571364402771
Verifying property 2 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.780531167984009.

Properties batch 3, size 1
Remaining timeout: 198.03556156158447
Verifying property 3 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.6448891162872314.

Properties batch 4, size 1
Remaining timeout: 197.91574501991272
Verifying property 4 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.8703802824020386.

Properties batch 5, size 1
Remaining timeout: 197.7958471775055
Verifying property 5 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.200235366821289.

Properties batch 6, size 1
Remaining timeout: 197.67123198509216
Verifying property 6 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1514930725097656.

Properties batch 7, size 1
Remaining timeout: 197.5410270690918
Verifying property 7 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.23508083820343018.

Properties batch 8, size 1
Remaining timeout: 197.40874218940735
Verifying property 8 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07920086]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.99047518, -8.97643757, -4.09049177, -5.13144016, -3.59326243,
        -5.18095779, -3.94524646, -5.82680273, -8.33982086, -8.93140888],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07920086]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 769
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 279
Node /15 input 0: size torch.Size([100]) unstable 8
-----------------
# of unstable neurons: 1056
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007150173187255859
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-12, 90] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 79] 
split level 3: [/input-12, 47] 
split level 4: [/input-8, 1828] 
split level 5: [/input-8, 1489] 
split level 6: [/input-8, 1836] 
split level 7: [/input-8, 181] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 4.553794860839844e-05
Time: prepare 0.0032    bound 0.0049    transfer 0.0038    finalize 0.0026    func 0.0145    
Accumulated time: func 0.0145    prepare 0.0037    bound 0.0049    transfer 0.0038    finalize 0.0026    
all_split False
Length of domains: 0
Time: pickout 0.0006    decision 0.0268    set_bounds 0.0200    solve 0.0146    add 0.0001    
Accumulated time: pickout 0.0006    decision 0.0268    set_bounds 0.0200    solve 0.0146    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.06821084022521973

the mip building process is not terminated yet, kill it
Result: safe in 3.0707 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 184, vnnlib ID: 184 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
         -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [448]; unstable size 448; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 126, 1, 448] with unstable size 125 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 448] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 448] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [125]; unstable size 125; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 125] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 125] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.26391077,  0.73275727,  3.13852215,  4.64125395,  3.28221655,
          4.80756092,  5.62747574,  4.06410265, -0.90191269]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
         -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.30149889, -3.49341011, -6.24541330, -7.76470089, -6.35670853,
          -7.93911409, -8.75611973, -7.13641787, -2.26208448, -2.55497289]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.29288840]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.14761901, -0.63968253, -0.56031746,  ...,  0.16984135,
             0.21746039,  0.23333341],
           [-1.32222211, -0.84603173, -0.43333322,  ...,  0.21746039,
             0.26507944,  0.28095245],
           [-1.40158725, -1.27460313, -0.84603173,  ...,  0.24920642,
             0.31269848,  0.34444451],
           ...,
           [-1.32222211, -1.33809519, -1.32222211,  ..., -0.03650784,
            -0.59206349, -1.03650784],
           [-0.59206349, -0.49682540, -0.29047608,  ..., -0.09999990,
            -0.81428570, -1.06825387],
           [ 0.32857150,  0.40793657,  0.47142863,  ...,  0.05873025,
            -0.21111101, -0.40158719]],

          [[-0.78904986, -0.16103047,  0.03220624,  ...,  0.66022551,
             0.66022551,  0.67632860],
           [-1.15942025, -0.54750401, -0.03220600,  ...,  0.72463775,
             0.72463775,  0.74074084],
           [-1.33655393, -1.07890499, -0.57971013,  ...,  0.75684386,
             0.77294695,  0.80515307],
           ...,
           [-1.20772946, -1.20772946, -1.19162631,  ..., -0.06441211,
            -0.51529789, -0.93397743],
           [-0.57971013, -0.48309177, -0.27375188,  ..., -0.12882435,
            -0.72463763, -0.95008045],
           [ 0.28985518,  0.37037048,  0.43478271,  ...,  0.03220624,
            -0.12882435, -0.32206106]],

          [[-0.10344811,  0.72113961,  1.23088503,  ...,  1.56072009,
             1.57571256,  1.59070504],
           [-0.85307342,  0.06146942,  0.96101969,  ...,  1.56072009,
             1.57571256,  1.60569763],
           [-0.92803597, -0.67316341, -0.07346311,  ...,  1.59070504,
             1.62069011,  1.63568258],
           ...,
           [-0.73313338, -0.83808094, -0.88305843,  ...,  0.09145443,
            -0.16341813, -0.26836565],
           [-0.29835078, -0.28335828, -0.11844061,  ...,  0.06146942,
            -0.29835078, -0.32833579],
           [ 0.37631202,  0.42128953,  0.46626705,  ...,  0.16641696,
             0.04647692, -0.04347810]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0863 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 185, vnnlib ID: 185 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.06885719, -5.39221478, -5.41002798, -5.94510174, -5.27591610,
         -6.06000948, -5.04459095, -6.26535511, -7.53897762, -5.24221373]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [444]; unstable size 444; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 444] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 444] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 444] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 172] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17368126, -0.12169062, -0.52097559,  0.06974697, -0.65863085,
          0.17358828, -0.89032602,  0.25720072,  1.71557117]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.06885719, -5.39221478, -5.41002798, -5.94510174, -5.27591610,
         -6.06000948, -5.04459095, -6.26535511, -7.53897762, -5.24221373]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.06885624, -5.39221478, -5.41002798, -5.94510174, -5.27591515,
          -6.06000900, -5.04459095, -6.26535511, -7.53897667, -5.24221325],
         [-7.06885624, -5.39221478, -5.41002798, -5.94510174, -5.27591515,
          -6.06000900, -5.04459095, -6.26535511, -7.53897667, -5.24221325]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.15000153,  0.16781473,  0.03370190, -0.19762230]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]],


         [[[-1.13174593, -0.95714283, -0.98888886,  ..., -1.22698402,
            -1.24285710, -1.29047608],
           [-1.22698402, -0.90952379, -1.08412695,  ..., -1.40158725,
            -1.27460313, -1.32222211],
           [-1.11587298, -0.94126981, -1.06825387,  ..., -0.81428570,
            -1.16349196, -1.19523799],
           ...,
           [ 0.31269848,  0.29682547,  0.29682547,  ..., -1.44920623,
            -1.38571417, -1.24285710],
           [ 0.21746039,  0.23333341,  0.23333341,  ..., -0.11587292,
            -0.13174593,  0.01111121],
           [ 0.26507944,  0.21746039,  0.24920642,  ...,  0.24920642,
             0.21746039,  0.21746039]],

          [[-0.98228657, -0.82125598, -0.83735907,  ..., -1.03059578,
            -1.06280184, -1.11111104],
           [-1.07890499, -0.77294683, -0.91787434,  ..., -1.23993552,
            -1.11111104, -1.17552328],
           [-0.96618354, -0.78904986, -0.90177131,  ..., -0.67632848,
            -1.03059578, -1.07890499],
           ...,
           [ 0.37037048,  0.35426742,  0.33816436,  ..., -1.23993552,
            -1.19162631, -1.12721407],
           [ 0.27375212,  0.28985518,  0.27375212,  ..., -0.01610294,
             0.01610318,  0.09661847],
           [ 0.30595824,  0.27375212,  0.27375212,  ...,  0.28985518,
             0.30595824,  0.25764906]],

          [[-0.92803597, -0.82308841, -0.83808094,  ..., -0.86806595,
            -0.97301346, -1.01799107],
           [-1.00299859, -0.77811092, -0.92803597,  ..., -1.12293863,
            -1.12293863, -1.12293863],
           [-0.91304344, -0.79310340, -0.91304344,  ..., -0.59820086,
            -1.06296861, -1.04797614],
           ...,
           [ 0.22638696,  0.21139447,  0.21139447,  ..., -0.86806595,
            -0.77811092, -0.77811092],
           [ 0.16641696,  0.18140946,  0.18140946,  ...,  0.10644694,
             0.18140946,  0.27136448],
           [ 0.24137947,  0.19640197,  0.21139447,  ...,  0.24137947,
             0.16641696,  0.16641696]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0797 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 186, vnnlib ID: 186 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.72309113, -11.37285328, -11.28134155, -12.68495083, -11.58407688,
         -12.91345787, -12.84364223, -12.81871128,  -7.10625744, -11.70213604]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [490]; unstable size 490; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 152, 1, 490] with unstable size 151 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 490] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 490] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [151]; unstable size 151; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 151] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.24744284, 3.64492750, 3.52347636, 4.82812738, 3.78522539, 5.03832531,
         5.00732327, 4.91135693, 4.00957584]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0627 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 187, vnnlib ID: 187 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.51928949, -5.15087223, -3.22848940, -3.80073190, -3.15746570,
         -3.94839764, -3.82955623, -4.85578012, -2.35027075, -4.11050558]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [721]; unstable size 721; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 721] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 721] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 721] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 190] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.20104575,  2.09830141,  0.14130914,  0.66386670,  0.04208767,
          0.79857552,  0.56520987,  1.63165128,  1.12448716]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.51928949, -5.15087223, -3.22848940, -3.80073190, -3.15746570,
         -3.94839764, -3.82955623, -4.85578012, -2.35027075, -4.11050558]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.53468847, -5.19556904, -3.22439003, -3.86211801, -3.17368507,
          -4.00655746, -3.77223229, -4.88972187, -2.58229876, -4.19417620]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04761028]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0068 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0725 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 188, vnnlib ID: 188 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
         -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [339]; unstable size 339; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 339] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 339] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 339] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 187] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.05137610,  1.62128592,  1.31240129,  0.74176526,  1.35647559,
          1.30591059,  2.72699046,  0.18010414,  1.41348743]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
         -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.58it/s]100%|██████████| 1/1 [00:00<00:00,  8.58it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.97218704, -7.05845642, -4.88922119, -6.54895496, -5.88330650,
          -6.60418797, -6.63821125, -8.03036880, -5.43032932, -6.83684731]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.08296585]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1192 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.74082088470459
alpha/beta optimization time: 1.2520229816436768
initial alpha-crown bounds: tensor([[-0.04131877,  1.64049292,  1.33070421,  0.74799538,  1.37658334,
          1.32323468,  2.73499823,  0.19743466,  1.43069649]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.04131877422332764
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6219 seconds.
lower bounds for all target labels: [-0.04131901264190674, 1.6404929161071777, 1.3307043313980103, 0.7479953169822693, 1.3765839338302612, 1.3232345581054688, 2.7349977493286133, 0.197434663772583, 1.4306950569152832]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [0]
start creating model mps for candidates: ['lay/16_0']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.47643542289734
Verifying property 0 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.7349982261657715.

Properties batch 1, size 1
Remaining timeout: 198.20597982406616
Verifying property 1 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6404929161071777.

Properties batch 2, size 1
Remaining timeout: 198.08150815963745
Verifying property 2 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4306964874267578.

Properties batch 3, size 1
Remaining timeout: 197.9788339138031
Verifying property 3 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3765833377838135.

Properties batch 4, size 1
Remaining timeout: 197.87646317481995
Verifying property 4 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3307042121887207.

Properties batch 5, size 1
Remaining timeout: 197.77381825447083
Verifying property 5 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3232346773147583.

Properties batch 6, size 1
Remaining timeout: 197.65485906600952
Verifying property 6 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.7479953765869141.

Properties batch 7, size 1
Remaining timeout: 197.54134249687195
Verifying property 7 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.197434663772583.

Properties batch 8, size 1
Remaining timeout: 197.4202754497528
Verifying property 8 with 1 instances.
##### Instance 188 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04131877]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.97730589, -7.00714970, -4.64439344, -6.27000904, -5.63979816,
        -6.32092857, -6.35750294, -7.77330685, -5.49930382, -6.73936844],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04131877]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 339
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 187
Node /15 input 0: size torch.Size([100]) unstable 6
-----------------
# of unstable neurons: 532
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006682872772216797
======================Cut verification ends======================
BaB round 1
Fetch cut process: mps for current label is not ready yet
batch: 1
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 62] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 69] 
split level 4: [/input-8, 356] 
split level 5: [/input-8, 2046] 
split level 6: [/input-8, 2026] 
split level 7: [/input-8, 174] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 4.792213439941406e-05
Time: prepare 0.0031    bound 0.0047    transfer 0.0038    finalize 0.0022    func 0.0138    
Accumulated time: func 0.0138    prepare 0.0036    bound 0.0047    transfer 0.0038    finalize 0.0022    
all_split False
Length of domains: 0
Time: pickout 0.0005    decision 0.0257    set_bounds 0.0198    solve 0.0139    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0257    set_bounds 0.0198    solve 0.0139    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.06570100784301758

the mip building process is not terminated yet, kill it
Result: safe in 3.0309 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 189, vnnlib ID: 189 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.22406721, -5.09387970, -1.13128150, -2.34915662, -1.20606780,
         -2.44099808, -1.39945912, -3.09898949, -5.70387459, -5.12313890]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [421]; unstable size 421; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 184, 1, 421] with unstable size 183 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 421] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 421] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 183] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.44431520,  3.10675144, -0.30788934,  0.80543149,  0.89428473,
         -0.24248070,  1.52680278,  3.75318336,  3.18413115]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.22406721, -5.09387970, -1.13128150, -2.34915662, -1.20606780,
         -2.44099808, -1.39945912, -3.09898949, -5.70387459, -5.12313890]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.22406721, -5.09387970, -1.13128197, -2.34915662, -1.20606816,
          -2.44099808, -1.39945936, -3.09898996, -5.70387459, -5.12313890],
         [-4.22406721, -5.09387970, -1.13128197, -2.34915662, -1.20606816,
          -2.44099808, -1.39945936, -3.09898996, -5.70387459, -5.12313890]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07478619,  0.19339120]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.01111121, -0.05238085, -0.14761895,  ...,  0.10634929,
             0.21746039,  0.40793657],
           [-0.35396814, -0.41746020, -0.40158719,  ...,  0.01111121,
             0.29682547,  0.10634929],
           [-0.43333322, -0.32222211,  0.05873025,  ..., -0.13174593,
             0.58253974,  0.63015878],
           ...,
           [-0.67142856, -0.67142856, -0.67142856,  ..., -0.29047608,
            -0.29047608, -0.19523799],
           [-0.54444444, -0.59206349, -0.63968253,  ..., -0.86190474,
            -0.84603173, -0.40158719],
           [-0.60793650, -0.62380952, -0.59206349,  ..., -1.14761901,
            -1.03650784, -0.67142856]],

          [[ 0.61191636,  0.53140104,  0.41867965,  ...,  0.49919492,
             0.61191636,  0.69243163],
           [ 0.30595824,  0.20933989,  0.22544295,  ...,  0.06441236,
             0.35426742,  0.08051541],
           [ 0.09661847,  0.20933989,  0.59581327,  ..., -0.19323659,
             0.28985518,  0.32206130],
           ...,
           [ 0.41867965,  0.38647354,  0.33816436,  ..., -0.59581316,
            -0.59581316, -0.49919480],
           [ 0.57971025,  0.48309189,  0.40257660,  ..., -1.07890499,
            -1.09500802, -0.69243151],
           [ 0.54750413,  0.48309189,  0.48309189,  ..., -1.23993552,
            -1.19162631, -0.88566822]],

          [[-0.47826082, -0.49325335, -0.49325335,  ..., -0.28335828,
            -0.31334329, -0.29835078],
           [-0.68815589, -0.65817088, -0.59820086,  ..., -0.47826082,
            -0.35832080, -0.71814090],
           [-0.77811092, -0.62818587, -0.31334329,  ..., -0.86806595,
            -0.46326834, -0.47826082],
           ...,
           [ 0.55622208,  0.52623707,  0.49625200,  ..., -1.00299859,
            -1.04797614, -1.03298354],
           [ 0.72113961,  0.64617711,  0.58620709,  ..., -1.25787115,
            -1.33283365, -1.04797614],
           [ 0.72113961,  0.66116959,  0.67616212,  ..., -1.28785622,
            -1.28785622, -1.07796109]]],


         [[[ 0.01111121, -0.05238085, -0.14761895,  ...,  0.10634929,
             0.21746039,  0.40793657],
           [-0.35396814, -0.41746020, -0.40158719,  ...,  0.01111121,
             0.29682547,  0.10634929],
           [-0.43333322, -0.32222211,  0.05873025,  ..., -0.13174593,
             0.58253974,  0.63015878],
           ...,
           [-0.67142856, -0.67142856, -0.67142856,  ..., -0.29047608,
            -0.29047608, -0.19523799],
           [-0.54444444, -0.59206349, -0.63968253,  ..., -0.86190474,
            -0.84603173, -0.40158719],
           [-0.60793650, -0.62380952, -0.59206349,  ..., -1.14761901,
            -1.03650784, -0.67142856]],

          [[ 0.61191636,  0.53140104,  0.41867965,  ...,  0.49919492,
             0.61191636,  0.69243163],
           [ 0.30595824,  0.20933989,  0.22544295,  ...,  0.06441236,
             0.35426742,  0.08051541],
           [ 0.09661847,  0.20933989,  0.59581327,  ..., -0.19323659,
             0.28985518,  0.32206130],
           ...,
           [ 0.41867965,  0.38647354,  0.33816436,  ..., -0.59581316,
            -0.59581316, -0.49919480],
           [ 0.57971025,  0.48309189,  0.40257660,  ..., -1.07890499,
            -1.09500802, -0.69243151],
           [ 0.54750413,  0.48309189,  0.48309189,  ..., -1.23993552,
            -1.19162631, -0.88566822]],

          [[-0.47826082, -0.49325335, -0.49325335,  ..., -0.28335828,
            -0.31334329, -0.29835078],
           [-0.68815589, -0.65817088, -0.59820086,  ..., -0.47826082,
            -0.35832080, -0.71814090],
           [-0.77811092, -0.62818587, -0.31334329,  ..., -0.86806595,
            -0.46326834, -0.47826082],
           ...,
           [ 0.55622208,  0.52623707,  0.49625200,  ..., -1.00299859,
            -1.04797614, -1.03298354],
           [ 0.72113961,  0.64617711,  0.58620709,  ..., -1.25787115,
            -1.33283365, -1.04797614],
           [ 0.72113961,  0.66116959,  0.67616212,  ..., -1.28785622,
            -1.28785622, -1.07796109]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0761 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 190, vnnlib ID: 190 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.51938772,  -8.11381626,  -9.00568771, -10.62922859,  -9.08360767,
         -10.80996037, -10.68894196,  -9.68361282,  -4.49052000,  -7.37830973]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [513]; unstable size 513; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 513] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 513] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 513] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 197] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.66284275, 3.05478764, 3.87506914, 5.43707466, 3.87113786, 5.60540581,
         5.39609337, 4.38749218, 2.30119848]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0630 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 191, vnnlib ID: 191 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
          -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [548]; unstable size 548; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 548] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 548] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 548] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 214] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.22616148,  5.41773987,  0.20892346,  0.26687157, -0.04204356,
          0.62771249,  1.19141817,  3.92691207,  4.58853817]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
          -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.14541721, -11.72427464,  -5.83231974,  -5.33568001,  -5.92574120,
           -5.31256008,  -6.40588474,  -6.92540359, -10.06930351, -10.74812031]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02311993]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.06825387, -0.90952379, -0.92539680,  ..., -0.51269841,
            -0.24285704, -0.05238085],
           [-0.98888886, -0.90952379, -0.83015871,  ..., -0.56031746,
            -0.30634910, -0.38571417],
           [-0.98888886, -0.92539680, -0.78253967,  ..., -0.71904761,
            -0.56031746, -0.54444444],
           ...,
           [ 0.18571436,  0.36031753,  0.40793657,  ..., -0.48095238,
            -0.52857143, -0.76666665],
           [ 0.20158738,  0.37619054,  0.42380959,  ..., -0.38571417,
            -0.33809513, -0.59206349],
           [ 0.28095245,  0.28095245,  0.37619054,  ..., -0.65555555,
            -0.57619047, -0.38571417]],

          [[-0.77294683, -0.66022539, -0.67632848,  ..., -0.32206106,
            -0.54750401, -1.54589367],
           [-0.70853460, -0.69243151, -0.56360704,  ..., -0.40257636,
            -0.61191624, -1.61030602],
           [-0.72463763, -0.80515295, -0.61191624,  ..., -0.61191624,
            -0.82125598, -1.67471826],
           ...,
           [-0.08051517,  0.43478271,  0.64412248,  ..., -0.41867942,
            -0.56360704, -0.91787434],
           [ 0.03220624,  0.57971025,  0.82125610,  ..., -0.19323659,
            -0.22544271, -0.64412236],
           [ 0.24154601,  0.61191636,  0.90177143,  ..., -0.33816412,
            -0.28985494, -0.27375188]],

          [[-0.67316341, -0.62818587, -0.61319339,  ..., -0.34332830,
            -0.43328333, -1.00299859],
           [-0.61319339, -0.65817088, -0.55322337,  ..., -0.38830581,
            -0.49325335, -1.13793111],
           [-0.61319339, -0.76311839, -0.59820086,  ..., -0.58320838,
            -0.71814090, -1.24287868],
           ...,
           [-0.01349309,  0.46626705,  0.63118458,  ..., -0.34332830,
            -0.43328333, -0.73313338],
           [ 0.07646193,  0.58620709,  0.76611710,  ..., -0.16341813,
            -0.16341813, -0.50824583],
           [ 0.25637197,  0.60119957,  0.84107965,  ..., -0.32833579,
            -0.28335828, -0.20839565]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0409 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 192, vnnlib ID: 192 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.85122108,  -9.83976269,  -4.36141491,  -6.06150818,  -4.73432350,
          -6.12186289,  -4.43167305,  -5.76936531, -10.48191452,  -9.88933086]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [496]; unstable size 496; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 219, 1, 496] with unstable size 218 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 4, 1, 496] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 496] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [218]; unstable size 218; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 4, 1, 218] with unstable size 3 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [3]; unstable size 3; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 3] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.02029133,  4.69440031,  1.40866971,  0.14043295,  1.46608901,
         -0.25579298,  0.97369635,  5.52549458,  4.68338776]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.85122108,  -9.83976269,  -4.36141491,  -6.06150818,  -4.73432350,
          -6.12186289,  -4.43167305,  -5.76936531, -10.48191452,  -9.88933086]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.19215965, -10.07285023,  -4.68872547,  -6.33513165,  -5.02730227,
           -6.40092230,  -4.53446865,  -6.08764648, -10.82570934, -10.10628033]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15425682]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0065 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0735 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 193, vnnlib ID: 193 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
         -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [538]; unstable size 538; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 154, 1, 538] with unstable size 153 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 538] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 538] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [153]; unstable size 153; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 153] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.15295029, -0.39681900,  2.03169107,  1.50405169,  1.48509026,
          1.57360077,  1.36475849,  0.63238382,  1.97044277]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
         -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.92484570, -10.87237930, -13.92814922, -13.33872890, -13.33044052,
          -13.41853333, -13.35081768, -12.54118347, -13.63366699, -10.99636936]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12399006]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.00476182e+00, -1.05238092e+00, -7.66666651e-01,  ...,
             1.88412726e+00,  1.86825418e+00,  1.86825418e+00],
           [-8.93650770e-01, -8.93650770e-01, -8.30158710e-01,  ...,
             1.88412726e+00,  1.91587329e+00,  1.94761932e+00],
           [-1.00476182e+00, -9.25396800e-01, -9.25396800e-01,  ...,
             1.82063520e+00,  2.01111126e+00,  2.04285717e+00],
           ...,
           [ 1.53968334e-01,  5.87302521e-02, -3.65078375e-02,  ...,
             2.49206424e-01,  2.65079439e-01,  2.65079439e-01],
           [ 1.22222304e-01,  1.22222304e-01,  1.06349289e-01,  ...,
             2.17460394e-01,  2.17460394e-01,  2.49206424e-01],
           [ 4.87301648e-01,  4.23809588e-01,  4.55555618e-01,  ...,
             2.01587379e-01,  1.85714364e-01,  2.01587379e-01]],

          [[-1.01449275e+00, -1.06280184e+00, -7.72946835e-01,  ...,
             2.06119204e+00,  2.06119204e+00,  2.04508877e+00],
           [-9.01771307e-01, -9.01771307e-01, -8.37359071e-01,  ...,
             2.02898574e+00,  2.06119204e+00,  2.07729483e+00],
           [-1.01449275e+00, -9.33977425e-01, -9.33977425e-01,  ...,
             1.91626441e+00,  2.09339786e+00,  2.10950065e+00],
           ...,
           [ 3.22062373e-02, -6.44121096e-02, -1.61030471e-01,  ...,
             1.61030710e-01,  1.77133769e-01,  1.77133769e-01],
           [ 1.22934580e-07,  1.22934580e-07, -1.61029361e-02,  ...,
             1.28824592e-01,  1.28824592e-01,  1.61030710e-01],
           [ 3.70370477e-01,  3.05958241e-01,  3.38164359e-01,  ...,
             1.12721533e-01,  9.66184735e-02,  1.12721533e-01]],

          [[-1.00299859e+00, -1.04797614e+00, -7.93103397e-01,  ...,
             2.05547261e+00,  2.05547261e+00,  2.09295392e+00],
           [-8.98050964e-01, -8.83058429e-01, -8.53073418e-01,  ...,
             2.02548766e+00,  2.07046509e+00,  2.10045004e+00],
           [-1.01799107e+00, -9.28035975e-01, -9.43028450e-01,  ...,
             1.92054021e+00,  2.10045004e+00,  2.10045004e+00],
           ...,
           [ 9.14544314e-02,  3.14844176e-02, -4.34781015e-02,  ...,
             2.56371975e-01,  2.71364480e-01,  2.71364480e-01],
           [ 1.06446937e-01,  1.06446937e-01,  9.14544314e-02,  ...,
             2.26386964e-01,  2.26386964e-01,  2.56371975e-01],
           [ 4.51274544e-01,  3.91304523e-01,  4.21289533e-01,  ...,
             2.11394474e-01,  1.96401969e-01,  2.11394474e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0396 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 194, vnnlib ID: 194 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
          -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [698]; unstable size 698; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 162, 1, 698] with unstable size 161 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 698] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 698] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [161]; unstable size 161; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 161] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 161] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.69664466,  5.13874626,  2.27037501, -0.31452271,  2.41091108,
          0.62896585,  2.07980633,  4.13404322,  5.02704430]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
          -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.54840231, -10.41300774,  -4.38957787,  -7.00133038,  -4.26655102,
           -7.14465809,  -5.40828037,  -6.95093203,  -9.18996620, -10.25354671]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12302685]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.09999990, -0.13174593, -0.09999990,  ...,  0.31269848,
             0.29682547,  0.32857150],
           [-0.09999990, -0.13174593, -0.09999990,  ...,  0.37619054,
             0.34444451,  0.36031753],
           [-0.08412688, -0.09999990, -0.06825387,  ...,  0.43968260,
             0.40793657,  0.40793657],
           ...,
           [ 0.21746039,  0.80476195,  0.31269848,  ...,  0.24920642,
             0.53492069,  0.45555562],
           [ 0.43968260,  0.61428577,  0.04285724,  ..., -0.00476181,
             0.37619054,  0.26507944],
           [ 0.67777783,  0.82063496,  0.34444451,  ...,  0.07460327,
             0.51904768,  0.26507944]],

          [[ 0.14492765,  0.08051541,  0.08051541,  ...,  0.40257660,
             0.40257660,  0.45088577],
           [ 0.16103071,  0.11272153,  0.09661847,  ...,  0.43478271,
             0.41867965,  0.45088577],
           [ 0.19323683,  0.16103071,  0.16103071,  ...,  0.48309189,
             0.46698883,  0.46698883],
           ...,
           [ 0.35426742,  0.95008057,  0.46698883,  ...,  0.35426742,
             0.54750413,  0.40257660],
           [ 0.49919492,  0.64412248,  0.09661847,  ...,  0.09661847,
             0.38647354,  0.19323683],
           [ 0.64412248,  0.72463775,  0.28985518,  ...,  0.11272153,
             0.51529801,  0.16103071]],

          [[-0.56821585, -0.61319339, -0.59820086,  ..., -0.29835078,
            -0.29835078, -0.26836565],
           [-0.52323836, -0.55322337, -0.55322337,  ..., -0.28335828,
            -0.26836565, -0.23838064],
           [-0.46326834, -0.49325335, -0.47826082,  ..., -0.26836565,
            -0.25337315, -0.20839565],
           ...,
           [-0.16341813,  0.28635699, -0.11844061,  ..., -0.35832080,
            -0.19340314, -0.32833579],
           [-0.10344811, -0.01349309, -0.46326834,  ..., -0.65817088,
            -0.40329832, -0.61319339],
           [-0.05847061,  0.10644694, -0.25337315,  ..., -0.74812591,
            -0.40329832, -0.76311839]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0521 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 195, vnnlib ID: 195 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.77076054, -7.62575722, -4.14598608, -4.30755711, -4.49275303,
         -4.30263758, -4.76192760, -5.12311316, -9.43562317, -7.12698030]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [451]; unstable size 451; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 142, 1, 451] with unstable size 141 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 451] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 451] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 141] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.21912003,  2.78572989, -0.07663608,  0.15777630, -0.08433509,
          0.31483459,  0.74149060,  4.69014645,  2.36162996]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.77076054, -7.62575722, -4.14598608, -4.30755711, -4.49275303,
         -4.30263758, -4.76192760, -5.12311316, -9.43562317, -7.12698030]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.77750111, -7.54761982, -4.16146708, -4.15072727, -4.44591999,
          -4.14375591, -4.69891930, -5.00807619, -9.32279205, -7.01225615],
         [-7.77750111, -7.54761982, -4.16146708, -4.15072727, -4.44591999,
          -4.14375591, -4.69891930, -5.00807619, -9.32279205, -7.01225615]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01073980, -0.01771116]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0070 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0679 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 196, vnnlib ID: 196 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.99589634, -8.26478100, -4.99381447, -4.63861275, -5.23205948,
         -4.79511499, -4.13116074, -5.92502117, -6.71752071, -6.90651417]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 226, 1, 527] with unstable size 225 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 527] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [225]; unstable size 225; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 225] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.63359308,  2.80945683, -0.02099729,  0.19597054,  0.13199282,
         -0.82713407,  0.77079368,  1.11276031,  1.53818464]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.99589634, -8.26478100, -4.99381447, -4.63861275, -5.23205948,
         -4.79511499, -4.13116074, -5.92502117, -6.71752071, -6.90651417]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.99589586, -8.26478100, -4.99381447, -4.63861370, -5.23206043,
          -4.79511547, -4.13116169, -5.92502165, -6.71752071, -6.90651464],
         [-6.99589586, -8.26478100, -4.99381447, -4.63861370, -5.23206043,
          -4.79511547, -4.13116169, -5.92502165, -6.71752071, -6.90651464]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.35520077, -0.50745201]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]],


         [[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0952 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 197, vnnlib ID: 197 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-1.43056643, -7.67667961, -2.21826839, -5.13023186, -4.35107708,
         -5.29444695, -6.64366817, -6.71203184, -2.96457338, -7.15871954]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [420]; unstable size 420; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 420] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 420] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 420] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 139] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.68506145, 0.59332943, 3.33365774, 2.62052536, 3.49451232, 4.81873131,
         4.89159966, 1.19089472, 5.18301678]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0739 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 198, vnnlib ID: 198 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.62386703, -13.36399269, -10.09908199, -10.70369053, -11.34663582,
         -10.95080948, -11.28316879, -13.42721939, -11.15745735, -13.38610840]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [426]; unstable size 426; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 133, 1, 426] with unstable size 132 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 426] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 426] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [132]; unstable size 132; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 132] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.35772848, 0.16254246, 0.66209161, 1.36232638, 0.89922112, 1.23943400,
         3.33602238, 1.22553658, 3.36414504]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0395 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 199, vnnlib ID: 199 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.18024397, -5.98002243, -5.06597948, -4.94513512, -5.08981609,
         -5.01497555, -4.47184467, -5.60709667, -6.87614346, -5.18200159]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [543]; unstable size 543; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 543] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 7, 1, 543] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 543] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 7, 1, 203] with unstable size 6 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [6]; unstable size 6; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 6] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.73734796,  0.50935459,  0.11531389,  0.06424892,  0.13350642,
          0.12348157,  0.50896823,  1.37839389, -0.26445580]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.18024397, -5.98002243, -5.06597948, -4.94513512, -5.08981609,
         -5.01497555, -4.47184467, -5.60709667, -6.87614346, -5.18200159]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.03544331, -5.49160671, -5.23422575, -5.08459759, -5.23702908,
          -5.16129684, -4.69914150, -5.69229412, -6.59322977, -4.69896603]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00017548]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0079 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0575 seconds
############# Summary #############
Final verified acc: 48.0% (total 200 examples)
Problem instances count: 200 , total verified (safe/unsat): 96 , total falsified (unsafe/sat): 101 , timeout: 3
mean time for ALL instances (total 200):4.077773841578685, max time: 225.44452786445618
mean time for verified SAFE instances(total 96): 1.4787312870224316, max time: 33.621989727020264
mean time for verified (SAFE + UNSAFE) instances (total 197): 0.7637179599800691, max time: [1.1445395946502686, 0.07909417152404785, 0.07021617889404297, 0.06736588478088379, 0.07459211349487305, 0.07269740104675293, 0.06988048553466797, 0.07451295852661133, 0.06945371627807617, 0.2984757423400879, 0.047988176345825195, 0.06209373474121094, 0.03711581230163574, 0.052430152893066406, 0.07517671585083008, 0.09198403358459473, 0.0838625431060791, 0.08748483657836914, 0.07305002212524414, 0.0741729736328125, 0.07374691963195801, 0.07918858528137207, 0.07592153549194336, 0.07547426223754883, 0.07121419906616211, 0.0801382064819336, 0.04971647262573242, 0.06984448432922363, 0.07758641242980957, 0.08436727523803711, 0.08070206642150879, 0.06760096549987793, 0.08119010925292969, 0.0727243423461914, 0.07233881950378418, 0.08322834968566895, 0.05774879455566406, 0.07842731475830078, 0.041945695877075195, 0.07000517845153809, 0.06972265243530273, 0.07381010055541992, 0.06528759002685547, 0.03844881057739258, 0.058391571044921875, 0.055255889892578125, 0.06781220436096191, 0.07637763023376465, 0.06824994087219238, 0.07407426834106445, 0.06948065757751465, 0.10255265235900879, 0.06571149826049805, 0.03264260292053223, 0.044899940490722656, 0.05895590782165527, 0.08233475685119629, 0.07150053977966309, 0.048848628997802734, 0.06653904914855957, 0.07890939712524414, 0.07532763481140137, 0.06693887710571289, 0.09459042549133301, 0.07550477981567383, 0.0426023006439209, 0.06783008575439453, 0.12457013130187988, 0.09826970100402832, 0.0547635555267334, 0.07415366172790527, 0.05449867248535156, 0.06360697746276855, 0.10406303405761719, 0.06242942810058594, 0.09377527236938477, 0.07721829414367676, 0.07557153701782227, 0.07284951210021973, 0.06440162658691406, 0.06938982009887695, 0.06290340423583984, 0.11065387725830078, 0.08946108818054199, 0.08673596382141113, 0.07317471504211426, 0.06442785263061523, 0.08118510246276855, 0.07513046264648438, 0.07795333862304688, 0.08630609512329102, 0.07969856262207031, 0.07247042655944824, 0.07607555389404297, 0.040894269943237305, 0.07351446151733398, 0.03956794738769531, 0.05206298828125, 0.06785297393798828, 0.09520435333251953, 0.05750226974487305]
mean time for verified SAFE + TIMEOUT instances (total 99): 8.152127015470255, max time: [220.24970698356628, 219.40813612937927, 225.44452786445618] 
mean time for verified UNSAFE instances (total 101): 0.08410133229623927, max time: 1.1445395946502686
unsafe-pgd (total 101), index: [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 16, 19, 21, 23, 25, 26, 29, 32, 34, 35, 36, 37, 43, 44, 45, 46, 48, 50, 53, 54, 56, 58, 61, 63, 65, 66, 72, 76, 77, 78, 80, 82, 84, 87, 88, 89, 90, 94, 95, 96, 98, 100, 101, 102, 104, 105, 106, 108, 113, 119, 120, 122, 124, 125, 126, 127, 129, 130, 132, 134, 141, 143, 145, 148, 149, 150, 151, 152, 155, 156, 158, 163, 165, 167, 170, 172, 173, 174, 176, 184, 185, 187, 189, 191, 192, 193, 194, 195, 196, 199]
safe-incomplete (total 84), index: [2, 7, 8, 14, 15, 17, 18, 20, 22, 27, 28, 30, 31, 33, 38, 39, 40, 41, 42, 47, 49, 51, 55, 59, 60, 62, 68, 69, 70, 71, 73, 74, 75, 79, 81, 83, 85, 86, 91, 92, 93, 99, 103, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 121, 131, 133, 135, 136, 138, 139, 140, 142, 144, 146, 147, 153, 154, 157, 160, 161, 162, 164, 166, 168, 171, 175, 177, 179, 180, 182, 186, 190, 197, 198]
safe (total 12), index: [24, 52, 57, 64, 123, 128, 137, 159, 169, 178, 183, 188]
unknown (total 3), index: [67, 97, 181]
